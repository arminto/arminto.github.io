<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JenKins</title>
      <link href="/2021/06/06/JenKins/"/>
      <url>/2021/06/06/JenKins/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="GitLab-Jenkins-基本过程"><a href="#GitLab-Jenkins-基本过程" class="headerlink" title="GitLab + Jenkins 基本过程"></a>GitLab + Jenkins 基本过程</h1><h2 id="一、持续集成、持续交付、持续部署"><a href="#一、持续集成、持续交付、持续部署" class="headerlink" title="一、持续集成、持续交付、持续部署"></a>一、持续集成、持续交付、持续部署</h2><h3 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h3><ul><li>软件开发周期中需要一些可以帮助开发者提升速度的自动化工具。其中工具最重要的目的是促进软件项目的持续集成与交付。通过CI/CD工具，开发团队可以保持软件更新并将其迅速的投入实践中。CI/CD也被认为是敏捷开发的最重要实践。</li></ul><h3 id="2-持续集成-CI"><a href="#2-持续集成-CI" class="headerlink" title="2. 持续集成(CI)"></a>2. 持续集成(CI)</h3><p><strong>概述：</strong>【<strong>持续集成指的是，频繁地（一天多次）将代码集成到主干</strong>】</p><ul><li><p>持续集成（Continuous integration，简称CI），一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建 (包括推送代码，自动化集成，自动化测试，返回结果) 来验证，从而尽早地发现集成错误。</p></li><li><p>整体流程：推送代码  – &gt; 集成代码 – &gt; 构建 –&gt; 代码测试 – &gt; 反馈结果</p></li><li><p>持续集成的最终目的就是 让产品可以快速迭代，同时还能保持高质量，简化工作流程</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vv7weaqj30m308ymyv.jpg" alt="image-20200519112017013"></p><h3 id="3-持续交付-CD"><a href="#3-持续交付-CD" class="headerlink" title="3. 持续交付(CD)"></a>3. 持续交付(CD)</h3><p><strong>概述：</strong>【<strong>持续 将通过持续集成后的代码进行手动部署</strong>】</p><ul><li><p>持续交付（Continuous Delivery, CD）是一种软件工程的手段，让软件在短周期内产出，确保软件随时可以被可靠地发布。其目的在于更快、更频繁地构建、测试以及发布软件。通过加强对生产环境的应用进行渐进式更新，这种手段可以降低交付变更的成本与风险。一个简单直观的与可重复的部署过程对于持续交付来说是很重要的。</p></li><li><p>整体流程：推送代码 – &gt; 集成代码 – &gt; 构建 –&gt; 代码测试 — &gt; 反馈结果  –&gt; 测试 –&gt; 手动 –&gt; 部署到生产</p></li><li><p>持续交付指的是在持续集成后的环境基础之上，将代码部署到预生产环境上。</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vvg7grrj60ms0g7whk02.jpg" alt="image-20200519114326555"></p><h3 id="4-持续部署（CD）"><a href="#4-持续部署（CD）" class="headerlink" title="4. 持续部署（CD）"></a>4. 持续部署（CD）</h3><p><strong>概述：</strong>【**基于 集成 交付之上的，部署和交付的区别在于 ==无论何时 代码都是可以部署的 没有问题的==**】</p><ul><li><p>持续部署（Continuous Deployment，缩写为 CD）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境；持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p></li><li><p>持续部署指的是持续交付的下一步，指代码可以在任何时刻都是可以部署的 没问题的，最后部署到生产环境下的过程</p></li><li><p>整体流程：推送代码 – &gt; 集成代码 – &gt; 构建 –&gt; 代码测试 — &gt; 反馈结果  –&gt; 测试 –&gt; 自动 –&gt; 部署到生产</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vvkgypqj30mx0gdq60.jpg" alt="image-20200519114904256"></p><h3 id="5-集成-amp-交付软件"><a href="#5-集成-amp-交付软件" class="headerlink" title="5. 集成 &amp; 交付软件"></a>5. 集成 &amp; 交付软件</h3><p><strong>概述：</strong></p><ul><li>典型的部署流水线，CD 流水线由几个不同的阶段组成; 一个工具不能满足所有这些步骤。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vvt4e62j31530o0e81.jpg" alt="image-20200519115644610"></p><h2 id="二、Git版本控制器"><a href="#二、Git版本控制器" class="headerlink" title="二、Git版本控制器"></a>二、Git版本控制器</h2><h3 id="1-Git架构图"><a href="#1-Git架构图" class="headerlink" title="1. Git架构图"></a>1. Git架构图</h3><h3 id="2-四个区域和五种状态"><a href="#2-四个区域和五种状态" class="headerlink" title="2. 四个区域和五种状态"></a>2. 四个区域和五种状态</h3><h5 id="1-四个区域"><a href="#1-四个区域" class="headerlink" title="1. 四个区域"></a>1. 四个区域</h5><ul><li>工作区(Working Area)</li><li>暂存区(Stage)</li><li>本地仓库(Local Repository)</li><li>远程仓库(Remote Repository)</li></ul><h5 id="2-五种状态"><a href="#2-五种状态" class="headerlink" title="2. 五种状态"></a>2. 五种状态</h5><ul><li>未修改(Origin)</li><li>已修改(Modified)&amp;未追踪(Untracked)</li><li>已暂存(Staged)</li><li>已提交(Committed)</li><li>已推送(Pushed)</li></ul><h3 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h3><blockquote><p><strong>随便打开一台虚拟机用来练习git的使用</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># yum -y install git</span></span><br></pre></td></tr></table></figure><h3 id="4-常见的-Git-命令："><a href="#4-常见的-Git-命令：" class="headerlink" title="4. 常见的 Git 命令："></a>4. 常见的 Git 命令：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">开始一个工作区（参见：git <span class="built_in">help</span> tutorial）</span><br><span class="line">   <span class="built_in">clone</span>      克隆一个仓库到一个新目录</span><br><span class="line">   init       创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br><span class="line"></span><br><span class="line">在当前变更上工作（参见：git <span class="built_in">help</span> everyday）</span><br><span class="line">   add        添加文件内容至索引</span><br><span class="line">   mv         移动或重命名一个文件、目录或符号链接</span><br><span class="line">   reset      重置当前 HEAD 到指定状态</span><br><span class="line">   rm         从工作区和索引中删除文件</span><br><span class="line"></span><br><span class="line">检查历史和状态（参见：git <span class="built_in">help</span> revisions）</span><br><span class="line">   bisect     通过二分查找定位引入 bug 的提交</span><br><span class="line">   grep       输出和模式匹配的行</span><br><span class="line">   <span class="built_in">log</span>        显示提交日志</span><br><span class="line">   show       显示各种类型的对象</span><br><span class="line">   status     显示工作区状态</span><br><span class="line"></span><br><span class="line">扩展、标记和调校您的历史记录</span><br><span class="line">   branch     列出、创建或删除分支</span><br><span class="line">   checkout   切换分支或恢复工作区文件</span><br><span class="line">   commit     记录变更到仓库</span><br><span class="line">   diff       显示提交之间、提交和工作区之间等的差异</span><br><span class="line">   merge      合并两个或更多开发历史</span><br><span class="line">   rebase     本地提交转移至更新后的上游分支中</span><br><span class="line">   tag        创建、列出、删除或校验一个 GPG 签名的标签对象</span><br><span class="line"></span><br><span class="line">协同（参见：git <span class="built_in">help</span> workflows）</span><br><span class="line">   fetch      从另外一个仓库下载对象和引用</span><br><span class="line">   pull       获取并整合另外的仓库或一个本地分支</span><br><span class="line">   push       更新远程引用和相关的对象</span><br></pre></td></tr></table></figure><h3 id="5-配置git"><a href="#5-配置git" class="headerlink" title="5. 配置git"></a>5. 配置git</h3><ul><li> <strong>你是谁，你的邮箱是什么。这样就知道是谁提交的代码了</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># git config --global user.name &quot;lemon&quot;                     #名字</span></span><br><span class="line">[root@git ~]<span class="comment"># git config --global user.email &quot;lemon_row@163.com&quot;        #邮箱</span></span><br><span class="line">[root@git ~]<span class="comment"># git config --global color.ui true                         #颜色</span></span><br></pre></td></tr></table></figure><h3 id="6-检查配置信息"><a href="#6-检查配置信息" class="headerlink" title="6. 检查配置信息"></a>6. 检查配置信息</h3><ul><li><strong>这个 <code>.gitconfig </code> 是在你当前的家目录下的一个隐藏文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># cat .gitconfig </span></span><br><span class="line">[user]</span><br><span class="line">name = lemon</span><br><span class="line">email = lemon_row@163.com</span><br><span class="line">[color]</span><br><span class="line">ui = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="7-基本使用案例"><a href="#7-基本使用案例" class="headerlink" title="7. 基本使用案例"></a>7. 基本使用案例</h3><h5 id="实战（一）git如何快速的提交目录文件至本地仓库？"><a href="#实战（一）git如何快速的提交目录文件至本地仓库？" class="headerlink" title="实战（一）git如何快速的提交目录文件至本地仓库？"></a>实战（一）git如何快速的提交目录文件至本地仓库？</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># mkdir project &amp;&amp; cd project    #创建git工作目录</span></span><br><span class="line">[root@git project]<span class="comment"># git init                 #初始化该目录为git本地仓库</span></span><br><span class="line">初始化空的 Git 版本库于 /root/project/.git/</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># ls -a                   #初始化成功后会在该目录下生成一个.git的隐藏目录</span></span><br><span class="line">.  ..  .git</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># touch file&#123;1..3&#125;.txt     #创建三个文件</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># ls</span></span><br><span class="line">file1.txt  file2.txt  file3.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status               #查看暂存区状态</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 初始提交</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 未跟踪的文件:</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 以包含要提交的内容）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#file1.txt</span></span><br><span class="line"><span class="comment">#file2.txt</span></span><br><span class="line"><span class="comment">#file3.txt</span></span><br><span class="line">提交为空，但是存在尚未跟踪的文件（使用 <span class="string">&quot;git add&quot;</span> 建立跟踪）</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git add .                #将文件添加到暂存区</span></span><br><span class="line">[root@git project]<span class="comment"># git status               #查看暂存区状态</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 初始提交</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git rm --cached &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#新文件：    file1.txt</span></span><br><span class="line"><span class="comment">#新文件：    file2.txt</span></span><br><span class="line"><span class="comment">#新文件：    file3.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 1 add --&gt; file1 file2 file3&quot;        #将其提交至本地仓库</span></span><br><span class="line">[master（根提交） 75b88ee] NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"> 3 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 file1.txt</span><br><span class="line"> create mode 100644 file2.txt</span><br><span class="line"> create mode 100644 file3.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure><h5 id="实战（二）git-如何将文件改名并重新提交到本地仓库？"><a href="#实战（二）git-如何将文件改名并重新提交到本地仓库？" class="headerlink" title="实战（二）git 如何将文件改名并重新提交到本地仓库？"></a>实战（二）git 如何将文件改名并重新提交到本地仓库？</h5><ul><li><p><strong>分两种：</strong></p><ul><li>使用 <code>git mv</code> 命令（推荐使用）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@git project]<span class="comment"># git mv file1.txt file.txt     #修改file.txt文件名为file1.txt</span></span><br><span class="line">[root@git project]<span class="comment"># ls</span></span><br><span class="line">file2.txt  file3.txt  file.txt</span><br><span class="line">  </span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#重命名：    file1.txt -&gt; file.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#重命名：    file1.txt -&gt; file.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 2 rename file1 --&gt; file.txt&quot;</span></span><br><span class="line">[master dbff765] NOW 2 rename file1 --&gt; file.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> rename file1.txt =&gt; file.txt (100%)</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure><ul><li>使用 <code>mv</code> 命令（不推荐使用）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@git project]<span class="comment"># mv file.txt file1.txt    #修改file1.txt文件名为file.txt</span></span><br><span class="line">[root@git project]<span class="comment"># ls</span></span><br><span class="line">file2.txt  file3.txt  file.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status               #查看一下暂存区状态</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add/rm &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#删除：      file.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 未跟踪的文件:</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 以包含要提交的内容）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#file1.txt</span></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git rm file.txt</span></span><br><span class="line">rm <span class="string">&#x27;file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git add file1.txt</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#重命名：    file.txt -&gt; file1.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 3 rename file --&gt; file1.txt&quot;</span></span><br><span class="line">[master 6e97421] NOW 3 rename file --&gt; file1.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> rename file.txt =&gt; file1.txt (100%)</span><br><span class="line"> </span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure></li></ul><h5 id="实战（三）如何比对-工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？"><a href="#实战（三）如何比对-工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？" class="headerlink" title="实战（三）如何比对 工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？"></a>实战（三）如何比对 工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？</h5><ul><li><strong>使用 <code>git diff</code> 命令来 比对 工作目录文件内容 与 暂存区文件内容</strong></li><li><strong>使用 <code>git diff --cached</code> 命令来 比对 暂存区文件内容、本地仓库文件内容</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vywjp4tj313l0dbafh.jpg" alt="image-20200520101936824"></p><p>1.工作区 <code>file1</code> 内容 与 暂存区 <code>file1</code> 内容比较之间的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给file1.txt文件加点内容 后并 提交到本地仓库</span></span><br><span class="line">[root@git project]<span class="comment"># echo &#x27;aaaaa&#x27; &gt;&gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 4 read-in file1.txt --&gt; aaaaa&quot;</span></span><br><span class="line">[master 3485684] NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#给file1.txt文件加点内容 不提交</span></span><br><span class="line">[root@git project]<span class="comment"># echo &#x27;bbbbb&#x27; &gt;&gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#修改：      file1.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line"></span><br><span class="line"><span class="comment">#工作区与暂存区比较差役</span></span><br><span class="line">[root@git project]<span class="comment"># git diff file1.txt</span></span><br><span class="line">diff --git a/file1.txt b/file1.txt</span><br><span class="line">index ccc3e7b..be4e668 100644</span><br><span class="line">--- a/file1.txt           <span class="comment">#表示变动前的版本</span></span><br><span class="line">+++ b/file1.txt           <span class="comment">#表示变动后的版本</span></span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> aaaaa</span><br><span class="line">+bbbbb                    <span class="comment">#加入的内容</span></span><br></pre></td></tr></table></figure><p>2.暂存区 <code>file1</code> 内容 与 本地仓库 <code>file1</code> 内容比较之间的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将其修改的文件添加到暂存区中[root@git project]# git add .[root@git project]# git diff file1.txt[root@git project]# 这个时候可以看到，工作区 与 缓存区 已经保持抑一致了#暂存区与本地仓库比较差役[root@git project]# git diff --cached file1.txtdiff --git a/file1.txt b/file1.txtindex ccc3e7b..be4e668 100644--- a/file1.txt+++ b/file1.txt@@ -1 +1,2 @@ aaaaa+bbbbb#然后将其所有暂存区内容提交至本地仓库[root@git project]# git commit -m &quot;NOW 5 read-in file1.txt --&gt; bbbbb&quot;[master fdf30db] NOW 5 read-in file1.txt --&gt; bbbbb 1 file changed, 1 insertion(+)[root@git project]# [root@git project]# git diff --cached file1.txt[root@git project]# 此时可以看到，暂存区 与 本地仓库 已经保持抑一致了</span></span><br></pre></td></tr></table></figure><h5 id="实战（四）如何理解git-commit-提交操作？"><a href="#实战（四）如何理解git-commit-提交操作？" class="headerlink" title="实战（四）如何理解git  commit 提交操作？"></a>实战（四）如何理解git  commit 提交操作？</h5><ul><li><p><strong>可以将其理解为虚拟机的快照功能，简单来说就是每次commit就是相当于对文件做了一次快照。</strong></p></li><li><p><strong>FQ：知道了commit相当于快照后，那如何得知该文件快照了多少次  都修改了哪些内容呢？</strong></p></li><li><p><strong>答：使用 <code>git log</code> 或者 <code>git reflog</code> 查看历史的commit快照记录</strong></p></li><li><p><strong>但是这种查看方式，输出的信息太过多余，我们可以使用 <code>--oneline</code> 选项</strong></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看历史的git commit快照[root@git project]# git logcommit fdf30db3870322636d06b79a74ed5feb399213ea      #commit的id编号（唯一的）Author: lemon &lt;lemon_row@163.com&gt;                    #是谁提交的Date:   Wed May 20 09:55:33 2020 +0800               #什么时间提交的    NOW 5 read-in file1.txt --&gt; bbbbb                #提交的信息描述commit 34856846ee0540482ab21a3df4bf821dd2329961Author: lemon &lt;lemon_row@163.com&gt;Date:   Wed May 20 09:51:53 2020 +0800    NOW 4 read-in file1.txt --&gt; aaaaacommit 2b1c545d923502f1bfd20c25a3f58ff8519a44f0Author: lemon &lt;lemon_row@163.com&gt;Date:   Wed May 20 09:50:12 2020 +0800    NOW 3 rename file --&gt; file1.txtcommit 0c943fc2c68773efea85a0ed0a26dcfbf973e351Author: lemon &lt;lemon_row@163.com&gt;Date:   Wed May 20 09:49:20 2020 +0800    NOW 2 rename file1 --&gt; file.txtcommit 75b88eeb1dc16a54b6da9419f5d8e872b900df0eAuthor: lemon &lt;lemon_row@163.com&gt;Date:   Wed May 20 09:46:46 2020 +0800    NOW 1 add --&gt; file1 file2 file3(END)##但是这种查看方式，输出的信息太过多余，我们可以使用--oneline选项[root@git project]# git log --onelinefdf30db NOW 5 read-in file1.txt --&gt; bbbbb3485684 NOW 4 read-in file1.txt --&gt; aaaaa2b1c545 NOW 3 rename file --&gt; file1.txt0c943fc NOW 2 rename file1 --&gt; file.txt75b88ee NOW 1 add --&gt; file1 file2 file3#还有git log -n 的方式，查看最近的n次快照[root@git project]# git log --oneline -2c652338 NOW 7 read-in file1 ---&gt; dddddf405afa NOW 6 read-in file1 ---&gt; ccccc</span></span><br></pre></td></tr></table></figure><h5 id="实战（五）git-保存了状态后，想回退怎么办？"><a href="#实战（五）git-保存了状态后，想回退怎么办？" class="headerlink" title="实战（五）git 保存了状态后，想回退怎么办？"></a>实战（五）git 保存了状态后，想回退怎么办？</h5><ul><li><strong>如果使用虚拟机的话，肯定想都不用想，直接还原快照就得了，那么 git 优势如何实现的呢？</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vz486idj30y007badx.jpg" alt="image-20200520105129862"></p><p>1.如果本地工作目录修改文件错误像回退怎么办？【工作目录 与 暂存区的撤销】</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#误操作[root@git project]# &gt; file1.txt[root@git project]# git status# 位于分支 master# 尚未暂存以备提交的变更：#   （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）##修改：      file1.txt#修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）#丢弃工作区的改动（恢复）[root@git project]# git checkout file1.txt[root@git project]# git status# 位于分支 master无文件要提交，干净的工作区[root@git project]# cat file1.txt aaaaabbbbb</span></span><br></pre></td></tr></table></figure><p>2.工作文件误操作提交至暂存区中该怎么办？</p><blockquote><p>使用 本地仓库 —  覆盖  —  暂存区  —  覆盖   —  工作仓库</p><p>git  reset  HEAD  文件名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#误操作[root@git project]# &gt; file1.txt [root@git project]# git add .[root@git project]# git status# 位于分支 master# 要提交的变更：#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）##修改：      file1.txt[root@git project]# git reset HEAD file1.txt     #取消这个暂存区的内容重置后撤出暂存区的变更：Mfile1.txt[root@git project]# git status# 位于分支 master# 尚未暂存以备提交的变更：#   （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）##修改：      file1.txt#修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）[root@git project]# git checkout file1.txt[root@git project]# git status# 位于分支 master无文件要提交，干净的工作区[root@git project]# cat file1.txt aaaaabbbbb</span></span><br></pre></td></tr></table></figure><h5 id="实战（六）回滚版本，回滚之前的版本-和-回滚之后的版本"><a href="#实战（六）回滚版本，回滚之前的版本-和-回滚之后的版本" class="headerlink" title="实战（六）回滚版本，回滚之前的版本 和 回滚之后的版本"></a>实战（六）回滚版本，回滚之前的版本 和 回滚之后的版本</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vzjg8mmj30ie06wadv.jpg" alt="image-20200520105437645"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git project]<span class="comment"># echo &#x27;ccccc&#x27; &gt;&gt; file1.txt [root@git project]# git add .[root@git project]# git commit -m &quot;NOW 6 read-in file1 ---&gt; ccccc&quot;[root@git project]# echo &#x27;ddddd&#x27; &gt;&gt; file1.txt [root@git project]# git add .[root@git project]# git commit -m &quot;NOW 7 read-in file1 ---&gt; ddddd&quot;[root@git project]# cat file1.txt aaaaabbbbbcccccddddd#比如我就想回退到ccccc的版本（回滚之前的版本）[root@git project]# git log --onelinec652338 NOW 7 read-in file1 ---&gt; dddddf405afa NOW 6 read-in file1 ---&gt; ccccc            #使用前面第一段commit的id进行回滚操作fdf30db NOW 5 read-in file1.txt --&gt; bbbbb3485684 NOW 4 read-in file1.txt --&gt; aaaaa2b1c545 NOW 3 rename file --&gt; file1.txt0c943fc NOW 2 rename file1 --&gt; file.txt75b88ee NOW 1 add --&gt; file1 file2 file3[root@git project]# git reset --hard f405afa      #回滚HEAD 现在位于 f405afa NOW 6 read-in file1 ---&gt; ccccc#查看是否已经回到这个版本[root@git project]# git rev-parse HEADf405afac0930c1feb0ee86cfa8b4c6032afd4b69[root@git project]# cat file1.txtaaaaabbbbbccccc#但是，有个问题，此时我又想回到ddddd的版本怎么办？（回滚之后的版本）[root@git project]# git log --oneline    #这次会发现ddddd的版本消失了f405afa NOW 6 read-in file1 ---&gt; cccccfdf30db NOW 5 read-in file1.txt --&gt; bbbbb3485684 NOW 4 read-in file1.txt --&gt; aaaaa2b1c545 NOW 3 rename file --&gt; file1.txt0c943fc NOW 2 rename file1 --&gt; file.txt75b88ee NOW 1 add --&gt; file1 file2 file3#答：使用git reflog[root@git project]# git reflogf405afa HEAD@&#123;0&#125;: reset: moving to f405afac652338 HEAD@&#123;1&#125;: commit: NOW 7 read-in file1 ---&gt; ddddd           #这次就可以找到了f405afa HEAD@&#123;2&#125;: commit: NOW 6 read-in file1 ---&gt; cccccfdf30db HEAD@&#123;3&#125;: commit: NOW 5 read-in file1.txt --&gt; bbbbb3485684 HEAD@&#123;4&#125;: commit: NOW 4 read-in file1.txt --&gt; aaaaa2b1c545 HEAD@&#123;5&#125;: commit: NOW 3 rename file --&gt; file1.txt0c943fc HEAD@&#123;6&#125;: commit: NOW 2 rename file1 --&gt; file.txt75b88ee HEAD@&#123;7&#125;: commit (initial): NOW 1 add --&gt; file1 file2 file3[root@git project]# git reset --hard c652338                       #在进行回滚HEAD 现在位于 c652338 NOW 7 read-in file1 ---&gt; ddddd[root@lemon project01]# git rev-parse HEADc652338f12a5102e9691dce3ecac4f57cf19639e[root@git project]# cat file1.txt aaaaabbbbbcccccddddd</span></span><br></pre></td></tr></table></figure><h3 id="8-Git-标签的-创建-删除"><a href="#8-Git-标签的-创建-删除" class="headerlink" title="8. Git 标签的 创建 删除"></a>8. Git 标签的 创建 删除</h3><ul><li><em><strong>git 标签能起到什么作用？</strong></em><ul><li>当git仓库内的数据有改善或功能时，我们经常会打一个类似于软件版本号的tag标签，这样就能通过标签将版本库中的某个版本给记录下来，便于我们后续将特定时期的数据取出来用。</li><li>简单来说：标签也是一个版本库的一个快照，他与commit id 是绑定在一起的东西。</li></ul></li><li><em><strong>为什么要使用git标签？</strong></em><ul><li>既然都已经有了commit id了，为什么还要用tag标签？</li><li>因为commit的id号不容易使人记忆，所以，使用tag标签就是因为他好记 <code>v1.0.0</code></li><li>绝大部分公司都是基于标签进行对代码版本的管理</li></ul></li><li><em><strong>git 标签的基本使用</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为最新提交的代码创建标签[root@git project]# git tag -a &quot;v1.0.0&quot; -m &quot;latest&quot;[root@git project]# git tag             #查看当前分支的所有标签v1.0.0[root@git project]# git show --oneline v1.0.0     #查看这个标签是基于哪个commit快照tag v1.0.0latestc652338 NOW 7 read-in file1 ---&gt; ddddddiff --git a/file1.txt b/file1.txtindex d0bc53a..8dd8367 100644--- a/file1.txt+++ b/file1.txt@@ -1,3 +1,4 @@ aaaaa bbbbb ccccc+ddddd#以指定的commit id 而创建标签[root@lemon project01]# git log --onelinec652338 NOW 7 read-in file1 ---&gt; dddddf405afa NOW 6 read-in file1 ---&gt; cccccfdf30db NOW 5 read-in file1.txt --&gt; bbbbb3485684 NOW 4 read-in file1.txt --&gt; aaaaa2b1c545 NOW 3 rename file --&gt; file1.txt0c943fc NOW 2 rename file1 --&gt; file.txt75b88ee NOW 1 add --&gt; file1 file2 file3[root@git project]# git tag -a &#x27;v1.0.1&#x27; f405afa -m &quot;NOW 6&quot;[root@git project]# git tagv1.0.0v1.0.1[root@git project]# git show v1.0.1tag v1.0.1Tagger: lemon &lt;lemon_row@163.com&gt;Date:   Wed May 20 11:16:03 2020 +0800NOW 6commit f405afac0930c1feb0ee86cfa8b4c6032afd4b69Author: lemon &lt;lemon_row@163.com&gt;Date:   Wed May 20 10:03:44 2020 +0800    NOW 6 read-in file1 ---&gt; cccccdiff --git a/file1.txt b/file1.txtindex be4e668..d0bc53a 100644--- a/file1.txt+++ b/file1.txt@@ -1,2 +1,3 @@ aaaaa bbbbb+ccccc#不小心打错了标签，怎么删除这个标签？[root@git project]# git tag -d v1.0.1已删除标签 &#x27;v1.0.1&#x27;（曾为 608f0e6）[root@git project]# git tagv1.0.0</span></span><br></pre></td></tr></table></figure><h3 id="9-Git-分支"><a href="#9-Git-分支" class="headerlink" title="9. Git 分支"></a>9. Git 分支</h3><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h5><ul><li><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p></li><li><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vzs4h4dj30rk09pdi7.jpg" alt="image-20200519200256163"></p><h5 id="2-创建与合并分支原理"><a href="#2-创建与合并分支原理" class="headerlink" title="2. 创建与合并分支原理"></a>2. 创建与合并分支原理</h5><ul><li><p>在<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即 <code>master</code> 分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p></li><li><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，<strong>以及当前分支的提交点：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vzy8xfqj30oc0710t1.jpg" alt="image-20200505152246823"></p><ul><li>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长，当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w055o5xj30oe0acgm1.jpg" alt="image-20200505152303875"></p><ul><li><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p></li><li><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，<strong>而<code>master</code>指针不变：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0avel7j30mu09zgm0.jpg" alt="image-20200505152324172"></p><ul><li>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，<strong>就完成了合并：</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0gw4avj30mx0a50t9.jpg" alt="image-20200505152335926"></p><ul><li><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p></li><li><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，<strong>我们就剩下了一条<code>master</code>分支：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0lw9gfj30lr07cdg7.jpg" alt="image-20200505152347227"></p><h5 id="3-常见的分支命令"><a href="#3-常见的分支命令" class="headerlink" title="3. 常见的分支命令"></a>3. 常见的分支命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//创建分支git branch &lt;name&gt;           <span class="comment">#基于当前commit创建test分支。.git/HEAD文件中记录了当前分支名字。//删除分支git branch -d test     #删除本地test分支git branch -D test     #test分支还没有合入当前分支，所以要用-D参数才能删掉。git push origin --delete test    #删除远程test分支//查看分支git branch                       #列出当前分支清单git branch -v                    #查看各个分支最后一个提交信息git branch -a                    #查看远程分支和本地分支git branch --merged              #查看哪些分支被合并git branch --no-merged           #查看哪些分支未被合并//融合及切换分支git merge                        #融合分支git checkout -b &lt;name&gt;           #创建+切换分支git checkout                     #切换分支//拉取分支git fetch origin                 #同步远程服务器的数据到本地git checkout -b test origin/test_remote     #将远程分支test_remote拉取下来到本地test分支git checkout test                #将远程分支test拉取下来到本地test分支git pull test                    #从远程分支test中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test</span></span><br></pre></td></tr></table></figure><h5 id="4-分支的使用演示"><a href="#4-分支的使用演示" class="headerlink" title="4. 分支的使用演示"></a>4. 分支的使用演示</h5><blockquote><p>创建分支,开发新功能是不能在master分支上开发</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch about            #创建about分支[root@git test]# git branch                  #查看分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0s87nwj30mz022mx1.jpg" alt="image-20200505103600145"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git checkout about          #切换分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0ynh18j30ml00zdfu.jpg" alt="image-20200505103633833"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git status</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w14aq1sj30mq01p3yq.jpg" alt="image-20200505103646638"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log         #查看about分支的commit记录</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w19vv3hj30n10crgok.jpg" alt="image-20200505103800468"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># echo &quot;about us&quot; &gt;&gt; about.html         #在当前分支开发新功能</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w1hdbi2j30n601o0sl.jpg" alt="image-20200505115012259"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git add .[root@git test]# git commit -m &quot;about&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w1pyvbyj30mt02tmxr.jpg" alt="image-20200505103826565"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log         #查看about分支的commit记录</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w1v394pj30n00fswhx.jpg" alt="image-20200505103848134"> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git checkout master          #切换到master分支[root@git test]# git log                      #查看master分支的commit记录</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w26ibhnj60m10ccn0r02.jpg" alt="image-20200505115233966"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git merge about               #在master分支上合并about分支//注意：在公司中可不是这么搞的，因为你不能保证master分支的线路会一直保持在原地，所以一般开发都是先在自己的分支上重新将master分支合并（相当于同步master分支内容），然后在测试有没有问题，没有问题后才会到master分支上将其开发好的分支合并到master上面，然后在删除合并到master的分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2cbcmij60n603zq2y02.jpg" alt="image-20200505115259095"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log &amp;&amp; ls</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2hz156j30mv0h6wie.jpg" alt="image-20200505104034395"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch test                  #创建test分支[root@git test]# git checkout test                #切换到test分支进行开发[root@git test]# echo &quot;test&quot; &gt; test.html[root@git test]# git add .[root@git test]# git commit -m &quot;test&quot;[root@git test]# git checkout master              #切换至master分支[root@git test]# git branch --merged              #查看已经合并的分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2nnn8uj30mz01sglh.jpg" alt="image-20200505104242309"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch --no-merged            #查看未合并的分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2vmtctj60mr00ywea02.jpg" alt="image-20200505104253480"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch -D test                #删除test分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w315vmzj30ow00uq2s.jpg" alt="image-20200505120016106"></p><h5 id="5-分支冲突"><a href="#5-分支冲突" class="headerlink" title="5. 分支冲突"></a>5. 分支冲突</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w379m75j30x50fk0zj.jpg" alt="image-20200520141058938"></p><h3 id="10-Git远程仓库-–-github"><a href="#10-Git远程仓库-–-github" class="headerlink" title="10. Git远程仓库 – github"></a>10. Git远程仓库 – github</h3><h5 id="1-github-是什么"><a href="#1-github-是什么" class="headerlink" title="1.  github 是什么"></a>1.  github 是什么</h5><ul><li><p><code>GitHub</code>是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名<code>GitHub</code>。</p></li><li><p><code>GitHub</code>于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、python 等。</p></li><li><p>对于我们个人的话，GIT服务器并不需要我们搭建，使用<code>github</code>就可以满足我们的需求。官网：<a href="https://github.com/">https://github.com/</a></p></li></ul><h5 id="2-登陆-github"><a href="#2-登陆-github" class="headerlink" title="2. 登陆 github"></a>2. 登陆 github</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3dvznzj30zw0jmjt7.jpg" alt="image-20200520142035128"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3izpebj30r50g1aab.jpg" alt="image-20200520142121526"></p><h5 id="3-创建远程仓库"><a href="#3-创建远程仓库" class="headerlink" title="3. 创建远程仓库"></a>3. 创建远程仓库</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3pzu1nj30zw0pcac6.jpg" alt="image-20200520142525408"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3ust5mj310f0pcgnh.jpg" alt="image-20200520142855981"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3zdwccj30zx0pc40r.jpg" alt="image-20200520143318696"></p><ul><li><p><strong>说明：</strong></p><ul><li>code：代码</li><li>issues：问题</li><li>pull requests：拉取要求</li><li>Actions：动作</li><li>projects：专案</li><li>Wiki：维基</li><li>Security：安全</li><li>lnsights：见解</li><li>settings：设置</li></ul></li><li><p><strong>克隆仓库的两种协议：</strong></p><ul><li>https 协议：如果你这个仓库是私有的，克隆仓库时需要输入用户名 密码</li><li>ssh协议：需要在github上加入你机器上某个用户的ssh公钥才能使用</li></ul></li><li><p><strong>常用的git远程仓库命令</strong></p><ul><li>git  remote                                         #查看当前的远程库</li><li>git  remote  -v                                    #执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</li><li>git  remote  add  [别名]   url            #添加一个远程仓库</li><li>git  remote  rm    [别名]                   #删除远程仓库</li><li>git  push  -u  origin  master            #推送本地到远程分支</li><li>git  pull    -u  origin  master            #获取最新master代码到本地</li></ul></li></ul><h5 id="4-使用-github"><a href="#4-使用-github" class="headerlink" title="4. 使用 github"></a>4. 使用 <code>github</code></h5><ul><li><p><strong>这里 <code>https</code> 的我就不掩饰了，很简单，这里我使用ssh协议的，而且使用 <code>win10</code> 展示</strong></p></li><li><p><strong>为用户生成一个ssh的公钥 及 私钥 目录</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w46e5ksj30v60kagmz.jpg" alt="image-20200520151007813"></p><ul><li><strong>将其 公钥 拷贝到 <code>github</code> 上</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4b3htuj30v60aegn3.jpg" alt="image-20200520151137388"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4eu6hvj310c0m9abg.jpg" alt="image-20200520151343234"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4ijac3j310f0mbac4.jpg" alt="image-20200520151445758"></p><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520151538386.png" alt="image-20200520151538386"></p><ul><li>克隆远程仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:lemonOps/project01.git </span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4nmahfj30oa03gglq.jpg" alt="image-20200520151729386"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4ybekxj30v60a7zky.jpg" alt="image-20200520151836730"></p><ul><li><strong>将本地仓库推送至远程仓库</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:lemonOps/project01.git    <span class="comment">#添加好推送的仓库地址$ git  remote  -v              #查看当前的远程仓库</span></span><br></pre></td></tr></table></figure><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520152258943.png" alt="image-20200520152258943"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;# 第一次提交至远程仓库&quot;</span> &gt; README.md$ git add .$ git commit -m <span class="string">&quot;NOW 1 add --&gt; README.md&quot;</span>$ git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5bburej30v60j6taw.jpg" alt="image-20200520152956410"></p><ul><li>回到 <code>github</code>上查看</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5ewlldj310f0jp405.jpg" alt="image-20200520153038803"></p><ul><li>给此次提交打上标签并再次推送至 <code>github</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline$ git tag -a <span class="string">&quot;v1.0&quot;</span> 6de1296 -m <span class="string">&quot;标签 1&quot;</span>$ git tag$ git show v1.0 --oneline$ git push -u origin v1.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5j109qj30v60iitaf.jpg" alt="image-20200520153558264"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5nb5n2j30v606pmxo.jpg" alt="image-20200520153647332"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5r00urj310f0drwfo.jpg" alt="image-20200520153712239"></p><h3 id="11-git-推送代码的整体过程"><a href="#11-git-推送代码的整体过程" class="headerlink" title="11. git 推送代码的整体过程"></a>11. git 推送代码的整体过程</h3><ul><li>创建自己的dev01分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git branch dev01</span><br></pre></td></tr></table></figure><ul><li>模拟master主分支更新</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ <span class="built_in">echo</span> <span class="string">&quot;# NOW 2 lemon very good&quot;</span> &gt; lemon.mdAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git add .Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git commit -m <span class="string">&quot;NOW 2 add --&gt; lemon.md&quot;</span>[master 87c2a24] NOW 2 add --&gt; lemon.md 1 file changed, 1 insertion(+) create mode 100644 lemon.mdAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git reflog --oneline87c2a24 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: NOW 2 add --&gt; lemon.md94a2b68 (tag: v1.0, origin/master, origin/HEAD, dev01) HEAD@&#123;1&#125;: <span class="built_in">clone</span>: from git@github.com:devopssss/project01.gitAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git tag -a <span class="string">&quot;v2.0&quot;</span> 87c2a24 -m <span class="string">&quot;第二此提交&quot;</span>Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git tagv1.0v2.0Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git remote add origin git@github.com:devopssss/project01.gitAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git remote -vorigin  git@github.com:devopssss/project01.git (fetch)origin  git@github.com:devopssss/project01.git (push)Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git push -u origin masterAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git push -u origin v2.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w60ls62j30ri0c1wfb.jpg" alt="image-20200611120652266"></p><ul><li>进行dev01分支的开发；（现在这个分支和master上的分支内容是不一致的 !!!）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git checkout dev01Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ lsREADME.mdAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ <span class="built_in">echo</span> <span class="string">&quot;dev01&quot;</span> &gt; dev01.txtAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ lsdev01.txt  README.mdAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ git add .Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ git commit -m <span class="string">&quot;dev01&quot;</span>[dev01 01996d5] dev01 1 file changed, 1 insertion(+) create mode 100644 dev01.txt</span><br></pre></td></tr></table></figure><ul><li>使用git pull 在自己的分支上重新将master分支合并（相当于同步master分支内容），然后在测试有没有问题</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ git pull origin masterAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ lsdev01.txt  lemon.md  README.md</span><br></pre></td></tr></table></figure><ul><li>测试没有问题后才会到master分支上将其开发好的分支合并到master上面，然后在删除合并到master的分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)$ git checkout masterAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git merge dev01Updating 87c2a24..aaed965Fast-forward dev01.txt | 1 + 1 file changed, 1 insertion(+) create mode 100644 dev01.txt Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git branch -d dev01Deleted branch dev01 (was aaed965).</span><br></pre></td></tr></table></figure><ul><li>最后在推送至远程仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git <span class="built_in">log</span> --onelineaaed965 (HEAD -&gt; master) Merge branch <span class="string">&#x27;master&#x27;</span> of github.com:devopssss/project01 into dev0101996d5 dev0187c2a24 (tag: v2.0, origin/master) NOW 2 add --&gt; lemon.md94a2b68 (tag: v1.0) NOW 1 add --&gt; README.mdAdministrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git tag -a <span class="string">&quot;v3.0&quot;</span> aaed965 -m <span class="string">&quot;标签 3&quot;</span>Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git push -u origin masterTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0To github.com:devopssss/project01.git   87c2a24..aaed965  master -&gt; masterBranch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)$ git push -u origin v3.0Enumerating objects: 8, done.Counting objects: 100% (8/8), done.Delta compression using up to 8 threadsCompressing objects: 100% (5/5), done.Writing objects: 100% (6/6), 678 bytes | 339.00 KiB/s, done.Total 6 (delta 1), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (1/1), done.To github.com:devopssss/project01.git * [new tag]         v3.0 -&gt; v3.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6724phj60sx0i2dh802.jpg" alt="image-20200611123335561"></p><h2 id="三、Gitlab-代码仓库"><a href="#三、Gitlab-代码仓库" class="headerlink" title="三、Gitlab 代码仓库"></a>三、Gitlab 代码仓库</h2><h3 id="1-简介概述"><a href="#1-简介概述" class="headerlink" title="1. 简介概述"></a>1. 简介概述</h3><blockquote><ul><li><p>与 GitHub 一样，GitLab 是一个基于Web的资源库管理器，可让团队协作处理代码，复制代码以安全地创建和编辑新项目，然后将完成的代码合并到现有项目中。</p></li><li><p>GitLab 是用Ruby编程语言编写的，包含Wiki 和问题跟踪功能。它有不同的版本：GitLab 社区版（CE），企业版（EE） 和 GitLab托管版本GitLab.com。</p></li><li><p>它拥有超过1400名贡献者，并被阿里巴巴，美国宇航局，欧洲核子研究中心等主要组织使用。</p></li></ul></blockquote><h3 id="2-什么是-Gitlab"><a href="#2-什么是-Gitlab" class="headerlink" title="2. 什么是 Gitlab"></a>2. 什么是 Gitlab</h3><ul><li><p> GitLab 是一个开源分布式版本控制系统</p></li><li><p> 开发语言: Ruby</p></li><li><p> 功能:管理项目源代码、版本控制、代码复用与查找</p></li></ul><h3 id="3-GitLab-与-GitHub-的不同"><a href="#3-GitLab-与-GitHub-的不同" class="headerlink" title="3. GitLab 与 GitHub 的不同"></a>3. GitLab 与 GitHub 的不同</h3><ul><li><strong><code>Github</code></strong> 分布式在线代码托管仓库,个人版本可直接在线免费使用,企业版本收费且需要服务器安装。</li><li><strong><code>Gitlab</code></strong> 分布式在线代码仓库托管软件,分社区免费版本与企业收费版本，都需要服务器安装。</li></ul><h3 id="4-Gitlab-的优势和应用场景"><a href="#4-Gitlab-的优势和应用场景" class="headerlink" title="4. Gitlab 的优势和应用场景"></a>4. Gitlab 的优势和应用场景</h3><ul><li><p>开源免费，适合中小型公司将代码放置在该系统中</p></li><li><p>品差异化的版本管理，离线同步以及强大分支管理功能</p></li><li><p>便捷的GUI操作界面以及强大账户权限管理功能</p></li><li><p>集成度很高，能够集成绝大多数的开发工具,支持内置HA,保证在高并发下仍旧实现高可用性</p></li></ul><h3 id="5-GitLab-主要服务构成"><a href="#5-GitLab-主要服务构成" class="headerlink" title="5. GitLab 主要服务构成"></a>5. GitLab 主要服务构成</h3><ul><li><p><code>Nginx</code> 静态Web服务器</p></li><li><p><code>Gitlab-workhorse</code> 轻量级的反向代理服务器</p></li><li><p><code>Gitlab-shell</code> 用于处理Git命令和修改authorized keys列表</p></li><li><p><code>Logrotate</code> 日志文件管理工具</p></li><li><p><code>Postgresql</code> 数据库</p></li><li><p><code>Redis</code> 缓存服务器</p></li></ul><h3 id="6-GitLab-的工作流程"><a href="#6-GitLab-的工作流程" class="headerlink" title="6. GitLab 的工作流程"></a>6. GitLab 的工作流程</h3><ul><li>创建并克隆项目</li><li>创建项目某Feature分支</li><li>编写代码并提交至该分支</li><li>推送改项目分支至远程Gitlab 服务器</li><li>进行代码检查并提交Master主分支合并申请</li><li>项目领导审查代码并确认合并申请</li></ul><h3 id="7-安装-Gitlab-仓库系统"><a href="#7-安装-Gitlab-仓库系统" class="headerlink" title="7. 安装 Gitlab 仓库系统"></a>7. 安装 Gitlab 仓库系统</h3><blockquote><p><strong>打开一台虚拟机：192.168.2.1</strong></p></blockquote><h4 id="添加hosts解析文件"><a href="#添加hosts解析文件" class="headerlink" title="添加hosts解析文件"></a>添加hosts解析文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/hosts192.168.2.1 gitlab.lemon.com192.168.2.2 jenkins.lemon.com192.168.2.3 lb.lemon.comEND</span></span><br></pre></td></tr></table></figure><h4 id="安装-Gitlab-依赖"><a href="#安装-Gitlab-依赖" class="headerlink" title="安装 Gitlab 依赖"></a>安装 Gitlab 依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># yum install -y policycoreutils openssh-server openssh-clients postfix lsof[root@gitlab ~]# systemctl start postfix;systemctl enable postfix     #开启邮箱服务</span></span><br></pre></td></tr></table></figure><h4 id="安装-Gitlab-12-0-3-版本"><a href="#安装-Gitlab-12-0-3-版本" class="headerlink" title="安装 Gitlab-12.0.3 版本"></a>安装 Gitlab-12.0.3 版本</h4><p>由于国内网络偏慢，这里使用清华大学的镜像源进行安装gitlab-ce</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/yum.repos.d/gitlab-ce.repo[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7repo_gpgcheck=0gpgcheck=0enabled=1\#gpgkey=END[root@gitlab ~]# yum clean all &amp;&amp; yum makecache[[root@gitlab ~]# yum -y install gitlab-ce-12.0.3-ce.0.el7</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6ehya8j30p80gmmx7.jpg" alt="image-20200505122543609"></p><h4 id="Gitlab-管理命令"><a href="#Gitlab-管理命令" class="headerlink" title="Gitlab 管理命令"></a>Gitlab 管理命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl stop           #关闭gitlab[root@gitlab ~]# gitlab-ctl start          #启动gitlab[root@gitlab ~]# gitlab-ctl restart        #重启gitlab[root@gitlab ~]# gitlab-ctl status         #状态gitlab[root@gitlab ~]# gitlab-ctl reconfigure    #重载配置文件并启动glitlab</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件并启动-Gitlab"><a href="#修改配置文件并启动-Gitlab" class="headerlink" title="修改配置文件并启动 Gitlab"></a>修改配置文件并启动 Gitlab</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># vim /etc/gitlab/gitlab.rb#配置gitlab的URL或IP地址external_url &#x27;http://gitlab.lemon.com&#x27;#配置邮箱### Email Settingsgitlab_rails[&#x27;gitlab_email_enabled&#x27;] = truegitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;lemon_row@163.com&#x27;       #邮箱账号gitlab_rails[&#x27;gitlab_email_display_name&#x27;] = &#x27;Gitlab-lemon&#x27;    #发送人显示名称### GitLab email server settingsgitlab_rails[&#x27;smtp_enable&#x27;] = truegitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.163.com&quot;gitlab_rails[&#x27;smtp_port&#x27;] = 465gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;lemon_row@163.com&quot;gitlab_rails[&#x27;smtp_password&#x27;] = &quot;TZVLGNYMVOEWCIHR&quot;            #授权码gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;163.com&quot;gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = truegitlab_rails[&#x27;smtp_tls&#x27;] = true:wq[root@gitlab ~]# gitlab-ctl reconfigure          #初始化gitlab，第一次会很慢</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6mdkdvj30qk03c3yk.jpg" alt="image-20200505123253144"></p><p><strong>注意：重新配置应用程序。修改了 <code>gitlab</code> 服务配置文件后，都需要执行一下这个命令。让各个服务的配置文件，重新加载一下配置文件。这里等个4分钟左右。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl status                   #查看gitlab状态</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6rp65rj30p80c30u5.jpg" alt="image-20200505123636158"></p><p>**提示：<code>gitlab</code> 需要使用到80端口，所以得保证80端口不被占用，或者改端口 **</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># lsof -i:80</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6wpgn7j30qu046wer.jpg" alt="image-20200520162148566"></p><h4 id="汉化-Gitlab"><a href="#汉化-Gitlab" class="headerlink" title="汉化 Gitlab"></a>汉化 Gitlab</h4><ul><li>汉化包下载地址 ==&gt; <a href="https://gitlab.com/xhang/gitlab.git">https://gitlab.com/xhang/gitlab.git</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//查看gitlab的版本[root@gitlab ~]<span class="comment"># cat /opt/gitlab/embedded/service/gitlab-rails/VERSION11.2.3//下载对应版本的汉化包，解压汉化包，查看汉化包的版本[root@gitlab ~]# cd /usr/local/src/[root@gitlab src]# tar xf gitlab-v12.0.3-zh.tar.gz [root@gitlab src]# rm -rf gitlab-v12.0.3-zh.tar.gz [root@gitlab src]# cat gitlab-v12.0.3-zh/VERSION 12.0.3//先备份，避免汉化失败后gitlab瘫痪[root@gitlab src]# mkdir gitlab.bak[root@gitlab src]# cp -r /opt/gitlab/embedded/service/gitlab-rails/* /usr/local/src/gitlab.bak//将下载好的汉化包覆盖拷贝过去[root@gitlab src]# \cp -rf gitlab-v12.0.3-zh/* /opt/gitlab/embedded/service/gitlab-rails/cp: 无法以目录&quot;gitlab-v12.0.3-zh/log&quot; 来覆盖非目录&quot;/opt/gitlab/embedded/service/gitlab-rails/log&quot;cp: 无法以目录&quot;gitlab-v12.0.3-zh/tmp&quot; 来覆盖非目录&quot;/opt/gitlab/embedded/service/gitlab-rails/tmp&quot;//重新配置gitlab[root@gitlab src]# gitlab-ctl reconfigure//重启gitlab[root@gitlab src]# gitlab-ctl restart//检查是否启动成功[root@gitlab src]# gitlab-ctl status  [root@gitlab src]# lsof -i:80</span></span><br></pre></td></tr></table></figure><h4 id="访问浏览器测试"><a href="#访问浏览器测试" class="headerlink" title="访问浏览器测试"></a>访问浏览器测试</h4><blockquote><p><strong>注释：如果后期 web 界面访问时，总报 502的话，就把防火墙清空规则，另外内存要大于4G，不然以后内存不足，也报 502！</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7293p1j30fe09hq3u.jpg" alt="image-20200505123953743"></p><blockquote><p><strong><code>Gitlab</code> 默认用户是root，拥有最高权限，密码我设置的是“abc123..”，最少八位数。</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7acrn5j30pu0b9t9j.jpg" alt="image-20200505154721731"></p><blockquote><p>登陆 <code>Gitlab</code></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7gg6q8j30pu0bgwf9.jpg" alt="image-20200519160034791"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7nh2ojj310z0hgabh.jpg" alt="image-20200519160253275"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7rpppzj311y0amwex.jpg" alt="image-20200520163224918"></p><p><strong><font color=#FF0000 >至此gitlab安装完成！</font></strong></p><h3 id="8-Gitlab-权限管理"><a href="#8-Gitlab-权限管理" class="headerlink" title="8. Gitlab 权限管理"></a>8. Gitlab 权限管理</h3><h4 id="创建Group，User，Project"><a href="#创建Group，User，Project" class="headerlink" title="创建Group，User，Project"></a>创建Group，User，Project</h4><ul><li><em>三者层级关系如下图：</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7wp1u3j30my05atas.jpg" alt="image-20200505155246349"></p><h4 id="创建一个组，组名为java"><a href="#创建一个组，组名为java" class="headerlink" title="创建一个组，组名为java"></a>创建一个组，组名为java</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w823n3ej30vo0auq3p.jpg" alt="image-20200505155125938"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w86o34mj30zb0m5mye.jpg" alt="image-20200520163930342"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Gitlab中的组和项目有三种访问权限：Private、Internal、Public- Private：只有组成员才能看到- Internal：只要登录的用户就能看到,开源项目和组设置的是Internal- Public：所有人都能看到</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w8bsvatj315q0lltat.jpg" alt="image-20200520164034959"></p><h4 id="创建一个PM的用户作为项目管理者并加入到java组内"><a href="#创建一个PM的用户作为项目管理者并加入到java组内" class="headerlink" title="创建一个PM的用户作为项目管理者并加入到java组内"></a>创建一个PM的用户作为项目管理者并加入到java组内</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w8fy6rnj30tr07rjrr.jpg" alt="image-20200520164704264"></p><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520164838332.png" alt="image-20200520164838332"></p><ul><li><strong>注意：这里的邮箱在公司里一定要写上真实的，我这里为了方便，就随便写上了一个</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w8tqzznj30qr078aa1.jpg" alt="image-20200520165021663"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w91kjsej60un0akaaa02.jpg" alt="image-20200520165355480"></p><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520165404742.png" alt="image-20200520165404742"></p><p><strong>修改pm用户秘密: abc123..</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w99hpx5j30zn05jt8s.jpg" alt="image-20200520165453870"></p><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200505160239790.png" alt="image-20200505160239790"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9f53ilj30yo01vt8i.jpg" alt="image-20200520165528634"></p><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520165542652.png" alt="image-20200520165542652"></p><h4 id="将pm管理用户加入到java组内"><a href="#将pm管理用户加入到java组内" class="headerlink" title="将pm管理用户加入到java组内"></a>将pm管理用户加入到java组内</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9kqzn7j30r008zglt.jpg" alt="image-20200505160446031"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9umg1fj30sh08p0t6.jpg" alt="image-20200520165717730"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9y7t5mj30yw0h13zq.jpg" alt="image-20200520165804474"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wa69ny7j30pe01bmwx.jpg" alt="image-20200520165901037"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wadp3h1j30vb05bjrr.jpg" alt="image-20200520165825710"></p><p><strong>Gitlab 权限管理：</strong></p><blockquote><p><strong>Gitlab 用户在组中有五种权限：Guest、Reporter、Developer、Master、Owner</strong></p></blockquote><ol><li><strong>Guest：</strong>可以创建issue、发表评论，不能读写版本库。</li><li><strong>Reporter：</strong>可以克隆代码，不能提交，QA、PM可以赋予这个权限。</li><li><strong>Developer：</strong>可以克隆代码、开发、提交、push，RD可以赋予这个权限。</li><li><strong>Maintainer：</strong>可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心RD负责人可以赋予这个权限。</li><li><strong>Owner：</strong>可以设置项目访问权限 Visibility Level、删除项目、迁移项目、管理组成员，开发组leader能赋予这个权限。</li></ol><h4 id="用PM用户创建一个项目app1"><a href="#用PM用户创建一个项目app1" class="headerlink" title="用PM用户创建一个项目app1"></a>用PM用户创建一个项目app1</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7waspon7j30qo0a175f.jpg" alt="image-20200505161058389"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wawzffoj30zk0b2q39.jpg" alt="image-20200505161150381"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wb75mrqj30pw0cbt9f.jpg" alt="image-20200520170235802"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wbg3lepj30x20fb0to.jpg" alt="image-20200505161405176"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wbo1y5vj30ri06zdga.jpg" alt="image-20200520170340324"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wbv5vcsj30pw0kbwfg.jpg" alt="image-20200520170608480"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wc3kn9bj30zn0cg750.jpg" alt="image-20200520170723976"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wc96s6rj30qy0jet9d.jpg" alt="image-20200520170747102"></p><h4 id="在-gitlab-登陆页面下创建-dev1-dev2-用户，并作为开发者加入到-app1-项目中"><a href="#在-gitlab-登陆页面下创建-dev1-dev2-用户，并作为开发者加入到-app1-项目中" class="headerlink" title="在 gitlab 登陆页面下创建 dev1 dev2 用户，并作为开发者加入到 app1 项目中"></a>在 gitlab 登陆页面下创建 dev1 dev2 用户，并作为开发者加入到 app1 项目中</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wcnv69wj30a40eh74c.jpg" alt="image-20200520170907356"><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wd6e4k7j30a90ejjrg.jpg" alt="image-20200520171038972"></p><p><a href=""><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520171340537.png" alt="image-20200520171340537"></a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wdly1sij312c0g63zo.jpg" alt="image-20200520172319843"></p><ul><li><p><strong>创建完了之后这两个用户很明显是看不到 <code>app1</code> 这个项目的</strong></p></li><li><p><strong>所以需要登陆pm或root用户将其创建的用户添加到 <code>java</code> 组里面中或者 <code>app1</code> 项目中（授权）</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wdsdyikj30qo09zq3n.jpg" alt="image-20200505162104889"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7we1ebfaj315r0dw0tt.jpg" alt="image-20200520174937761"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7web7kmfj30zn062jrm.jpg" alt="image-20200520175206249"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7weejxbpj30z10hvta6.jpg" alt="image-20200520175251857"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wenapjcj30s201bq2p.jpg" alt="image-20200520175308120"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wesj1k6j30gv07x0tc.jpg" alt="image-20200520175140091"></p><ul><li><strong>组成员添加完了之后 看一下 <code>app1</code> 项目中有没有添加这两个用户</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7weyyzg5j30wi087dg6.jpg" alt="image-20200520175353110"></p><p><a href=""><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520175513606.png" alt="image-20200520175513606"></a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wf470x6j30yv08u0tm.jpg" alt="image-20200520171736393"></p><ul><li><strong>随便登陆这两个其中一个账号验证是否能够看到app1项目</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wf75k9dj612u08ht9f02.jpg" alt="image-20200520172641592"></p><h3 id="9-gitlab-的基本使用"><a href="#9-gitlab-的基本使用" class="headerlink" title="9. gitlab 的基本使用"></a>9. gitlab 的基本使用</h3><h4 id="将-dev1-持有人的公钥放到-dev1-账号下"><a href="#将-dev1-持有人的公钥放到-dev1-账号下" class="headerlink" title="将 dev1 持有人的公钥放到 dev1 账号下"></a>将 dev1 持有人的公钥放到 dev1 账号下</h4><ul><li><strong>开启一台虚拟机，192.168.2.6</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件[root@dev1 ~]# cat &lt;&lt;END&gt;&gt; /etc/hosts192.168.2.1 gitlab.lemon.com192.168.2.2 jenkins.lemon.com192.168.2.3 lb.lemon.comEND[root@dev1 ~]# ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Created directory &#x27;/root/.ssh&#x27;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:R5PUO4f4FLhExQ6YaD6B20GMn1Fdgzw98YXtEX/jfMo root@dev1The key&#x27;s randomart image is:+---[RSA 2048]----+|     =.o.*oO=. +o||    o B o.O.*o.oo||     * = .+* =.o+||    . *  .o.* + +||       .S .o o o.||         .  .. ..||              E  ||                 ||                 |+----[SHA256]-----+[root@dev1 ~]# cat .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDzzBDqVPZ9H0nVKucS3B3QNx318tAan06c17dZ0npQpsoAZaMUFxneMH+zoEjd+cG5Ee7f2D2n+iqV0wLGYDs9CY/8RqsSZ9SSx9K2aM9I1XFP6AUpuM5ddI/b3nhBVcbFjzpEckXPMz3O4C0twO1/aRD4byFtyivfdrry/KDNrYEMGojzv7PuktIvC/Qp0vKpvNG7msD6ePg4eHKCunHNGIboojL/vckpJZkvDt0MuDbeHdIE8Gj1XNkoudyWrCVwNTj8TEUkZE6pE7fYfBOzC1gOWv/+evROmwYLioprRJx+ZklRe4YmJzHw7Qiia4CluidQyUquMT5geGIme/3 root@dev1</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfcylltj30pm07lq32.jpg" alt="image-20200520181739636"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfiqzmdj315r0k5gnm.jpg" alt="image-20200520181938491"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfqpmopj30ri08laa8.jpg" alt="image-20200520181949116"></p><h4 id="以ssh协议推送代码至远程仓库"><a href="#以ssh协议推送代码至远程仓库" class="headerlink" title="以ssh协议推送代码至远程仓库"></a>以ssh协议推送代码至远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># git config --global user.name &quot;dev1&quot;[root@dev1 ~]# git config --global user.email &quot;dev1@163.com&quot;[root@dev1 ~]# git clone git@gitlab.lemon.com:java/app1.git正克隆到 &#x27;app1&#x27;...warning: 您似乎克隆了一个空版本库。[root@dev1 ~]# cd app1[root@dev1 app1]# echo &#x27;# 第一次提交 测试&#x27; &gt;&gt; README.md[root@dev1 app1]# git add .[root@dev1 app1]# git commit -m &quot;NOW 1 add README.md&quot;[master（根提交） e4c5af0] NOW 1 add README.md 1 file changed, 1 insertion(+) create mode 100644 README.md[root@dev1 app1]# git tag -a &#x27;v1.0&#x27; -m &#x27;版本 1&#x27;[root@dev1 app1]# git show --oneline v1.0tag v1.0版本 1e4c5af0 NOW 1 add README.mddiff --git a/README.md b/README.mdnew file mode 100644index 0000000..e4460ab--- /dev/null+++ b/README.md@@ -0,0 +1 @@+# 第一次提交 测试[root@dev1 app1]# git push -u origin masterCounting objects: 3, done.Writing objects: 100% (3/3), 241 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)To git@gitlab.lemon.com:java/app1.git * [new branch]      master -&gt; master分支 master 设置为跟踪来自 origin 的远程分支 master。[root@dev1 app1]# git push -u origin v1.0Counting objects: 1, done.Writing objects: 100% (1/1), 157 bytes | 0 bytes/s, done.Total 1 (delta 0), reused 0 (delta 0)To git@gitlab.lemon.com:java/app1.git * [new tag]         v1.0 -&gt; v1.0</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfxlu80j30rf0htmy5.jpg" alt="image-20200520182932298"></p><h4 id="下面以PM用户进行创建开发计划分配给dev2"><a href="#下面以PM用户进行创建开发计划分配给dev2" class="headerlink" title="下面以PM用户进行创建开发计划分配给dev2"></a>下面以PM用户进行创建开发计划分配给dev2</h4><ul><li><strong>开启一台虚拟机，192.168.2.7</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件[root@dev2 ~]# cat &lt;&lt;END&gt;&gt; /etc/hosts192.168.2.1 gitlab.lemon.com192.168.2.2 jenkins.lemon.com192.168.2.3 lb.lemon.comEND</span></span><br></pre></td></tr></table></figure><h5 id="开发一个-官网-V1-0-版本，包含首页和新闻"><a href="#开发一个-官网-V1-0-版本，包含首页和新闻" class="headerlink" title="开发一个 官网 V1.0 版本，包含首页和新闻"></a>开发一个 <code>官网 V1.0 版本</code>，包含首页和新闻</h5><p> <strong>（1）创建里程碑（Milestone）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wg3d0u8j315r0kb40m.jpg" alt="image-20200520183610892"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wg66lj4j315r0kb40m.jpg" alt="image-20200520184021120"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgcmda7j30z30940sv.jpg" alt="image-20200520184055990"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgjq5psj30yb0dlgm0.jpg" alt="image-20200520184305649"></p><p><strong>（2）依次把任务首页，新闻添加到里程碑，并进行任务分配给dev2开发者</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgpt30pj315r0jtdi9.jpg" alt="image-20200520184527869"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgva9g6j30po05qgly.jpg" alt="image-20200520184604227"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wh0ikuij30z30ob3ze.jpg" alt="image-20200520184730629"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7whbzlt1j30qb0l4q44.jpg" alt="image-20200520184758795"></p><h5 id="使用dev2用户登录查看，会有任务提示"><a href="#使用dev2用户登录查看，会有任务提示" class="headerlink" title="使用dev2用户登录查看，会有任务提示"></a>使用dev2用户登录查看，会有任务提示</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7whnmsbvj314t08xdgk.jpg" alt="image-20200520185000657"></p><h5 id="dev2-开发者收到任务，进行开发"><a href="#dev2-开发者收到任务，进行开发" class="headerlink" title="dev2 开发者收到任务，进行开发"></a>dev2 开发者收到任务，进行开发</h5><ul><li><strong>将 dev2 持有人的公钥放到 dev2 账号下</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev2 ~]<span class="comment"># ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Created directory &#x27;/root/.ssh&#x27;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:WC/AYWsXe0QwQDQtL7wlTJUzjGvAtyqAWd17tNwYZvk root@dev2The key&#x27;s randomart image is:+---[RSA 2048]----+|   o +B*==o      ||  . +o*+%=       ||.o   *=@+O.      ||+    .X=BoE      || .   o.*S .      ||  . . .  .       ||   .             ||                 ||                 |+----[SHA256]-----+[root@dev2 ~]# cat .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDE1Wu54a56ryKqGRf5ctaJ71ZcApTV2KNxuG03ykSzZkcp7JSwUNxNRxrWu+XtbjKyCjkJnnBJ+Op18ixN17r69WY5edRxz3c50trNma2PDGm62fdzC0cdZLHnIKCRyizen5UrPxiPMkeJ6Gi2Z6ZmEZhxWhv6ePn3XE53lJg5PMyeSctMTZcikJ9qV0v3l3cZ8XD/fNaJnVQnYUswCxxg+JDEah5G8+sR5sKTJntTKxEjdJOd5/rsZFDGWzlMgieVzYYhPUWejLc2Fw+xQJRmGSQ5+TaKcNNwND/UYlJvzce+AkstgMiocXLN1pW9AFdX4dNo1+LjnjIHfbHobZlP root@dev2</span></span><br></pre></td></tr></table></figure><h5 id="将客户端公钥（id-rsa-pub）放进-dev2-账户中"><a href="#将客户端公钥（id-rsa-pub）放进-dev2-账户中" class="headerlink" title="将客户端公钥（id_rsa.pub）放进 dev2 账户中"></a>将客户端公钥（id_rsa.pub）放进 dev2 账户中</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7whxy735j30rj090q37.jpg" alt="image-20200520191915565"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wi40347j314t0nw777.jpg" alt="image-20200520192004677"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wiad184j30x009xaae.jpg" alt="image-20200520192017477"></p><h5 id="进行开发"><a href="#进行开发" class="headerlink" title="进行开发"></a>进行开发</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev2 ~]<span class="comment"># git config --global user.name &quot;dev2&quot;[root@dev2 ~]# git config --global user.email &quot;dev2@163.com&quot;[root@dev2 ~]# git clone git@192.168.2.1:java/app1.git正克隆到 &#x27;app1&#x27;...remote: Enumerating objects: 4, done.remote: Counting objects: 100% (4/4), done.remote: Compressing objects: 100% (2/2), done.remote: Total 4 (delta 0), reused 0 (delta 0)接收对象中: 100% (4/4), done.[root@dev2 ~]# cd app1/ &amp;&amp; lsREADME.md[root@dev2 app1]# git checkout -b shouye切换到一个新分支 &#x27;shouye&#x27;[root@dev2 app1]# echo &quot;&lt;h1&gt; www.lemon.com&quot; &gt; index.html[root@dev2 app1]# git add .[root@dev2 app1]# git commit -m &quot;shouye&quot;    #创建并切换首页分支[shouye aa7b19c] shouye 1 file changed, 1 insertion(+) create mode 100644 index.html[root@dev2 app1]# git push origin shouyeCounting objects: 4, done.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 282 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)remote: remote: To create a merge request for shouye, visit:remote:   http://gitlab.lemon.com/java/app1/merge_requests/new?merge_request%5Bsource_branch%5D=shouyeremote: To git@192.168.2.1:java/app1.git * [new branch]      shouye -&gt; shouye</span></span><br></pre></td></tr></table></figure><h5 id="回到-gitlab-上可以看到有刚才创建的分支，点击”Merge-request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。"><a href="#回到-gitlab-上可以看到有刚才创建的分支，点击”Merge-request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。" class="headerlink" title="回到 gitlab 上可以看到有刚才创建的分支，点击”Merge request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。"></a>回到 gitlab 上可以看到有刚才创建的分支，点击”Merge request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wifozu1j314t0b90to.jpg" alt="image-20200520192650404"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wik8trhj30y50h00tf.jpg" alt="image-20200520192908247"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wiq00akj30x70ej74t.jpg" alt="image-20200520193038752"></p><h5 id="登陆PM用户合并请求"><a href="#登陆PM用户合并请求" class="headerlink" title="登陆PM用户合并请求"></a>登陆PM用户合并请求</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wivgf3bj30q309vjs3.jpg" alt="image-20200505175911359"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wj5gf13j314t08o750.jpg" alt="image-20200520193144859"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjajvzkj30pd0ju0tz.jpg" alt="image-20200520193234910"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjiczujj30oe04daa4.jpg" alt="image-20200520193453612"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjowd86j30oe03xmx6.jpg" alt="image-20200520193510406"></p><h5 id="验证分支是否合并"><a href="#验证分支是否合并" class="headerlink" title="验证分支是否合并"></a>验证分支是否合并</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjw2d2pj30qm07caac.jpg" alt="image-20200505181325806"></p><h3 id="10-Gitlab-的备份和恢复"><a href="#10-Gitlab-的备份和恢复" class="headerlink" title="10. Gitlab 的备份和恢复"></a>10. Gitlab 的备份和恢复</h3><h5 id="创建备份目录，并授权"><a href="#创建备份目录，并授权" class="headerlink" title="创建备份目录，并授权"></a>创建备份目录，并授权</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># mkdir /data/backups/gitlab -p[root@gitlab ~]# chown -R git.git /data/</span></span><br></pre></td></tr></table></figure><h5 id="修改-gitlab-配置"><a href="#修改-gitlab-配置" class="headerlink" title="修改 gitlab 配置"></a>修改 gitlab 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># vim /etc/gitlab/gitlab.rb 299 gitlab_rails[&#x27;backup_path&#x27;] = &quot;/data/backups/gitlab&quot;  #备份路径307 gitlab_rails[&#x27;backup_keep_time&#x27;] = 604800             #备份7天[root@gitlab ~]# gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure><h5 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># gitlab-rake gitlab:backup:create</span></span><br></pre></td></tr></table></figure><h3 id="11-整体总结"><a href="#11-整体总结" class="headerlink" title="11. 整体总结"></a>11. 整体总结</h3><ul><li><p><em>PM在 <code>gitlab</code> 创建任务，分配给开发人员</em></p></li><li><p><em>开发人员领取任务后，在本地使用git clone拉取代码库</em></p></li><li><p><em>开发人员创建开发分支（git checkout -b dev），并进行开发</em></p></li><li><p><em>开发人员完成之后，提交到本地仓库（git commit ）</em></p></li><li><p><em>开发人员在gitlab界面上申请分支合并请求（Merge request）</em></p></li><li><p><em>PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</em></p></li><li><p><em>开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue。</em></p></li></ul><h2 id="四、部署-jenkins"><a href="#四、部署-jenkins" class="headerlink" title="四、部署 jenkins"></a>四、部署 jenkins</h2><ul><li><strong>开启一台虚拟机，192.168.2.2</strong></li></ul><h4 id="1-安装-JDK-和-Maven"><a href="#1-安装-JDK-和-Maven" class="headerlink" title="1. 安装 JDK 和 Maven"></a>1. 安装 <code>JDK</code> 和 <code>Maven</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件[root@jenkins ~]# cat &lt;&lt;END&gt;&gt; /etc/hosts192.168.2.1 gitlab.lemon.com192.168.2.2 jenkins.lemon.com192.168.2.3 lb.lemon.comEND[root@jenkins ~]# tar xf jdk-8u181-linux-x64.tar.gz [root@jenkins ~]# tar xf apache-maven-3.5.4-bin.tar.gz[root@jenkins ~]# mv jdk1.8.0_181 /usr/local/java[root@jenkins ~]# mv apache-maven-3.5.4 /usr/local/maven[root@jenkins ~]# vi /etc/profileexport JAVA_HOME=/usr/local/javaexport CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libexport PATH=$JAVA_HOME/bin:$PATHexport MAVEN_HOME=/usr/local/mavenexport PATH=$PATH:$MAVEN_HOME/bin[root@jenkins ~]# source /etc/profile[root@jenkins ~]# java -versionjava version &quot;1.8.0_181&quot;Java(TM) SE Runtime Environment (build 1.8.0_181-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode) [root@jenkins ~]# mvn -vApache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)Maven home: /usr/local/mavenJava version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/local/java/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;3.10.0-693.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;#将maven的下载源换成国内的[root@jenkins ~]# vim /usr/local/maven/conf/settings.xml +159#在159行的上面添加以下内容    &lt;mirror&gt;      &lt;id&gt;aliyunmaven&lt;/id&gt;      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;      &lt;name&gt;aliyun maven&lt;/name&gt;      &lt;url&gt;https://maven.aliyun.com/repository/public &lt;/url&gt;    &lt;/mirror&gt;:wq!</span></span><br></pre></td></tr></table></figure><h4 id="2-下载-jenkins-rpm-包并安装"><a href="#2-下载-jenkins-rpm-包并安装" class="headerlink" title="2. 下载 jenkins-rpm 包并安装"></a>2. 下载 jenkins-rpm 包并安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//安装jenkins[root@jenkins ~]<span class="comment"># yum -y install jenkins-2.233-1.1.noarch.rpm//修改jenkins配置文件[root@jenkins ~]# vim /etc/sysconfig/jenkins19 JENKINS_JAVA_CMD=&quot;/usr/local/java/bin/java&quot;29 JENKINS_USER=&quot;root&quot;                          #这里为了方便，使用root用户运行jenkins65 JENKINS_LISTEN_ADDRESS=&quot;192.168.2.2&quot;//启动jenkins[root@jenkins ~]# systemctl start jenkins[root@jenkins ~]# netstat -anptu|grep &quot;8080&quot;tcp6   0   0   192.168.2.2:8080   :::*   LISTEN   67706/java</span></span><br></pre></td></tr></table></figure><h4 id="3-jenkins-的目录介绍"><a href="#3-jenkins-的目录介绍" class="headerlink" title="3. jenkins 的目录介绍"></a>3. jenkins 的目录介绍</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># rpm -ql jenkins/etc/init.d/jenkins             #jenkins的启动文件/etc/logrotate.d/jenkins        #记载Jenkins日至位置的文件/etc/sysconfig/jenkins          #jenkins的配置文件/usr/lib/jenkins                #jenkins的war包，升级就是在这做的 /usr/lib/jenkins/jenkins.war    #jenkins的程序war包/usr/sbin/rcjenkins             #jenkins的为二进制文件/var/cache/jenkins              #jenkins的程序文件，运行程序解压出来的/var/lib/jenkins                #jenkins的主目录/var/log/jenkins                #jenkins的日志文件/var/lib/jenkins/workspace      #拉取代码的存放路径/var/lib/jenkins/plugins/       #这个目录下是我们安装所有的插件/var/lib/jenkins/secrets/initialAdminPassword       #管理员密码文件</span></span><br></pre></td></tr></table></figure><h4 id="4-跳过-jenkins-插件安装"><a href="#4-跳过-jenkins-插件安装" class="headerlink" title="4. 跳过 jenkins 插件安装"></a>4. 跳过 jenkins 插件安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># cat /var/lib/jenkins/secrets/initialAdminPassword3b99cdf79df747e494484426efb8bd1c         #管理员密码</span></span><br></pre></td></tr></table></figure><ul><li>访问：<a href="http://jenkins.lemon.com:8080/">http://jenkins.lemon.com:8080/</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wk8dfj0j30ri0npgmm.jpg" alt="image-20200505192734398"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wkfp027j30ri0odmz6.jpg" alt="image-20200520231715521"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wko5yn1j30ri0ob74q.jpg" alt="image-20200520231751361"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wkwzcf7j30ri0oct9g.jpg" alt="image-20200520231819993"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wl6eaocj30ri09wgm0.jpg" alt="image-20200520231859006"></p><ul><li><strong>修改admin用户密码</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wlbzuvjj60vp06idgl02.jpg" alt="image-20200520212137256"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wlmvxgvj30um0na3z2.jpg" alt="image-20200520212217903"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wlvpc4mj30po0e4mxj.jpg" alt="image-20200520231957176"></p><h4 id="5-更换jenkins插件下载源"><a href="#5-更换jenkins插件下载源" class="headerlink" title="5. 更换jenkins插件下载源"></a>5. 更换jenkins插件下载源</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wm3okwvj30v80ds0uf.jpg" alt="image-20200520212258589"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wm7acnzj30vp0aamxp.jpg" alt="image-20200520212328361"></p><ul><li><strong>清华源：</strong><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wmddkzzj30ny063dfu.jpg" alt="image-20200520212447372"></p><ul><li><p><strong>完事之后将网页关掉并down掉 <code>jenkins</code>，替换完官方的 <code>json</code> 文件之后在启动。</strong></p></li><li><p><strong>注：系统重启后，<code>default.json</code> 文件会还原，所以只要系统重启就执行下面这个命令</strong>。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># systemctl stop jenkins[root@jenkins ~]# cd /var/lib/jenkins/updates/[root@jenkins updates]# sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json[root@jenkins updates]# systemctl start jenkins[root@jenkins updates]# netstat -anptu|grep &quot;java&quot;tcp6       0      0 192.168.2.2:8080      :::*       LISTEN      11591/java</span></span><br></pre></td></tr></table></figure><h4 id="6-离线安装-jenkins-插件"><a href="#6-离线安装-jenkins-插件" class="headerlink" title="6.离线安装 jenkins 插件"></a>6.离线安装 jenkins 插件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># systemctl stop jenkins[root@jenkins ~]# rm -rf /var/lib/jenkins/plugins/[root@jenkins ~]# tar xf jenkins-2.233_plugins.tar.gz -C /var/lib/jenkins/[root@jenkins ~]# chown -R jenkins:jenkins /var/lib/jenkins/plugins/[root@jenkins ~]# systemctl start jenkins</span></span><br></pre></td></tr></table></figure><ul><li><strong>jenkins 插件安装完成</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wmmz3ckj30u90egq3d.jpg" alt="image-20200520213421856"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wmrlwv7j31160gn0u2.jpg" alt="image-20200520213450701"></p><h2 id="五、Jenkins-集成-Gitlab（持续集成）"><a href="#五、Jenkins-集成-Gitlab（持续集成）" class="headerlink" title="五、Jenkins 集成 Gitlab（持续集成）"></a>五、Jenkins 集成 Gitlab（持续集成）</h2><p><strong>整体思路：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wn5rpgzj31d00oenh3.jpg" alt="image-20210402172434327"></p><h4 id="1-在-gitlab-上创建项目并将代码推送上去"><a href="#1-在-gitlab-上创建项目并将代码推送上去" class="headerlink" title="1. 在 gitlab 上创建项目并将代码推送上去"></a>1. 在 gitlab 上创建项目并将代码推送上去</h4><ul><li><strong>使用pm用户基于 <code>java</code> 组创建 <code>monitor</code>项目</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wngfg65j30u80m3tbx.jpg" alt="image-20200520235036801"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wnmejhwj30tz04rdfv.jpg" alt="image-20200520235313198"></p><ul><li><strong>使用 <code>dev1</code> 或者 <code>dev2</code> 开发用户将monitor代码推送至此项目中</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># unzip monitor_html.zip                #解压我本地的项目代码[root@dev1 ~]# ll总用量 13688drwxr-xr-x 9 root root     4096 5月  20 08:57 monitor-rw-r--r-- 1 root root 14008331 5月  20 08:59 monitor_html.zip[root@dev1 ~]# cd monitor                            #进入解压后的代码目录中[root@dev1 monitor]# git init                        #初始化monitor目录重新初始化现存的 Git 版本库于 /root/monitor/.git/[root@dev1 monitor]# git add .                       #加入到暂存区[root@dev1 monitor]# git status                      #查看暂存区状态[root@dev1 monitor]# git commit -m &quot;NOW 1&quot;           #提交至本地仓库[master 9c1c324] NOW 1 110 files changed, 65709 insertions(+), 65709 deletions(-) [root@dev1 monitor]# git remote add origin git@gitlab.lemon.com:java/monitor.git   #添加远程仓库[root@dev1 monitor]# git remote -v                      #查看远程仓库（ssh协议的）origingit@gitlab.lemon.com:java/monitor.git (fetch)origingit@gitlab.lemon.com:java/monitor.git (push)[root@dev1 monitor]# git push -u origin master          #推送代码至远程仓库Counting objects: 564, done.Compressing objects: 100% (497/497), done.Writing objects: 100% (564/564), 9.03 MiB | 0 bytes/s, done.Total 564 (delta 159), reused 363 (delta 54)remote: Resolving deltas: 100% (159/159), done.To git@gitlab.lemon.com:java/monitor.git * [new branch]      master -&gt; master分支 master 设置为跟踪来自 origin 的远程分支 master。</span></span><br></pre></td></tr></table></figure><ul><li><strong>查看是否推送至monitor项目中</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wns3q76j30z50nqdhc.jpg" alt="image-20200521002049018"></p><h4 id="2-下载集成-gitlab-的插件"><a href="#2-下载集成-gitlab-的插件" class="headerlink" title="2. 下载集成 gitlab 的插件"></a>2. 下载集成 <code>gitlab</code> 的插件</h4><ul><li>这些插件我都已经在上面安装好了，所以这一步可以跳过</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wnwrj0sj30y40e9gsq.jpg" alt="image-20200521002447884"></p><h4 id="3-在-jenkins-里配置实现持续集成"><a href="#3-在-jenkins-里配置实现持续集成" class="headerlink" title="3. 在 jenkins 里配置实现持续集成"></a>3. 在 jenkins 里配置实现持续集成</h4><blockquote><p><strong>进入主页–创建一个新任务</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wnzklkbj30vy0i40u3.jpg" alt="image-20200521003043921"></p><blockquote><p><strong>输入项目名称 freestyle-monitor—构建一个自由风格的软件项目—确认</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wo6z7ubj30sm0m5mzn.jpg" alt="image-20200521002958391"></p><blockquote><p><strong>General–填写项目描述–Discard old builds</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7woct8rnj60sl0gfgm902.jpg" alt="image-20200521003526153"></p><blockquote><p><strong>源码管理–Git–添加 <code>gitlab</code> 项目的URL–授权认证</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wogdbu1j30te0783yz.jpg" alt="image-20200521003803292"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7woj4c18j30sn0mp0u6.jpg" alt="image-20200521004019949"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//在jenkins服务器上生成私钥，马上就用[root@jenkins ~]<span class="comment"># ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:cYOfmb21FU4/mqzakUqAqwFPW1G7Mz2hmLti6eDfia8 root@jenkinsThe key&#x27;s randomart image is:+---[RSA 2048]----+|       .         ||      . ..       ||     . .o.o    o ||      = ++.*  o o|| . . = *So= . .oo||  + o o + . oooo.|| . +.o   . o.+.  ||. .+= o . o o    || .+E+=   o.o     |+----[SHA256]-----+[root@jenkins ~]# cat .ssh/id_rsa.pub      #公钥ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDj13aUUWlOxpLv/tGDHF7v1dBUrs0wVirnxKXbFwetXUECnqGyd9UOHSrkkEiKW512ommbXDziX+TEa6S5QULZCrS0dM3tN4WCLyouhPbPzjiOA+HHJj0XpgXxnSz6MobeAVPByS0l9LhJkISIxl+gmz+e/VvMcSOmwOXHm70kIngA59X6xy5t2xeb0vwkQXGmoA5bQdQx32mugDT4HA1IBpoRRV3h6cfjhSW85wjdgWRGWFIRFLfLKCyBPBaGxGY7XJB9Fpu3SaMfBb85EYBk///L1Ha8dEKLkmiECrDo6SgQHWoF7GVcyzATku80NHR6boZFC4belELS2rPmTfe9 root@jenkins[root@jenkins ~]# cat .ssh/id_rsa          #私钥-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEA49d2lFFpTsaS7/7Rgxxe79XQVK7NMFYq58Sl2xcHrV1BAp6hsnfVDh0q5JBIiluddqJpm1w84l/kxGukuUFC2Qq0tHTN7TeFgi8qLoT2z844jgPhxyY9F6YF8Z0s+jKG3gFTwcktJfS4SZCEiMZfoJs/nv1bzHEjpsDlx5u9JCJ4AOfV+scubdsXm9L8JEFxpqAOW0HUMd9proA0+BwNSAaaEUVd4enH44UlvOcI3YFkRlhSERS3yygsgTwWhsRmO1yQfRabt0mjHwW/ORGAZP//y9R2vHRCi5JohAqw6OkoEB1qBexlXMswE5LvNDR0em6GRQuG3pRC0tqz5k33vQIDAQABAoIBAQDcu22CG60uSGsqX3CS2PWQ3VBL+l2HqrM+fuE/9HvXlTTaWNzGjhm25sMbVD0y7bcLrCUsApxppAV51d9sKrGcnCadfVvTqaqKiS8QiniismNQEqq1yXH+azXu8hsU+cZ3ZknCwCghUYkInB4KdEVIz58/ZK1+z01+y/rQ+yyux3GQQq7ZM+gQDhAmrgma+r/lov0itCM86Eo5PN9ZQ5I7m23ACQsZNjZOQ9yxIqjsYYAo+iJuT96ZUlOkPnzTwQ2mtI1SaMgPUZJbgjb4A3FaU0rVru+bsQX93mZEEWAQqBzr1JkE8gd4P5VCMmjxlNxQwzThKMaGsvU9ijqXDZaBAoGBAPzZ7y/UDLd5cMgljPtGG3buk9vWKmL32DTRShj2OdrXJO49QGy3uMUi9qQ3j8ShmvclKdQ3LXofEFruwBmkP0F/oEYJ5/MEXkgi1+dE8RgjIg6v7+WwsAhFJrhnK+rGbVSABJ5O9bb9qmEKgZq+2W1/4Y6RF/+DSSN/jxXllP3JAoGBAOatzO34RMHemgQoRQCW6NOTHnWOpn1ubhMR21rNHfgwmsyaPMv/LDkBQObyKMLb4VgCD7jD2NW9DlTcKiZjqmjgDALxR1tt3mXZ2znTWEDI774Tc2QebJCpRIdQqKG1nm5Hd131E5CS72cNCVmacVc9xi7kO107e6bc+34g8hRVAoGAe8/PcpEYBQN/OVJB3YyvyCX82unc6YdJJFvTN7PiEonE+K+fi1zPKiD7ut/GE1e6xQg6mkLGjwUFAjHkeOnXW6A9/+272WCrNhFxvToiAFq7w4tdIhDJsdMCqctDUvwE7xqcqFQrt4Yw1sHJQtfvKdIzxZbAtIo51xsQGn3H3hkCgYAZhpnqq1JQcaVxWFNqYUiaQOlZ8NMThijAC3XOcmwijp5Sja60lCP8mtrns1w3U8V3y6KZu3I/FJCFa2duoBC3UjOCD9jpkRrPAnBz0aMuaA2/Zr+aEJPK3jArGQ3P9xz07wuSZhAoK1o6eQLT23c3RCqt/atkAbUJHeLmbhbbkQKBgFytaJklEVRibl0iiDYZfkzIhD/v1I43JyUmuv+VuTwGDYFx4b0jBOAmEeKnpRzyvmSbG52XHcJeaGt0iLaZVnpby/y04aowJC+2sQ7fGKE61PYy9WDasHBruRuMiY5YzMC9LsGeSs4gF/oVt6d80M2itaqf+MSRZpT3VVpqGXw9-----END RSA PRIVATE KEY-----</span></span><br></pre></td></tr></table></figure><ul><li><strong>把 <code>jenkins</code> 服务器上的公钥放到 <code>gitlab</code> 的  pm 账户上用来拉取代码</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7worz5akj313c0lu0v5.jpg" alt="image-20200521004915704"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wovrd6kj30tj09674j.jpg" alt="image-20200521004934281"></p><ul><li><strong>验证 <code>jenkins</code> 服务器能否克隆这个项目</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># git clone git@gitlab.lemon.com:java/monitor.git正克隆到 &#x27;monitor&#x27;...remote: Enumerating objects: 564, done.remote: Counting objects: 100% (564/564), done.remote: Compressing objects: 100% (392/392), done.remote: Total 564 (delta 159), reused 564 (delta 159)接收对象中: 100% (564/564), 9.03 MiB | 0 bytes/s, done.处理 delta 中: 100% (159/159), done.[root@jenkins ~]# rm -rf monitor///很明显，jenkins服务器已经能够克隆gitlab上的项目了</span></span><br></pre></td></tr></table></figure><ul><li><strong>再回到 jenkins 的web页面上将他自己的私钥放到 jenkins 凭据上</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wp2wr9kj313n0k5gnb.jpg" alt="image-20200521010030412"></p><blockquote><p>Credentials—选择 root</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wp74zkbj30sm0i6myb.jpg" alt="image-20200521010337874"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wpbaje8j60s002djre02.jpg" alt="image-20200521010815380"></p><h4 id="4-点击立即构建"><a href="#4-点击立即构建" class="headerlink" title="4. 点击立即构建"></a>4. 点击立即构建</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wphbqm9j313t0howg9.jpg" alt="image-20200521011053244"></p><h4 id="5-构建成功后点击-控制台输出-和-工作区"><a href="#5-构建成功后点击-控制台输出-和-工作区" class="headerlink" title="5. 构建成功后点击 控制台输出 和 工作区"></a>5. 构建成功后点击 控制台输出 和 工作区</h4><ul><li><strong>点击控制台输出</strong></li></ul><blockquote><p><strong>控制台输出，SUCCESS则构建成功</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wpoehy1j30tz0g3wfw.jpg" alt="image-20200521011929942"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wq1mqruj60qu0ijgn302.jpg" alt="image-20200521012036181"></p><ul><li><strong>点击工作去</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wq91qa6j313t0ir40s.jpg" alt="image-20200521011356399"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqe1wgjj30sf0mltbl.jpg" alt="image-20200521011658186"></p><ul><li><strong>查看 <code>jenkins</code> 服务器上的 <code>/var/lib/jenkins/workspace/</code> 目录是否下载了代码</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqiuz6dj30y80d6t9w.jpg" alt="image-20200521011751571"></p><blockquote><p><strong>可以看到，在工作目录下边有部署的代码；上面只是完成了第一步，也就是持续集成，下面我们先开始搭建集群，在修改此任务的配置（持续集成 + 持续部署）。</strong></p></blockquote><h2 id="六、搭建web集群"><a href="#六、搭建web集群" class="headerlink" title="六、搭建web集群"></a>六、搭建web集群</h2><blockquote><p><strong>打开三台虚拟机</strong></p></blockquote><table><thead><tr><th>IP</th><th>host_name</th><th>role</th></tr></thead><tbody><tr><td>192.168.2.3</td><td>LB</td><td>nginx充当负载均衡</td></tr><tr><td>192.168.2.4</td><td>web01</td><td>nginx充当web服务</td></tr><tr><td>192.168.2.5</td><td>Web02</td><td>nginx充当web服务</td></tr></tbody></table><h4 id="1-在这三台节点上都安装nginx（操作相同）"><a href="#1-在这三台节点上都安装nginx（操作相同）" class="headerlink" title="1. 在这三台节点上都安装nginx（操作相同）"></a>1. 在这三台节点上都安装nginx（操作相同）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件cat &lt;&lt;END&gt;&gt; /etc/hosts192.168.2.1 gitlab.lemon.com192.168.2.2 jenkins.lemon.com192.168.2.3 lb.lemon.comENDwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repovim /etc/yum.repos.d/nginx.repo [nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=trueyum clean allyum makecacheyum -y install nginx#修改这三台的主配置文件（配置相同）vim /etc/nginx/nginx.confuser  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    sendfile      on;    keepalive_timeout  0;    include /etc/nginx/conf.d/*.conf;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置-lb-主机"><a href="#2-配置-lb-主机" class="headerlink" title="2. 配置 lb 主机"></a>2. 配置 lb 主机</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lb ~]<span class="comment"># cd /etc/nginx/conf.d/[root@lb conf.d]# gzip default.conf              #将默认的虚拟主机文件注释掉[root@lb conf.d]# vim proxy_lb.lemon.com.confupstream lb &#123;        server 192.168.2.4:80;        server 192.168.2.5:80;&#125;server &#123;        listen 80;        server_name lb.lemon.com;        root /code;        location / &#123;                proxy_pass http://lb;                proxy_set_header Host $http_host;                proxy_set_header X-Forward-For $remote_addr;        &#125;&#125;:wq![root@lb conf.d]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful[root@lb conf.d]# systemctl start nginx;systemctl enable nginx[root@lb conf.d]# netstat -anptu|grep 80tcp        0      0 0.0.0.0:80     0.0.0.0:*     LISTEN      16216/nginx: master</span></span><br></pre></td></tr></table></figure><h4 id="3-配置-web01-主机"><a href="#3-配置-web01-主机" class="headerlink" title="3. 配置 web01 主机"></a>3. 配置 web01 主机</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cd /etc/nginx/conf.d/[root@web01 conf.d]# gzip default.conf[root@web01 conf.d]# vim nginx_01.confserver &#123;        listen 80;        server_name localhost;        root /code/web;        location / &#123;                index index.html;        &#125;&#125;:wq![root@web01 conf.d]# mkdir -p /code/web[root@web01 conf.d]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful[root@web01 conf.d]# systemctl start nginx;systemctl enable nginx[root@web01 conf.d]# netstat -anptu|grep 80tcp        0      0 0.0.0.0:80        0.0.0.0:*     LISTEN      16171/nginx: master</span></span><br></pre></td></tr></table></figure><h4 id="4-配置-web02-主机"><a href="#4-配置-web02-主机" class="headerlink" title="4. 配置 web02 主机"></a>4. 配置 web02 主机</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web02 ~]<span class="comment"># cd /etc/nginx/conf.d/[root@web02 conf.d]# gzip default.conf[root@web02 conf.d]# vim nginx_02.confserver &#123;        listen 80;        server_name localhost;        root /code/web;        location / &#123;                index index.html;        &#125;&#125;:wq![root@web02 conf.d]# mkdir -p /code/web[root@web02 conf.d]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful[root@web02 conf.d]# systemctl start nginx;systemctl enable nginx[root@web02 conf.d]# netstat -anptu|grep 80tcp        0      0 0.0.0.0:80        0.0.0.0:*     LISTEN      16171/nginx: master</span></span><br></pre></td></tr></table></figure><h4 id="5-将-jenkins-服务器上的代码拷贝到两台web节点上"><a href="#5-将-jenkins-服务器上的代码拷贝到两台web节点上" class="headerlink" title="5. 将 jenkins 服务器上的代码拷贝到两台web节点上"></a>5. 将 jenkins 服务器上的代码拷贝到两台web节点上</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># cd /var/lib/jenkins/workspace/freestyle-monitor[root@jenkins freestyle-monitor]# scp -r ./* root@192.168.2.4:/code/web[root@jenkins freestyle-monitor]# scp -r ./* root@192.168.2.5:/code/web</span></span><br></pre></td></tr></table></figure><h4 id="6-查看并访问-http-lb-lemon-com"><a href="#6-查看并访问-http-lb-lemon-com" class="headerlink" title="6. 查看并访问 http://lb.lemon.com/"></a>6. 查看并访问 <a href="http://lb.lemon.com/">http://lb.lemon.com/</a></h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqrqpqxj30z20ao3zf.jpg" alt="image-20200521024919442"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqv308bj30zp0akt9m.jpg" alt="image-20200521024935986"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqydqqgj313s0q91kx.jpg" alt="image-20200521025224964"></p><ul><li><strong>思考一个问题：</strong><ul><li>如果我更新了一次代码，是不是还得要再来一次上面的操作步骤？</li><li>是的，所以就要用到下面  <code>jenkins</code> 的持续集成 + 持续部署 功能了。</li></ul></li></ul><h2 id="七、配置freestyle-monitor任务-持续集成-持续部署"><a href="#七、配置freestyle-monitor任务-持续集成-持续部署" class="headerlink" title="七、配置freestyle-monitor任务 持续集成 + 持续部署"></a>七、配置freestyle-monitor任务 持续集成 + 持续部署</h2><h4 id="1-将手动部署代码的操作编写成shell脚本，在由-jenkins-调度将其代码推送至web集群"><a href="#1-将手动部署代码的操作编写成shell脚本，在由-jenkins-调度将其代码推送至web集群" class="headerlink" title="1. 将手动部署代码的操作编写成shell脚本，在由 jenkins 调度将其代码推送至web集群"></a>1. 将手动部署代码的操作编写成shell脚本，在由 jenkins 调度将其代码推送至web集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># mkdir /jekins_scripts                   #创建jenkins脚本存放目录[root@jenkins ~]# mkdir /jekins_code_tar                  #创建jenkins代码打包存放目录[root@jenkins ~]# vim /jekins_scripts/monitor_html.sh  #创建jenkins任务的相关脚本存放目录#!/bin/bash#时间戳DATE=`date +%Y-%m-%d-%H-%M-%S`#jenkins的项目目录,这里也可以直接用jenkins自身的 WORKSPACE 变量JENKINS_DIR=&quot;/var/lib/jenkins/workspace/freestyle-monitor&quot;#web集群的站点存放目录WEB_DIR=&quot;/code&quot;#web集群IP地址WEB_IP=&quot;192.168.2.4 192.168.2.5&quot;#进入到jenkins项目目录，并进行代码打包至/jekins_code_tar目录下，在将内容通过scp至web集群 并 进行新的代码上线env_build() &#123;       cd $&#123;JENKINS_DIR&#125; &amp;&amp; tar zcf /jekins_code_tar/web-$&#123;DATE&#125;.tar.gz ./*       for hosts in $WEB_IP;do            ssh root@$&#123;hosts&#125; &quot;if [ ! -d /web_backup ]; then mkdir /web_backup ; fi&quot;            scp /jekins_code_tar/web-$&#123;DATE&#125;.tar.gz root@$&#123;hosts&#125;:/web_backup            ssh root@$&#123;hosts&#125; &quot;rm -rf $&#123;WEB_DIR&#125;/* &amp;&amp; mkdir -p $&#123;WEB_DIR&#125;/web-$&#123;DATE&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;tar xf /web_backup/web-$&#123;DATE&#125;.tar.gz -C $&#123;WEB_DIR&#125;/web-$&#123;DATE&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;ln  -s $&#123;WEB_DIR&#125;/web-$&#123;DATE&#125; $&#123;WEB_DIR&#125;/web&quot;       done&#125;#调用env_build函数env_build[root@jenkins ~]# chmod -R +x /jekins_scripts#配置web节点免登[root@jenkins ~]# ssh-copy-id root@192.168.2.4[root@jenkins ~]# ssh-copy-id root@192.168.2.5</span></span><br></pre></td></tr></table></figure><h4 id="2-配置-freestyle-monitor-项目"><a href="#2-配置-freestyle-monitor-项目" class="headerlink" title="2. 配置 freestyle-monitor 项目"></a>2. 配置 freestyle-monitor 项目</h4><ul><li><strong>构建 – Execute shell</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wr4spf9j30ux0ik0un.jpg" alt="image-20200521114008140"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wradm4yj30rz0i73yy.jpg" alt="image-20200521114243497"></p><h4 id="3-构建此项目"><a href="#3-构建此项目" class="headerlink" title="3. 构建此项目"></a>3. 构建此项目</h4><ul><li><p>在构建之前先将web集群的页面和 <code>jenkins</code> 之前拉取下的代码全都删除，以便验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jenkins服务器上[root@jenkins ~]# ll /var/lib/jenkins/workspace/总用量 0[root@jenkins ~]# ll /jekins_code_tar/总用量 0#web01服务器上[root@web01 ~]# ll /code/总用量 0[root@web01 ~]# ll /web_backupls: 无法访问/web_backup: 没有那个文件或目录#web02服务器上[root@web02 ~]# ll /code/总用量 0[root@web01 ~]# ll /web_backupls: 无法访问/web_backup: 没有那个文件或目录</span></span><br></pre></td></tr></table></figure></li><li><p>现在访问lb.lemon.com就会报错</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wrktsraj313t04bglo.jpg" alt="image-20200521114546597"></p><h4 id="4-模拟开发更新代码推送至远程仓库"><a href="#4-模拟开发更新代码推送至远程仓库" class="headerlink" title="4. 模拟开发更新代码推送至远程仓库"></a>4. 模拟开发更新代码推送至远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># cd monitor[root@dev1 monitor]# vim index.html +43&lt;a class=&quot;logo pull-left&quot; href=&quot;index.html&quot; style=&quot;width: 233px&quot;&gt;lemon管理平台&lt;/a&gt;:wq![root@dev1 monitor]# git add .[root@dev1 monitor]# git commit -m &quot;test&quot;[master 6cc63b2] test 1 file changed, 1 insertion(+), 1 deletion(-)[root@dev1 monitor]# git push origin masterCounting objects: 5, done.Compressing objects: 100% (3/3), done.Writing objects: 100% (3/3), 282 bytes | 0 bytes/s, done.Total 3 (delta 2), reused 0 (delta 0)To git@gitlab.lemon.com:java/monitor.git   481be52..6cc63b2  master -&gt; master</span></span><br></pre></td></tr></table></figure><h4 id="5-jenkins构建项目"><a href="#5-jenkins构建项目" class="headerlink" title="5. jenkins构建项目"></a>5. jenkins构建项目</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wrpf7g3j30ss0hdtah.jpg" alt="image-20200521114623360"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wrw3c3fj30pd0b10tf.jpg" alt="image-20200521114714801"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ws6hj45j30sf0bvq43.jpg" alt="image-20200522005243240"></p><h4 id="6-然后在访问一下lb-lemon-com"><a href="#6-然后在访问一下lb-lemon-com" class="headerlink" title="6. 然后在访问一下lb.lemon.com"></a>6. 然后在访问一下lb.lemon.com</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wsalqr0j313t0pfnpb.jpg" alt="image-20200522011420421"></p><h4 id="7-查看对应的目录"><a href="#7-查看对应的目录" class="headerlink" title="7. 查看对应的目录"></a>7. 查看对应的目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jenkins服务器上[root@jenkins ~]# ll  /var/lib/jenkins/workspace/总用量 4drwxr-xr-x 9 root root 4096 5月  22 00:50 freestyle-monitordrwxr-xr-x 2 root root    6 5月  22 00:50 freestyle-monitor@tmp[root@jenkins ~]# ll /jekins_code_tar/总用量 4552-rw-r--r-- 1 root root 4659825 5月  22 00:50 web-2020-05-22-00-50-30.tar.gz#web01服务器上[root@web01 ~]# ll /code/总用量 4lrwxrwxrwx 1 root root   29 5月  22 00:50 web -&gt; /code/web-2020-05-22-00-50-30drwxr-xr-x 8 root root 4096 5月  22 00:50 web-2020-05-22-00-50-30[root@web01 ~]# ll /web_backup总用量 4552-rw-r--r-- 1 root root 4659825 5月  22 00:50 web-2020-05-22-00-50-30.tar.gz#web02服务器上[root@web02 ~]# ll /code/总用量 4lrwxrwxrwx 1 root root   29 5月  22 00:50 web -&gt; /code/web-2020-05-22-00-50-30drwxr-xr-x 8 root root 4096 5月  22 00:50 web-2020-05-22-00-50-30[root@web02 ~]# ll /web_backup总用量 4552-rw-r--r-- 1 root root 4659825 5月  22 00:50 web-2020-05-22-00-50-30.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="8-注意事项："><a href="#8-注意事项：" class="headerlink" title="8. 注意事项："></a>8. 注意事项：</h4><p><strong>1. Jenkins的启动用户得是root，不然会报错！因为ssh免登用的是root用户做的</strong></p><p><strong>2. 如果做了上面的步骤后还是报错，就执行命令删除rm -rf known_hosts。</strong></p><p><strong>3. 以上就是一个简单的不能再简单的静态页面 持续集成 + 持续部署项目</strong></p><h4 id="9-现在这个项目的配置还存在一些问题"><a href="#9-现在这个项目的配置还存在一些问题" class="headerlink" title="9. 现在这个项目的配置还存在一些问题"></a>9. 现在这个项目的配置还存在一些问题</h4><ul><li><p>怎么指定要构建的版本？</p><ul><li>答：需要定义 参数化构建过程的（Choice Parameter 和 Git Parameter）</li></ul></li><li><p>怎么不让已经构建成功后项目 构建？</p><ul><li>答：使用 <code>jenkins</code> 自带的两个变量进行判断</li></ul></li></ul><h4 id="10-解决上面两个存在的问题"><a href="#10-解决上面两个存在的问题" class="headerlink" title="10. 解决上面两个存在的问题"></a>10. 解决上面两个存在的问题</h4><ul><li><strong>由于之前的上线方式是直接获取最新代码，它会对后期版本回退的困难。</strong></li><li><strong>如果采用tag方式，比如第一次上线 v1.1 、第二次上线 v1.2 ，如果上线 v1.2 出现问题后，我们还可以使用tag快速回退至上一个版本的 v1.1 。</strong></li></ul><h4 id="12-实现tag版本上线的思路"><a href="#12-实现tag版本上线的思路" class="headerlink" title="12. 实现tag版本上线的思路"></a>12. 实现tag版本上线的思路</h4><ol><li><strong>开发如果需要发布新版本上线，必须将当前的版本打上一个标签。</strong></li><li><strong>配置jenkins任务的参数化构建过程；Choice Parameter 和 Git Parameter</strong></li><li><strong>jenkins需要让其脚本支持传参，比如：用户传递 v1.1 则拉取项目的 v1.1 标签</strong></li></ol><h4 id="13-jenkins配置tag版本的部署"><a href="#13-jenkins配置tag版本的部署" class="headerlink" title="13. jenkins配置tag版本的部署"></a>13. jenkins配置tag版本的部署</h4><ul><li>首先安装 Git Parameter插件，然后配置jenkins参数化构建，再让用户构建时选择对应的tag版本。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wshh486j30we0gtmz0.jpg" alt="image-20200521213401721"></p><ul><li>添加 参数化构建过程（This project is parameterized）—&gt; Choice Parameter —&gt; Git Parameter</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wslshm1j30sd0obabo.jpg" alt="image-20200521215729330"></p><ul><li>配置 Choice Parameter 选项参数</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wst8oioj30ma0bvdge.jpg" alt="image-20200522021453925"></p><ul><li>配置 Git Parameter 并  修改源码管理的 Git分支参数</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wt0qol4j30ma0blmxt.jpg" alt="image-20200522013349907"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wt5zaatj30sm0o9t9y.jpg" alt="image-20200522013610814"></p><ul><li>修改jenkins上的 monitor_html.sh 脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># vim /jekins_scripts/monitor_html.sh#!/bin/bash#时间戳DATE=`date +%Y-%m-%d-%H-%M-%S`DATE_TAG=$&#123;DATE&#125;-$&#123;GIT_VERSION&#125;#jenkins的项目目录,这里也可以直接用jenkins自身的 WORKSPACE 变量JENKINS_DIR=&quot;/var/lib/jenkins/workspace/freestyle-monitor&quot;#web集群的站点存放目录WEB_DIR=&quot;/code&quot;#web集群IP地址WEB_IP=&quot;192.168.2.4 192.168.2.5&quot;#进入到jenkins项目目录，并进行代码打包至/jekins_code_tar目录下，在将内容通过scp至web集群 并 进行新的代码上线env_build() &#123;       cd $&#123;JENKINS_DIR&#125; &amp;&amp; tar zcf /jekins_code_tar/web-$&#123;DATE_TAG&#125;.tar.gz ./*       for hosts in $WEB_IP;do            ssh root@$&#123;hosts&#125; &quot;if [ ! -d /web_backup ]; then mkdir /web_backup ; fi&quot;            scp /jekins_code_tar/web-$&#123;DATE_TAG&#125;.tar.gz root@$&#123;hosts&#125;:/web_backup            ssh root@$&#123;hosts&#125; &quot;rm -rf $&#123;WEB_DIR&#125;/* &amp;&amp; mkdir -p $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;tar xf /web_backup/web-$&#123;DATE_TAG&#125;.tar.gz -C $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;ln  -s $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125; $&#123;WEB_DIR&#125;/web&quot;       done&#125;#jenkins这边保留最近提交的五个代码tar包，其余的全部删掉，web那里只保留三个tar包env_clear() &#123;       #-----------清除web节点的tar包(只保留三个)------       for hosts in $WEB_IP;do            ssh root@$&#123;hosts&#125; &quot;bash -x /opt/clear_latest.sh&quot;       done       #-----------清除jenkins节点的tar包(只保留五个)--       ReservedNum=5       FileDir=/jekins_code_tar       FileNum=$(ls -l $FileDir|grep ^- |wc -l)       while(( $FileNum &gt; $ReservedNum));do       OldFile=$(ls -rt $FileDir| head -1)            rm -rf $FileDir/$OldFile            let &quot;FileNum--&quot;       done       &#125;#判断到底是调用env_build函数 还是调用evn_clear函数；其实这里的值就是根据上面的 Choice Parameter 选项而定的if [ $BUILD_CLEAR == &quot;build&quot; ];then       env_buildelif [ $BUILD_CLEAR == &quot;clear&quot; ];then       env_clearfi</span></span><br></pre></td></tr></table></figure><ul><li>在web节点上的opt目录下编写 clear_latest.sh 脚本（在此只实例web01，一样的内容）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># vim /opt/clear_latest.sh #!/bin/bash#保留文件数，这里只保留最新的前三个版本ReservedNum=3FileDir=/web_backupdate=$(date &quot;+%Y%m%d-%H%M%S&quot;)FileNum=$(ls -l $FileDir|grep ^- |wc -l)while(( $FileNum &gt; $ReservedNum));do    OldFile=$(ls -rt $FileDir| head -1)    echo  $date &quot;Delete File:&quot;$OldFile    rm -rf $FileDir/$OldFile    let &quot;FileNum--&quot;done[root@web01 ~]# chmod a+x /opt/clear_latest.sh</span></span><br></pre></td></tr></table></figure><ul><li>开发更新代码，推送至远程仓库并打上标签（这里我实际上推送了三个tag标签）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># cd monitor[root@dev1 monitor]# vim index.html +43&lt;a class=&quot;logo pull-left&quot; href=&quot;index.html&quot; style=&quot;width: 233px&quot;&gt;lemon管理平台 v1.1&lt;/a&gt;:wq![root@dev1 monitor]# git add .[root@dev1 monitor]# git commit -m &quot;v1.1&quot;[root@dev1 monitor]# git push origin master[root@dev1 monitor]# git tag -a &quot;v1.1&quot; -m &quot;v1.1&quot;[root@dev1 monitor]# git push origin v1.1</span></span><br></pre></td></tr></table></figure><ul><li>查看一下效果 并 进行构建 并查看 控制台信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtecmnyj30sf0dtwfn.jpg" alt="image-20200522030745369"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wthhnflj60sf0b1wfi02.jpg" alt="image-20200522032613859"></p><ul><li>访问web服务查看是否更新到我想要的版本中</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtkvveyj313t0kde2o.jpg" alt="image-20200522032725481"></p><ul><li>查看我构建的tar包有多少了，然后使用clear清除（注意：此功能在工作环境上要慎重使用！！！！）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtpwwoqj30uh09yq4d.jpg" alt="image-20200522033011358"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtsu67ij30th088t9t.jpg" alt="image-20200522033030405"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtw47k3j30vj088ab6.jpg" alt="image-20200522033044114"></p><ul><li>调用clear构建 –&gt; 就是在运行脚本中的env_clear函数 —&gt;  查看 控制台信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtzqubmj30sf0dymy5.jpg" alt="image-20200522033129964"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuadd2vj30q00auglx.jpg" alt="image-20200522034347752"></p><ul><li>与上面对比一下可以看到，这个功能也实现了</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuh8f1sj30w506jmya.jpg" alt="image-20200522040612025"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wukgpytj30tk04yq3e.jpg" alt="image-20200522033703796"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuo6tr8j30u904wwey.jpg" alt="image-20200522033717301"></p><h4 id="14-解决项目重复构建-和-无法精确回滚-的问题-可在生产环境使用"><a href="#14-解决项目重复构建-和-无法精确回滚-的问题-可在生产环境使用" class="headerlink" title="14. 解决项目重复构建 和 无法精确回滚 的问题 (可在生产环境使用)"></a>14. 解决项目重复构建 和 无法精确回滚 的问题 (可在生产环境使用)</h4><ul><li>在jenkins任务中的参数化构建中的选项构建那里 在添加一个rollback的选项参数</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wusus6nj30s60o4myk.jpg" alt="image-20200522094542164"></p><ul><li>修改脚本<ul><li>在脚本中添加一个 <code>env_rollabck</code> 的函数，并在脚本中使用 Jenkins自带的 <code>GIT_COMMIT</code> 和 <code>GIT_PREVIOUS_SUCCESSFUL_COMMIT</code>  进行判断</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># vim /jekins_scripts/monitor_html.sh#!/bin/bash#时间戳DATE=`date +%Y-%m-%d-%H-%M-%S`DATE_TAG=$&#123;DATE&#125;-$&#123;GIT_VERSION&#125;#jenkins的项目目录,这里也可以直接用jenkins自身的 WORKSPACE 变量JENKINS_DIR=&quot;/var/lib/jenkins/workspace/freestyle-monitor&quot;#web集群的站点存放目录WEB_DIR=&quot;/code&quot;#web集群IP地址WEB_IP=&quot;192.168.2.4 192.168.2.5&quot;#进入到jenkins项目目录，并进行代码打包至/jekins_code_tar目录下，在将内容通过scp至web集群 并 进行新的代码上线env_build() &#123;       cd $&#123;JENKINS_DIR&#125; &amp;&amp; tar zcf /jekins_code_tar/web-$&#123;DATE_TAG&#125;.tar.gz ./*       for hosts in $WEB_IP;do            ssh root@$&#123;hosts&#125; &quot;if [ ! -d /web_backup ]; then mkdir /web_backup ; fi&quot;            scp /jekins_code_tar/web-$&#123;DATE_TAG&#125;.tar.gz root@$&#123;hosts&#125;:/web_backup            ssh root@$&#123;hosts&#125; &quot;rm -rf $&#123;WEB_DIR&#125;/* &amp;&amp; mkdir -p $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;tar xf /web_backup/web-$&#123;DATE_TAG&#125;.tar.gz -C $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;ln  -s $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125; $&#123;WEB_DIR&#125;/web&quot;       done&#125;#回滚函数env_rollback() &#123;       ROLL_BACKUP=`ssh root@192.168.2.4 &quot;find /web_backup -maxdepth 1 -type f -name &quot;*$&#123;GIT_VERSION&#125;*&quot; &quot;`       for hosts in $WEB_IP;do            ssh root@$&#123;hosts&#125; &quot;rm -rf $&#123;WEB_DIR&#125;/* &amp;&amp; mkdir -p $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;tar xf $&#123;ROLL_BACKUP&#125; -C $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125;&quot;            ssh root@$&#123;hosts&#125; &quot;ln  -s $&#123;WEB_DIR&#125;/web-$&#123;DATE_TAG&#125; $&#123;WEB_DIR&#125;/web&quot;       done&#125;#jenkins这边保留最近提交的五个代码tar包，其余的全部删掉，web那里只保留三个tar包env_clear() &#123;       #-----------清除web节点的tar包(只保留三个)------       for hosts in $WEB_IP;do            ssh root@$&#123;hosts&#125; &quot;bash -x /opt/clear_latest.sh&quot;       done       #-----------清除jenkins节点的tar包(只保留五个)--       ReservedNum=5       FileDir=/jekins_code_tar       FileNum=$(ls -l $FileDir|grep ^- |wc -l)       while(( $FileNum &gt; $ReservedNum));do       OldFile=$(ls -rt $FileDir| head -1)            rm -rf $FileDir/$OldFile            let &quot;FileNum--&quot;       done       &#125;#判断到底是调用env_build函数 还是调用evn_clear函数，并且在构建的时候会先判断一下此#次构建的版本之前有没有构建够，如果构建过，那么将不再构建，如果没有，就构建此项目if [ $BUILD_CLEAR == &quot;build&quot; ];then       if [ $&#123;GIT_COMMIT&#125; == $&#123;GIT_PREVIOUS_SUCCESSFUL_COMMIT&#125; ];then                echo &quot;你已经成功构建过web-$&#123;DATE_TAG&#125;项目了&quot;                echo &quot;你可以直接使用rollback的方式进行回滚web-$&#123;DATE_TAG&#125;项目版本&quot;                exit 1       else                env_build       fielif [ $BUILD_CLEAR == &quot;rollback&quot; ];then       env_rollbackelif [ $BUILD_CLEAR == &quot;clear&quot; ];then       env_clearfi</span></span><br></pre></td></tr></table></figure><ul><li>开发在重新推送两个新的分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># cd monitor[root@dev1 monitor]# vim index.html +43&lt;a class=&quot;logo pull-left&quot; href=&quot;index.html&quot; style=&quot;width: 233px&quot;&gt;lemon管理平台 v1.4 &lt;/a&gt;:wq![root@dev1 monitor]# git add .[root@dev1 monitor]# git commit -m &quot;v1.4&quot;[root@dev1 monitor]# git push origin master[root@dev1 monitor]# git tag -a &quot;v1.4&quot; -m &quot;v1.4&quot;[root@dev1 monitor]# git push origin v1.4[root@dev1 monitor]# vim index.html +43&lt;a class=&quot;logo pull-left&quot; href=&quot;index.html&quot; style=&quot;width: 233px&quot;&gt;lemon管理平台 v1.5 &lt;/a&gt;:wq![root@dev1 monitor]# git add .[root@dev1 monitor]# git commit -m &quot;v1.5&quot;[root@dev1 monitor]# git push origin master[root@dev1 monitor]# git tag -a &quot;v1.5&quot; -m &quot;v1.5&quot;[root@dev1 monitor]# git push origin v1.5</span></span><br></pre></td></tr></table></figure><ul><li>重复构建一下v1.5的版本</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuzh3euj30x10hxjtt.jpg" alt="image-20200522101126718"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wv443abj30sf0m2tas.jpg" alt="image-20200522103032311"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wv7w5nvj30sf0e53zf.jpg" alt="image-20200522103116779"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wveu3huj30sf0luq4r.jpg" alt="image-20200522102810984"></p><ul><li>那比如我想在使用构建回到了v1.4的版本中，怎么才可以重新再回到v1.5版本的？<ul><li>答：使用我上面定义好的rollback函数会退就行了</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wvs4yqtj30sf0f00tu.jpg" alt="image-20200522103401222"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wvvpqhaj30sf0f6t9v.jpg" alt="image-20200522103858070"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wvyxmsbj30sf0ftq46.jpg" alt="image-20200522110221733"></p><ul><li>再来测试清空tar包的功能还能否使用（注意：此功能在工作环境上要慎重使用！！！！）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ww38fy0j60u306kjs602.jpg" alt="image-20200522110429290"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ww6x7b6j30th06mmxy.jpg" alt="image-20200522110438627"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwb57d6j60sf0flwfi02.jpg" alt="image-20200522110453895"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwed4lhj60sf0a0gly02.jpg" alt="image-20200522110520679"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwi67i9j30tn04ywex.jpg" alt="image-20200522110533954"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwlzzikj30tn04z3yy.jpg" alt="image-20200522110545403"></p><p><strong>注意：如果此时在想回退到v1.1 和v1.3 版本的时候会失败的，因为web节点上的这两个版本包已经被被我清空了，所以 clear这个函数在公司的时候要慎重使用！！！！【最好就别写这个函数方法最好】</strong></p><p><strong>至此，jenkins的使用就算是基本完成了，只要上面的内容会了，那么至于java项目那块基本上和上面的操作没有太大的区别</strong></p><h2 id="八、GitLab-Jenkins-Sonar-Qube-持续集成"><a href="#八、GitLab-Jenkins-Sonar-Qube-持续集成" class="headerlink" title="八、GitLab + Jenkins + Sonar Qube 持续集成"></a>八、GitLab + Jenkins + Sonar Qube 持续集成</h2><h3 id="1-java项目部署的基本概述"><a href="#1-java项目部署的基本概述" class="headerlink" title="1. java项目部署的基本概述"></a>1. java项目部署的基本概述</h3><h4 id="1-什么是-java-项目？"><a href="#1-什么是-java-项目？" class="headerlink" title="1. 什么是 java 项目？"></a>1. 什么是 java 项目？</h4><ul><li>简单来说就是用 java 编写的代码，我将其称为 java 项目</li></ul><h4 id="2-为什么java项目需要Maven编译？"><a href="#2-为什么java项目需要Maven编译？" class="headerlink" title="2. 为什么java项目需要Maven编译？"></a>2. 为什么java项目需要Maven编译？</h4><ul><li>由于 java 编写的代码是无法直接在服务器上运行的，需要使用Maven工具进行构建打成war包后才能在服务器上运行</li><li>简单理解：java 源代码就是你在菜市场的买回家的菜，你买了之后并不是直接放嘴里就吃的，而是先回到家里进行一次加工后（Maven）才吃的。</li></ul><h3 id="2-jenkins手动部署java项目至web集群"><a href="#2-jenkins手动部署java项目至web集群" class="headerlink" title="2. jenkins手动部署java项目至web集群"></a>2. jenkins手动部署java项目至web集群</h3><h4 id="1-搭建Nginx-Tomcat-MySQL-Sonar-Qube-集群"><a href="#1-搭建Nginx-Tomcat-MySQL-Sonar-Qube-集群" class="headerlink" title="1. 搭建Nginx + Tomcat + MySQL + Sonar Qube 集群"></a>1. 搭建Nginx + Tomcat + MySQL + Sonar Qube 集群</h4><ul><li>这里前 nginx 和 tomcat 这两部分的机器我们就不用考虑了，因为我们在上面就已经准备好了，我们只需要重新配置一下 nginx 负载均衡并在另外两台机器上安装一下Tomcat就行了。至于 MySQL 和 Sonar Qube 的话，我这里因机器不够用了，所以就直接把 MySQL 部署到 dev1 主机上 Sonar Qube 部署到 dev2 上就行了，不会有什么影响。</li></ul><ol><li>修改lb的 nginx 配置文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lb ~]<span class="comment"># vim /etc/nginx/conf.d/proxy_lb.lemon.com.confupstream lb &#123;        server 192.168.2.4:8080;        server 192.168.2.5:8080;&#125;server &#123;        listen 80;        server_name lb.lemon.com;        root /code;        location / &#123;                proxy_pass http://lb;                proxy_set_header Host $http_host;                proxy_set_header X-Forward-For $remote_addr;        &#125;&#125;[root@lb ~]# systemctl restart nginx</span></span><br></pre></td></tr></table></figure><ul><li>现在访问负载均衡的话会报502错误，这很正常，因为我们还没有部署tomcat</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwsxypdj313t052jri.jpg" alt="image-20200523092927454"></p><ol start="2"><li>在另外两台web节点上关闭 nginx 服务 并安装启动 Tomcat</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginxtar xf jdk-8u181-linux-x64.tar.gzmv jdk1.8.0_181 /usr/<span class="built_in">local</span>/javacat &lt;&lt;<span class="string">END&gt;&gt; /etc/profileexport JAVA_HOME=/usr/local/javaexport PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libENDsource /etc/profiletar xf apache-tomcat-8.5.32.tar.gzmv apache-tomcat-8.5.32 /usr/local/tomcat/usr/local/tomcat/bin/startup.sh netstat -anptu|grep &quot;8080&quot;tcp6       0      0 :::8080      :::*            LISTEN      1353/java</span></span><br></pre></td></tr></table></figure><ul><li>在访问一下负载均衡</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwwr0i4j313t0hy40s.jpg" alt="image-20200523093055372"></p><ul><li>但是看不出来是否已经负载均衡了，我们去修改两个tomcat的页面就行了</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># vim /usr/local/tomcat/webapps/ROOT/index.jsp +52&lt;h2&gt;Tomcat web01-192.168.2.4&lt;/h2&gt;#最好重启一下tomcat[root@web02 ~]# vim /usr/local/tomcat/webapps/ROOT/index.jsp +52&lt;h2&gt;Tomcat web02-192.168.2.5&lt;/h2&gt;#最好重启一下tomcat</span></span><br></pre></td></tr></table></figure><ul><li>再来访问</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wx4ormhj313c0c10u1.jpg" alt="image-20200523093517896"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wx46jl9j313t0c4ac7.jpg" alt="image-20200523093549527"></p><ol start="3"><li>提前先在 dev1 节点上部署好 MySQL ，一会用的 Sonar Qube 的时候会使用，现在还用不上</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># yum -y install mariadb-server[root@dev1 ~]# systemctl start mariadb;systemctl enable mariadb[root@dev1 ~]# mysqladmin -u root password &#x27;123123&#x27;[root@dev1 ~]# mysql -uroot -p123123Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 8Server version: 5.5.65-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.MariaDB [(none)]&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || test               |+--------------------+4 rows in set (0.00 sec)MariaDB [(none)]&gt; exit</span></span><br></pre></td></tr></table></figure><h4 id="2-新建一个gitlab的-hello-world-项目仓库"><a href="#2-新建一个gitlab的-hello-world-项目仓库" class="headerlink" title="2. 新建一个gitlab的 hello world 项目仓库"></a>2. 新建一个gitlab的 hello world 项目仓库</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wx9v2i6j313c0no40s.jpg" alt="image-20200523095831415"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxevzwrj60or01fdfm02.jpg" alt="image-20200523095953535"></p><h4 id="3-使用git将其java代码上传到hello-world仓库"><a href="#3-使用git将其java代码上传到hello-world仓库" class="headerlink" title="3. 使用git将其java代码上传到hello-world仓库"></a>3. 使用git将其java代码上传到hello-world仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 hello-world]<span class="comment"># pwd/root/hello-world[root@dev1 hello-world]# ll -a总用量 16-rw-r--r--  1 root root  700 12月 23 2018 .classpath-rw-r--r--  1 root root 1113 12月 23 2018 pom.xml-rw-r--r--  1 root root 1081 12月 23 2018 .projectdrwxr-xr-x  2 root root  322 6月  11 16:31 .settingsdrwxr-xr-x  3 root root   18 6月  11 16:31 srcdrwxr-xr-x  5 root root   56 6月  11 16:31 target-rw-r--r--  1 root root  491 12月 20 2018 time.java[root@dev1 hello-world]# git init初始化空的 Git 版本库于 /root/hello-world/.git/[root@dev1 hello-world]# git add .[root@dev1 hello-world]# git commit -m &quot;Initial commit&quot;[root@dev1 hello-world]# git remote add origin git@gitlab.lemon.com:java/hello-world.git[root@dev1 hello-world]# git push origin master[root@dev1 hello-world]# git tag -a &quot;v1.1&quot; -m &quot;v1.1&quot;[root@dev1 hello-world]# git push origin v1.1</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxlgnnsj61050nkq4x02.jpg" alt="image-20200611163415669"></p><h4 id="4-在jenkins上拉取gitlab代码后手动编译成war包"><a href="#4-在jenkins上拉取gitlab代码后手动编译成war包" class="headerlink" title="4. 在jenkins上拉取gitlab代码后手动编译成war包"></a>4. 在jenkins上拉取gitlab代码后手动编译成war包</h4><ul><li><p>安装maven，由于我之前就安装过了 <code>JDK</code>  和  <code>maven</code>，所以这里就不用安装了，直接跳过</p></li><li><p>克隆刚才上传的 java 项目 并 手动编译成war包</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># git clone git@gitlab.lemon.com:java/hello-world.git[root@jenkins ~]# cd hello-world/[root@jenkins hello-world]# mvn package -D maven.test.skip=true      #-D 跳过测试用例</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxpspj5j314b0b875d.jpg" alt="image-20200523103930568"></p><ul><li>将其编译好的 <code>war包</code>  <code>scp</code> 到web节点的对应位置下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止两台tomcat服务[root@web01 ~]# /usr/local/tomcat/bin/shutdown.sh#删除tomcat默认页面[root@jenkins hello-world]# for i in 192.168.2.&#123;4..5&#125;;do ssh root@$i &quot;rm -rf /usr/local/tomcat/webapps/ROOT&quot;; done#将编译好的test1.war包scp至web节点上[root@jenkins hello-world]# for i in 192.168.2.&#123;4..5&#125;;do scp target/test1.war root@$i:/usr/local/tomcat/webapps/ROOT.war; done#查看war包是否拷贝过去[root@jenkins hello-world]# for i in 192.168.2.&#123;4..5&#125;;do ssh root@$i &quot;ls -h /usr/local/tomcat/webapps/ROOT*&quot;; done/usr/local/tomcat/webapps/ROOT.war/usr/local/tomcat/webapps/ROOT.war#启动两台tomcat服务；会自动生成一个ROOT网站目录[root@web01 ~]# /usr/local/tomcat/bin/startup.sh[root@web01 ~]# ll /usr/local/tomcat/webapps/总用量 32drwxr-x--- 14 root root  4096 6月  11 16:20 docsdrwxr-x---  6 root root    83 6月  11 16:20 examplesdrwxr-x---  5 root root    87 6月  11 16:20 host-managerdrwxr-x---  5 root root   103 6月  11 16:20 managerdrwxr-x---  4 root root    54 6月  11 17:00 ROOT-rw-r--r--  1 root root 24711 6月  11 16:59 ROOT.war</span></span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxve23zj30qu04rq2x.jpg" alt="image-20200523105432256"></p><p>==以上就是手动部署 java 代码的流程==</p><h3 id="3-jenkins-自动化部署-java-项目至web集群"><a href="#3-jenkins-自动化部署-java-项目至web集群" class="headerlink" title="3. jenkins 自动化部署 java 项目至web集群"></a>3. jenkins 自动化部署 java 项目至web集群</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2021/06/06/MySQL/"/>
      <url>/2021/06/06/MySQL/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、MySQL数据库概念"><a href="#一、MySQL数据库概念" class="headerlink" title="一、MySQL数据库概念"></a>一、MySQL数据库概念</h1><blockquote><p>数据库（Database）</p></blockquote><p>数据库, 简而言之可视为电子化的文件柜—存储电子文件的处所, 用户可以对文件中的数据运行新增、截取、更新、删除等操作。</p><p>所谓 “数据库” 系以一定方式储存在一起、能予多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。</p><blockquote><p>数据库架构</p></blockquote><p>数据库的架构可以大致区分为三个概括层次：内层、概念层和外层。</p><ul><li><p>概念层：介于两者之间的间接层</p></li><li><p>外层：最接近用户，即有关个别用户观看数据的方式。</p></li><li><p>内层：最接近实际存储体，亦即有关数据的实际存储方式。</p></li></ul><h2 id="1-数据库管理系统（DBMS）"><a href="#1-数据库管理系统（DBMS）" class="headerlink" title="1. 数据库管理系统（DBMS）"></a>1. 数据库管理系统（DBMS）</h2><blockquote><p>数据库管理系统（Database Management System，简称DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能</p><p>数据库管理系统主要分为以下两类：</p></blockquote><h3 id="关系型数据库-RDB"><a href="#关系型数据库-RDB" class="headerlink" title="关系型数据库 RDB"></a>关系型数据库 RDB</h3><blockquote><p>关系数据库是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</p></blockquote><p>典型代表有：MySQL、Oracle、Microsoft SQL Server、Access及PostgreSQL等</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vgqbdn5j30q30fagoi.jpg" alt="image-20200822140302863"></p><p><strong>优点：</strong></p><p>1、易于维护：都是使用表结构，格式一致；</p><p>2、使用方便：SQL语言通用，可用于复杂查询；</p><p>3、复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</p><p><strong>缺点：</strong></p><p>1、因为事务所以读写性能比较差，尤其是海量数据的高效率读写；</p><p>2、固定的表结构，灵活度稍欠；</p><p>3、高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</p><h3 id="非关系型数据库-NoSQL"><a href="#非关系型数据库-NoSQL" class="headerlink" title="非关系型数据库 NoSQL"></a>非关系型数据库 NoSQL</h3><blockquote><p>非关系型数据库是对不同于传统的关系数据库的数据库管理系统的统称,与关系数据库最大的不同点是不使用SQL作为查询语言</p></blockquote><p>典型代表有：BigTable（Google）、Cassandra、MongoDB、CouchDB；</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vh20j3zj30t00fljwk.jpg" alt="image-20200822141054526"></p><p><strong>优点：</strong></p><p>1、存储数据的格式可以是key,value形式  文档形式  图片形式等等, 使用灵活, 应用场景广泛, 而关系型数据库则只支持基础类型。</p><p>2、速度快：nosql可以使用硬盘或者内存作为载体，而关系型数据库只能使用硬盘。</p><p>3、成本低：nosql数据库部署简单，基本都是开源软件。</p><p><strong>缺点：</strong></p><p>1、没有标准化</p><p>2、不提供sql支持，学习和使用成本较高。</p><p>3、数据结构相对复杂，复杂查询方面稍欠。</p><h3 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h3><blockquote><p>关系型数据库管理系统的具体应用场景和应用领域</p></blockquote><ul><li><p>sql server是微软公司的产品，主要应用于大中型企业；如联想、方正等</p></li><li><p>oracle主要用于银行、铁路、飞机场等。该数据库功能强大，软件费用高。也是甲骨文公司的产品。</p></li><li><p>mysql主要用于大型门户，例如搜狗、新浪等，它主要的优势就是开放源代码，因为开放源代码这个数据库是免费的，他现在是甲骨文公司的产品。</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vhdtyfwj30nn0ko7e8.jpg" alt="image-20200822142349042"></p><h2 id="2-关系型数据库遵循ACID规则"><a href="#2-关系型数据库遵循ACID规则" class="headerlink" title="2. 关系型数据库遵循ACID规则"></a>2. 关系型数据库遵循ACID规则</h2><blockquote><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：</p></blockquote><h3 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h3><p>事务可以是n条sql语句；n &gt;= 0 。</p><p>不是所有数据库引擎支持事务，InnoDB引擎支持事务处理。</p><p>事务就是由一组SQL语句组成的，保证一组SQL语句要么全部执行成功，要么全部执行失败，以此维护数据的完整性。也就是要么都成功要么都失败。</p><h3 id="事务的四大特性-transaction"><a href="#事务的四大特性-transaction" class="headerlink" title="事务的四大特性(transaction)"></a>事务的四大特性(transaction)</h3><p><strong>关系型数据库遵循 ACID 规则，和现实世界中的交易很类似，它有如下四个特性：</strong></p><p>==1. A (Atomicity) 原子性==</p><p>一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间的某个环节上。事务在执行过程中如果发生错误，就会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有被执行过一样。<br>比如银行转账：从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么都完成，要么都不完成；如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><p>==2. C (Consistency) 一致性==</p><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br>例如：现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，总和不会变；否则事务失败。</p><p>==3. I (Isolation) 独立性；也叫隔离性==</p><p>所谓的独立性是指并发多个事务之间保持数据的隔离，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。<br>比如：现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p><p>==4. D (Durability) 持久性==</p><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h3 id="没有事务隔离会怎样？"><a href="#没有事务隔离会怎样？" class="headerlink" title="没有事务隔离会怎样？"></a>没有事务隔离会怎样？</h3><p>脏读：比如事务A读到未提交事务B修改的数据，如果此时事务B中途执行失败回滚，那么此时事务A读取到的就是脏数据。再比如事务A对money进行修改，此时事务B读取到事务A的更新结果，但是如果后面事务A回滚，那么事务B读取到的就是脏数据了。</p><p>不可重复读：同一个事务中，对同一份数据读取的结果不一致。事务A在事务B对数据更新前进行读取，然后事务B更新提交，事务A再次读取，这时候两次读取的数据不同。</p><p>幻读：同一个事务中，同一个查询多次返回的结果不一样。事务B查询表的记录数，然后事务A对表插入一条记录，接着事务B再次查询发现记录数不同。</p><h3 id="他们之间的区别"><a href="#他们之间的区别" class="headerlink" title="他们之间的区别"></a>他们之间的区别</h3><p>==脏读和不可重复读：==脏读是zz事务读取了还未提交事务的更新数据。不可重复读是同一个事务中，几次读取的数据不同。</p><p>==不可重复读和幻读的区别：==都是在同一个事务中，前者是几次读取数据不同，后者是几次读取数据整体不同；大致的区别在于不可重复读是由于另一个事务对数据的更改所造成的，而幻读是由于另一个事务插入或删除引起的。</p><h3 id="隔离级别-重点"><a href="#隔离级别-重点" class="headerlink" title="隔离级别(重点)"></a>隔离级别(重点)</h3><table><thead><tr><th>隔离级别</th><th>作用</th></tr></thead><tbody><tr><td>Serializable(串行化)</td><td>避免脏读、不可重复读、幻读</td></tr><tr><td>Repeatable(可重复读)</td><td>避免脏读、不可重复读（默认）</td></tr><tr><td>Read committed(读已提交）</td><td>避免脏读</td></tr><tr><td>Read uncommitted(读未提交)</td><td>none</td></tr></tbody></table><h2 id="3-MySQL三大范式"><a href="#3-MySQL三大范式" class="headerlink" title="3. MySQL三大范式"></a>3. MySQL三大范式</h2><blockquote><p>分别是：原子性，唯一性，冗余性</p></blockquote><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>1NF是对属性的 <strong>原子性</strong>，要求属性具有原子性，不可再分解；</p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>2NF是对记录的 <strong>惟一性</strong>，要求记录有惟一标识，即实体的惟一性，即不存在部分依赖；</p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>3NF是对字段的 <strong>冗余性</strong>，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</p><h2 id="4-Mysql整体架构（重点）"><a href="#4-Mysql整体架构（重点）" class="headerlink" title="4. Mysql整体架构（重点）"></a>4. Mysql整体架构（重点）</h2><h3 id="MySQL架构图"><a href="#MySQL架构图" class="headerlink" title="MySQL架构图"></a>MySQL架构图</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vhjwgttj31110mde0w.jpg" alt="image-20200822144639498"></p><h3 id="MySQL组件作用"><a href="#MySQL组件作用" class="headerlink" title="MySQL组件作用"></a>MySQL组件作用</h3><p><strong>1、连接池（connectors）：</strong>最上层负责和客户端进行连接，比如jdbc，odbj这样的数据库连接的API，在这一层有连接池的概念，类似于线程池，连接池可以同时处理很多个数据库请求。同时这一层有SSL的安全概念，可以确保连接是安全的。</p><p>==一句话，可以对这个产品进行二次开发及通过这个api接口去操作这个数据。==</p><p><strong>2、SQL接口（SQL Interface）：</strong>当SQL语句进入MySQL后, 会先到SQL接口中，这一层是封装层，将传过来的SQL语句拆散，将底层的结果封装成SQL的数据格式。</p><p>==一句话，就是对SQL语句进行封装，如果不封装，底层就不知道这条SQL语句是什么意思。==</p><p><strong>3、解析器（parser）：</strong>这一层负责将SQL语句进行拆分，验证，如果语句有问题那么就返回错误，如果没问题就继续向下执行。</p><p>==一句话，检查客户端敲的SQL语句是否正确。==</p><p><strong>4、优化器（Optimizer）：</strong>对SQL查询的结果优化处理,产生多种执行计划,最终数据库会选择最优化的方案去执行,尽快返会结果</p><p>==比如select a,b from c where d, 在这里会先查询c表中符合d的数据并将他们的ab项进行投影, 返回结果, 并不会直接把整张表查出==</p><p><strong>5、缓存（caches &amp;Buffers）：</strong>对要查询的SQL语句进行hash后缓存，如果下一次是相同的查询语句，则会直接返回结果。</p><p>==他的主要作用就是加快查询速度。==</p><p><strong>6、存储引擎（pluggable Storage Englnes）：</strong>MySQL有很多种存储引擎，每一种存储引擎有不同的特性，他们负责组织文件的存放形式，位置，访问文件的方法等等。==比较常用的有innoDB，MyISAM，MEMORY等；==</p><p><strong>7、文件系统（File System）：</strong>真正存放物理文件的单位；</p><h2 id="5-MySQL常见的表引擎"><a href="#5-MySQL常见的表引擎" class="headerlink" title="5. MySQL常见的表引擎"></a>5. MySQL常见的表引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><blockquote><p>事务型速记的首选引擎，支持ACID事务，支持行级锁定，MySQL5.5成为默认数据库引擎</p></blockquote><p>（1）配合一些热备工具可以支持在线热备份；</p><p>（2）可以通过自动增长列，方法是auto_increment。</p><p>（3）使用的锁粒度为行级锁，可以支持更高的并发；</p><p>（4）支持外键约束；外键约束其实降低了表的查询速度，但是增加了表之间的耦合度。</p><p>（5）支持事务。默认的事务隔离级别为可重复度，通过MVCC（并发版本控制）来实现的。</p><p>（6）在InnoDB中存在着缓冲管理，通过缓冲池，将索引和数据全部缓存起来，加快查询的速度；</p><p>（7）对于InnoDB类型的表，所有的数据按照主键来组织。数据和索引放在一块，都位于B+树的叶子节点上；</p><h3 id="Myisam"><a href="#Myisam" class="headerlink" title="Myisam"></a>Myisam</h3><blockquote><p>使用这个存储引擎，每个MyISAM在磁盘上存储成三个文件。</p></blockquote><p>（1）frm文件：存储表的定义数据</p><p>（2）MYD文件：存放表具体记录的数据</p><p>（3）MYI文件：存储索引</p><h3 id="对比-InnoDB-和-Myisam"><a href="#对比-InnoDB-和-Myisam" class="headerlink" title="对比 InnoDB 和 Myisam"></a>对比 InnoDB 和 Myisam</h3><table><thead><tr><th>功能</th><th>MyISAM</th><th>InnoDB</th><th>MEMORY</th></tr></thead><tbody><tr><td>功能限制</td><td>256TB</td><td>64TB</td><td>RAM</td></tr><tr><td>支持事务</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>支持全文索引</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>支持B+树索引</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>支持哈希索引</td><td>NO</td><td>NO</td><td>YES</td></tr><tr><td>支持集群索引</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>支持数据索引</td><td>NO</td><td>YES</td><td>YES</td></tr><tr><td>支持数据压缩</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>空间使用率</td><td>低</td><td>N/A</td><td>高</td></tr><tr><td>支持外键</td><td>NO</td><td>YES</td><td>NO</td></tr></tbody></table><h1 id="二、MySQL-安装部署"><a href="#二、MySQL-安装部署" class="headerlink" title="二、MySQL 安装部署"></a>二、MySQL 安装部署</h1><blockquote><p>MySQL官网地址：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p></blockquote><h2 id="1、初始化环境"><a href="#1、初始化环境" class="headerlink" title="1、初始化环境"></a>1、初始化环境</h2><table><thead><tr><th>系统类型</th><th>IP地址</th><th>主机名</th><th>所需软件</th><th>硬件</th></tr></thead><tbody><tr><td>Centos 7.4 1708 64bit</td><td>192.168.1.1</td><td>Mysql</td><td>mysql-5.7.12.tar.gzboost_1_59_0.tar.bz2</td><td>内存：2G     CPU核心：2</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 修改主机名</span><br><span class="line">[root@localhost ~]<span class="comment"># hostnamectl set-hostname mysql &amp;&amp; logout</span></span><br><span class="line"></span><br><span class="line">// 关闭firewald &amp; selinux</span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># setenforce 0</span></span><br><span class="line"></span><br><span class="line">// 添加mysql用户和组</span><br><span class="line">[root@mysql ~]<span class="comment"># groupadd mysql &amp;&amp; useradd -r -g mysql mysql</span></span><br><span class="line"></span><br><span class="line">// 移除系统自带数据库服务（没有请忽略）</span><br><span class="line">[root@mysql ~]<span class="comment"># yum -y remove mysql-* boost-*</span></span><br><span class="line">[root@mysql ~]<span class="comment"># rpm -qa mysql</span></span><br><span class="line">[root@mysql ~]<span class="comment"># rpm -qa boost</span></span><br></pre></td></tr></table></figure><h2 id="2、下载Mysql包"><a href="#2、下载Mysql包" class="headerlink" title="2、下载Mysql包"></a>2、下载Mysql包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 下载</span><br><span class="line">[root@mysql ~]<span class="comment"># cd /usr/local/src</span></span><br><span class="line">[root@mysql src]<span class="comment"># wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26.tar.gz</span></span><br><span class="line">[root@mysql src]<span class="comment"># ll -lrth</span></span><br><span class="line">总用量 52M</span><br><span class="line">-rw-r--r-- 1 root root 52M 4月  13 2019 mysql-5.7.26.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3、安装相关依赖包"><a href="#3、安装相关依赖包" class="headerlink" title="3、安装相关依赖包"></a>3、安装相关依赖包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql src]<span class="comment"># yum -y install cmake gcc gcc-c++ ncurses-devel bison zlib libxml openssl automake autoconf make libtool bison-devel libaio-devel</span></span><br></pre></td></tr></table></figure><h2 id="4、安装Boost"><a href="#4、安装Boost" class="headerlink" title="4、安装Boost"></a>4、安装Boost</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 下载boost包</span><br><span class="line">[root@mysql src]<span class="comment"># wget http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz</span></span><br><span class="line">[root@mysql src]<span class="comment"># ll -lrth</span></span><br><span class="line">总用量 132M</span><br><span class="line">-rw-r--r-- 1 root root 80M 8月  13 2015 boost_1_59_0.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 52M 4月  13 2019 mysql-5.7.26.tar.gz</span><br><span class="line"></span><br><span class="line">// 安装boost</span><br><span class="line">[root@mysql src]<span class="comment"># tar -xf boost_1_59_0.tar.gz &amp;&amp; mv boost_1_59_0 /usr/local/boost-1.59.0</span></span><br><span class="line">[root@mysql src]<span class="comment"># ll -lrth /usr/local/boost-1.59.0/</span></span><br><span class="line">总用量 108K</span><br><span class="line">drwxr-xr-x  10 501 games  190 8月  11 2015 tools</span><br><span class="line">drwxr-xr-x   2 501 games  141 8月  11 2015 status</span><br><span class="line">-rw-r--r--   1 501 games 2.6K 8月  11 2015 rst.css</span><br><span class="line">drwxr-xr-x   4 501 games  159 8月  11 2015 more</span><br><span class="line">-rw-r--r--   1 501 games 1.4K 8月  11 2015 LICENSE_1_0.txt</span><br><span class="line">-rw-r--r--   1 501 games  11K 8月  11 2015 Jamroot</span><br><span class="line">-rw-r--r--   1 501 games  291 8月  11 2015 INSTALL</span><br><span class="line">-rw-r--r--   1 501 games 5.4K 8月  11 2015 index.html</span><br><span class="line">-rw-r--r--   1 501 games  769 8月  11 2015 index.htm</span><br><span class="line">-rwxr-xr-x   1 501 games  11K 8月  11 2015 bootstrap.sh</span><br><span class="line">-rw-r--r--   1 501 games 2.5K 8月  11 2015 bootstrap.bat</span><br><span class="line">-rw-r--r--   1 501 games 6.2K 8月  11 2015 boost.png</span><br><span class="line">-rw-r--r--   1 501 games  989 8月  11 2015 boost.css</span><br><span class="line">-rw-r--r--   1 501 games  22K 8月  11 2015 boostcpp.jam</span><br><span class="line">-rw-r--r--   1 501 games  850 8月  11 2015 boost-build.jam</span><br><span class="line">drwx------   7 501 games   84 8月  12 2015 doc</span><br><span class="line">drwx------ 116 501 games 4.0K 8月  12 2015 libs</span><br><span class="line">drwxr-xr-x 105 501 games 8.0K 8月  12 2015 boost</span><br></pre></td></tr></table></figure><h2 id="5、编译安装MySQL"><a href="#5、编译安装MySQL" class="headerlink" title="5、编译安装MySQL"></a>5、编译安装MySQL</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 解压MySQL</span><br><span class="line">[root@mysql src]<span class="comment"># tar -xf mysql-5.7.26.tar.gz -C ./ &amp;&amp; cd mysql-5.7.26/</span></span><br><span class="line"></span><br><span class="line">// 编译安装MySQL</span><br><span class="line">[root@mysql mysql-5.7.26]<span class="comment"># cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span></span><br><span class="line">-DMYSQL_DATADIR=/usr/<span class="built_in">local</span>/mysql/data -DWITH_BOOST=/usr/<span class="built_in">local</span>/boost-1.59.0 \</span><br><span class="line">-DSYSCONFDIR=/etc -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 -DMYSQL_USER=mysql -DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 -DENABLE_DOWNLOADS=1 -DDOWNLOAD_BOOST=1 \</span><br><span class="line">&amp;&amp; make -j `cat /proc/cpuinfo | grep processor| wc -l` &amp;&amp; make install &amp;&amp; <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">// 参数含义</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql          [MySQL安装的根目录]</span><br><span class="line">-DMYSQL_DATADIR=/mydata/mysql/data               [MySQL数据库文件存放目录]</span><br><span class="line">-DDEFAULT_CHARSET=utf8                           [设置默认字符集为utf8]</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci              [设置默认字符校对]</span><br><span class="line">-DMYSQL_TCP_PORT=3306                            [MySQL的监听端口]</span><br><span class="line">-DMYSQL_USER=mysql                               [MySQL用户名]    </span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1                   [安装MySQL的myisam数据库引擎]</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1                 [安装MySQL的innodb数据库引擎]</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1                  [安装MySQL的archive数据库引擎]</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1      [安装MySQL的blackhole数据库引擎]</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1                   [安装MySQL的memory数据库引擎]</span><br><span class="line">-DENABLE_DOWNLOADS=1                             [编译时允许自主下载相关文件]</span><br><span class="line">-DDOWNLOAD_BOOST=1      [允许下载BOOST]</span><br><span class="line">-DWITH_BOOST=/usr/<span class="built_in">local</span>/boost      [指定系统中存在的BOOST]</span><br><span class="line">-DSYSCONFDIR=/etc                                [MySQL配置文件所在目录]</span><br><span class="line">-DWITH_READLINE=1                                [MySQL的readline library]</span><br><span class="line">-DMYSQL_UNIX_ADDR=/var/run/mysql/mysql.sock      [MySQL的通讯目录]</span><br><span class="line">-DENABLED_LOCAL_INFILE=1                         [启用加载本地数据]</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1           [启动mysql的分区存储结构]</span><br><span class="line">-DEXTRA_CHARSETS=all                             [使MySQL支持所有的扩展字符]</span><br><span class="line">-DWITH_DEBUG=0                                   [禁用调试模式]</span><br><span class="line">-DWITH_SSL:STRING=bundled                        [通讯时支持ssl协议]</span><br><span class="line">-DWITH_ZLIB:STRING=bundled                       [允许使用zlib library]</span><br></pre></td></tr></table></figure><h2 id="6、调整MySQL脚本程序"><a href="#6、调整MySQL脚本程序" class="headerlink" title="6、调整MySQL脚本程序"></a>6、调整MySQL脚本程序</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 拷贝MySQL的启动脚本</span><br><span class="line">[root@mysql ~]<span class="comment"># cp /usr/local/src/mysql-5.7.26/support-files/mysql.server /etc/init.d/</span></span><br><span class="line">[root@mysql ~]<span class="comment"># chmod +x /etc/init.d/mysql.server</span></span><br><span class="line"></span><br><span class="line">// 更改MySQL属主数组</span><br><span class="line">[root@mysql ~]<span class="comment"># chown -R mysql:mysql /usr/local/mysql</span></span><br><span class="line">[root@mysql ~]<span class="comment"># chown -R mysql:mysql /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line">// 编写服务控制脚本</span><br><span class="line">[root@mysql ~]<span class="comment"># cat &lt;&lt;END &gt;&gt;/usr/lib/systemd/system/mysqld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=mysqldapi</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.pid</span><br><span class="line">ExecStart=/etc/init.d/mysql.server start</span><br><span class="line">ExecReload=/etc/init.d/mysql.server restart</span><br><span class="line">ExecStop=/etc/init.d/mysql.server stop</span><br><span class="line">PrivateTmp=Flase</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">END</span><br><span class="line">[root@mysql ~]<span class="comment"># chmod a+x /usr/lib/systemd/system/mysqld.service</span></span><br><span class="line"></span><br><span class="line">// 注解：PrivateTmp=Flase   [此配置必须关闭，不然mysql连接文件mysql.sock文件会默认生成在以下位置/tmp/systemd-private-83bba738e8ff4837b5ae657eff983821-mysqld.service-BPxWpJ/tmp/mysql.sock，导致数据库无法连接，将此配置项关闭后，则文件正常生成在/tmp/mysql.sock。]</span><br><span class="line"></span><br><span class="line">// 添加MySQL环境变脸</span><br><span class="line">[root@mysql ~]<span class="comment"># echo &quot;export PATH=$PATH:/usr/local/mysql/bin/&quot; &gt;&gt; /etc/profile</span></span><br><span class="line">[root@mysql ~]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line">// 编写MySQL配置文件并创建相关目录</span><br><span class="line">[root@mysql ~]<span class="comment"># mkdir /usr/local/mysql/logs</span></span><br><span class="line">[root@mysql ~]<span class="comment"># chown mysql:mysql /usr/local/mysql/logs/</span></span><br><span class="line">[root@mysql ~]<span class="comment"># cat &lt;&lt;END &gt;/etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">log-error=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.log</span><br><span class="line">pid-file=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.pid</span><br><span class="line">skip-name-resolve</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">// 配置含义</span><br><span class="line">[mysqld]                            [声明区域]</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql                    [mysql的安装位置]</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data                    [mysql的数据库存放位置]</span><br><span class="line">port = 3306                        [mysql服务监听的端口]</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[mysql的模式]</span><br><span class="line">character_set_server=utf8                        [默认字符集]</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span>                [默认字符集]</span><br><span class="line">log-error=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.log            [指定日志文件位置]</span><br><span class="line">pid-file=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.pid            [指定运行服务所产生的pid文件位置]</span><br><span class="line">skip-name-resolve                    [跳过mysql的域名反向解析]</span><br></pre></td></tr></table></figure><h2 id="7、初始化MySQL数据库并启动服务"><a href="#7、初始化MySQL数据库并启动服务" class="headerlink" title="7、初始化MySQL数据库并启动服务"></a>7、初始化MySQL数据库并启动服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 初始化</span><br><span class="line">[root@mysql ~]<span class="comment"># mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql \</span></span><br><span class="line">--datadir=/usr/<span class="built_in">local</span>/mysql/data &amp;&amp; <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line">// 参数含义</span><br><span class="line">--initialize-insecure         [禁用mysql的密码策略（密码复杂性等）]</span><br><span class="line">--initialize-aize                   [是开启密码策略，自动生成密码在mysqld.log文件中]</span><br><span class="line">--user=mysql [运行的账户]</span><br><span class="line">--basedir=/usr/<span class="built_in">local</span>/mysql [mysql的安装位置]</span><br><span class="line">--datadir=/usr/<span class="built_in">local</span>/mysql/data[mysql数据库服务数据的物理存放路径]</span><br><span class="line"></span><br><span class="line">// 启动MySQL服务</span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl start mysqld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl enable mysqld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># netstat -utpln |grep mysqld</span></span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      46166/mysqld</span><br></pre></td></tr></table></figure><h2 id="8、修改MySQL密码并连接访问数据库"><a href="#8、修改MySQL密码并连接访问数据库" class="headerlink" title="8、修改MySQL密码并连接访问数据库"></a>8、修改MySQL密码并连接访问数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 设置MySQL密码</span><br><span class="line">[root@mysql ~]<span class="comment"># mysqladmin -uroot -p password &quot;abc123..&quot;</span></span><br><span class="line"></span><br><span class="line">// 连接数据库</span><br><span class="line">[root@mysql ~]<span class="comment"># mysql -uroot -pabc123..</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 9</span><br><span class="line">Server version: 5.7.26 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>==至此MySQL安装完毕==</p><h1 id="三、MySQL-配置文件详解"><a href="#三、MySQL-配置文件详解" class="headerlink" title="三、MySQL 配置文件详解"></a>三、MySQL 配置文件详解</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#user = mysql</span></span><br><span class="line">mysql以什么用户运行</span><br><span class="line"></span><br><span class="line"><span class="comment">#port = 3306   </span></span><br><span class="line">mysql运行在哪个端口</span><br><span class="line"></span><br><span class="line"><span class="comment">#datadir = /usr/loca/mysql/data/</span></span><br><span class="line">mysql的数据目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#socket=/tmp/mysql.sock</span></span><br><span class="line">mysql以socket方式运行的sock文件位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#symbolic-links=0</span></span><br><span class="line">是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启。</span><br><span class="line"></span><br><span class="line"><span class="comment">########基本配置########</span></span><br><span class="line"><span class="comment">#server-id = 11</span></span><br><span class="line">mysql的服务器分配id，在启用主从和集群的时候必须指定，每个节点必须不同</span><br><span class="line"></span><br><span class="line"><span class="comment">#bind_address = 10.166.224.32</span></span><br><span class="line">mysql监听的ip地址，如果是127.0.0.1，表示仅本机访问</span><br><span class="line"></span><br><span class="line"><span class="comment">#autocommit = 1</span></span><br><span class="line">数据修改是否自动提交，为0不自动提交</span><br><span class="line"></span><br><span class="line"><span class="comment">#character_set_server=utf8mb4</span></span><br><span class="line">服务器使用的字符集</span><br><span class="line"></span><br><span class="line"><span class="comment">#skip_name_resolve = 1</span></span><br><span class="line">禁用DNS主机名查找，启用以后用内网地址向mysqlslap请求响应快了一半</span><br><span class="line"></span><br><span class="line"><span class="comment">#max_connections = 800</span></span><br><span class="line">mysql最大连接数</span><br><span class="line"></span><br><span class="line"><span class="comment">#max_connect_errors = 10</span></span><br><span class="line">某台host连接错误次数等于max_connect_errors（默认10） ，主机<span class="string">&#x27;host_name&#x27;</span>再次尝试时被屏蔽；可有效反的防止dos攻击。</span><br><span class="line"></span><br><span class="line"><span class="comment">#transaction_isolation = READ-COMMITTED</span></span><br><span class="line">数据库事务隔离级别</span><br><span class="line">1.READ-UNCOMMITTED(读取未提交内容)级别</span><br><span class="line">2.READ-COMMITTED（读取提交内容）</span><br><span class="line">3.REPEATABLE-READ(可重读)</span><br><span class="line">4.SERIERLIZED(可串行化)</span><br><span class="line">默认级别REPEATABLE-READ</span><br><span class="line"></span><br><span class="line"><span class="comment">#explicit_defaults_for_timestamp = 1</span></span><br><span class="line">mysql中TIMESTAMP类型和其他的类型有点不一样(在没有设置explicit_defaults_for_timestamp=1的情况下）。</span><br><span class="line"></span><br><span class="line"><span class="comment">#join_buffer_size = 128M</span></span><br><span class="line">当我们的join是ALL,index,rang或者Index_merge的时候使用的buffer。 实际上这种join被称为FULL JOIN。</span><br><span class="line"></span><br><span class="line"><span class="comment">#tmp_table_size = 128M</span></span><br><span class="line">规定了内部内存临时表的最大值，每个线程都要分配。（实际起限制作用的是tmp_table_size和max_heap_table_size的最小值。）如果内存临时表超出了限制，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下。</span><br><span class="line"></span><br><span class="line"><span class="comment">#tmpdir = /dev/shm/mysql-tmp/</span></span><br><span class="line">保存临时文件的目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#max_allowed_packet = 16M</span></span><br><span class="line">mysql最大接受的数据包大小</span><br><span class="line"></span><br><span class="line"><span class="comment">#sql_mode = &quot;STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER&quot;</span></span><br><span class="line">sql_mode 模式，定义了你MySQL应该支持的sql语法，对数据的校验等等，限制一些所谓的‘不合法’的操作。</span><br><span class="line"></span><br><span class="line"><span class="comment">#interactive_timeout = 60</span></span><br><span class="line">服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。</span><br><span class="line"></span><br><span class="line"><span class="comment">#wait_timeout = 60</span></span><br><span class="line">服务器关闭非交互连接之前等待活动的秒数，在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。</span><br><span class="line"></span><br><span class="line"><span class="comment">#read_buffer_size = 16M</span></span><br><span class="line">读入缓冲区的大小，将对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。</span><br><span class="line"></span><br><span class="line"><span class="comment">#read_rnd_buffer_size = 32M</span></span><br><span class="line">随机读缓冲区大小，当按任意顺序读取行时（列如按照排序顺序）将分配一个随机读取缓冲区，进行排序查询时，MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度</span><br><span class="line"></span><br><span class="line"><span class="comment">#sort_buffer_size = 32M</span></span><br><span class="line">是一个connection级参数，在每个connection第一次需要使用这个buffer的时候，一次性分配设置的内存。</span><br><span class="line"></span><br><span class="line"><span class="comment">########日志配置########</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log_error = /data/local/mysql-5.7.19/log/mysql-error.log</span></span><br><span class="line">错误日志位置</span><br><span class="line"></span><br><span class="line">slow_query_log = 1</span><br><span class="line">是否开启慢查询日志收集</span><br><span class="line">slow_query_log_file = /data/<span class="built_in">local</span>/mysql-5.7.19/<span class="built_in">log</span>/mysql-slow.log</span><br><span class="line">慢查询日志位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_queries_not_using_indexes = 1</span></span><br><span class="line">是否记录未使用索引的语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_slow_admin_statements = 1</span></span><br><span class="line">慢查询也记录那些慢的optimize table，analyze table和alter table语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_slow_slave_statements = 1</span></span><br><span class="line">记录由Slave所产生的慢查询</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_throttle_queries_not_using_indexes = 10</span></span><br><span class="line">设定每分钟记录到日志的未使用索引的语句数目，超过这个数目后只记录语句数量和花费的总时间。</span><br><span class="line"></span><br><span class="line"><span class="comment">#expire_logs_days = 90</span></span><br><span class="line">日志自动过期清理天数</span><br><span class="line"></span><br><span class="line"><span class="comment">#long_query_time = 1</span></span><br><span class="line">设置记录慢查询超时时间</span><br><span class="line"></span><br><span class="line"><span class="comment">#min_examined_row_limit = 100</span></span><br><span class="line">查询检查返回少于该参数指定行的SQL不被记录到慢查询日志</span><br><span class="line"></span><br><span class="line"><span class="comment">########复制集配置########</span></span><br><span class="line"><span class="comment">#master_info_repository = TABLE</span></span><br><span class="line">从机保存主节点信息方式，设成file时 会生成master.info 和 relay-log.info2个文件，设成table，信息就会存在mysql.master_slave_info表中。不管是设置的哪种值，都不要移动或者编辑相关的文件和表。</span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log_info_repository = TABLE</span></span><br><span class="line">用于保存slave读取relay <span class="built_in">log</span>的位置信息，可选值为“FILE”、“TABLE”，以便crash重启后继续恢复。</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_bin = /data/local/mysql-5.7.19/log/mysql-bin</span></span><br><span class="line">binlog的保存位置，不能指定确定的文件名如mysql-bin.log，只能指定位置和前缀，会生成以前缀为开头的一系列文件；默认生成在data目录下。</span><br><span class="line"></span><br><span class="line"><span class="comment">#sync_binlog = 4</span></span><br><span class="line">这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。对于“sync_binlog”参数的各种设置的说明如下：</span><br><span class="line">sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘；sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘；在MySQL中系统默认的设置是sync_binlog=0，也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span><br><span class="line"></span><br><span class="line"><span class="comment">#gtid_mode = on</span></span><br><span class="line">启用gtid类型，否则就是普通的复制架构</span><br><span class="line"></span><br><span class="line"><span class="comment">#enforce_gtid_consistency = 1</span></span><br><span class="line">强制GTID的一致性</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_slave_updates</span></span><br><span class="line">slave更新是否记入日志，在做双主架构时异常重要，影响到双主架构是否能互相同步</span><br><span class="line">binlog_format = row；binlog日志格式，可选值“MIXED”、“ROW”、“STATEMENT”，在5.6版本之前默认为“STATEMENT”，5.6之后默认为“MIXED”；因为“STATEMENT”方式在处理一些“不确定”性的方法时会造成数据不一致问题，我们建议使用“MIXED”或者“ROW”。</span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log = /data/local/mysql-5.7.19/log/mysql-relay.log</span></span><br><span class="line">从机保存同步中继日志的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log_recovery = 1</span></span><br><span class="line">当slave从库宕机后，假如relay-log损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的relay-log，并且重新从master上获取日志，这样就保证了relay-log的完整性。</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog_gtid_simple_recovery = 1</span></span><br><span class="line">这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快。</span><br><span class="line"></span><br><span class="line"><span class="comment">#slave_skip_errors = ddl_exist_errors</span></span><br><span class="line">跳过指定error no类型的错误，设成all 跳过所有错误</span><br><span class="line"></span><br><span class="line"><span class="comment">########innodb引擎配置########</span></span><br><span class="line"></span><br><span class="line">innodb_page_size = 16K</span><br><span class="line">innodb每个数据页大小，这个参数在一开始初始化时就要加入my.cnf里，如果已经创建了表，再修改，启动MySQL会报错。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_size = 4G</span></span><br><span class="line">缓存innodb表的索引，数据，插入数据时的缓冲，专用mysql服务器设置的大小： 操作系统内存的70%-80%最佳。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_instances = 8</span></span><br><span class="line">可以开启多个内存缓冲池，把需要缓冲的数据<span class="built_in">hash</span>到不同的缓冲池，这样可以并行的内存读写</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_load_at_startup = 1</span></span><br><span class="line">默认为关闭OFF。如果开启该参数，启动MySQL服务时，MySQL将本地热数据加载到InnoDB缓冲池中。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_dump_at_shutdown = 1</span></span><br><span class="line">默认为关闭OFF。如果开启该参数，停止MySQL服务时，InnoDB将InnoDB缓冲池中的热数据保存到本地硬盘。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_lru_scan_depth = 2000</span></span><br><span class="line">根据 官方文档 描述，它会影响page cleaner线程每次刷脏页的数量， 这是一个每1秒 loop一次的线程。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_lock_wait_timeout = 5</span></span><br><span class="line">事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败；参数的时间单位是秒。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_io_capacity = 4000</span></span><br><span class="line"><span class="comment">#innodb_io_capacity_max = 8000</span></span><br><span class="line">这两个设置会影响InnoDB每秒在后台执行多少操作. 大多数写IO(除了写InnoDB日志)是后台操作的. 如果你深度了解硬件性能(如每秒可以执行多少次IO操作),则使用这些功能是很可取的,而不是让它闲着。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_flush_method = O_DIRECT</span></span><br><span class="line">默认值为 fdatasync. 如果使用 硬件RAID磁盘控制器, 可能需要设置为 O_DIRECT. 这在读取InnoDB缓冲池时可防止“双缓冲(double buffering)”效应,否则会在文件系统缓存与InnoDB缓存间形成2个副本(copy). 如果不使用硬件RAID控制器,或者使用SAN存储时, O_DIRECT 可能会导致性能下降。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_log_group_home_dir = /data/local/mysql-5.7.19/log/redolog/</span></span><br><span class="line">innodb重做日志保存目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_directory = /data/local/mysql-5.7.19/log/undolog/</span></span><br><span class="line">innodb回滚日志保存目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_logs = 128</span></span><br><span class="line">undo回滚段的数量， 至少大于等于35，默认128</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_tablespaces = 0</span></span><br><span class="line">用于设定创建的undo表空间的个数，在mysql_install_db时初始化后，就再也不能被改动了；默认值为0，表示不独立设置undo的tablespace，默认记录到ibdata中；否则，则在undo目录下创建这么多个undo文件，例如假定设置该值为4，那么就会创建命名为undo001~undo004的undo tablespace文件，每个文件的默认大小为10M。修改该值会导致Innodb无法完成初始化，数据库无法启动，但是另两个参数可以修改。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_flush_neighbors = 1</span></span><br><span class="line">InnoDB存储引擎在刷新一个脏页时，会检测该页所在区(extent)的所有页，如果是脏页，那么一起刷新。这样做的好处是通过AIO可以将多个IO写操作合并为一个IO操作。对于传统机械硬盘建议使用，而对于固态硬盘可以关闭。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_log_file_size = 4G</span></span><br><span class="line">这个值定义了日志文件的大小，innodb日志文件的作用是用来保存redo日志。一个事务对于数据或索引的修改往往对应到表空间中的随机的位置，因此当刷新这些修改到磁盘中就会引起随机的I/O，而随机的I/O往往比顺序的I/O更加昂贵的开销，因为随机的I/O需要更多的开销来定位到指定的位置。innodb使用日志来将随机的I/O转为顺序的I/O，只要日志文件是安全的，那么事务就是永久的，尽管这些改变还没有写到数据文件中，如果出现了当机或服务器断电的情况，那么innodb也可以通过日志文件来恢复以及提交的事务。但是日志文件是有一定的大小的，所以必须要把日志文件记录的改变写到数据文件中，innodb对于日志文件的操作是循环的，即当日志文件写满后，会将指针重新移动到文件开始的地方重新写，但是它不会覆盖那些还没有写到数据文件中的日志，因为这是唯一记录了事务持久化的记录；如果对 Innodb 数据表有大量的写入操作，那么选择合适的 innodb_log_file_size 值对提升MySQL性能很重要。然而设置太大了，就会增加恢复的时间，因此在MySQL崩溃或者突然断电等情况会令MySQL服务器花很长时间来恢复。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_log_buffer_size = 16M</span></span><br><span class="line">事务在内存中的缓冲。 分配原 则：控制在2-8M.这个值不用太多的。他里面的内存一般一秒钟写到磁盘一次。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_purge_threads = 4</span></span><br><span class="line">控制是否使用，使用几个独立purge线程（清除二进制日志）</span><br><span class="line"></span><br><span class="line">innodb_large_prefix = 1</span><br><span class="line">mysql在5.6之前一直都是单列索引限制767，起因是256×3-1。这个3是字符最大占用空间（utf8）。但是在5.6以后，开始支持4个字节的uutf8。255×4&gt;767, 于是增加了这个参数。这个参数默认值是OFF。当改为ON时，允许列索引最大达到3072；innodb_thread_concurrency = 64；InnoDB kernel并发最大的线程数。 1) 最少设置为(num_disks+num_cpus)*2。 2) 可以通过设置成1000来禁止这个限制。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_print_all_deadlocks = 1</span></span><br><span class="line">是否将死锁相关信息保存到MySQL 错误日志中</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_strict_mode = 1</span></span><br><span class="line">开启InnoDB严格检查模式，尤其采用了页数据压缩功能后，最好是开启该功能。开启此功能后，当创建表（CREATE TABLE）、更改表（ALTER TABLE）和创建索引（CREATE INDEX）语句时，如果写法有错误，不会有警告信息，而是直接抛出错误，这样就可直接将问题扼杀在摇篮里。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_sort_buffer_size = 64M</span></span><br><span class="line">ORDER BY 或者GROUP BY 操作的buffer缓存大小</span><br><span class="line"></span><br><span class="line"><span class="comment">########半同步复制配置########</span></span><br><span class="line"><span class="comment">#plugin_dir=/data/local/mysql-5.7.19/lib/plugin</span></span><br><span class="line">指定mysql的插件目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#plugin_load = &quot;rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so&quot;</span></span><br><span class="line">指定载入哪些插件</span><br><span class="line"></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_master_enabled = 1</span></span><br><span class="line">控制主库上是否开启semisync</span><br><span class="line"></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_slave_enabled = 1</span></span><br><span class="line">控制备库是否开启semisync</span><br><span class="line"></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_master_timeout = 5000</span></span><br><span class="line">单位毫秒，防止半同步复制在没有收到确认的情况下，发送堵塞。master在超时之前没有收到确认，将恢复到异步复制，继续执行半同步没有进行的操作。</span><br><span class="line"></span><br><span class="line"><span class="comment">#[mysqld-5.7]</span></span><br><span class="line">服务端</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_dump_pct = 40</span></span><br><span class="line">表示转储每个bp instance LRU上最热的page的百分比。通过设置该参数减少转储的page数</span><br><span class="line"></span><br><span class="line">innodb_page_cleaners = 4</span><br><span class="line">为了提升扩展性和刷脏效率，在5.7.4版本里引入了多个page cleaner线程。从而达到并行刷脏的效果；在该版本中，Page cleaner并未和buffer pool绑定，其模型为一个协调线程 + 多个工作线程，协调线程本身也是工作线程。因此如果innodb_page_cleaners设置为8，那么就是一个协调线程，加7个工作线程。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_log_truncate = 1</span></span><br><span class="line">是否开启在线回收（收缩）undo <span class="built_in">log</span>日志文件，支持动态设置</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_max_undo_log_size = 2G</span></span><br><span class="line">当超过这个阀值（默认是1G），会触发truncate回收（收缩）动作，truncate后空间缩小到10M</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_purge_rseg_truncate_frequency = 128</span></span><br><span class="line">控制回收（收缩）undo <span class="built_in">log</span>的频率。undo <span class="built_in">log</span>空间在它的回滚段没有得到释放之前不会收缩， 想要增加释放回滚区间的频率，就得降低设定值。</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog_gtid_simple_recovery=1</span></span><br><span class="line">这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快。该参数为真时，mysql-server只需打开最老的和最新的这2个binlog文件。</span><br><span class="line"></span><br><span class="line">log_timestamps=system</span><br><span class="line">在MySQL 5.7.2 新增了 log_timestamps 这个参数，该参数主要是控制 error <span class="built_in">log</span>、genera <span class="built_in">log</span>，等等记录日志的显示时间参数。 在 5.7.2 之后改参数为默认 UTC 这样会导致日志中记录的时间比中国这边的慢，导致查看日志不方便。修改为 SYSTEM 就能解决问题。</span><br><span class="line"></span><br><span class="line"><span class="comment">#transaction_write_set_extraction=MURMUR32</span></span><br><span class="line">这个神奇的参数5.7.6版本引入，用于定义一个记录事务的算法，这个算法使用<span class="built_in">hash</span>标识来记录事务。如果使用MGR，那么这个<span class="built_in">hash</span>值需要用于分布式冲突检测何处理，在64位的系统，官网建议设置该参数使用 XXHASH64 算法。如果线上并没有使用该功能，应该设为off。</span><br><span class="line"></span><br><span class="line"><span class="comment">#show_compatibility_56=on</span></span><br><span class="line">从mysql5.7.6开始information_schema.global_status已经开始被舍弃，为了兼容性，此时需要打开 show_compatibility_56。</span><br></pre></td></tr></table></figure><h1 id="四、SQL语句"><a href="#四、SQL语句" class="headerlink" title="四、SQL语句"></a>四、SQL语句</h1><blockquote><p>一般来讲SQL 语言主要分为三类:</p></blockquote><p>DML 数据操控 : 用来对数据进行操作，用于（表中的内容），代表指令为：insert（插入）、delete（删除）、update（更新）。</p><p>DCL 数据控制 : 主要是负责（用户）权限管理，代表指令为：grant（授权）、revoke（撤销授权）。</p><p>DDL 数据定义 : 维护储存数据的结构，用于（数据库、数据表），代表指令为：create（创建）、drop（删除）、alter（修改）。</p><h2 id="1、SQL语句规范"><a href="#1、SQL语句规范" class="headerlink" title="1、SQL语句规范"></a>1、SQL语句规范</h2><h3 id="SQL语句规范第一条-建库"><a href="#SQL语句规范第一条-建库" class="headerlink" title="SQL语句规范第一条(建库)"></a>SQL语句规范第一条(建库)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE oldboy CHARSET utf8mb4</span><br></pre></td></tr></table></figure><ol><li>关键字大写(非必须), 字面量小写(必须)</li><li>库名字, 只能是小写, 不能有数字开头, 不能是预留关键字</li><li>库名字必须和业务名有关, 例如his_user</li><li>必须加字符集</li></ol><h3 id="SQL语句规范第二条-建表"><a href="#SQL语句规范第二条-建表" class="headerlink" title="SQL语句规范第二条(建表)"></a>SQL语句规范第二条(建表)</h3><ol><li>关键字大写(非必须), 字面量小写(必须)</li><li>表名必须小写, 不能有数字开头, 不能是预留关键字</li><li>表名字必须和业务名有关</li><li>必须加存储引擎和字符集</li><li>适合的数据类型</li><li>必须要有主键</li><li>尽量非空选项</li><li>字段唯一性</li><li>必须加注释</li><li>避免使用外键</li><li>建立合理的索引</li></ol><h3 id="SQL语句规范第三条-增删改"><a href="#SQL语句规范第三条-增删改" class="headerlink" title="SQL语句规范第三条(增删改)"></a>SQL语句规范第三条(增删改)</h3><ol><li>insert语句按批量插入数据</li><li>update必须加where条件</li><li>delete尽量替换为update</li><li>如果有清空全表需求, 不要用delete, 推荐使用 truncate</li></ol><h3 id="SQL语句规范第四条-查询"><a href="#SQL语句规范第四条-查询" class="headerlink" title="SQL语句规范第四条(查询)"></a>SQL语句规范第四条(查询)</h3><ol><li>select语句避免使用 select *  from  t1; —-&gt;  select id,name from t1</li><li>select语句尽量加等值的where条件.例如 select * from t1 where id=20</li><li>select 语句对于范围查询, 例如 select * from t1 where id&gt;200; 尽量添加limit</li><li>select 的where 条件  不要使用 &lt;&gt;  like ‘%name’  not in  not exist</li><li>不要出现3表以上的表连接,避免子查询</li><li>where条件中不要出现函数操作</li></ol><h3 id="SQL语句规范第五条-数据类型"><a href="#SQL语句规范第五条-数据类型" class="headerlink" title="SQL语句规范第五条(数据类型)"></a>SQL语句规范第五条(数据类型)</h3><ol><li>合适长度</li><li>选择合适的数据类型</li><li>少于10位的数字int , 大于10位数 char, 例如手机号</li><li>在可变长度的存储时, 将来使用不同的数据类型, 对于索引树的高度是有影响的</li><li>char和varchar选择时, 字符长度一定不变的可以使用char, 可变的尽量使用varchar</li></ol><h2 id="2、MySQL数据类型和字段属性"><a href="#2、MySQL数据类型和字段属性" class="headerlink" title="2、MySQL数据类型和字段属性"></a>2、MySQL数据类型和字段属性</h2><blockquote><p>MySQL中的数据类型大的方面来分，可以分为：日期和时间、数值，以及字符串。下面就分开来进行总结。</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h4><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>3字节，日期，格式：2014-09-18</td></tr><tr><td>time</td><td>3字节，时间，格式：08:42:30</td></tr><tr><td>datetime</td><td>8字节，日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td>timestamp</td><td>4字节，自动存储记录修改的时间</td></tr><tr><td>year</td><td>1字节，年份</td></tr></tbody></table><h4 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h4><p><strong>整型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义（有符号）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节，范围（-128~127）</td></tr><tr><td>smallint</td><td>2字节，范围（-32768~32767）</td></tr><tr><td>mediumint</td><td>3字节，范围（-8388608~8388607）</td></tr><tr><td>int</td><td>4字节，范围（-2147483648~2147483647）</td></tr><tr><td>bigint</td><td>8字节，范围（+-9.22*10的18次方）</td></tr></tbody></table><p>上面定义的都是有符号的，当然了，也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了，比如：tinyint unsigned的取值范围为0~255。</p><p><strong>浮点型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m, d)</td><td>4字节，单精度浮点型，m总个数，d小数位</td></tr><tr><td>double(m, d)</td><td>8字节，双精度浮点型，m总个数，d小数位</td></tr><tr><td>decimal(m, d)</td><td>decimal是存储为字符串的浮点数</td></tr></tbody></table><p>我在MySQL中建立了一个表，有一列为float(5, 3)；做了以下试验：</p><p>1.插入123.45678，最后查询得到的结果为99.999；<br> 2.插入123.456，最后查询结果为99.999；<br> 3.插入12.34567，最后查询结果为12.346；</p><p>所以，在使用浮点型的时候，还是要注意陷阱的，要以插入数据库中的实际结果为准。</p><p><strong>字符串数据类型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>可变长度，最多65535个字符</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr></tbody></table><h4 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h4><ul><li><p>经常变化的字段用 varchar</p></li><li><p>知道固定长度的用 char</p></li><li><p>尽量用 varchar</p></li><li><p>超过 255 字符的只能用 varchar 或者 text</p></li><li><p>能用 varchar 的地方不用 text</p></li></ul><h3 id="数据类型属性"><a href="#数据类型属性" class="headerlink" title="数据类型属性"></a>数据类型属性</h3><h4 id="auto-increment"><a href="#auto-increment" class="headerlink" title="auto_increment"></a>auto_increment</h4><blockquote><p>auto_increment能为新插入的行赋一个唯一的整数标识符。为列赋此属性将为每个新插入的行赋值为上一次插入的ID+1。</p><p>MySQL要求将auto_increment属性用于作为主键的列。此外，每个表只允许有一个auto_increment列。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="type">smallint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key</span><br></pre></td></tr></table></figure><h4 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h4><blockquote><p>binary属性只用于char和varchar值。当为列指定了该属性时，将以区分大小写的方式排序。与之相反，忽略binary属性时，将使用不区分大小写的方式排序。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname <span class="type">char</span>(<span class="number">25</span>) <span class="type">binary</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><blockquote><p>default属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为MySQL不允许插入函数或表达式值。此外，此属性无法用于BLOB或TEXT列。如果已经为此列指定了NULL属性，没有指定默认值时默认值将为NULL，否则默认值将依赖于字段的数据类型。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribed enum(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><blockquote><p>如果所有其他因素都相同，要加速数据库查询，使用索引通常是最重要的一个步骤。索引一个列会为该列创建一个有序的键数组，每个键指向其相应的表行。以后针对输入条件可以搜索这个有序的键数组，与搜索整个未索引的表相比，这将在性能方面得到极大的提升。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees</span><br><span class="line">(</span><br><span class="line">id <span class="type">varchar</span>(<span class="number">9</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">firstname <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">lastname <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">email <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">phone <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">index lastname(lastname),</span><br><span class="line"><span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当然也可以利用MySQL的create index命令在创建表之后增加索引:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index lastname <span class="keyword">on</span> employees (lastname(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">这一次只索引了名字的前<span class="number">7</span>个字符，因为可能不需要其它字母来区分不同的名字。因为使用较小的索引时性能更好，所以应当在实践中尽量使用小的索引。</span><br></pre></td></tr></table></figure><h4 id="not-null"><a href="#not-null" class="headerlink" title="not null"></a>not null</h4><blockquote><p>如果将一个列定义为not null，将不允许向该列插入null值。建议在重要情况下始终使用not null属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users (name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h4 id="null（默认就是）"><a href="#null（默认就是）" class="headerlink" title="null（默认就是）"></a>null（默认就是）</h4><blockquote><p>为列指定null属性时, 该列可以保持为空, 而不论行中其它列是否已经被填充。记住, null精确的说法是“无”, 而不是空字符串或0</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users (name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h4><blockquote><p>primary key属性用于确保指定行的唯一性。指定为主键的列中, 值不能重复, 也不能为空。为指定为主键的列赋予auto_increment属性是很常见的，因为此列不必与行数据有任何关系，而只是作为一个唯一标识符。</p></blockquote><p>主键又分为以下两种：</p><p>(1)单字段主键</p><p>如果输入到数据库中的每行都已经有不可修改的唯一标识符，一般会使用单字段主键。注意，此主键一旦设置就不能再修改。</p><p>(2)多字段主键</p><p>如果记录中任何一个字段都不可能保证唯一性，就可以使用多字段主键。这时，多个字段联合起来确保唯一性。如果出现这种情况，指定一个auto_increment整数作为主键是更好的办法。</p><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><blockquote><p>被赋予unique属性的列将确保所有值都有不同的值, 只是null值可以重复。一般会指定一个列为unique, 以确保该列的所有值都不同。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">unique</span></span><br></pre></td></tr></table></figure><h4 id="zerofill"><a href="#zerofill" class="headerlink" title="zerofill"></a>zerofill</h4><blockquote><p>zerofill属性可用于任何数值类型，用0填充所有剩余字段空间。例如，无符号int的默认宽度是10；因此，当“零填充”的int值为4时，将表示它为0000000004。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderid <span class="type">int</span> unsigned zerofill <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="有兴趣可以去了解下"><a href="#有兴趣可以去了解下" class="headerlink" title="有兴趣可以去了解下"></a>有兴趣可以去了解下</h3><h4 id="MySQL日期数据类型、时间类型使用总结"><a href="#MySQL日期数据类型、时间类型使用总结" class="headerlink" title="MySQL日期数据类型、时间类型使用总结"></a><a href="https://www.jb51.net/article/23966.htm">MySQL日期数据类型、时间类型使用总结</a></h4><h4 id="MySQL数据类型varchar详解"><a href="#MySQL数据类型varchar详解" class="headerlink" title="MySQL数据类型varchar详解"></a><a href="https://www.jb51.net/article/48170.htm">MySQL数据类型varchar详解</a></h4><h4 id="MySQL-数据类型-详解"><a href="#MySQL-数据类型-详解" class="headerlink" title="MySQL 数据类型 详解"></a><a href="https://www.jb51.net/article/20555.htm">MySQL 数据类型 详解</a></h4><h4 id="MySQL-数据类型-大全"><a href="#MySQL-数据类型-大全" class="headerlink" title="MySQL 数据类型 大全"></a><a href="https://www.jb51.net/article/17764.htm">MySQL 数据类型 大全</a></h4><h4 id="深入了解mysql的4种常用、重要的数据类型"><a href="#深入了解mysql的4种常用、重要的数据类型" class="headerlink" title="深入了解mysql的4种常用、重要的数据类型"></a><a href="https://www.jb51.net/article/49770.htm">深入了解mysql的4种常用、重要的数据类型</a></h4><h4 id="MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）"><a href="#MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）" class="headerlink" title="MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）"></a><a href="https://www.jb51.net/article/48423.htm">MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）</a></h4><h4 id="Mysql支持的数据类型-列类型总结"><a href="#Mysql支持的数据类型-列类型总结" class="headerlink" title="Mysql支持的数据类型(列类型总结)"></a><a href="https://www.jb51.net/article/99932.htm">Mysql支持的数据类型(列类型总结)</a></h4><h4 id="mysql-数据类型TIMESTAMP"><a href="#mysql-数据类型TIMESTAMP" class="headerlink" title="mysql 数据类型TIMESTAMP"></a><a href="https://www.jb51.net/article/52252.htm">mysql 数据类型TIMESTAMP</a></h4><h4 id="MariaDB-MySQL-创建、删除、选择及数据类型使用详解"><a href="#MariaDB-MySQL-创建、删除、选择及数据类型使用详解" class="headerlink" title="MariaDB(MySQL)创建、删除、选择及数据类型使用详解"></a><a href="https://www.jb51.net/article/92870.htm">MariaDB(MySQL)创建、删除、选择及数据类型使用详解</a></h4><h4 id="mysql数据类型和字段属性原理与用法详解"><a href="#mysql数据类型和字段属性原理与用法详解" class="headerlink" title="mysql数据类型和字段属性原理与用法详解"></a><a href="https://www.jb51.net/article/184751.htm">mysql数据类型和字段属性原理与用法详解</a></h4><h2 id="3、SQL语句基本使用"><a href="#3、SQL语句基本使用" class="headerlink" title="3、SQL语句基本使用"></a>3、SQL语句基本使用</h2><h3 id="基本的增删改查"><a href="#基本的增删改查" class="headerlink" title="基本的增删改查"></a>基本的增删改查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line">1、安装完mysql之后，mysql数据库默认密码为空，因次需要给数据库修改密码</span><br><span class="line">mysqladmin -u  root  -p  password <span class="string">&quot;abc123..&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、连接并登录到mysql操作环境</span><br><span class="line">mysql -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、退出mysql操作环境</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、查看有哪些数据库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、查看数据库详情信息</span><br><span class="line">mysql&gt; show create database mysql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、创建数据库</span><br><span class="line"><span class="comment"># 有两种格式</span></span><br><span class="line">- 指定字符集的创建格式 : create database 库名</span><br><span class="line">- 使用默认的字符集创建格式 : create database 库名 character <span class="built_in">set</span> 字符集;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第一种格式创建数据库</span></span><br><span class="line">mysql&gt; create database lemon;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第二种格式创建数据库</span></span><br><span class="line">mysql&gt; create database db1 character <span class="built_in">set</span> gbk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、进入指定数据库</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8、删除数据库</span><br><span class="line">mysql&gt; drop database db1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、查看库下的所有数据表</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10、查看某个表的详细信息</span><br><span class="line">mysql&gt; show create table proc\G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11、查看表结构, 可以缩写成desc</span><br><span class="line">mysql&gt; describe user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12、创建数据表</span><br><span class="line"><span class="comment"># 两种创建格式</span></span><br><span class="line">- 使用默认的字符集|引擎 : create table 表名 (字段名 数据类型 [数据属性], 字段名 数据类型 [数据属性], ......);</span><br><span class="line">- 指定表的字符集|引擎 : create table 表名 (字段名 数据类型 [数据属性], ......) engine=myisam charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第一种格式在lemon库下创建user表</span></span><br><span class="line">mysql&gt; create table user (name char(16) not null, passwd char(48) default <span class="string">&#x27;250&#x27;</span>, primary key (name));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第二种格式在lemon库下创建person表</span></span><br><span class="line">mysql&gt; create table lemon.person (id int(10), name varchar(10), primary key (id)) engine=myisam charset=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13、向lemon库的user表插入数据，</span><br><span class="line"><span class="comment"># 三种插入方法格式</span></span><br><span class="line">- 全表插入格式 : insert into 表名 values (值1,值2,值3, ....);</span><br><span class="line">- 全表批量插入格式 : insert into 表名 values (值1,值2...),( 值1,值2...),( 值1,值2...);</span><br><span class="line">- 指定字段插入格式 : insert into 表名 (列名1，列名2) values (值1,值2);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先查看下user表的字段结构</span></span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(16) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全表插入格式</span></span><br><span class="line">mysql&gt; insert into user(name,passwd) values (<span class="string">&#x27;laoda&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全表批量插入格式</span></span><br><span class="line">mysql&gt; insert into user values (<span class="string">&quot;laoer&quot;</span>,<span class="string">&quot;123123&quot;</span>),(<span class="string">&#x27;laosan&#x27;</span>,<span class="string">&#x27;456456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字段插入格式, password:密文</span></span><br><span class="line">mysql&gt; insert into user values (<span class="string">&#x27;laosan&#x27;</span>, password(<span class="string">&#x27;678678&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14、查询表中所有数据</span><br><span class="line">查询lemon库中user表的数据</span><br><span class="line">mysql&gt; select * from lemon.user;</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| name   | passwd                                    |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| laoda  | 123456                                    |</span><br><span class="line">| laoer  | 123123                                    |</span><br><span class="line">| laosan  | *2E3A12CC92B01C3795F7ADA23369F77C978BDB27 |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15、使用<span class="built_in">where</span>条件查询表数据</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">mysql&gt; select passwd from user <span class="built_in">where</span> name=<span class="string">&#x27;laosan&#x27;</span>;</span><br><span class="line">+--------+</span><br><span class="line">| passwd |</span><br><span class="line">+--------+</span><br><span class="line">| 456456 |</span><br><span class="line">+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user <span class="built_in">where</span> name=<span class="string">&#x27;laoer&#x27;</span>;</span><br><span class="line">+-------+--------+</span><br><span class="line">| name  | passwd |</span><br><span class="line">+-------+--------+</span><br><span class="line">| laoer | 123123 |</span><br><span class="line">+-------+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select passwd from lemon.user <span class="built_in">where</span> name=<span class="string">&#x27;laoda&#x27;</span>;</span><br><span class="line">+--------+</span><br><span class="line">| passwd |</span><br><span class="line">+--------+</span><br><span class="line">| 123456 |</span><br><span class="line">+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">16、修改数据表内容，并且是以密文形式的。</span><br><span class="line"><span class="comment"># 两种格式</span></span><br><span class="line">- 修改全表格式 : update 表名 <span class="built_in">set</span> 列名=值;</span><br><span class="line">- 添加条件修改格式 : update 表名 <span class="built_in">set</span> 列名=值 <span class="built_in">where</span> 列名=值;</span><br><span class="line">mysql&gt; update lemon.user <span class="built_in">set</span> passwd=password(<span class="string">&#x27;buzhidao&#x27;</span>) <span class="built_in">where</span> name=<span class="string">&#x27;laoer&#x27;</span>;</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| name   | passwd                                    |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| laoda  | 123456                                    |</span><br><span class="line">| laoer  | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">| laosan | *2E3A12CC92B01C3795F7ADA23369F77C978BDB27 |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">17、输出数据表内容</span><br><span class="line"><span class="comment"># 两种格式</span></span><br><span class="line">- 删除全表数据格式 : delete from 表名;</span><br><span class="line">- 删除指定条件的数据格式 : delete from 表名 <span class="built_in">where</span> 列名=值;</span><br><span class="line">mysql&gt; delete from lemon.user <span class="built_in">where</span> name=<span class="string">&#x27;laosan&#x27;</span>;</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | passwd                                    |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18、修改数据表字段类型</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 modify 字段名称 新字段类型 first;       // first可以不加</span></span><br><span class="line">mysql&gt; alter table user modify name char(30);</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">19、增加数据表字段</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 add 列名;</span></span><br><span class="line">mysql&gt; alter table user add age int(30);</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">| age    | int(30)  | YES  |     | NULL    |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">20、删除数据表的字段</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 drop 列名;</span></span><br><span class="line">mysql&gt; alter table user drop age;</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21、修改数据表字段名及类型属性</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 change 旧字段名 新字段名;</span></span><br><span class="line">mysql&gt; alter table user change passwd password char(50);</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type     | Null | Key | Default | Extra |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| name     | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| password | char(50) | YES  |     | NULL    |       |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">22、查看数据表的前1行【升序】</span><br><span class="line">mysql&gt; select * from user <span class="built_in">limit</span> 1;</span><br><span class="line">+-------+----------+</span><br><span class="line">| name  | password |</span><br><span class="line">+-------+----------+</span><br><span class="line">| laoda | 123456   |</span><br><span class="line">+-------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">23、查看数据表的最后1行【降序】</span><br><span class="line"><span class="comment"># 【desc 是降序】：从大到小；例如：3 2 1   【asc 默认就是升序】：从小到大；例如：1 2 3</span></span><br><span class="line">mysql&gt; select * from user order by name desc;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | password                                  |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：查看lemon库user表的id列里数字最大的2行</span></span><br><span class="line">mysql&gt; select * from users order by id desc <span class="built_in">limit</span> 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">24、复制当前表数据到另外一个表【类似于备份】</span><br><span class="line">mysql&gt; create table hehe as select * from user;</span><br><span class="line">mysql&gt; select * from hehe;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | password                                  |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">25、【内链接】通过hehe表和users表中的name列,将两个表中的所有数据合并，前提是这两个数据表列中的数据必须是一样的！</span><br><span class="line">mysql&gt; select * from hehe inner join user on hehe.name=user.name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">26、【内链接】通过hehe表的name列和users表的password列,只将hehe表的name列和users表的password列数据合并，前提是&#123;和前者一样&#125;！</span><br><span class="line">mysql&gt; select hehe.name,user.password from hehe,user <span class="built_in">where</span> user.name=hehe.name;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | password                                  |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">27、修改表的名字</span><br><span class="line"><span class="comment"># 格式：rename 原表名 to 新表名;</span></span><br><span class="line">mysql&gt; rename person to beros;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">28、修改字段位置</span><br><span class="line">mysql&gt; alter table user modify name varchar(10) after password;</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| password | char(50)    | YES  |     | NULL    |       |</span><br><span class="line">| name     | varchar(10) | NO   | PRI | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">29、删除数据表</span><br><span class="line">mysql&gt; drop table lemon.hehe;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_lemon |</span><br><span class="line">+-----------------+</span><br><span class="line">| person          |</span><br><span class="line">| user            |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="授权用户、撤销授权用户、及限制"><a href="#授权用户、撤销授权用户、及限制" class="headerlink" title="授权用户、撤销授权用户、及限制"></a>授权用户、撤销授权用户、及限制</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、对lemon数据库授权，以便其他用户对该库进行操作</span><br><span class="line">mysql&gt; grant all on lemon.* to <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">   上边的%是指:         <span class="comment">#任何主机都可以登录mysql；</span></span><br><span class="line">                       <span class="comment">#localhost代表的服务器本身，不包含在上边的网段</span></span><br><span class="line">                           <span class="comment">#还可以是网段或者某个ip</span></span><br><span class="line">     lemon.*:          <span class="comment">#只让admin用户拥有lemon库的所有权限</span></span><br><span class="line">       all:            <span class="comment">#代表的增、删、改、查所有权限</span></span><br><span class="line">    123456:            <span class="comment">#是admin用户的登录密码</span></span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;   <span class="comment">#刷新权限</span></span><br><span class="line"></span><br><span class="line">2、对admin用户取消对lemon库的授权</span><br><span class="line">mysql&gt; revoke all on lemon.* from <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">mysql&gt; delete from mysql.user <span class="built_in">where</span> user=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">3、查看mysql的用户权限</span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line">mysql&gt; select * from mysql.user \G</span><br></pre></td></tr></table></figure><h3 id="破MySQL密码流程"><a href="#破MySQL密码流程" class="headerlink" title="破MySQL密码流程"></a>破MySQL密码流程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、进入/etc/my.cnf配置文件里添加一条配置</span><br><span class="line">vi  /etc/my.cnf</span><br><span class="line">skip-grant-tables       <span class="comment">#跳过所有授权</span></span><br><span class="line">重启MySQL服务</span><br><span class="line"></span><br><span class="line">2、现在直接进入MysQl里</span><br><span class="line">    mysql  -u  root  -p</span><br><span class="line"></span><br><span class="line">3、修改秘密【数据表】，并且刷新权限、退出用666666登陆即可</span><br><span class="line">    mysql&gt; update mysql.user <span class="built_in">set</span> password=password(<span class="string">&#x27;666666&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">4、检查没问题后在进入/etc/my.cnf配置文件里把刚加的skip-grant-tables这条配置删掉，保存退出并重启mysql服务</span><br><span class="line"><span class="comment"># 注：仅限5.7之前的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL-5.7版本的修改方式</span></span><br><span class="line">mysql&gt; update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;666666&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="解决MySQL乱码问题"><a href="#解决MySQL乱码问题" class="headerlink" title="解决MySQL乱码问题"></a>解决MySQL乱码问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 有两种方法</span><br><span class="line"><span class="comment"># 第一种是永久生效的</span></span><br><span class="line">[root@mysql ~]<span class="comment"># vi /etc/my.cnf</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">:wq!</span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种是临时生效的</span></span><br><span class="line">进入数据库</span><br><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;</span><br></pre></td></tr></table></figure><h3 id="查看MySQL连接情况"><a href="#查看MySQL连接情况" class="headerlink" title="查看MySQL连接情况"></a>查看MySQL连接情况</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mysql存储引擎的应用mysql&gt; show status like <span class="string">&#x27;Thread_%&#x27;</span>;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 5     |</span><br><span class="line">| Threads_connected | 3     |</span><br><span class="line">| Threads_created   | 8     |</span><br><span class="line">| Threads_running   | 1     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="Mysql存储引擎的应用"><a href="#Mysql存储引擎的应用" class="headerlink" title="Mysql存储引擎的应用"></a>Mysql存储引擎的应用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.查看数据库可以配置的存储引擎类型</span><br><span class="line">mysql&gt; show engines;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vi1mdi5j31by0c2aaw.jpg" alt="image-20200824194528195"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2、修改Mysql服务的默认存储引擎</span><br><span class="line">[root@mysql ~]<span class="comment"># vi /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=MyISAM</span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># mysql -uroot -p123123</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vi5qrbvj30ur0ef0w6.jpg" alt="image-20200824194730663"></p><h2 id="4、SQL语句进阶使用"><a href="#4、SQL语句进阶使用" class="headerlink" title="4、SQL语句进阶使用"></a>4、SQL语句进阶使用</h2><h3 id="主键及自增"><a href="#主键及自增" class="headerlink" title="主键及自增"></a>主键及自增</h3><blockquote><p>每一张表通常会有一个且只有一个主键 来表示每条数据的唯一性；主键其实是对某一个字段的 约束 。</p><ul><li>primary key</li><li>auto_increment</li></ul></blockquote><p>主键特性：</p><ol><li>值不能重复 </li><li>非空（不能赋值为not null）</li></ol><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">非空<span class="operator">-</span> 主键约束写法：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key,age <span class="type">int</span>); </span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 主键约束<span class="operator">+</span>自增的写法：特点  从<span class="number">1</span>开始走；不会自动回收，用过了就是用过了</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,age <span class="type">int</span>); </span><br></pre></td></tr></table></figure><h3 id="非空（not-null）"><a href="#非空（not-null）" class="headerlink" title="非空（not null）"></a>非空（not null）</h3><blockquote><p>非空约束 not null，说白了就是不允许某个字段的值是空的</p><ul><li>not null</li></ul></blockquote><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="表字段的注释"><a href="#表字段的注释" class="headerlink" title="表字段的注释"></a>表字段的注释</h3><blockquote><ul><li>关键字：comment</li></ul></blockquote><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> tom(id <span class="type">int</span> comment <span class="string">&#x27;用户ID&#x27;</span>, age <span class="type">int</span> comment <span class="string">&#x27;用户年龄&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tom;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vixy124j30q60enq5q.jpg" alt="image-20200824200439226"></p><h3 id="Mysql数据库事务管理"><a href="#Mysql数据库事务管理" class="headerlink" title="Mysql数据库事务管理"></a>Mysql数据库事务管理</h3><blockquote><p>管理事务的三个命令：</p><ul><li><p>begin：开始事务，后边有多条数据库操作语句开始执行。</p></li><li><p>commit：开始提交一个事务，对应前边的begin操作，将事务处理的结果保存到数据文件中。</p></li><li><p>rollback：开始回滚一个事务，在begin和commit之间，将事务中的全部语句撤回，</p></li></ul></blockquote><p><code>set autocommit = 0/1;     # 0禁用自动提交   1开启自动提交，自动提交为退出mysql连接程序时，或者执行下一条DML语句。</code></p><p>管理事务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;%autocommit%&#x27;</span>;       <span class="comment"># 查看当前数据库是否自动提交事务</span></span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| autocommit    | ON    |        <span class="comment"># 默认就是开启的</span></span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; create database lemon;</span><br><span class="line">mysql&gt; use lemon;</span><br><span class="line">mysql&gt; create table it(岗位 char(16),姓名 char(16),身份证号 char(48),学历 char(16),工资 int);</span><br><span class="line">mysql&gt; show table status <span class="built_in">where</span> name=<span class="string">&quot;it&quot;</span>;    <span class="comment"># 确保表引擎为InnoDB，如若不是按以下命令修改</span></span><br><span class="line">mysql&gt; alter table it engine=InnoDB;         <span class="comment"># 修改表储存引擎为InnoDB</span></span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;网络工程师&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;150404199201091132&#x27;</span>,<span class="string">&#x27;高中&#x27;</span>,<span class="string">&#x27;5500&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;网络工程师&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;150406187805271432&#x27;</span>,<span class="string">&#x27;专科&#x27;</span>,<span class="string">&#x27;12000&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;java工程师&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;111376199609101456&#x27;</span>,<span class="string">&#x27;初中&#x27;</span>,<span class="string">&#x27;10000&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;网络工程师&#x27;</span>,<span class="string">&#x27;刘备&#x27;</span>,<span class="string">&#x27;345646199209103256&#x27;</span>,<span class="string">&#x27;高中&#x27;</span>,<span class="string">&#x27;15000&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;ui工程师&#x27;</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="string">&#x27;178645199909101189&#x27;</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;7000&#x27;</span>);</span><br><span class="line">mysql&gt; select * from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vj1zscxj30og09bwf2.jpg" alt="image-20200824203232032"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;    <span class="comment">#手动开始事务</span></span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;php工程师&#x27;</span>,<span class="string">&#x27;曹操&#x27;</span>,<span class="string">&#x27;891878195409081198&#x27;</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;9000&#x27;</span>);</span><br><span class="line">mysql&gt; select * from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vj5ojllj30ol0a0aas.jpg" alt="image-20200824203432011"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">exit</span>                             <span class="comment">#不手动提交事务退出</span></span><br><span class="line">[root@mysql ~]<span class="comment"># mysql -uroot -p123123</span></span><br><span class="line">mysql&gt; select * from lemon.it;          <span class="comment">#查看曹操是否还存在</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjd669cj30on0983z3.jpg" alt="image-20200824203539117"></p><p>==<strong>如果是手动开始的事务就必须手动提交，因为系统是不会帮手动开始的事务自动提交的</strong>！==</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;                <span class="comment">#手动开始事务</span></span><br><span class="line">mysql&gt; insert into it values(<span class="string">&#x27;nginx工程师&#x27;</span>,<span class="string">&#x27;诸葛亮&#x27;</span>,<span class="string">&#x27;187967198712081198&#x27;</span>,<span class="string">&#x27;专科&#x27;</span>,<span class="string">&#x27;6700&#x27;</span>);</span><br><span class="line">mysql&gt; commit;               <span class="comment">#手动提交事务</span></span><br><span class="line">mysql&gt; select * from it;     <span class="comment">#查询</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjhdhm1j30pp09w0th.jpg" alt="image-20200824203809292"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p123123</span></span><br><span class="line">mysql&gt; select * from lemon.it;               <span class="comment">#在查询诸葛亮还存不存在</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjnjkp5j30po09ut9f.jpg" alt="image-20200824203914221"></p><p>==<strong>可以看到，手动执行的事务只有你主动提交后才会永久的修改！</strong>==</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;                        <span class="comment">#手动开始事务</span></span><br><span class="line">mysql&gt; insert into it values(<span class="string">&#x27;php工程师&#x27;</span>,<span class="string">&#x27;赵云&#x27;</span>,<span class="string">&#x27;987867199012081198&#x27;</span>,<span class="string">&#x27;专科&#x27;</span>,<span class="string">&#x27;9500&#x27;</span>);</span><br><span class="line">mysql&gt; select * from lemon.it;       <span class="comment">#查询</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjsp16nj30ps0aoaax.jpg" alt="image-20200824204151695"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; rollback;                   <span class="comment">#回滚事务</span></span><br><span class="line">mysql&gt; select * from lemon.it;     <span class="comment">#在查询赵云是否还存在</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjxt349j30po0a00tg.jpg" alt="image-20200824204230161"></p><p>==<strong>事务是数据库中的执行单元</strong>==</p><p>==<strong>事务能够保证事务内部的sql语句要么都成功，要么都失败</strong>==</p><p>==<strong>mysql 客户端（终端、命令行）事务是默认提交的</strong>==</p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><blockquote><p>格式1：select 列名 别名,列名 别名…… from 表名;</p><p>格式2：select 列名 as ‘别名’, 列名 as ‘别名’,…… from 表名</p></blockquote><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from lemon.it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vk2ylnkj30pj0a30tg.jpg" alt="image-20200824204627019"></p><p>别名格式1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位 gangwei,姓名 xingming from lemon.it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vk7pdfnj30kb0a4aae.jpg" alt="image-20200824204710248"></p><p>别名格式2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名 as <span class="string">&#x27;name&#x27;</span>,学历 as <span class="string">&#x27;xueli&#x27;</span> from lemon.it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkcro9sj30lq0a2jrl.jpg" alt="image-20200824204741741"></p><h3 id="去重-distinct"><a href="#去重-distinct" class="headerlink" title="去重(distinct)"></a>去重(distinct)</h3><blockquote><p>格式：select distinct 列名 from 表名;</p></blockquote><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位 from lemon.it;     <span class="comment">#查询it表中所有员工的职位</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkhzo44j30oc0a00sx.jpg" alt="image-20200824205001473"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct 岗位 from lemon.it;      <span class="comment">#去重</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkn4hcyj30sk08qwel.jpg" alt="image-20200824205048276"></p><h3 id="WHERE-条件判断（重点）"><a href="#WHERE-条件判断（重点）" class="headerlink" title="WHERE 条件判断（重点）"></a>WHERE 条件判断（重点）</h3><blockquote><p>有时候操作数据库时，只操作一些有条件限制的数据，这时可以在SQL语句中添加WHERE子句来规定数据操作的条件。</p></blockquote><p><strong>常用的运算符：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">!=</td><td align="left">不等于，某些数据库系统也写作 &lt;&gt;</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td></tr><tr><td align="left">BETWEEN … AND …</td><td align="left">介于某个范围之内，例：WHERE age BETWEEN 20 AND 30</td></tr><tr><td align="left">NOT BETWEEN …AND …</td><td align="left">不在某个范围之内</td></tr><tr><td align="left">IN(项1,项2,…)</td><td align="left">在指定项内，例：WHERE city IN(‘beijing’,’shanghai’)</td></tr><tr><td align="left">NOT IN(项1,项2,…)</td><td align="left">不在指定项内</td></tr><tr><td align="left">LIKE</td><td align="left">搜索匹配，常与模式匹配符配合使用</td></tr><tr><td align="left">NOT LIKE</td><td align="left">LIKE的反义</td></tr><tr><td align="left">IS NULL</td><td align="left">空值判断符</td></tr><tr><td align="left">IS NOT NULL</td><td align="left">非空判断符</td></tr><tr><td align="left">NOT、AND、OR</td><td align="left">逻辑运算符，分别表示否、并且、或，用于多个逻辑连接。 优先级：NOT &gt; AND &gt; OR</td></tr><tr><td align="left">%</td><td align="left">模式匹配符，表示任意字串，例：WHERE username LIKE ‘%user’</td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vks8lydj30uq09lq74.jpg" alt="image-20210108183340345"></p><p>案例1：查询工资高于6700的所有员工的岗位、姓名； &gt;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkvwktuj30ur087tah.jpg" alt="image-20210108183444549"></p><p>案例2：查询工资大于等于12000的所有员工的岗位、姓名； &gt;=</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkyqbz3j30ul076gn9.jpg" alt="image-20210108183535840"></p><p>案例3：查询工资小于12000的所有员工的岗位、姓名； &lt;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vl384htj30un09dq55.jpg" alt="image-20210108183558977"></p><p>案例4：查询工资小于等于12000的所有员工的岗位、姓名； &lt;=</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vl6op35j30um0a976p.jpg" alt="image-20210108183628099"></p><p>案例5：查询岗位是nginx工程师的员工姓名、工资; =</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlbvz9wj30ua05k3zj.jpg" alt="image-20210108183657630"></p><p>案例6：查询学历不是专科的所有员工的姓名、工资；两种方式：!= &lt;&gt;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlf8b4hj30un0a3gne.jpg" alt="image-20210108183740957"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vljxswpj30us0agmz2.jpg" alt="image-20210108183803467"></p><h3 id="AND-OR-IN-运算符"><a href="#AND-OR-IN-运算符" class="headerlink" title="AND  OR  IN 运算符"></a>AND  OR  IN 运算符</h3><blockquote><p>And：逻辑与  Or：逻辑或  In：查询某个字段的值为多个的时候 可以使用 <code>in</code>关键字</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlpglz2j30wd0a4dkb.jpg" alt="image-20210126141450403"></p><p>1.案例：查询学历不是专科的并且工资大于12000的所有员工的岗位、姓名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位,姓名 from it where 学历 != &#x27;专科&#x27; and 工资 &gt; 12000;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlu8a73j30wf05gdh2.jpg" alt="image-20210126141533926"></p><p>2.案例：查询学历不是专科的或者工资大于12000的所有员工的岗位、姓名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位,姓名 from it where 学历 != &#x27;专科&#x27; or 工资 &gt; 12000;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlztq56j30wd08atam.jpg" alt="image-20210126141602602"></p><p>3.案例：查询工资是5500、7000、6700的姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名 from it where 工资 in (5500,7000,6700);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vm42g4cj30w708s75l.jpg" alt="image-20210126141653939"></p><h3 id="Between-and-区间"><a href="#Between-and-区间" class="headerlink" title="Between and 区间"></a>Between and 区间</h3><blockquote><p>在某两个数值之间 包含 <code>and</code>两边的数</p></blockquote><p>案例：查询工资在7000~15000间的员工姓名、学历</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vm7w7jbj30wc0a3aej.jpg" alt="image-20210126142004368"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名,学历 from it where 工资 between 7000 and 15000;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmdfj7yj30wd08oq4a.jpg" alt="image-20210126141918076"></p><h3 id="LIKE-操作符"><a href="#LIKE-操作符" class="headerlink" title="LIKE 操作符"></a>LIKE 操作符</h3><blockquote><p>模糊查询</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_ : 代表单个未知字符  相当于正则表达式的 .</span><br><span class="line">% : 代表多个未知字符  相当于正则表达式的 .*</span><br><span class="line">a% : a开头  </span><br><span class="line">%b : b结尾  </span><br><span class="line">%c% : 包含c  </span><br><span class="line">_d% : 第二个字母是d</span><br><span class="line">%e__ : 倒数第三个字母是e</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.案例：查询标题包含记事本的商品</span><br><span class="line">select title from t_item where title like &#x27;%笔记本%&#x27;;</span><br><span class="line"></span><br><span class="line">2.案例：查询有赠品的DELL产品</span><br><span class="line">select sell from t_item where sell like &#x27;%赠%&#x27; and title like &#x27;%dell%&#x27;;</span><br><span class="line"></span><br><span class="line">3.案例：查询单价低于100的记事本</span><br><span class="line">select title from t_item where price&lt;100 and title like &#x27;%记事本%&#x27;;</span><br><span class="line"></span><br><span class="line">4.案例：查询价格介于50到200之间的得力商品</span><br><span class="line">select title from t_item where price between 50 and 200 and title like &#x27;%得力%&#x27;;</span><br><span class="line"></span><br><span class="line">5.案例：查询有图片的得力商品</span><br><span class="line">select title from t_item where image is not null and title like &#x27;%得力%&#x27;;</span><br><span class="line"></span><br><span class="line">6.案例：查询分类为238,917的产品</span><br><span class="line">select title from t_item where category_id in (238,917);</span><br><span class="line"></span><br><span class="line">7.案例：查询标题中不含得力的商品</span><br><span class="line">select title from t_item where title not like &#x27;%得力%&#x27;;</span><br><span class="line"></span><br><span class="line">8.案例：查询分类不是238,917的商品</span><br><span class="line">select title from t_item where category_id not in (238,917);</span><br><span class="line"></span><br><span class="line">9.案例：查询价格介于50到200之外的商品</span><br><span class="line">select title from t_item where price not between 50 and 200;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h3><blockquote><p>order by 排序  by 后面添加排序规则的字段；默认是升序</p><ul><li><p>asc ：升序；默认就是</p></li><li><p>desc：降序order by 如果有where 要写在 where 后面</p></li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmj20ksj30wd0a5dkc.jpg" alt="image-20210126145208169"></p><p>1、升序 asc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it order by 工资 asc;   #后面的asc可以不跟</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmn5mbmj30wf09zn1w.jpg" alt="image-20210126145244540"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名,工资 from it where 工资 like &#x27;%1%&#x27; order by 工资 asc;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmrhjwgj30we074dh2.jpg" alt="image-20210126145327663"></p><p>2、降序 desc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it order by 工资 desc;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmvo7s7j30wg0a2dkm.jpg" alt="image-20210126145356912"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名,工资 from it where 工资 like &#x27;%1%&#x27; order by 工资 desc;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmyuztdj30wd06zdh1.jpg" alt="image-20210126145423366"></p><h3 id="LIMIT-子句"><a href="#LIMIT-子句" class="headerlink" title="LIMIT 子句"></a>LIMIT 子句</h3><blockquote><p>limit begin,count 分页语句begin 从0开始</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vn2oblsj30wg0a9434.jpg" alt="image-20210126145531761"></p><p>1、查看表的前两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it limit 2;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vn6bo5mj60wb06qmzh02.jpg" alt="image-20210126145705161"></p><p>2、查看2~5的数据行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it limit 2,5;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vna6ronj30wf089adh.jpg" alt="image-20210126145600507"></p><h3 id="INNER-JOIN-内连接查询"><a href="#INNER-JOIN-内连接查询" class="headerlink" title="INNER JOIN 内连接查询"></a>INNER JOIN 内连接查询</h3><p>内连接是通过在查询中设置连接条件的方式，来移除查询结果集中某些数据行后的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。</p><p>在MySQL FROM 子句中使用关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。</p><p><strong>语法格式如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;列名1，列名2 …&gt;</span><br><span class="line">FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; [ ON子句]</span><br><span class="line"></span><br><span class="line">语法说明如下:</span><br><span class="line">•&lt;列名1，列名2…&gt;：需要检索的列名。</span><br><span class="line">•&lt;表名1&gt;&lt;表名2&gt;：进行内连接的两张表的表名。</span><br><span class="line">内连接是系统默认的表连接，所以在 FROM 子句后可以省略 INNER 关键字，只用关键字 JOIN。使用内连接后，FROM 子句中的 ON 子句可用来设置连接表的条件。</span><br><span class="line"></span><br><span class="line">在 FROM 子句中可以在多个表之间连续使用 INNER JOIN 或 JOIN，如此可以同时实现多个表的内连接。</span><br></pre></td></tr></table></figure><p>示例：表 student1和表student2都包含相同数据类型的字段id，在两个表之间使用内连接查询。输入的 SQL 语句和执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database lemon;</span><br><span class="line">mysql&gt; use lemon;</span><br><span class="line">mysql&gt; create table student1(id int,name varchar(20));</span><br><span class="line">mysql&gt; create table student2(id int,bingqi varchar(20));</span><br><span class="line">mysql&gt; insert into student1 values(1,&quot;刘备&quot;),(2,&quot;关羽&quot;),(3,&quot;张飞&quot;);</span><br><span class="line">mysql&gt; insert into student2 values(1,&quot;双股剑&quot;),(2,&quot;青龙偃月刀&quot;),(3,&quot;丈八蛇矛&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vnfbpwmj30ra0kxadb.jpg" alt="image-20210126161045247"></p><p><strong>两种内链接方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,bingqi from student1,student2 where student1.id=student2.id;</span><br><span class="line">mysql&gt; select name,bingqi from student1 inner join student2 on student1.id=student2.id;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vnmdz4uj30xr07u0ud.jpg" alt="image-20210126161118607"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vntuzyhj30xt071jsp.jpg" alt="image-20210126161134634"></p><h3 id="LEFT-RIGHT-JOIN-外连接查询"><a href="#LEFT-RIGHT-JOIN-外连接查询" class="headerlink" title="LEFT/RIGHT JOIN 外连接查询"></a>LEFT/RIGHT JOIN 外连接查询</h3><p><a href="http://c.biancheng.net/mysql/">MySQL</a>中<a href="http://c.biancheng.net/view/2563.html">内连接</a>是在交叉连接的结果集上返回满足条件的记录；而外连接先将连接的表分为基表和参考表，再以基表为依据返回满足和不满足条件的记录。</p><p>外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。</p><p>左外连接又称为左连接，在 FROM 子句中使用关键字 LEFT OUTER JOIN 或者 LEFT JOIN，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。</p><p>在左外连接的结果集中，除了匹配的行之外，还包括左表中有但在右表中不匹配的行，对于这样的行，从右表中选择的列的值被设置为 NULL，即左外连接的结果集中的 NULL 值表示右表中没有找到与左表相符的记录。</p><p><strong>实例 1：左外连接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例 1：左外连接</span><br><span class="line">mysql&gt; insert into student1 values (4,&quot;赵云&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vnyjjh4j30t70iqmzr.jpg" alt="image-20210126160240675"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,bingqi from</span><br><span class="line">    -&gt; student1 left outer join student2</span><br><span class="line">    -&gt; on student1.id=student2.id;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vo3pm67j30xw07ewg5.jpg" alt="image-20210126160338335"></p><p>==<strong>注：如果右表的行数比左表的行数少，以null代替，如果多，直接去掉多出的行数</strong>==</p><p><strong>实例 2：右外连接</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,bingqi from</span><br><span class="line">    -&gt; student1 right outer join student2</span><br><span class="line">-&gt; on student1.id=student2.id;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vo4zlxuj30xs0cd42m.jpg" alt="image-20210126160441903"></p><h1 id="五、view-视图"><a href="#五、view-视图" class="headerlink" title="五、view 视图"></a>五、view 视图</h1><blockquote><p>视图就是一个虚拟表，其内容由查询定义得到的。同真实的表一样，视图包含一系列带有名称的列和行数据。</p></blockquote><h2 id="1、视图有什么作用"><a href="#1、视图有什么作用" class="headerlink" title="1、视图有什么作用"></a>1、视图有什么作用</h2><p>视图的作用就是缓存数据从而加快数据的查询速度；可以这么理解，我把一条sql的查询结果装在了一个视图里，我下次再查的时候，就不用走sql了，直接去这个视图里就可以了。神奇的是我可以修改这个视图里的数据，就等于修改了原表数据。</p><h2 id="2、视图的特点"><a href="#2、视图的特点" class="headerlink" title="2、视图的特点"></a>2、视图的特点</h2><ol><li>视图的列可以来自不同的表，是表的抽象和逻辑意义上建立的新关系。 </li><li>视图是由基本表（实表）产生的表（虚表）。 </li><li>视图的建立和删除不影响基本表。 </li><li>对视图内容的更新（添加、删除和修改）直接影响基本表。 </li><li>当视图来自多个基本表时，不允许添加和删除数据。 </li></ol><h2 id="3、视图的创建"><a href="#3、视图的创建" class="headerlink" title="3、视图的创建"></a>3、视图的创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名称  as查询语句(select)</span><br></pre></td></tr></table></figure><h2 id="4、视图的使用"><a href="#4、视图的使用" class="headerlink" title="4、视图的使用"></a>4、视图的使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名+条件 from 视图名称;</span><br></pre></td></tr></table></figure><h2 id="5、视图的更新"><a href="#5、视图的更新" class="headerlink" title="5、视图的更新"></a>5、视图的更新</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter view 视图名称 as 查询语句(select)</span><br></pre></td></tr></table></figure><h2 id="6、视图的删除"><a href="#6、视图的删除" class="headerlink" title="6、视图的删除"></a>6、视图的删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名称;</span><br></pre></td></tr></table></figure><h2 id="7、视图模拟练习"><a href="#7、视图模拟练习" class="headerlink" title="7、视图模拟练习"></a>7、视图模拟练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、创建两个表并且插入数据</span><br><span class="line">mysql&gt; create table student1(id int,name varchar(20),money int);</span><br><span class="line">mysql&gt; create table student2(id int,name varchar(20),weapons varchar(20));</span><br><span class="line">mysql&gt; insert into student1 values (1,&quot;刘备&quot;,10000),(2,&quot;关羽&quot;,20000),(3,&quot;张飞&quot;,30000);</span><br><span class="line">mysql&gt; insert into student2 values (1,&quot;刘备&quot;,&quot;雌雄双股剑&quot;),(2,&quot;关羽&quot;,&quot;青龙偃月刀&quot;),(3,&quot;张飞&quot;,&quot;丈八蛇矛&quot;);</span><br><span class="line"></span><br><span class="line">2、创建视图并测试</span><br><span class="line">mysql&gt; create view lemon as select * from student2;   #创建lemon视图</span><br><span class="line">mysql&gt; select * from student2;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vobk6ssj30w509emz9.jpg" alt="image-20210126152055233"></p><p># 查看视图数据是否相同</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vofsndoj30we09xdii.jpg" alt="image-20210126152121734"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update lemon set name=&#x27;赵云&#x27; where id=3; #测试修改视图源表是否会一同修改</span><br><span class="line">mysql&gt; select * from lemon;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7voin8t9j30tg09pgnq.jpg" alt="image-20210126152148887"></p><p># 查询源表是否修改</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vondeb0j30u609omzm.jpg" alt="image-20210126152223640"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter view lemon as select * from student1;    #更新视图</span><br><span class="line">mysql&gt; select * from lemon;      #查询是否更新</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7voq169sj30sz0a20ug.jpg" alt="image-20210126152253513"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop view lemon;    #删除视图</span><br></pre></td></tr></table></figure><h1 id="六、触发器"><a href="#六、触发器" class="headerlink" title="六、触发器"></a>六、触发器</h1><blockquote><p>什么是触发器?</p><p>简单的说，就是一张表发生了某件事（插入、删除、更新操作），然后自动触发了预先编写好的若干条SQL语句的执行。</p></blockquote><h2 id="1、触发器的作用"><a href="#1、触发器的作用" class="headerlink" title="1、触发器的作用"></a>1、触发器的作用</h2><p>监视某种情况，并触发某种操作(保证数据的完整性，起到约束的作用)</p><h2 id="2、触发器创建语法四要素"><a href="#2、触发器创建语法四要素" class="headerlink" title="2、触发器创建语法四要素"></a>2、触发器创建语法四要素</h2><p>1.监视地点(table)                                    #监视哪个数据库的表<br>2.监视事件(insert/update/delete)            #增、删、改<br>3.触发时间(after/before)                         #after：事件之后    before：事件之前<br>4.触发事件(insert/update/delete)            #触发后要执行的事件</p><h2 id="3、创建触发器语法"><a href="#3、创建触发器语法" class="headerlink" title="3、创建触发器语法"></a>3、创建触发器语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create trigger 触发器名 |after|before| |insert|update|delete| on 表名 for each row</span><br><span class="line">begin</span><br><span class="line">     #需要执行的sql语句；这里注意：监控的表和执行SQL语句的表不能是同一个！</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">注1: on 表名 代表你要监控的某个表； for each row 这句话是固定的。</span><br><span class="line">注2: |after|before| 只能选一个；after 表示 事件之后触发, before 表示事件之前触发。</span><br><span class="line">注3: |insert|update|delete| 只能选一个；触动触发器的动作；一旦触动，就会执行下面的SQL语句。</span><br><span class="line">注4: Begin &lt;--&gt; end：代表可以写入多条SQL语句；如果不写，就只能写入一条SQL语句。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、创建触发器"><a href="#4、创建触发器" class="headerlink" title="4、创建触发器"></a>4、创建触发器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create trigger lemon after update on student1 for each row </span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; update lemon.student2 set name=&#x27;张飞&#x27; where id=3;</span><br><span class="line">    -&gt; insert into student2 values (4,&quot;lemon&quot;,&quot;AK-47&quot;);</span><br><span class="line">    -&gt; end//</span><br><span class="line"></span><br><span class="line">mysql&gt; show triggers\G;        # 查看触发器</span><br><span class="line"></span><br><span class="line">mysql&gt; update student1 set money=300000 where id=3; </span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student1;    #修改student1表的数据从而触动触发器执行语句</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vowls0gj30wj0b8gnv.jpg" alt="image-20210126152942051"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student2;       #查看是否执行触发器事件的SQL语句</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vp0go20j30ub0ciq5y.jpg" alt="image-20210126153000614"></p><h1 id="七、存储过程"><a href="#七、存储过程" class="headerlink" title="七、存储过程"></a>七、存储过程</h1><blockquote><p>MySQL数据库在5.0版本后开始支持存储过程</p><p>什么是存储过程？</p><p>类似于函数(方法),将大量的SQL语句封装在一个存储过程里, 什么时候像执行里面的SQL语句, 就什么时候调用这个存储过程。</p></blockquote><h2 id="1、存储过程的优点和缺点"><a href="#1、存储过程的优点和缺点" class="headerlink" title="1、存储过程的优点和缺点"></a>1、存储过程的优点和缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1、存储过程增强了SQL语言灵活性。</p><p>存储过程可以使用控制语句编写，可以完成复杂的判断和较复杂的运算，有很强的灵活性。</p><p>2、减少网络流量，降低了网络负载。</p><p>存储过程在服务器端创建成功后，只需要调用该存储过程即可，而传统的做法是每次都将大量的SQL语句通过网络发送至数据库服务器端然后再执行。</p><p>3、存储过程要比一般的SQL语句执行要快</p><p>只在创造时进行编译，以后每次执行存储过程都不需再重新编译；一般SQL语句每执行一次就编译一次,所以使用存储过程可提高</p><p>数据库执行速度。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1、扩展功能不方便</p><p>2、不便于系统后期维护</p><h2 id="2、查看现有的存储过程"><a href="#2、查看现有的存储过程" class="headerlink" title="2、查看现有的存储过程"></a>2、查看现有的存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show procedure status;</span><br></pre></td></tr></table></figure><h2 id="3、调用存储过程"><a href="#3、调用存储过程" class="headerlink" title="3、调用存储过程"></a>3、调用存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 存储过程名称(参数入/出类型 参数名 数据类型);</span><br></pre></td></tr></table></figure><h2 id="4、删除存储过程"><a href="#4、删除存储过程" class="headerlink" title="4、删除存储过程"></a>4、删除存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure 存储过程名称;</span><br></pre></td></tr></table></figure><h2 id="5、体验存储过程"><a href="#5、体验存储过程" class="headerlink" title="5、体验存储过程"></a>5、体验存储过程</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><code>可以使用 CREATE PROCEDURE 语句创建存储过程。</code></p><p>语法格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create procedure &lt;过程名&gt; ( [过程参数[,…] ] ) &lt;过程体&gt;</span><br><span class="line">[过程参数[,…] ] 格式</span><br><span class="line">[ IN | OUT | INOUT ] &lt;参数名&gt; &lt;类型&gt;</span><br></pre></td></tr></table></figure><h4 id="理解有参和无参"><a href="#理解有参和无参" class="headerlink" title="理解有参和无参"></a>理解有参和无参</h4><p>无参数： 用python函数举例</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vp6k0d7j30tq08wmyf.jpg" alt="image-20210126153820047"></p><p>带参数：用python函数举例</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vp9ccyvj30uf0893zj.jpg" alt="image-20210126153837233"></p><h3 id="创建无参数的存储过程"><a href="#创建无参数的存储过程" class="headerlink" title="创建无参数的存储过程"></a>创建无参数的存储过程</h3><blockquote><p>实例 1：创建名称为func的存储过程，存储过程的作用是从student1、student2表中查询数据信息。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create procedure func()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select * from student1;</span><br><span class="line">    -&gt; select * from student2;</span><br><span class="line">-&gt; end//</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">创建存储过程 func 后，通过 call 语句调用该存储过程的SQL。</span><br><span class="line">mysql&gt; call func();</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpdlfy6j30wl0mr0x2.jpg" alt="image-20210126154004086"></p><h3 id="创建带有参数的存储过程"><a href="#创建带有参数的存储过程" class="headerlink" title="创建带有参数的存储过程"></a>创建带有参数的存储过程</h3><blockquote><p>实例 2：创建名称为good的存储过程，输入参数是。存储过程的作用是通过输入的num从student2表中查询指定的姓名及武器信息。IN固定的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create procedure good(IN num int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select name,weapons from student2 where id=num;</span><br><span class="line">-&gt; end//</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">创建存储过程good后，通过 CALL 语句调用该存储过程的SQL语句。</span><br><span class="line">mysql&gt; call good(4);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpi6wdsj30w40kpn0t.jpg" alt="image-20210126154150157"></p><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop procedure func;</span><br><span class="line">mysql&gt; drop procedure good;</span><br></pre></td></tr></table></figure><h1 id="八、索引原理及查询优化"><a href="#八、索引原理及查询优化" class="headerlink" title="八、索引原理及查询优化"></a>八、索引原理及查询优化</h1><h2 id="1、索引概述"><a href="#1、索引概述" class="headerlink" title="1、索引概述"></a>1、索引概述</h2><blockquote><p>什么是索引？</p></blockquote><p>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。</p><blockquote><p>为什么要有索引？</p></blockquote><p>索引看着挺高大上的一个名字,说白了就是我们书最外面的目录。假如你用新华字典来查找“张”这个汉字，不使用目录的话，你可能要从新华字典的第一页找到最后一页，可能要花二个小时。字典越厚呢，你花的时间就越多。现在你使用目录来查找“张”这个汉字，张的首字母是z，z开头的汉字从900多页开始，有了这条线索，你查找一个汉字可能只要一分钟，由此可见索引的重要性。数据越大，索引的效率就越高！</p><h2 id="2、索引原理"><a href="#2、索引原理" class="headerlink" title="2、索引原理"></a>2、索引原理</h2><p>==索引的目的在于提高查询效率。==与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等</p><p>数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？==我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。==但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><h2 id="3、索引的数据结构"><a href="#3、索引的数据结构" class="headerlink" title="3、索引的数据结构"></a>3、索引的数据结构</h2><p>任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，<strong>b+树</strong> 应运而生。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpovqkpj30wb0f2nai.jpg" alt="image-20210126154942629"></p><p>如上图，是一颗b+树，关于b+树的定义可以参见 **<a href="http://zh.wikipedia.org/wiki/B+%E6%A0%91">B+树</a>**，这里只说一些重点，==浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示）==，如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><p>###b+树的查找过程<br>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><p>###b+树性质</p><p><strong>1.索引字段要尽量的小</strong>：通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><p><strong>2.索引的最左匹配特性（即从左往右匹配）</strong>：当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h2 id="4、Mysql-索引管理"><a href="#4、Mysql-索引管理" class="headerlink" title="4、Mysql 索引管理"></a>4、Mysql 索引管理</h2><h3 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h3><p>1、普通索引index：加速查找</p><p>2、唯一索引</p><ul><li>主键索引：primary key ：加速查找+约束（不为空且唯一）</li><li>唯一索引：unique：加速查找+约束 （唯一）</li></ul><p>3、联合索引：</p><ul><li>primary key(id,name): 联合主键索引</li><li>unique(id,name): 联合唯一索引</li><li>index(id,name): 联合普通索引</li></ul><p>4、全文索引fulltext：用于搜索很长一篇文章的时候，效果最好。</p><blockquote><p><strong>举个例子来说，比如你在为某商场做一个会员卡的系统。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">这个系统有一个会员表</span><br><span class="line">有下列字段：</span><br><span class="line">会员编号 INT</span><br><span class="line">会员姓名 VARCHAR(10)</span><br><span class="line">会员身份证号码 VARCHAR(18)</span><br><span class="line">会员电话 VARCHAR(10)</span><br><span class="line">会员住址 VARCHAR(50)</span><br><span class="line">会员备注信息 TEXT</span><br><span class="line"></span><br><span class="line">那么这个 会员编号，作为主键，使用 PRIMARY</span><br><span class="line">会员姓名：如果要建索引的话，那么就是普通的 INDEX</span><br><span class="line">会员身份证号码：如果要建索引的话，那么可以选择 UNIQUE （唯一的，不允许重复）</span><br><span class="line">除此之外还有全文索引，即FULLTEXT</span><br><span class="line">会员备注信息：如果需要建索引的话，可以选择全文搜索。</span><br><span class="line">用于搜索很长一篇文章的时候，效果最好。</span><br><span class="line">用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。</span><br><span class="line">但其实对于全文搜索，我们并不会使用MySQL自带的该索引，而是会选择第三方软件如Sphinx，专门来做全文搜索。</span><br><span class="line">各个索引的应用场景</span><br><span class="line"></span><br><span class="line">索引建的太多，会出现以下问题（重点）：</span><br><span class="line">会导致增删改的效率降低；而且对数据库表的维护会变得极其困难，尤其是大型分区表，在整理数据时（比如删除一个分区），非常、非常的耗时；因为查的时候是根据索引查的，所以快；但是在插入更新数据的时候系统会自动修改索引，所以就很慢。</span><br></pre></td></tr></table></figure><h2 id="5、索引的两大类型hash与btree"><a href="#5、索引的两大类型hash与btree" class="headerlink" title="5、索引的两大类型hash与btree"></a>5、索引的两大类型hash与btree</h2><p><strong>可以在创建上述索引的时候，为其指定索引类型，分两类：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br></pre></td></tr></table></figure><p><strong>不同的存储引擎支持的索引类型也不一样：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure><h2 id="6、练习-创建-删除索引语法"><a href="#6、练习-创建-删除索引语法" class="headerlink" title="6、练习 创建/删除索引语法"></a>6、练习 创建/删除索引语法</h2><blockquote><p>语法如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">创建/删除索引的语法</span><br><span class="line">善用帮助文档</span><br><span class="line">help create</span><br><span class="line">help create index</span><br><span class="line"></span><br><span class="line">#方法一：创建表时</span><br><span class="line">    　　CREATE TABLE 表名 (</span><br><span class="line">                字段名1  数据类型 [完整性约束条件…],</span><br><span class="line">                字段名2  数据类型 [完整性约束条件…],</span><br><span class="line">                [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">                [索引名]  (字段名[(长度)]  [ASC |DESC]) </span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">        CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名 </span><br><span class="line">                     ON 表名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">        ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                             索引名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">                           </span><br><span class="line">#查看索引：SHOW INDEX FROM 表名字;</span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br></pre></td></tr></table></figure><p>1.创建普通性索引；格式：create index 索引名称 on 表名(列名);  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create index putong on it(工资);</span><br><span class="line">mysql&gt; show index from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpvrgp8j60wc0atwgc02.jpg" alt="image-20210126150202815"></p><p>2、创建唯一性索引；格式：create unique index 索引名称 on 表名(列名);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2、创建唯一性索引；格式：create unique index 索引名称 on 表名(列名);</span><br><span class="line">mysql&gt; create unique index weiyi on it(身份证号);</span><br><span class="line">mysql&gt; show index from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vq0xeptj60wc0ctace02.jpg" alt="image-20210126150322356"></p><p>3、创建多列普通索引；格式：create index 索引名称 on 表名(列名1,列名2,……);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create index duolie on it(岗位,姓名);</span><br><span class="line">mysql&gt; show index from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vq5pg15j60we0fgwh302.jpg" alt="image-20210126150402564"></p><p>4、删除索引；格式：dorp index 索引名 on 表名字;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop index weiyi on it;      #删除weiyi索引</span><br><span class="line">mysql&gt; drop index putong on it;     #删除putong索引</span><br><span class="line">mysql&gt; drop index duolie on it;     #删除duolie索引</span><br></pre></td></tr></table></figure><p>5、测试索引查询速度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、准备表</span><br><span class="line">create table s1(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">gender char(6),</span><br><span class="line">email varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">2、创建存储过程auto_insert1()函数，实现批量插入记录</span><br><span class="line">mysql&gt; delimiter $$      #声明存储过程的结束符号为$$</span><br><span class="line">create procedure auto_insert1()</span><br><span class="line">BEGIN</span><br><span class="line">    declare i int default 1;</span><br><span class="line">    while(i&lt;3000000)do</span><br><span class="line">        insert into s1 values(i,concat(&#x27;egon&#x27;,i),&#x27;male&#x27;,concat(&#x27;egon&#x27;,i,&#x27;@oldboy&#x27;));</span><br><span class="line">        set i=i+1;</span><br><span class="line">    end while;</span><br><span class="line">END$$          #$$结束</span><br><span class="line">delimiter ;    #重新声明分号为结束符号</span><br><span class="line"></span><br><span class="line">3、查看储存过程</span><br><span class="line">mysql&gt; show create procedure auto_insert1\G</span><br><span class="line"></span><br><span class="line">4、调用存储过程；call  #调用</span><br><span class="line">mysql&gt; call auto_insert1();</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqdp6p4j30wf03mdgu.jpg" alt="image-20210126150546955"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc s1;        #查看s1表的结构</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqgtwbnj60wf0bvad302.jpg" alt="image-20210126150633680"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from s1;    #查看s1表有多少行数据</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqkndnaj30vz0ahmz1.jpg" alt="image-20210126150658915"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5、在没有索引的前提下测试查询速度</span><br><span class="line">mysql&gt; select * from s1 where id=333;    #查询；数据字段越长，查询时间越慢</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqp92mbj30wd09c0vb.jpg" alt="image-20210126150729341"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from s1 where email=&#x27;egon333@oldboy&#x27;;     #查询</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqu0ei4j30w60910v9.jpg" alt="image-20210126150814816"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6、在有索引的情况下测试查询速度</span><br><span class="line">6.1) 一定是为搜索条件的字段创建索引，比如select * from t1 where age &gt; 5;就需要为age加上索引。</span><br><span class="line"></span><br><span class="line">6.2) 在表中已经有大量数据的情况下，建索引会很慢，且占用硬盘空间，插入删除更新都很慢，只有查询快；因为查的时候是根据索引查的，所以快；但是在插入更新数据的时候系统会自动修改索引，所以就很慢。</span><br><span class="line"></span><br><span class="line">6.3) 需要注意的是：innodb表的索引会存放于s1.ibd文件中，而myisam表的索引则会有单独的索引文件table1.MYI</span><br><span class="line"></span><br><span class="line">mysql&gt; create index putong1 on s1(id);      #给id列创建普通索引</span><br><span class="line">mysql&gt; create index putong2 on s1(email);   #给email列创建普通索引</span><br><span class="line">mysql&gt; show index from s1;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqyrx9oj30w309y0uh.jpg" alt="image-20210126150927026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from s1 where id=333;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vr2xtq5j30w809qdiu.jpg" alt="image-20210126150946075"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from s1 where email=&#x27;egon333@oldboy&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vr6lhicj30wb0940vi.jpg" alt="image-20210126151022121"></p><h1 id="九、MySQL-锁"><a href="#九、MySQL-锁" class="headerlink" title="九、MySQL 锁"></a>九、MySQL 锁</h1><blockquote><p>锁概述</p></blockquote><p>MySQL的锁机制，就是数据库为了保证数据的一致性而设计的面对并发场景的一种规则。</p><p>最显著的特点是不同的存储引擎支持不同的锁机制，InnoDB支持行锁和表锁，MyISAM支持表锁。</p><p>表锁就是把整张表锁起来，特点是加锁快，开销小，不会出现死锁，锁粒度大，发生锁冲突的概率高，并发相对较低。</p><p>行锁就是以行为单位把数据锁起来, 特点是加锁慢, 开销大, 会出现死锁, 锁粒度小, 发生锁冲突的概率低，并发度也相对表锁较高。</p><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。</p><p>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁。</p><h2 id="1、MyISAM-锁"><a href="#1、MyISAM-锁" class="headerlink" title="1、MyISAM 锁"></a>1、MyISAM 锁</h2><p><strong>在MyISAM引擎中，读锁和写锁是互斥的，读写操作是串行的，锁设计方案如下：</strong></p><ul><li>对于写操作：如果表上没有锁，则在上面加一把写锁，否则，把请求放到写锁队列中。</li><li>对于读操作：如果表上没有锁，则在上面加一把读锁，否则，把请求方到读锁队列中。</li></ul><p><strong>这是什么意思呢？</strong></p><p>意思就是说MyISAM在执行查询语句前，会自动给涉及的所有表加读锁，在执行更新语句(增删改操作)前，会自动给涉及的表加写锁，这个过程并不需要用户干预。</p><p>当一个锁被释放时，锁定权会先被写锁队列中的线程得到，当写锁队列中的请求都跑完后，才轮到读锁队列中的请求。（即使读请求先到锁等待队列中，写请求后到，写请求也会插入到读请求之前！这就是MySQL认为写请求一般比读请求重要）</p><p>这就意味着, 如果一个表上有很多更新操作, 那么select语句将等待直到别的更新都结束后才能查到东西。这也就是为什么MyISAM表不适合大量更新操作应用的原因，因为大量更新操作可能导致查询操作很难获得读锁，从而长久阻塞，致使程序响应超时。</p><p><strong>表锁语句有如下三条（MyISAM和InnoDB都一样）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock tables 表名 read;     #加读锁，可读，但不能更新。</span><br><span class="line">lock tables 表名 write;    #加写锁，其他会话不可读，不可写。</span><br><span class="line">unlock tables;             #释放锁</span><br></pre></td></tr></table></figure><h2 id="2、InnoDB锁类型"><a href="#2、InnoDB锁类型" class="headerlink" title="2、InnoDB锁类型"></a>2、InnoDB锁类型</h2><p><strong>共享锁（S锁、读锁）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名 LOCK IN SHARE MODE;</span><br></pre></td></tr></table></figure><p>一个事务获取了一个数据行的读锁，允许其他事务也来获取读锁，但是不允许其他事务来获取写锁。也就是说, 我上了读锁之后，其他事务也可以来读，但是不能增删改。</p><p><strong>排他锁（X锁、写锁）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名 FOR UPDATE;</span><br><span class="line">一个事务获取了一个数据行的写锁，其他事务就不能再跑来获取任何锁了，所有请求都会被阻塞，直到当前的写锁被释放。</span><br></pre></td></tr></table></figure><p><strong>意向共享锁（IS）</strong>：事务在给一个数据行加共享锁之前必须先取得该表的IS锁。</p><p><strong>意向排他锁（IX）</strong>：事务在给一个数据行加共享锁之前必须先取得该表的IX锁。</p><p><strong>MDL锁</strong>：在事务中，InnoDB会给涉及的所有表加上一个MDL锁，其他事务就不可以执行任何DDL语句的操作。（亲测只要在事务中，不管是查询语句还是更新语句，涉及到的表都会被加上MDL锁）==<strong>这三种锁，是InnoDB内部使用的锁，是自动 。</strong>==</p><p><strong>几种行锁技术</strong></p><p>1、记录锁（record lock）</p><p>这是一个索引记录锁，它是建立在索引记录上的锁（主键和唯一索引都算），很多时候，锁定一条数据，由于无索引，往往会导致整个表被锁住，建立合适的索引可以防止扫描整个表。</p><p>如：开两个会话，两个事务，并且都不commit，该表有主键，两个会话修改同一条数据，第一个会话update执行后，第二个会话的update是无法执行成功的，会进入等待状态，但是如果update别的数据行就可以成功。</p><p>再例如：开两个会话，两个事务，并且都不commit，并且该表无主键无索引，那么第二个会话不管改什么都会进入等待状态。因为无索引的话，整个表的数据都被第一个会话锁定了。</p><p>2、锁等待和死锁</p><p>锁等待是指一个事务过程中产生的锁，其他事务需要等待上一个事务释放它的锁，才能占用该资源，如果该事务一直不释放，就需要继续等待下去，直到超过了锁等待时间，会报一个超时错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看锁等待允许时间</span><br><span class="line">SHOW VARIABLES LIKE &quot;innodb_lock_wait_timeout&quot;;</span><br></pre></td></tr></table></figure><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，就是所谓的死循环。</p><p>典型的实验过程就是两个事务并发，互相修改自己的一条数据，紧接着又修改对方的锁定的那条数据，都要等待对方的锁，死锁就产生了。</p><p>出现死锁的问题并不可怕，解决死锁通常有如下办法：</p><ul><li><p>不要把无关的操作放到事务里，小事务发生冲突的概率较低。</p></li><li><p>如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表, 这样事务就会形成定义良好的查询并且没有死锁。</p></li><li><p>尽量按照索引去查数据，范围查找增加了锁冲突的可能性。</p></li><li><p>对于非常容易产生死锁的业务部分，可以尝试升级锁粒度，通过表锁定来减少死锁产生的概率。</p></li></ul><p>3、锁监控</p><p>查询哪些表正在被锁定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW OPEN TABLES WHERE In_use &gt; 0;</span><br></pre></td></tr></table></figure><p>这个命令监控的是被表锁锁住的表，亲测如果用行锁，这个命令是没有反应的，真的得自己动手实践才能发现真相。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes</title>
      <link href="/2021/06/06/Kubernetes/"/>
      <url>/2021/06/06/Kubernetes/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、K8S概念"><a href="#一、K8S概念" class="headerlink" title="一、K8S概念"></a>一、K8S概念</h1><h2 id="1-什么是Kubernetes"><a href="#1-什么是Kubernetes" class="headerlink" title="1. 什么是Kubernetes ?"></a>1. 什么是Kubernetes ?</h2><blockquote><p>k8s是一组服务器集群，K8s所管理的集群节点上的容器。<a href="https://kubernetes.io/">官方网站</a></p></blockquote><p>Kubernetes是一个可移植的，可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。它拥有一个庞大且快速增长的生态系统。Kubernetes的服务，支持和工具广泛可用。</p><p>Kubernetes这个名字起源于希腊语，意思是舵手或飞行员。Google在2014年开源了Kubernetes项目。Kubernetes将超过15年的Google在大规模生产工作负载方面的经验与社区中最好的想法和实践相结合。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uo0jsryj60ys0md76e02.jpg" alt="c"></p><h2 id="2-为什么需要它？他的功能？"><a href="#2-为什么需要它？他的功能？" class="headerlink" title="2. 为什么需要它？他的功能？"></a>2. 为什么需要它？他的功能？</h2><p>容器是捆绑和运行应用程序的好方法。在生产环境中，您需要管理运行应用程序的容器，并确保没有停机时间。例如，如果一个容器发生故障，则需要启动另一个容器。如果由系统处理此行为，会不会更容易？</p><p>这就是Kubernetes的救援方法！Kubernetes为您提供了一个可弹性运行分布式系统的框架。它负责应用程序的扩展和故障转移，提供部署模式等。例如，Kubernetes可以轻松管理系统的Canary部署。</p><h3 id="自我修复"><a href="#自我修复" class="headerlink" title="自我修复"></a>自我修复</h3><blockquote><p>在节点故障时重新启动失败的容器，替换和重新部署容器，保证预期的副本数量；杀死健康检查失败的容器，并且在未准备好之前不会处理客户端请求，确保线上服务不中断。</p></blockquote><h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><blockquote><p>使用命令、UI或者基于CPU使用情况自动快速扩容和缩容应用程序实例，保证应用业务高峰并发时的高可用性；业务低峰时回收资源，以最小成本运行服务。</p></blockquote><h3 id="自动部署和回滚"><a href="#自动部署和回滚" class="headerlink" title="自动部署和回滚"></a>自动部署和回滚</h3><blockquote><p>Kubernetes采用滚动更新策略更新应用，一次更新一个Pod，而不是同时删除所有Pod，如果更新过程中出现问题，Kubernetes将回滚更改，升级保证业务不受影响。</p></blockquote><h3 id="存储编排"><a href="#存储编排" class="headerlink" title="存储编排"></a>存储编排</h3><blockquote><p>挂载外部存储系统，无论是来自本地存储，公有云（如AWS），还是网络存储（如NFS、iSCSI、GlusterFS、Ceph）都作为集群资源的一部分使用，极大提高存储使用灵活性。</p></blockquote><h3 id="服务发现和负载均衡"><a href="#服务发现和负载均衡" class="headerlink" title="服务发现和负载均衡"></a>服务发现和负载均衡</h3><blockquote><p>Kubernetes为多个容器提供一个统一访问入口（内部IP地址和一个DNS名称），并且负载均衡关联的所有容器，使得用户无需考虑容器IP问题。集群内应用可以通过DNS名称访问另一个应用，方便微服务之间通信。</p></blockquote><h3 id="机密和配置管理"><a href="#机密和配置管理" class="headerlink" title="机密和配置管理"></a>机密和配置管理</h3><blockquote><p>管理机密数据和应用程序配置，而不需要把敏感数据暴露在镜像里，提高敏感数据安全性。</p></blockquote><h3 id="资源监控"><a href="#资源监控" class="headerlink" title="资源监控"></a>资源监控</h3><blockquote><p>Node节点组件集成cAdvisor资源收集工具，可通过Heapster汇总整个集群节点资源数据，然后存储到InfluxDB时序数据库，再由Grafana展示，可以快速实现对集群资源监控，满足基本监控需求。</p></blockquote><h3 id="提供认证和授权"><a href="#提供认证和授权" class="headerlink" title="提供认证和授权"></a>提供认证和授权</h3><blockquote><p>支持属性访问控制 (ABAC)、角色访问控制（RBAC）认证授权策略，控制用户是否有权限使用Kubernetes API做某些事情，精细化权限分配。</p></blockquote><h2 id="3-Kubernetes架构"><a href="#3-Kubernetes架构" class="headerlink" title="3. Kubernetes架构"></a>3. Kubernetes架构</h2><blockquote><p>kubernetes分别有两种角色：1、master 管理节点     2、worker 工作节点</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uo5kl1gj31cc0ro466.jpg" alt="b"></p><blockquote><p><strong>生产k8s集群图构</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uo9xan5j31090qztby.jpg" alt="a"></p><h2 id="4-Kubernetes组件"><a href="#4-Kubernetes组件" class="headerlink" title="4. Kubernetes组件"></a>4. Kubernetes组件</h2><blockquote><p>kubernetes分为 Master节点和 Node节点，前者是管理节点，后者是容器运行的节点。其中Master节点主要有3个重要组件，分别是APIServer，sheduler 和 controller manager。</p><p>Node节点 有两个组件 kubelet 和 kubelet （有时候master节点也可以既是管理节点也是工作节点）</p></blockquote><h3 id="4-1-Master-组件"><a href="#4-1-Master-组件" class="headerlink" title="4.1 Master 组件"></a>4.1 Master 组件</h3><h4 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h4><blockquote><p>APIServer组件负责响应用户的管理请求、进行指挥协调工作，所有服务访问统一入口。</p></blockquote><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><blockquote><p>scheduler组件是将待调度的pod按照一定的调度算法绑定到合适的工作节点上，负责介绍任务，选择合适的点进行分配任务。</p></blockquote><h4 id="Controller-manager"><a href="#Controller-manager" class="headerlink" title="Controller manager"></a>Controller manager</h4><blockquote><p>是一组控制器的合集，负责控制控制管理对应的资源，如副本（replication）和工作节点（node）等。维持副本期望数目</p></blockquote><h4 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h4><blockquote><p>etcd 负责以K/V的形式保存 Kubernetes Cluster 的配置信息和各种资源的状态信息。当数据发生变化时，etcd 会快速地通知 Kubernetes 相关组件。键值对数据库储存K8S集群所有重要信息（持久化）</p></blockquote><h3 id="4-2-Node组件"><a href="#4-2-Node组件" class="headerlink" title="4.2 Node组件"></a>4.2 Node组件</h3><blockquote><p>管理维护pod运行的agent，直接跟容器引擎交互实现容器的生命周期管理</p></blockquote><h4 id="Kube-proxy"><a href="#Kube-proxy" class="headerlink" title="Kube-proxy"></a>Kube-proxy</h4><blockquote><p>将service的流量转发到对应endpoint，负责写入规则至 IPTABLES、IPvs实现服务映射访间的</p></blockquote><h4 id="Flannel网络"><a href="#Flannel网络" class="headerlink" title="Flannel网络"></a>Flannel网络</h4><blockquote><p>维持各个节点上pod之间的通信。</p></blockquote><h3 id="4-3-重要组件"><a href="#4-3-重要组件" class="headerlink" title="4.3 重要组件"></a>4.3 重要组件</h3><h4 id="Coredns"><a href="#Coredns" class="headerlink" title="Coredns"></a>Coredns</h4><blockquote><p>可以为集群中的Svc创建一个域名IP的对应关系解析</p></blockquote><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><blockquote><p>给K8S集群提供一个B/S结构访问体系</p></blockquote><h4 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h4><blockquote><p>官方只能实现四层代理， INGRESS可以实现七层代理</p></blockquote><h4 id="Federation"><a href="#Federation" class="headerlink" title="Federation"></a>Federation</h4><blockquote><p>提供一个可以跨集群中心多K8S统一管理功能</p></blockquote><h4 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h4><blockquote><p>提供K8sS集群的监控能力</p></blockquote><h4 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h4><blockquote><p>提供K8s集群旦志统一分析介入平台</p></blockquote><h2 id="5-k8s网络架构概念"><a href="#5-k8s网络架构概念" class="headerlink" title="5. k8s网络架构概念"></a>5. k8s网络架构概念</h2><blockquote><p>==<strong>CNI（容器网络接口）</strong>==</p><p>CNI是Container Network Interface的是一个标准的，通用的接口。现在容器平台：docker，kubernetes，mesos，容器网络解决方案：flannel，calico，weave。只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能，而CNI正是这样的一个标准接口协议。</p><p><strong>pod的通信分类</strong></p><p>同一个Pod内的多个容器之间：lo Network</p><p>各Pod之间 或 不同主机各Pod 的通讯：Over lay Network</p><p>Pod 与 Service之间的通讯：各节点的 Iptables规则 或者 IPVS</p></blockquote><p><strong>K8S整体网络模型图</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uohgqrvj30lu0gzgno.jpg"></p><p><strong>K8S中的三种网络</strong></p><blockquote><p>node网络：负责不同主机之间的pod通信的入口和出口（物理网络）</p><p>service网络：负责对外提供服务（暴露网络）</p><p>pod网络：负责pod内部容器之间的通信 和 pod 与 pod之间的通信（内部网络）</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upe69bgj30w30g3gqb.jpg" alt="image-20200920141256555"></p><p><strong>K8S的网络通讯原理</strong></p><blockquote><p><strong>同一个Pod内部通讯：</strong></p><ul><li>同一个Pod共享同一个网络命名空间，共享同一个 Linux协议栈。</li></ul><p><strong>Pod1 至 Pod2：</strong></p><ul><li>Pod1至Pod2不在同一台主机：Pod的地址是与 docker0在同一个网段的，但 docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。将PoIP和所在 Node’MJIP关联起来，通过这个关联让Pod可以互相访问</li><li>Podl与Pod2在同一台机器：由 Docker0网桥直接转发请求至Pod2，不需要经过 Flannel</li></ul><p><strong>Pod 至 Service的网络：</strong></p><ul><li>iptables 或者 IPVS维护和转发</li></ul><p><strong>Pod到外网：</strong></p><ul><li>Pod向外网发送请求，查找路由表，转发数据包到宿主机的网卡，宿主网卡完成路由选择后， iptables执行 Masquerade，把源IP更改为宿主网卡的IP，然后向外网服务器发送请求</li></ul><p><strong>外网访问Pod：</strong></p><ul><li>访问对应的Service即可</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upifvlkj319g0kznpg.jpg" alt="ees"></p><h2 id="6-Kubernetes核心概念"><a href="#6-Kubernetes核心概念" class="headerlink" title="6. Kubernetes核心概念"></a>6. Kubernetes核心概念</h2><h3 id="6-1-container"><a href="#6-1-container" class="headerlink" title="6.1 container"></a>6.1 container</h3><blockquote><p>容器可以运行服务和程序，容器是独立运行的一个或一组应用。容器可以进行启动、开始、停止、删除等操作，每个容器都是相互隔离的。可以把容器看作是一个简易版的linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行其中的应用程序。</p></blockquote><h3 id="6-2-namespace"><a href="#6-2-namespace" class="headerlink" title="6.2 namespace"></a>6.2 namespace</h3><blockquote><p>可以将一个物理的cluster逻辑上划分成多个虚拟cluster，每个cluster就是一个namespace。不同的namespace里的资源是完全隔离的。</p></blockquote><h3 id="6-3-labels"><a href="#6-3-labels" class="headerlink" title="6.3 labels"></a>6.3 labels</h3><blockquote><p>标签用于区分对象（比如pod和services）, kubernetes中的任意对象都是通过label进行标识，label的实质是一系列的key/value键值对，其中key与value由用户自己指定。label可以附加到各种资源对象上，如node、pod、service、RC等，一个资源对象可以定义任意数量的label，可以通过label selector（标签选择器）查询和筛选资源对象。label是rc和service运行的基础，两者通过label来进行关联node上运行的pod</p></blockquote><h3 id="6-4-pod"><a href="#6-4-pod" class="headerlink" title="6.4 pod"></a>6.4 pod</h3><blockquote><p>在kubernetes系统中, pod是最小部署单元, 一个pod包含一个或多个容器（一组容器的集合）,<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/"> pod</a> 是一个可以被创建、销毁、调度、管理的最小部署单元。kubernates为每个pod都分配了唯一的ip地址, 称之为PodIP, 一个pod里的多个容器共享podip地址，它负责外部跟容器之间进行通信。</p><p>Pod主要分为两种类型：1、自主式pod，2、控制器管理pod</p><p>pod是kubernetes最重要的基本概念，也是k8s中的最小运行单元，一个pod中可以运行一个或多个的container及一个管理 container——pause</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upmukg7j30wp0hgmyd.jpg" alt="image"></p><h3 id="6-5-Controller-Manager"><a href="#6-5-Controller-Manager" class="headerlink" title="6.5 Controller Manager"></a>6.5 Controller Manager</h3><blockquote><p>Controller Manager 由 kube-controller-manager 和 cloud-controller-manager 组成， 是Kubernetes 的大脑， 它通过 apiserver 监控整个集群的状态， 并确保集群处于预期的工作状态。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upq32y4j30of0fqn0l.jpg" alt="image-20210226110055294"></p><h3 id="6-6-services"><a href="#6-6-services" class="headerlink" title="6.6 services"></a>6.6 services</h3><blockquote><p><a href="https://www.cnblogs.com/linuxk/p/9605901.html">services</a> 是kubernetes最外围的单元，通过虚拟一个访问ip及服务端口，可以访问我们定义好的pod资源，是通过iptables的nat转发来实现，转发的目标端口为kube_proxy生成的随机端口。services代理pod集合对外表现是一个访问入口，分配一个集群ip地址，来自这个ip的请求将负载均衡转发后端pod中的容器，service通过lable selector选择一组pod提供服务。</p></blockquote><p>deployment可以部署多个副本，每个pod 都有自己的IP，外界如何访问这些副本那？</p><p>答案是：service</p><p>k8s的 service定义了外界访问一组特定pod的方式。service有自己的IP和端口，service为pod提供了负载均衡。</p><p>k8s运行容器pod与访问容器这两项任务分别由controller和service执行。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uptd7wbj30su0jcjya.jpg" alt="image-20200920132730652"></p><blockquote><p><strong>K8S-Service类型：</strong></p></blockquote><p>ClusterIp：默认类型，自动分配一个仅Cluster内部可以访问的虚拟IP</p><p>![](Kubernetes 个人笔记.assets/008i3skNly1gr7uq021bqj30ey09yjrw-20210606002546373.jpg)</p><p>NodePort：在ClusterIP基础上为Service在每台机器上绑定一个端口，这样可以通过NodeIP:NodePort来访问服务</p><p>![](Kubernetes 个人笔记.assets/008i3skNly1gr7uqvnov8j30fc07saal.jpg)</p><p>LoadBalancer：在NodePort基础上，借助cloud provider创建一个外部负载均衡器，并将请求转发到NodeIP:NodePort</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ur6odhwj30fg0fzabf.jpg"></p><h1 id="二、部署K8S集群（kubeadm）"><a href="#二、部署K8S集群（kubeadm）" class="headerlink" title="二、部署K8S集群（kubeadm）"></a>二、部署K8S集群（kubeadm）</h1><blockquote><p>准备三台Linux虚拟机（K8S集群三台起步），系统用CentOS7.4，虚拟机配置是2颗CPU和2G内存（K8S最低要求的配置），网络使用桥接网卡方式并使用静态IP</p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th><th>角色描述</th></tr></thead><tbody><tr><td>Master</td><td>ens32:192.168.2.1</td><td>K8S Master节点/ETCD节点</td></tr><tr><td>Node1</td><td>ens32:192.168.2.2</td><td>K8S Node节点</td></tr><tr><td>Node2</td><td>ens32:192.168.2.3</td><td>K8S Node节点</td></tr><tr><td>harbor</td><td>ens32:192.168.2.4</td><td>docker 镜像仓库节点</td></tr></tbody></table><h2 id="1-系统环境初始化"><a href="#1-系统环境初始化" class="headerlink" title="1. 系统环境初始化"></a>1. 系统环境初始化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改主机名</span></span><br><span class="line">hostnamectl set-hostname master1</span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line">hostnamectl set-hostname node2</span><br><span class="line">hostnamectl set-hostname harbor</span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统时区为中国/上海</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前的 UTC 时间写入硬件时钟</span></span><br><span class="line">timedatectl set-local-rtc 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启依赖于系统时间的服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载阿里源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line">yum install -y epel-release conntrack ntpdate ntp ipvsadm ipset iptables-services iptables curl sysstat libseccomp wget unzip net-tools git yum-utils jq  device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步时间</span></span><br><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hosts</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; /etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.1 master1</span></span><br><span class="line"><span class="string">192.168.2.2 node1</span></span><br><span class="line"><span class="string">192.168.2.3 node2</span></span><br><span class="line"><span class="string">192.168.2.4 hub.lemon.com</span></span><br><span class="line"><span class="string">199.232.68.133 raw.githubusercontent.com</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置防火墙为 Iptables 并设置空规则</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl  start iptables</span><br><span class="line">systemctl  <span class="built_in">enable</span> iptables</span><br><span class="line">iptables -F  &amp;&amp;  service iptables save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap、selinux</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统不需要服务</span></span><br><span class="line">systemctl stop postfix &amp;&amp; systemctl <span class="built_in">disable</span> postfix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 rsyslogd 和 systemd journald</span></span><br><span class="line"><span class="comment"># 持久化保存日志的目录</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/journal</span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Journal]</span></span><br><span class="line"><span class="string"># 持久化保存到磁盘</span></span><br><span class="line"><span class="string">Storage=persistent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 压缩历史日志</span></span><br><span class="line"><span class="string">Compress=yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SyncIntervalSec=5m</span></span><br><span class="line"><span class="string">RateLimitInterval=30s</span></span><br><span class="line"><span class="string">RateLimitBurst=1000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 最大占用空间 10G</span></span><br><span class="line"><span class="string">SystemMaxUse=10G</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 单日志文件最大 200</span></span><br><span class="line"><span class="string">MSystemMaxFileSize=200M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 日志保存时间 2 周</span></span><br><span class="line"><span class="string">MaxRetentionSec=2week</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不将日志转发到 syslog</span></span><br><span class="line"><span class="string">ForwardToSyslog=no</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h2 id="2-升级系统内核并优化"><a href="#2-升级系统内核并优化" class="headerlink" title="2. 升级系统内核并优化"></a>2. 升级系统内核并优化</h2><blockquote><p>CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定，例如：</p><p>高版本的 docker(1.13 以后) 启用了 3.10 kernel 实验支持的 kernel memory account 功能(无法关闭)，当节点压力大如频繁启动和停止容器时会导致 cgroup memory leak；网络设备引用计数泄漏, 会导致类似于报错：”kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”;</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决方案：升级内核到 4.4.X 以上；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载内核源</span></span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本内核</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install -y kernel-lt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用内核</span></span><br><span class="line">cat /boot/grub2/grub.cfg |grep menuentry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核启动项</span></span><br><span class="line">grub2-editenv list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级系统文件</span></span><br><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 设置开机从新内核启动 &amp; 重启系统</span></span><br><span class="line">grub2-set-default <span class="string">&quot;CentOS Linux (4.4.236-1.el7.elrepo.x86_64) 7 (Core)&quot;</span> &amp;&amp; reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># kube-proxy开启ipvs的前置条件</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自加载</span></span><br><span class="line">chmod a+x /etc/rc.d/rc.local</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;bash /etc/sysconfig/modules/ipvs.modules&#x27;</span> &gt;&gt; /etc/rc.local</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化内核参数</span></span><br><span class="line">cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"># 关闭IPV6协议</span></span><br><span class="line"><span class="string">net.ipv6.conf.all.disable_ipv6=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启网桥模式</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启路由转发</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不检查物理内存是否够用</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启 OOM</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=1048576</span></span><br><span class="line"><span class="string">fs.inotify.max_user_instances=8192</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启的文件句柄数目</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启对大的文件数目</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ~~~</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string">vm.dirty_bytes=15728640</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自动加载</span></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure><h2 id="3-部署Docker、kubeadm、kubectl"><a href="#3-部署Docker、kubeadm、kubectl" class="headerlink" title="3. 部署Docker、kubeadm、kubectl"></a>3. 部署Docker、kubeadm、kubectl</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载阿里的docker源、Centos7源、kubernetes源</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache &amp;&amp; <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docke，记给docker换镜像源</span></span><br><span class="line">yum -y install docker-ce-18.09.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 /etc/docker 目录</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 daemon配置文件</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [&quot;https://p8hkkij9.mirror.aliyuncs.com&quot;],</span></span><br><span class="line"><span class="string">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Kubeadm （主从配置）</span></span><br><span class="line"><span class="comment"># 这里正常情况下，master上安装kubeadm、kubectl，node只安装kubelet就行，不过都装上也没事。</span></span><br><span class="line">yum -y install kubeadm-1.15.1 kubectl-1.15.1 kubelet-1.15.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动kubelet</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2 id="4-初始化主节点"><a href="#4-初始化主节点" class="headerlink" title="4. 初始化主节点"></a>4. 初始化主节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s节点上提前下载k8s镜像</span></span><br><span class="line">cat image-k8s-v1_15_1.sh </span><br><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">images=(</span><br><span class="line">    kube-apiserver:v1.15.1</span><br><span class="line">    kube-controller-manager:v1.15.1</span><br><span class="line">    kube-scheduler:v1.15.1</span><br><span class="line">    kube-proxy:v1.15.1</span><br><span class="line">    pause:3.1</span><br><span class="line">    etcd:3.3.10</span><br><span class="line">    coredns:1.3.1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line">    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">bash image-k8s-v1_15_1.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查镜像是否完善</span></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">k8s.gcr.io/kube-apiserver            v1.15.1             68c3eb07bfc3        14 months ago       207MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager   v1.15.1             d75082f1d121        14 months ago       159MB</span><br><span class="line">k8s.gcr.io/kube-scheduler            v1.15.1             b0b3c4c404da        14 months ago       81.1MB</span><br><span class="line">k8s.gcr.io/kube-proxy                v1.15.1             89a062da739d        14 months ago       82.4MB</span><br><span class="line">k8s.gcr.io/coredns                   1.3.1               eb516548c180        20 months ago       40.3MB</span><br><span class="line">k8s.gcr.io/etcd                      3.3.10              2c4adeb21b4f        21 months ago       258MB</span><br><span class="line">k8s.gcr.io/pause                     3.1                 da86e6ba6ca1        2 years ago         742kB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改kubeadm默认初始化配置模板</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubeadm config print init-defaults &gt; kubeadm-config.yaml</span></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># cat kubeadm-config.yaml </span></span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  <span class="comment"># 填写好master1的IP地址</span></span><br><span class="line">  advertiseAddress: 192.168.2.1</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: master1</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: k8s.gcr.io</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line"><span class="comment"># 选择初始化的k8s集群版本镜像</span></span><br><span class="line">kubernetesVersion: v1.15.1</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  <span class="comment"># 原因是一会要用的flannel来解决pod的扁平化网络，而flannel默认的网段就是10.244.0.0/16，所以这就将pod的IP段设置为和flannel相同的IP段，免得后期再做修改</span></span><br><span class="line">  podSubnet: <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line"><span class="comment"># 下面这一段的意思是将默认的iptables调度方式改为为IPVS</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">featureGates:</span><br><span class="line">  SupportIPVSProxyMode: <span class="literal">true</span></span><br><span class="line">mode: ipvs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化k8s集群</span></span><br><span class="line"><span class="comment"># 如果</span></span><br><span class="line"><span class="comment"># --experimental-upload-certs：可以让后来加入的主节点自动加入证书；注：v1.15以上版本的参数已改为--upload-certs</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log</span></span><br></pre></td></tr></table></figure><h2 id="5-加入主节点以及其余工作节点"><a href="#5-加入主节点以及其余工作节点" class="headerlink" title="5. 加入主节点以及其余工作节点"></a>5. 加入主节点以及其余工作节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># cat kubeadm-init.log</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.2.1:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:4dc6790b3232bc4fd7f80e614d38e21b15cfd3d318f09b596b68336375b381e4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查kubelet服务是否已经打开</span></span><br><span class="line">systemctl status kubelet | grep running</span><br><span class="line">   Active: active (running) since 日 2020-09-13 01:53:32 CST; 6min ago</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是会发现节点的状态是NotReady</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME      STATUS     ROLES    AGE     VERSION</span><br><span class="line">master1   NotReady   master   11m     v1.15.1</span><br><span class="line">node1     NotReady   &lt;none&gt;   2m13s   v1.15.1</span><br><span class="line">node2     NotReady   &lt;none&gt;   2m10s   v1.15.1</span><br></pre></td></tr></table></figure><p>==<strong>这就需要下面来部署flannel来解决扁平化网络问题</strong>==</p><h2 id="6-部署-CNI-flannel网络"><a href="#6-部署-CNI-flannel网络" class="headerlink" title="6. 部署 CNI - flannel网络"></a>6. 部署 CNI - flannel网络</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署flannel全覆盖网络</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再来检查节点状态</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME      STATUS   ROLES    AGE     VERSION</span><br><span class="line">master1   Ready    master   18m     v1.15.1</span><br><span class="line">node1     Ready    &lt;none&gt;   8m38s   v1.15.1</span><br><span class="line">node2     Ready    &lt;none&gt;   8m35s   v1.15.1+</span><br></pre></td></tr></table></figure><h2 id="7-查看集群状态-和相关的容器"><a href="#7-查看集群状态-和相关的容器" class="headerlink" title="7. 查看集群状态 和相关的容器"></a>7. 查看集群状态 和相关的容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># kubectl get nodes -o wide</span></span><br><span class="line">NAME      STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">master1   Ready    master   20m   v1.15.1   192.168.2.1   &lt;none&gt;        CentOS Linux 7 (Core)   4.4.236-1.el7.elrepo.x86_64   docker://18.9.6</span><br><span class="line">node1     Ready    &lt;none&gt;   10m   v1.15.1   192.168.2.2   &lt;none&gt;        CentOS Linux 7 (Core)   4.4.236-1.el7.elrepo.x86_64   docker://18.9.6</span><br><span class="line">node2     Ready    &lt;none&gt;   10m   v1.15.1   192.168.2.3   &lt;none&gt;        CentOS Linux 7 (Core)   4.4.236-1.el7.elrepo.x86_64   docker://18.9.6</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod --all-namespaces -o wide</span></span><br><span class="line">NAMESPACE     NAME                              READY   STATUS    RESTARTS   AGE    IP            NODE      NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-system   coredns-5c98db65d4-57czz          1/1     Running   4          136d   10.244.0.9    master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   coredns-5c98db65d4-s9fsm          1/1     Running   4          136d   10.244.0.8    master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   etcd-master1                      1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-apiserver-master1            1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-controller-manager-master1   1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-6qw52       1/1     Running   20         136d   192.168.2.3   node2     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-hj7wr       1/1     Running   1          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-wc96r       1/1     Running   20         136d   192.168.2.2   node1     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-5xcpl                  1/1     Running   5          136d   192.168.2.3   node2     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-lwjps                  1/1     Running   4          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-r77pb                  1/1     Running   4          136d   192.168.2.2   node1     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-scheduler-master1            1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="8-搭建配置harbor私有仓库"><a href="#8-搭建配置harbor私有仓库" class="headerlink" title="8. 搭建配置harbor私有仓库"></a>8. 搭建配置harbor私有仓库</h2><blockquote><p>安装Harbor需要先安装docker和docker-compose，上面的系统初始化、系统升级和优化、安装Docker的步骤这里不再陈述</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有docker节点的daemon.json文件上添加下面信任配置</span></span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://p8hkkij9.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">    <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">    <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://hub.lemon.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#~~ 这里先不急着重启docker，等一会颁发完证书之后在重启</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Harbor节点上安装docker-compose</span></span><br><span class="line">[root@harbor ~]<span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line">[root@harbor ~]<span class="comment"># chmod a+x docker-compose</span></span><br><span class="line">[root@harbor ~]<span class="comment"># mv docker-compose /usr/local/bin/</span></span><br><span class="line">[root@harbor ~]<span class="comment"># docker-compose --version</span></span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Harbor私有hub，创建CA证书</span></span><br><span class="line">[root@harbor ~]<span class="comment"># which openssl</span></span><br><span class="line">/usr/bin/openssl</span><br><span class="line">[root@harbor ~]<span class="comment"># mkdir -p /data/ssl &amp;&amp; cd /data/ssl/</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7utpkiy4j30of052aax.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7utsp2asj30nc03oglx.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建生成证书签名请求</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout hub.lemon.com.key -out hub.lemon.com.csr</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uw7j1trj30o808kta2.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uwcz6dbj30o808kta2.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成注册表主机证书</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># openssl x509 -req -days 365 -in hub.lemon.com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out hub.lemon.com.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=lemon/OU=hub/CN=hub.lemon.com</span><br><span class="line">Getting CA Private Key</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看生成的证书</span></span><br></pre></td></tr></table></figure><p><a href="">![](Kubernetes 个人笔记.assets/008i3skNly1gr7uwhrelmj30le06kmyq.jpg)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信任自签发的域名证书</span></span><br><span class="line"><span class="comment"># 由于linux操作系统不信任自签发的CA证书，所以需要把证书加入到系统的信任证书里</span></span><br><span class="line"><span class="comment"># 添加自签证书到系统</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># cp hub.lemon.com.crt /etc/pki/ca-trust/source/anchors/</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># ls -lh /etc/pki/ca-trust/source/anchors/</span></span><br><span class="line">总用量 4.0K</span><br><span class="line">-rw-r--r-- 1 root root 1.9K 9月  13 02:23 hub.lemon.com.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统CA信任立刻生效</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># update-ca-trust enable</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># update-ca-trust extract</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果已经启动Docker了，必须要重启；如果安装过Harbor以后再重启的话，有可能会出现harbor连不上的情况，需要重新把Harbor启动的容器和镜像删除后，重新install一遍</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建harbor的证.目录</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># mkdir -p /usr/local/harbor/ssh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制域名证到harbor要安装的路径</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># cp hub.lemon.com.crt hub.lemon.com.key /usr/local/harbor/ssh/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装测试，上传harbor安装包并解压到相应路径</span></span><br></pre></td></tr></table></figure><p><a href="">![](Kubernetes 个人笔记.assets/008i3skNly1gr7uwoq63yj30qr03r3z0.jpg)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor ~]<span class="comment"># tar xf harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line">[root@harbor ~]<span class="comment"># mv harbor/* /usr/local/harbor/</span></span><br><span class="line">[root@harbor ~]<span class="comment"># cd /usr/local/harbor/ &amp;&amp; ls</span></span><br></pre></td></tr></table></figure><p><a href="">![](Kubernetes 个人笔记.assets/008i3skNly1gr7uwue6eej30ns02e3yy.jpg)</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># harbor配置备份 &amp; 修改配置文件</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># cp harbor.yml harbor.yml.bak</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># vim harbor.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uwy44bgj30vd0l93zq.jpg" alt="gggg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成配置 &amp; 安装（需联网）</span></span><br><span class="line"><span class="comment"># 下载harbor所需镜像</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># ./prepare</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">goharbor/prepare    v1.9.0              aa594772c1e8        12 months ago       147MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Harbor</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># ./install.sh --with-notary --with-clair --with-chartmuseum</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Harbor日志文件存放路径为/var/log/harbor/</span></span><br><span class="line"><span class="comment"># 如果需要修改Harbor的配置文件harbor.yml，因为Harbor是基于docker-compose服务编排的，我们可以使用docker-compose命令重启Harbor。不修改配置文件，重启Harbor命令：docker-compose start | stop | restart</span></span><br><span class="line">1、停止Harbor</span><br><span class="line">[root@harbor ~]<span class="comment"># docker-compose -f /usr/local/harbor/docker-compose.yml down</span></span><br><span class="line"></span><br><span class="line">2、启动Harbor</span><br><span class="line">[root@harbor ~]<span class="comment"># docker-compose -f /usr/local/harbor/docker-compose.yml up -d</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uxxrfp3j30p704ojrx.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自运行</span></span><br><span class="line">[root@harbor ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/rc.local </span></span><br><span class="line">docker-compose -f /usr/<span class="built_in">local</span>/harbor/docker-compose.yml up -d</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">[root@harbor ~]<span class="comment"># chmod u+x /etc/rc.d/rc.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录Harbor仓库</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># docker login https://hub.lemon.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: Harbor12345</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端测试是否能够访问（须在客户端加入hosts）</span></span><br><span class="line">https://hub.lemon.com/</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uzrb0nrj30zh0mk3z9.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uzvvy8tj30zg0d1wfg.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随便在一个节点上测试docker是否能使用harbor库</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker login https://hub.lemon.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># docker pull httpd</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker tag httpd:latest hub.lemon.com/library/httpd:v1  #打好标签</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker rmi httpd:latest</span></span><br><span class="line">Untagged: httpd:latest</span><br><span class="line">Untagged: httpd@sha256:0fce91cc167634ede639701b7dd1d8093f4ad2f2d9d0d5a8f4be2eaef8a570fb</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v01ysnzj30yw08otay.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># docker push hub.lemon.com/library/httpd:v1    #推送至harbor仓库</span></span><br><span class="line">The push refers to repository [hub.lemon.com/library/httpd]</span><br><span class="line">f1fee4547086: Pushed </span><br><span class="line">a6a46c0268b1: Pushed </span><br><span class="line">951b1be5cf2d: Pushed </span><br><span class="line">d37da03a9458: Pushed </span><br><span class="line">07cab4339852: Pushed </span><br><span class="line">v1: digest: sha256:8c9bc11ca46ffd0b6b8a00e30aa670abef6c0d5d308e318a5cb8cf9e23931649 size: 1367</span><br><span class="line"><span class="comment"># 回到浏览器查看</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v05lx1ej30zk0ehjsd.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v0cpenuj31020bgmxn.jpg" alt="iiii"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kubernetes拉取harbor库镜像创建pod</span></span><br><span class="line"><span class="comment"># 在此之前先将打标签的镜像删除</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker rmi hub.lemon.com/library/httpd:v1</span></span><br><span class="line">Untagged: hub.lemon.com/library/httpd:v1</span><br><span class="line">Untagged: hub.lemon.com/library/httpd@sha256:8c9bc11ca46ffd0b6b8a00e30aa670abef6c0d5d308e318a5cb8cf9e23931649</span><br><span class="line">Deleted: sha256:6d82971d37d087be9917ab2015a4dc807569c736d3f2017c0821ddc4ed126617</span><br><span class="line">Deleted: sha256:59a897aaa844713f078ea9234bd61b0f4885598a9ffb1267b4c59983813abb52</span><br><span class="line">Deleted: sha256:6942605f2c5a8ba622491e369f2585daafe749a645835f5abb4fb9d11803664d</span><br><span class="line">Deleted: sha256:0f44970c8ecb7e1107f45ff7d5a7f7f3799a9821dce5cd30c51f2f7641339665</span><br><span class="line">Deleted: sha256:97635989e45ed57deef09cd09be52d008a073f2e1e045a1ba91956fbc2db2961</span><br><span class="line">Deleted: sha256:07cab433985205f29909739f511777a810f4a9aff486355b71308bb654cdc868</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于harbor仓库的镜像启动Pod</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl run httpd-01 --image=hub.lemon.com/library/httpd:v1 --port=80 --replicas=1</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/httpd-01 created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有deployment</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-01   1/1     1            1           21s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有rs（RESTARTS副本）</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get rs</span></span><br><span class="line">NAME                  DESIRED   CURRENT   READY   AGE</span><br><span class="line">httpd-01-6c9fbcfb65   1         1         1       47s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有pod</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-01-6c9fbcfb65-jvmc8   1/1     Running   0          58s</span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-jvmc8   1/1     Running   0          69s   10.244.1.2   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式执行容器命令</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-9hlhv ls</span></span><br><span class="line">bin  build  cgi-bin  conf  error  htdocs  icons  include  logsmodules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问这个pod的IP</span></span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.244.1.2</span></span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有已经退出的容器</span></span><br><span class="line">docker rm -v $(docker ps -qa -f status=exited)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v0od5jbj30zh0cyjs2.jpg" alt="k"></p><h2 id="9-基本的使用下K8S"><a href="#9-基本的使用下K8S" class="headerlink" title="9. 基本的使用下K8S"></a>9. 基本的使用下K8S</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod的详细信息</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl -n default get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-jvmc8   1/1     Running   1          12h   10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试删除这个pod容器后，k8s会不会重新策划这个pod</span></span><br><span class="line">kubectl -n default delete pod httpd-01-6c9fbcfb65-jvmc8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证, 可以看到k8s看到副本的期望值不符合之后，就会马上新起来一个pod来满足这个期望值</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl -n default get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          12h   10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在生产环境下发现一个副本的pod已经不够用了，需要扩容</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl -n default scale --replicas=3  deployment/httpd-01</span></span><br><span class="line">deployment.extensions/httpd-01 scaled</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-01   3/3     3            3           12h</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          12h</span><br><span class="line">httpd-01-6c9fbcfb65-hjhjn   1/1     Running   0          51s</span><br><span class="line">httpd-01-6c9fbcfb65-x52hh   1/1     Running   0          51s</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE    IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          12h    10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-hjhjn   1/1     Running   0          2m8s   10.244.2.3   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-x52hh   1/1     Running   0          2m8s   10.244.2.2   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># 能够看到，已经扩容成功了，没错，就是这么简单~~</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是现在又引来了一个新的问题，我有三个容器，端口一样，但ip确是不一样的，外界该要怎么访问这个pod呢？</span></span><br><span class="line"><span class="comment"># 答：使用SVC来实现</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl expose --help|grep -A 1 &#x27;Create a service for an nginx&#x27;</span></span><br><span class="line">  <span class="comment"># Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000.</span></span><br><span class="line">  kubectl expose deployment nginx --port=80 --target-port=8000</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 查看一下deployment名称</span></span><br><span class="line"> [root@master1 ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-01   3/3     3            3           13h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建svc</span></span><br><span class="line"> [root@master1 ~]<span class="comment"># kubectl expose deployment httpd-01 --port=88 --target-port=80</span></span><br><span class="line"> service/httpd-01 exposed</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 查看一下svc地址</span></span><br><span class="line"> [root@master1 ~]<span class="comment"># kubectl get svc -o wide</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class="line">httpd-01     ClusterIP   10.99.191.162   &lt;none&gt;        88/TCP    30s   run=httpd-01</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   13h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里为了好验证负载均衡，在访问之前先修改容器网页</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          13h   10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-hjhjn   1/1     Running   0          23m   10.244.2.3   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-x52hh   1/1     Running   0          23m   10.244.2.2   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-9hlhv bash</span></span><br><span class="line">root@httpd-01-6c9fbcfb65-9hlhv:/usr/<span class="built_in">local</span>/apache2<span class="comment"># echo &#x27;node1-10.244.1.3&#x27; &gt; htdocs/index.html </span></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-hjhjn bash</span></span><br><span class="line">root@httpd-01-6c9fbcfb65-hjhjn:/usr/<span class="built_in">local</span>/apache2<span class="comment"># echo &#x27;node2-10.244.2.3&#x27; &gt; htdocs/index.html</span></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-x52hh bash</span></span><br><span class="line">root@httpd-01-6c9fbcfb65-x52hh:/usr/<span class="built_in">local</span>/apache2<span class="comment"># echo &#x27;node2-10.244.2.2&#x27; &gt; htdocs/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问SVC从而以负载均衡的方式访问到pod副本</span></span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node2-10.244.2.3</span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node2-10.244.2.2</span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node1-10.244.1.3</span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node2-10.244.2.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：查看下ipvsadm规则</span></span><br><span class="line">[root@master1 ~]<span class="comment"># ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 192.168.2.1:6443             Masq    1      3          0         </span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.6:53                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.7:53                Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.0.6:9153              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.7:9153              Masq    1      0          0         </span><br><span class="line"><span class="comment"># 这就是刚才创建的SVC，实际上他就是一个转发规则</span></span><br><span class="line">TCP  10.99.191.162:88 rr</span><br><span class="line">  -&gt; 10.244.1.3:80                Masq    1      0          1         </span><br><span class="line">  -&gt; 10.244.2.2:80                Masq    1      0          1         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          2         </span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.6:53                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.7:53                Masq    1      0          0</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面做的其实只能在内部访问，如果像对外开放的话，需将原本svc的type类型改为NodePort类型，因为默认的ClusterIP类型只是针对这个集群，封闭不对外暴露的。</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl edit svc httpd-01</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2020-09-13T07:50:56Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    run: httpd-01</span><br><span class="line">  name: httpd-01</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;21567&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/services/httpd-01</span><br><span class="line">  uid: 624c99c1-b27f-4990-aa5b-d381e0a37755</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.99.191.162</span><br><span class="line">  ports:</span><br><span class="line">  - port: 88</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    run: httpd-01</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再来查看这个svc的类型</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get svc -o wide</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE   SELECTOR</span><br><span class="line">httpd-01     NodePort    10.99.191.162   &lt;none&gt;        88:32552/TCP   28m   run=httpd-01</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        14h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会发现它基于上面的88端口对外打开了一个随机端口32552提供服务，而且是将所有k8s节点都打开了这个端口号对外服务</span></span><br><span class="line">[root@master1 ~]<span class="comment"># netstat -antpu | grep 32552</span></span><br><span class="line">tcp6       0      0 :::32552                :::*                    LISTEN      1945/kube-proxy</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># netstat -antpu | grep 32552</span></span><br><span class="line">tcp6       0      0 :::32552                :::*                    LISTEN      1568/kube-proxy</span><br><span class="line"></span><br><span class="line">[root@node2 ~]<span class="comment"># netstat -antpu | grep 32552</span></span><br><span class="line">tcp6       0      0 :::32552                :::*                    LISTEN      1601/kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外界访问</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v0wtpolj30ut03wmxk.jpg" alt="kk"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v12fx9qj30uq045mxk.jpg" alt="kkk"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v182350j30uv04dwew.jpg" alt="kkkk"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v1bofyrj30uy03owew.jpg" alt="kkkkk"></p><p>==<em><strong>至此整体kubernetes集群架构搭建完成</strong></em>==</p><h1 id="三、Kubectl常用命令"><a href="#三、Kubectl常用命令" class="headerlink" title="三、Kubectl常用命令"></a>三、Kubectl常用命令</h1><blockquote><p><strong><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands">kubectl官方详细命令</a></strong></p></blockquote><h2 id="1-查看集群状态"><a href="#1-查看集群状态" class="headerlink" title="1. 查看集群状态"></a>1. 查看集群状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看客户端及服务端程序版本信息</span></span><br><span class="line">kubectl version --short=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">kubectl cluster-info </span><br></pre></td></tr></table></figure><h2 id="2-创建资源对象"><a href="#2-创建资源对象" class="headerlink" title="2. 创建资源对象"></a>2. 创建资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pod资源</span></span><br><span class="line">kubectl run name --image=(镜像名) --replicas=(副本数) --port=(容器要暴露的端口) --labels=(设定自定义标签)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 陈述式对象配置管理方式</span></span><br><span class="line">kubectl create -f **.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明式对象配置管理方式（也适用于更新等）</span></span><br><span class="line">kubectl apply -f **.yaml</span><br></pre></td></tr></table></figure><h2 id="3、查看资源对象"><a href="#3、查看资源对象" class="headerlink" title="3、查看资源对象"></a>3、查看资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看命名空间</span></span><br><span class="line">kubectl get namespace</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o 输出格式, wide表示plain-text</span></span><br><span class="line">kubectl get pods,services -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l 标签选择器(多个的话是与逻辑)，-n 指定命名空间，不指定默认default</span></span><br><span class="line">kubectl get pod -l <span class="string">&quot;key=value,key=value&quot;</span> -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l 基于集合的标签选择器, -L查询结果显示标签</span></span><br><span class="line"><span class="comment"># 注意: 为了避免和shell解释器解析!, 必须要为此类表达式使用单引号</span></span><br><span class="line">kubectl get pod -l <span class="string">&quot;key1 in (val1,val2),!key2&quot;</span> -L key </span><br><span class="line"></span><br><span class="line"><span class="comment"># -w 监视资源变动信息</span></span><br><span class="line">kubectl get pod -w</span><br></pre></td></tr></table></figure><h2 id="4、打印容器中日志信息"><a href="#4、打印容器中日志信息" class="headerlink" title="4、打印容器中日志信息"></a>4、打印容器中日志信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -f 持续监控，-c如果pod中只有一个容器不用加</span></span><br><span class="line">kubectl logs name -f -c container_name -n kube-system</span><br></pre></td></tr></table></figure><h2 id="5、在容器中执行命令"><a href="#5、在容器中执行命令" class="headerlink" title="5、在容器中执行命令"></a>5、在容器中执行命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器外部执行命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> name -c container_name -n kube-system -- 具体命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器内部执行命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it pod_name /bin/sh 进入容器的交互式shell</span><br></pre></td></tr></table></figure><h2 id="6、删除资源对象"><a href="#6、删除资源对象" class="headerlink" title="6、删除资源对象"></a>6、删除资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-system下指定标签的资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] -l key=value -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-system下所有资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] --all -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除Terminating的资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] source_name --force --grace-period=0 -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般不用这种方式删除</span></span><br><span class="line">kubectl delete -f xx.yaml</span><br><span class="line">kubectl apply -f xx.yaml --prune -l &lt;labels&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认删除控制器会同时删除其管控的所有Pod对象，加上cascade=false就只删除rs</span></span><br><span class="line">kubectl delete rs rs_name --cascade=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="7、更新资源对象"><a href="#7、更新资源对象" class="headerlink" title="7、更新资源对象"></a>7、更新资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --force 如果需要基于此前的配置文件进行替换，需要加上force</span></span><br><span class="line">kubectl replace -f xx.yaml --force</span><br></pre></td></tr></table></figure><h2 id="8、将服务暴露出去-创建Service"><a href="#8、将服务暴露出去-创建Service" class="headerlink" title="8、将服务暴露出去(创建Service)"></a>8、将服务暴露出去(创建Service)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployments/deployment_name --<span class="built_in">type</span>=<span class="string">&quot;NodePort&quot;</span> --port=(要暴露的容器端口) --name=(Service对象名字)</span><br></pre></td></tr></table></figure><h2 id="9、扩容和缩容"><a href="#9、扩容和缩容" class="headerlink" title="9、扩容和缩容"></a>9、扩容和缩容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment/deployment_name --replicas=N</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当前副本数等于M时才会执行扩容或者缩容</span></span><br><span class="line">kubectl scale deployment/deployment_name --replicas=N --current-replicas=M</span><br></pre></td></tr></table></figure><h2 id="10、查看API版本"><a href="#10、查看API版本" class="headerlink" title="10、查看API版本"></a>10、查看API版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl api-versions</span><br></pre></td></tr></table></figure><h2 id="11、在本地主机上为API-Server启动一个代理网关"><a href="#11、在本地主机上为API-Server启动一个代理网关" class="headerlink" title="11、在本地主机上为API Server启动一个代理网关"></a>11、在本地主机上为API Server启动一个代理网关</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之后就可以通过curl来对此套字节发起访问请求</span></span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># jq可以对json进行过滤)</span></span><br><span class="line">curl localhost:8080/api/v1/namespaces/ | jq .items[].metadata.name</span><br></pre></td></tr></table></figure><h2 id="12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释"><a href="#12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释" class="headerlink" title="12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释"></a>12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二级对象可用类似于pods.spec这种方式查看</span></span><br><span class="line">kubectl explain pods/deployments/...</span><br></pre></td></tr></table></figure><h2 id="13、查看某资源对象的配置文件"><a href="#13、查看某资源对象的配置文件" class="headerlink" title="13、查看某资源对象的配置文件"></a>13、查看某资源对象的配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --export表示省略由系统生成的信息, 后面加 &gt; file.yaml就可以快速生成一个配置文件了</span></span><br><span class="line">kubectl get source_type source_name -o yaml --<span class="built_in">export</span></span><br></pre></td></tr></table></figure><h2 id="14、标签管理相关命令"><a href="#14、标签管理相关命令" class="headerlink" title="14、标签管理相关命令"></a>14、标签管理相关命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加标签,如果是修改的话需要后面添加--overwrite</span></span><br><span class="line">kubectl label pods/pod_name key=value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给工作节点添加标签，后续可以使用nodeSelector来指定pod被调度到指定的工作节点上运行</span></span><br><span class="line">kubectl label nodes node_name key=value</span><br></pre></td></tr></table></figure><h2 id="15、注解管理相关命令"><a href="#15、注解管理相关命令" class="headerlink" title="15、注解管理相关命令"></a>15、注解管理相关命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl annotate pods pod_name key=value</span><br></pre></td></tr></table></figure><h2 id="16、patch修改Deployment控制器进行控制器升级"><a href="#16、patch修改Deployment控制器进行控制器升级" class="headerlink" title="16、patch修改Deployment控制器进行控制器升级"></a>16、patch修改Deployment控制器进行控制器升级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -p 以补丁形式更新补丁形式默认是json</span></span><br><span class="line">kubectl patch deployment deployment-demo -p <span class="string">&#x27;&#123;&quot;spec&quot;: &#123;&quot;minReadySeconds&quot;: 5&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改depolyment中的镜像文件</span></span><br><span class="line">kubectl <span class="built_in">set</span> image deployments deployment-demo myapp=ikubernetes/myapp:v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印滚动更新过程中的状态信息</span></span><br><span class="line">kubectl rollout status deployment deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控deployment的更新过程</span></span><br><span class="line">kubectl get deployments deployment-demo --watch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停更新</span></span><br><span class="line">kubectl rollout pause deployments deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续更新</span></span><br><span class="line">kubectl rollout resume deployments deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史版本(能查到具体的历史需要在apply的时候加上--record参数)</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployments deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到指定版本，不加--to-version则回滚到上一个</span></span><br><span class="line">kubectl rollout undo deployments deployment-demo --to-revision=2</span><br></pre></td></tr></table></figure><h1 id="四、k8s的资源清单（重点）"><a href="#四、k8s的资源清单（重点）" class="headerlink" title="四、k8s的资源清单（重点）"></a>四、k8s的资源清单（重点）</h1><h2 id="1-资源类型"><a href="#1-资源类型" class="headerlink" title="1. 资源类型"></a>1. 资源类型</h2><blockquote><p><strong>k8s中所有的资源都会抽象为资源，资源实例化之后，叫做对象。</strong></p></blockquote><p><em><strong>分为以下三种：</strong></em></p><ul><li>名称空间级别</li><li>集群级别</li><li>元数据型级别</li></ul><h3 id="1-1-名称空间级别"><a href="#1-1-名称空间级别" class="headerlink" title="1.1 名称空间级别"></a>1.1 名称空间级别</h3><ul><li><p><strong>服务发现及负载均衡型资源（ ServiceDiscovery LoadBalance）：</strong> Service(SVC)、Ingress、……</p></li><li><p><strong>配置与存储型资源：</strong> Volume（存储卷）、CSI（容器存储接口，可以扩展各种各样的第三方存储卷）</p></li><li><p><strong>特殊类型的存储卷：</strong> ConfigMap（当配置中心来使用的资源类型）、Secret（保存敏感数据）、DownwardAPI（把外部环境中的信息输出给容器）</p></li><li><p><strong>工作负载型资源（workload）：</strong> Pod（pause）、Replicase、 Deployment、StatefulSet、DaemonSet、Job、Cron Job（Replication Controller在v1.11版本被废弃）</p></li></ul><h3 id="1-2-集群级资源级别"><a href="#1-2-集群级资源级别" class="headerlink" title="1.2 集群级资源级别"></a>1.2 集群级资源级别</h3><ul><li>Namespace</li><li>Node</li><li>Role</li><li>Clusterrole</li><li>RoleBinding</li><li>ClusterRoleBinding</li></ul><h3 id="1-3-元数据型资源"><a href="#1-3-元数据型资源" class="headerlink" title="1.3 元数据型资源"></a>1.3 元数据型资源</h3><ul><li><p>HPA</p></li><li><p>PodTemplate</p></li><li><p>Limi tRange</p></li></ul><h2 id="2-资源清单"><a href="#2-资源清单" class="headerlink" title="2. 资源清单"></a>2. 资源清单</h2><blockquote><p><strong>在k8s中，一般使用yaml格式的文件来创建符合我们预期期望的pod，这样的yaml文件我们一般称为资源清单</strong></p></blockquote><h3 id="2-1-yaml语法格式"><a href="#2-1-yaml语法格式" class="headerlink" title="2.1 yaml语法格式"></a>2.1 yaml语法格式</h3><blockquote><p>是一个可读性高，用来表达数据序列的格式。YAML 的意思其实是：仍是一种标记语言，但为了强调这种语言以数据做为中心，而不是以标记语言为重点。</p></blockquote><p><strong>基本语法</strong></p><ul><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li># 标识注释，从这个字符一直到行尾，都会被解释器忽略</li></ul><p><strong>YAML 支持的数据结构</strong></p><ul><li>对象：键值对的集合，又称为映射（mapping）、哈希（hashes）、字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence）、列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><p><strong>对象类型：对象的一组键值对，使用冒号结构表示</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Steve</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hash:</span> &#123; <span class="attr">name:</span> <span class="string">Steve</span>, <span class="attr">age:</span> <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>数组类型：一组连词线开头的行，构成一个数组</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">animal</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Dog</span></span><br></pre></td></tr></table></figure><p>数组也可以采用行内表示法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animal:</span> [<span class="string">Cat</span>, <span class="string">Dog</span>]</span><br></pre></td></tr></table></figure><p><strong>复合结构：对象和数组可以结合使用，形成复合结构</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line"><span class="attr">YAML:</span> <span class="string">yaml.org</span></span><br><span class="line"><span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span></span><br><span class="line"><span class="attr">Python:</span> <span class="string">python.org</span></span><br><span class="line"><span class="attr">Perl:</span> <span class="string">use.perl.org</span>  </span><br></pre></td></tr></table></figure><p><strong>纯量：纯量是最基本的、不可再分的值。以下数据类型都属于纯量</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="string">字符串布尔值整数浮点数</span> <span class="literal">Null</span></span><br><span class="line"><span class="number">2</span> <span class="string">时间</span> <span class="string">日期</span></span><br><span class="line"></span><br><span class="line"><span class="string">数值直接以字面量的形式表示</span></span><br><span class="line"><span class="attr">number:</span> <span class="number">12.30</span></span><br><span class="line"></span><br><span class="line"><span class="string">布尔值用true和false表示</span></span><br><span class="line"><span class="attr">isSet:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span><span class="string">用</span> <span class="string">~</span> <span class="string">表示</span></span><br><span class="line"><span class="attr">parent:</span> <span class="string">~</span></span><br><span class="line"></span><br><span class="line"><span class="string">时间采用</span> <span class="string">ISO8601</span> <span class="string">格式</span></span><br><span class="line"><span class="attr">iso8601:</span> <span class="number">2001-12-14t21:59:43.10-05:00</span></span><br><span class="line"></span><br><span class="line"><span class="string">日期采用复合</span> <span class="string">iso8601</span> <span class="string">格式的年、月、日表示</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">1976-07-31</span></span><br><span class="line"></span><br><span class="line"><span class="string">YAML允许使用两个感叹号，强制转换数据类型</span></span><br><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><p>字符串默认不使用引号表示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">这是一行字符串</span></span><br></pre></td></tr></table></figure><p>如果字符串之中包含空格或特殊字符，需要放在引号之中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">&#x27;内容：字符串&#x27;</span></span><br></pre></td></tr></table></figure><p>单引号和双引号都可以使用，双引号不会对特殊字符转义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">&#x27;内容\n字符串&#x27;</span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">&quot;内容\n字符串&quot;</span></span><br></pre></td></tr></table></figure><p>单引号之中如果还有单引号，必须连续使用两个单引号转义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">&#x27;labor&#x27;</span><span class="string">&#x27;s day&#x27;</span></span><br></pre></td></tr></table></figure><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">这是一段</span></span><br><span class="line">   <span class="string">多行</span></span><br><span class="line">   <span class="string">字符串</span></span><br></pre></td></tr></table></figure><p>多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">this:</span> <span class="string">|</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Bar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">that:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Bar</span></span><br></pre></td></tr></table></figure><p>+ 表示保留文字块末尾的换行，- 表示删除字符串末尾的换行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">s3:</span> <span class="string">|-</span></span><br><span class="line">  <span class="string">Foo</span></span><br></pre></td></tr></table></figure><h3 id="2-2-k8s剧本的常用字段"><a href="#2-2-k8s剧本的常用字段" class="headerlink" title="2.2 k8s剧本的常用字段"></a>2.2 k8s剧本的常用字段</h3><blockquote><p>必须存在的属性</p></blockquote><table><thead><tr><th>参数名</th><th align="center">字段类型</th><th>说明</th></tr></thead><tbody><tr><td>apiVersion</td><td align="center">String</td><td>K8S API 的版本，目前基本是v1，可以用 kubectl api-version 命令查询</td></tr><tr><td>kind</td><td align="center">String</td><td>这里指的是 yaml 文件定义的资源类型和角色, 比如: Pod</td></tr><tr><td>metadata</td><td align="center">Object</td><td>元数据对象，固定值写 metadata</td></tr><tr><td>metadata.name</td><td align="center">String</td><td>元数据对象的名字，这里由我们编写，比如命名Pod的名字</td></tr><tr><td>metadata.namespace</td><td align="center">String</td><td>元数据对象的命名空间，由我们自身定义</td></tr><tr><td>Spec</td><td align="center">Object</td><td>详细定义对象，固定值写Spec</td></tr><tr><td>spec.containers[]</td><td align="center">list</td><td>这里是Spec对象的容器列表定义，是个列表</td></tr><tr><td>spec.containers[].name</td><td align="center">String</td><td>这里定义容器的名字</td></tr><tr><td>spec.containers[].image</td><td align="center">String</td><td>这里定义要用到的镜像名称</td></tr></tbody></table><blockquote><p>主要属性【这些属性比较重要，如果不指定的话系统会自动补充默认值】</p></blockquote><table><thead><tr><th>参数名称</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>spec.containers[].name</td><td>String</td><td>这里定义容器的名字</td></tr><tr><td>spec.containers[].image</td><td>String</td><td>这里定义要用到的镜像名称</td></tr><tr><td>spec.containers[].imagePullPolicy</td><td>String</td><td>定义镜像拉取策略，有Always、Never、IfNotPresent三个值可选（1）Always:意思是每次都尝试重新拉取镜像（2）Never:表示仅使用本地镜像（3）lfNotPresent:如果本地有镜像就使用本地镜像，没有就拉取在线镜像。上面三个值都没设置的话，默认是Always。</td></tr><tr><td>spec.containers[].command[]</td><td>List</td><td>指定容器启动命令，因为是数组可以指定多个，不指定则使用镜像打包时使用的启动命令。</td></tr><tr><td>spec.containers[].args[]</td><td>List</td><td>指定容器启动命令参数，因为是数组可以指定多个。</td></tr><tr><td>spec.containers[].workingDir</td><td>String</td><td>指定容器的工作目录，进入容器时默认所在的目录</td></tr><tr><td>spec.containers[].volumeMounts[]</td><td>List</td><td>指定容器内部的存储卷配置</td></tr><tr><td>spec.containers[].volumeMounts[].name</td><td>String</td><td>指定可以被容器挂载的存储卷的名称</td></tr><tr><td>spec.containers[].volumeMounts[].mountPath</td><td>String</td><td>指定可以被容器挂载的存储卷的路径</td></tr><tr><td>spec.containers[].volumeMounts[].readOnly</td><td>String</td><td>设置存储卷路经的读写模式，true或者false，默认为读写模式</td></tr><tr><td>spec.containers[].ports[]</td><td>List</td><td>指定容器需要用到的端口列表</td></tr><tr><td>spec.containers[].ports[].name</td><td>String</td><td>指定端口名称</td></tr><tr><td>spec.containers[].ports[].containerPort</td><td>String</td><td>指定容器需要监听的端口号</td></tr><tr><td>spec.containers[].ports[].hostPort</td><td>String</td><td>指定容器所在主机需要监听的端口号，默认跟上面containerPort相同，注意设置了hostPort同一台主机无法启动该容器的相同副本（因为主机的端口号不能相同，这样会冲突)</td></tr><tr><td>spec.containers[].ports[].protocol</td><td>String</td><td>指定端口协议，支持TCP和UDP，默认值为 TCP</td></tr><tr><td>spec.containers[].env[]</td><td>List</td><td>指定容器运行前需设置的环境变量列表</td></tr><tr><td>spec.containers[].env[].name</td><td>String</td><td>指定环境变量名称</td></tr><tr><td>spec.containers[].env[].value</td><td>String</td><td>指定环境变量值</td></tr><tr><td>spec.containers[].resources</td><td>Object</td><td>指定资源限制和资源请求的值（这里开始就是设置容器的资源上限）</td></tr><tr><td>spec.containers[].resources.limits</td><td>Object</td><td>指定设置容器运行时资源的运行上限</td></tr><tr><td>spec.containers[].resources.limits.cpu</td><td>String</td><td>指定CPU的限制，单位为core数，将用于docker run –cpu-shares参数这里前面文章 Pod资源限制有讲过）</td></tr><tr><td>spec.containers[].resources.limits.memory</td><td>String</td><td>指定MEM内存的限制，单位为MlB、GiB</td></tr><tr><td>spec.containers[].resources.requests</td><td>Object</td><td>指定容器启动和调度时的限制设置</td></tr><tr><td>spec.containers[].resources.requests.cpu</td><td>String</td><td>CPU请求，单位为core数，容器启动时初始化可用数量</td></tr><tr><td>spec.containers[].resources.requests.memory</td><td>String</td><td>内存请求，单位为MIB、GiB，容器启动的初始化可用数量</td></tr></tbody></table><blockquote><p>额外的参数项</p></blockquote><table><thead><tr><th>参数名称</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>spec.restartPolicy</td><td>String</td><td>定义Pod的重启策略，可选值为Always、OnFailure，默认值为Always。1.Always:Pod一旦终止运行，则无论容器是如何终止的，kubelet服务都将重启它。2.OnFailure:只有Pod以非零退出码终止时，kubelet才会重启该容器。如果容器正常结束（退出码为0），则kubelet将不会重启它。3.Never:Pod终止后，kubelet将退出码报告给Master，不会重启该Pod。</td></tr><tr><td>spec.nodeSelector</td><td>Object</td><td>定义Node的Label过滤标签，以key:value格式指定，选择node节点去运行</td></tr><tr><td>spec.imagePullSecrets</td><td>Object</td><td>定义pull镜像时使用secret名称，以name:secretkey格式指定</td></tr><tr><td>spec.hostNetwork</td><td>Boolean</td><td>定义是否使用主机网络模式，默认值为false。设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本。</td></tr></tbody></table><blockquote><p>查看资源有那些资源清单属性，使用以下命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod</span><br></pre></td></tr></table></figure><blockquote><p>查看属性说明，使用以下命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod.apiVersion</span><br></pre></td></tr></table></figure><blockquote><p>资源清单格式</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">group/apiversion</span>     <span class="comment"># 如果没有给定group名称，那么默认为core，可以使用kubectlapi-versions命令获取当前k8s版本上所有的apiversion版本信息（每个版本可能不同）</span></span><br><span class="line"><span class="attr">kind:</span>          <span class="comment"># 资源类别</span></span><br><span class="line"><span class="attr">metadata:</span>      <span class="comment"># 资源元数据</span></span><br><span class="line"> <span class="attr">name:</span> </span><br><span class="line"> <span class="attr">namespace:</span> </span><br><span class="line"> <span class="attr">lables:</span> </span><br><span class="line"> <span class="attr">annotations:</span>  <span class="comment"># 主要目的是方便用户阅读查找</span></span><br><span class="line"><span class="attr">spec:</span>          <span class="comment"># 期望的状态（disired state)</span></span><br><span class="line"><span class="attr">status:</span>        <span class="comment"># 当前状态，本字段由Kubernetes自身维护，用户不能去定义</span></span><br></pre></td></tr></table></figure><blockquote><p>资源清单的常用命令</p></blockquote><p>1.获取apiVersion版本信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl api-versions</span><br></pre></td></tr></table></figure><p>2.获取资源的apiVersion的版本信息(以pod为例)，该命令同时输出属性设置帮助文档</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod</span><br></pre></td></tr></table></figure><blockquote><p>字段配置格式</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">apiVersion</span> <span class="string">&lt;string&gt;</span>            <span class="comment"># 表示字符串类型 </span></span><br><span class="line"><span class="string">metadata</span> <span class="string">&lt;Object&gt;</span>              <span class="comment"># 表示需要嵌套多层字段 </span></span><br><span class="line"><span class="string">labels</span> <span class="string">&lt;map[string]string&gt;</span>     <span class="comment"># 表示由k：v组成的映射 </span></span><br><span class="line"><span class="string">finalizers</span> <span class="string">&lt;[]string&gt;</span>          <span class="comment"># 表示字串列表 </span></span><br><span class="line"><span class="string">ownerReferences</span> <span class="string">&lt;[]Object&gt;</span>     <span class="comment"># 表示对象列表 </span></span><br><span class="line"><span class="string">hostPID</span> <span class="string">&lt;boolean&gt;</span>              <span class="comment"># 布尔类型 </span></span><br><span class="line"><span class="string">priority</span> <span class="string">&lt;integer&gt;</span>             <span class="comment"># 整型 </span></span><br><span class="line"><span class="string">name</span> <span class="string">&lt;string&gt;</span> <span class="string">-required-</span>       <span class="comment"># 如果类型后面接-required-，表示为必填字段</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：通过定义清单文件创建Pod</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前K8S API 的版本</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="comment"># 元数据</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># pod名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-apache-pod</span></span><br><span class="line">  <span class="comment"># pod的名称空间</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="comment"># pod的标签</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">httpd</span></span><br><span class="line"><span class="comment"># 对象的详细信息</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 容器信息</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web01</span></span><br><span class="line">      <span class="comment"># 这个容器使用的镜像</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">hub.lemon.com/library/httpd:v1</span></span><br></pre></td></tr></table></figure><blockquote><p>通过yaml文件创建pod</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f xxx.yaml</span><br></pre></td></tr></table></figure><blockquote><p>获取资源的资源配置文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -o 参数 加 yaml，可以将资源的配置以yaml的格式输出出来，也可以使用json，输出为json格式</span></span><br><span class="line">kubectl get pod &#123;podName&#125; -o yaml</span><br></pre></td></tr></table></figure><h2 id="3、pod的生命周期"><a href="#3、pod的生命周期" class="headerlink" title="3、pod的生命周期"></a>3、pod的生命周期</h2><blockquote><p>pod对象自从创建开始至终止退出的时间范围称为生命周期，在这段时间中，pod会处于多种不同的状态，并执行一些操作；其中，创建主容器为必须的操作，其他可选的操作还包括运行初始化容器（init container）、容器启动后钩子（start hook）、容器的存活性探测（liveness probe）、就绪性探测（readiness probe）以及容器终止前狗子（pre stop hook）等，这些操作是否执行则取决于pod的定义</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v1p27o3j30xd0g70u2.jpg" alt="image-20200919181303358"></p><p><strong>init C &amp; start-stop &amp; readiness &amp; liveness 整体流程：</strong></p><p>1、kubectl 调用 apiserver –&gt; etcd –&gt; kubelet –&gt; CRI 进行容器初始化</p><p>2、首先会先启动一个pause容器（任何pod启动时都会先pause容器）</p><p>3、init C 容器不会伴随整个pod的生命周期；如果是正常退出（0），进入main C，否则（非0），一直重启 失败。</p><p>4、进入main C后有两个参数，start：在刚启动时可以允许他执行一个命令，stop：退出时也可以允许他执行一个命令。</p><p>5、readiness模板：可以在main C运行的多少秒之后进行就绪检测；检测通过后，pod状态就为running，否则为failed。</p><p>6、liveness模板：伴随着整个main C的生命周期，当main C里面的进程 与 liveness检测结果不一致时，就可以执行对应的命令。</p><h3 id="3-1-Init-C"><a href="#3-1-Init-C" class="headerlink" title="3.1 Init C"></a>3.1 Init C</h3><blockquote><p>Pod能够具有多个容器，应用运行在容器里面，但是它也可能有一个或多个先于应用容器启动的Init容器</p></blockquote><p>Init容器与普通的容器非常像，除了如下两点：</p><ul><li>Init容器总是运行到成功完成为止</li><li>每个Init容器都必须在下一个Init容器启动之前成功完成</li></ul><p>如果Pod的Init容器失败，Kubernetes会不断地重启该Pod，直到Init容器成功为止。然而，如果Pod对应的restartPolicy为Never，它不会重新启动, 因为Init容器具有与应用程序容器分离的单独镜像，所以它们的启动相关代码具有如下优势：</p><ul><li>它们可以包含并运行实用工具，但是出于安全考虑，是不建议在应用程序容器镜像中包含这些实用工具的。</li><li>它们可以包含使用工具和定制化代码来安装，但是不能出现在应用程序镜像中。例如，创建镜像没必要FROM另一个镜像，只需要在安装过程中使用类似sed、awk、python或dig这样的工具。</li><li>应用程序镜像可以分离出创建和部署的角色，而没有必要联合它们构建一个单独的镜像。</li><li>Init容器使用LinuxNamespace，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问Secret的权限，而应用程序容器则不能。</li><li>它们必须在应用程序容器启动之前运行完成，而应用程序容器是并行运行的，所以Init容器能够提供了一种简单的阻塞或延迟应用容器的启动的方法，直到满足了一组先决条件。</li></ul><p>Init C 特殊说明：</p><ul><li>在Pod启动过程中，Init容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。</li><li>如果由于运行时或失败退出，将导致容器启动失败，它会根据Pod的restartPolicy指定的策略进行重试。然而，如果Pod的restartPolicy设置为Always，Init容器失败时会使用RestartPolicy策略。</li><li>在所有的Init容器没有成功之前，Pod将不会变成Ready状态。Init容器的端口将不会在Service中进行聚集。正在初始化中的Pod处于Pending状态，但应该会将Initializing状态设置为true。</li><li>如果Pod重启，所有Init容器必须重新执行。</li><li>对Init容器spec的修改被限制在容器image字段，修改其他字段都不会生效。更改Init容器的image字段，等价于重启该Pod。</li><li>Init容器具有应用容器的所有字段。除了readinessProbe，因为Init容器无法定义不同于完成（completion）的就绪（readiness）之外的其他状态。这会在验证过程中强制执行。</li><li>在Pod中的每个app和Init容器的名称必须唯一；与任何其它容器共享同一个名称，会在验证时抛出错误</li></ul><blockquote><p>Init 容器示例</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lemon-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># main容器字段</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="comment"># 容器启动后执行的命令</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo The main-container is running! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">  <span class="comment"># init容器字段</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="comment"># 第一个init容器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container01</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live01; do echo waiting for live01; sleep 10; done;&#x27;</span>]</span><br><span class="line">  <span class="comment"># 第二个init容器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container02</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live02; do echo waiting for live02; sleep 10; done;&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod -c init-container01 -- touch /live01</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod -c init-container02 -- touch /live02</span><br></pre></td></tr></table></figure><h3 id="3-2-容器探针"><a href="#3-2-容器探针" class="headerlink" title="3.2 容器探针"></a>3.2 容器探针</h3><blockquote><p>探针是由kubelet对容器执行的定期诊断。要执行诊断，kubelet调用由容器实现的Handler。</p></blockquote><p>探测方式：</p><ul><li>readinessProbe：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与Pod匹配的所有Service的端点中删除该Pod的IP地址。初始延迟之前的就绪状态默认为Failure。如果容器不提供就绪探针，则默认状态为Success。</li><li>livenessProbe：指示容器是否正在运行。如果存活探测失败，则kubelet会杀死容器，并且容器将受到其重启策略的影响。如果容器不提供存活探针，则默认状态为Success。</li></ul><p>有三种类型的处理程序：</p><ul><li>ExecAction：在容器内执行指定命令。如果命令退出时返回码为0则认为诊断成功。</li><li>TCPSocketAction：对指定端口上的容器的IP地址进行TCP检查。如果端口打开，则诊断被认为是成功的。</li><li>HTTPGetAction：对指定的端口和路径上的容器的IP地址执行HTTPGet请求。如果响应的状态码大于等于200且小于400，则诊断被认为是成功的。</li></ul><p>每次探测都将获得以下三种结果之一：</p><ul><li>成功：容器通过了诊断。</li><li>失败：容器未通过诊断。</li><li>未知：诊断失败，因此不会采取任何行动</li></ul><blockquote><p>Init 容器init 模板检测探针 - 就绪检测</p></blockquote><p><strong>readinessProbe-httpget</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">readiness-httpget-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-httpget-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">httpd:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index01.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">readiness-httpget-pod   0/1     Running   0          11m</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">log</span> -f readiness-httpget-pod</span><br><span class="line">10.244.1.1 - - [25/Feb/2021:08:19:11 +0000] <span class="string">&quot;GET /index01.html HTTP/1.1&quot;</span> 404 196</span><br><span class="line">10.244.1.1 - - [25/Feb/2021:08:19:14 +0000] <span class="string">&quot;GET /index01.html HTTP/1.1&quot;</span> 404 196</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it readiness-httpget-pod -- /bin/sh</span><br><span class="line"><span class="comment"># echo &#x27;lemon&#x27; &gt; /usr/local/apache2/htdocs/index01.html</span></span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">log</span> -f readiness-httpget-pod</span><br><span class="line">10.244.1.1 - - [25/Feb/2021:08:28:53 +0000] <span class="string">&quot;GET /index01.html HTTP/1.1&quot;</span> 200 6</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">readiness-httpget-pod   1/1     Running   0          22m</span><br></pre></td></tr></table></figure><blockquote><p>liveness 检测探针 - 存活检测</p></blockquote><p><strong>livenessProbe-exec</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon03</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-exec-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;touch /tmp/live ; sleep 60; rm -rf /tmp/live; sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;test&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/tmp/live&quot;</span>]</span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -w</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec-pod       1/1     Running   0          9s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec-pod       1/1     Running   1          100s</span><br></pre></td></tr></table></figure><p><strong>livenessProbe-httpget</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-httpget-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-httpget-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">httpd:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-httpget-pod   1/1     Running   0          102s</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it liveness-httpget-pod -- rm /usr/<span class="built_in">local</span>/apache2/htdocs/index.html</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-httpget-pod   1/1     Running   1          2m53s</span><br></pre></td></tr></table></figure><p><strong>livenessProbe-tcp</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">probe-tcp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一段时间时候就会自动重启pod，原因nginx容器没开8080端口，tomcat就不会重启</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Pod-hook"><a href="#3-3-Pod-hook" class="headerlink" title="3.3 Pod hook"></a>3.3 Pod hook</h3><blockquote><p>Podhook（钩子）是由Kubernetes管理的kubelet发起的，当容器中的进程启动前或者容器中的进程终止之前运行，这是包含在容器的生命周期之中。可以同时为Pod中的所有容器都配置hook。</p></blockquote><p>Hook的类型包括两种：</p><ul><li>exec：执行一段命令</li><li>HTTP：发送HTTP请求</li></ul><blockquote><p>start、stop 动作</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lifecycle-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lifecycle-demo-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the postStart handler &gt; /var/message&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the poststop handler &gt; /var/message&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="3-4-Init-C-amp-探针-整合使用"><a href="#3-4-Init-C-amp-探针-整合使用" class="headerlink" title="3.4 Init C &amp; 探针 整合使用"></a>3.4 Init C &amp; 探针 整合使用</h3><blockquote><p>init-readiness-liveness-hook.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lemon-pod-irlp</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container01</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live01; do echo waiting for live01; sleep 10; done;&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container02</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live02; do echo waiting for live02; sleep 10; done;&#x27;</span>]</span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo The main-container is running! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index01.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;test&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/tmp&quot;</span>]</span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the postStart handler &gt; /var/message&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the poststop handler &gt; /var/message&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init_c</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c init-container01 -- touch /live01</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c init-container02 -- touch /live02</span><br><span class="line">$ kubectl get pod </span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">lemon-pod-irlp   0/1     Running   0          51m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Readiness</span></span><br><span class="line">$ kubectl describe pod lemon-pod-irlp</span><br><span class="line">Readiness probe failed: Get http://10.244.2.12:80/index01.html</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c main-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># echo &#x27;lemon&#x27; &gt; /var/www/index01.html &amp;&amp; httpd -p 80 -h /var/www/ &amp;&amp; netstat -anptu | grep httpd</span></span><br><span class="line">tcp        0      0 :::80                   :::*                    LISTEN      287/httpd</span><br><span class="line">$ kubectl get pod </span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">lemon-pod-irlp   1/1     Running   0          4m42s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Liveness</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c main-container -- rm -rf /tmp/</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">lemon-pod-irlp   1/1     Running   0          5m35s</span><br><span class="line">lemon-pod-irlp   0/1     Running   1          6m1s</span><br><span class="line">$ kubectl describe pod lemon-pod-irlp</span><br><span class="line">Liveness probe failed:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pod hook</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -- cat /var/message</span><br><span class="line">Hello from the postStart handler</span><br></pre></td></tr></table></figure><h3 id="3-5-Pod的相位"><a href="#3-5-Pod的相位" class="headerlink" title="3.5 Pod的相位"></a>3.5 Pod的相位</h3><blockquote><p>Pod的status字段是一个PodStatus对象，PodStatus中有一个phase字段。</p><p>无论是手动创建还是通过控制器创建pod，pod对象总是应该处于其生命进程中以下几个相位之一：</p></blockquote><p>挂起（Pending）：Pod已被Kubernetes系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度Pod的时间和通过网络下载镜像的时间，这可能需要花点时间。</p><p>运行中（Running）：该Pod已经绑定到了一个节点上，Pod中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。</p><p>成功（Succeeded）：Pod中的所有容器都被成功终止，并且不会再重启。</p><p>失败（Failed）：Pod中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。</p><p>未知（Unknown）：因为某些原因无法取得Pod的状态，通常是因为与Pod所在主机通信失败。</p><h2 id="4、controllers-控制器"><a href="#4、controllers-控制器" class="headerlink" title="4、controllers 控制器 "></a>4、controllers <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/">控制器 </a></h2><blockquote><p>kubernetes不会直接创建pod，而是通过controller来管理pod的，所以controller负责维护集群的状态，比如故障检测、自动扩展、滚动更新。</p><p>Kubernetes中会有很多的controller（控制器），这些就相当于一个状态机（快照），用来控制Pod的具体状态和行为。</p></blockquote><h3 id="1-ReplicationController"><a href="#1-ReplicationController" class="headerlink" title="1. ReplicationController"></a>1. ReplicationController</h3><p>ReplicationController（RC）用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的 Pod 来替代；而如果异常多出来的容器也会自动回收；</p><h3 id="2-ReplicaSet"><a href="#2-ReplicaSet" class="headerlink" title="2. ReplicaSet"></a>2. ReplicaSet</h3><p>在新版本的 Kubernetes 中建议使用 ReplicaSet来取代 ReplicationController 。ReplicaSet 跟ReplicationController 没有本质的不同，只是名字不一样，并且 ReplicaSet 支持集合式的 selector；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GET_HOSTS_FROM</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">dns</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">frontend-d8rs5   1/1     Running   0          29s   tier=web</span><br><span class="line">frontend-gczvb   1/1     Running   0          29s   tier=web</span><br><span class="line">frontend-twj7z   1/1     Running   0          29s   tier=web</span><br><span class="line"></span><br><span class="line">$ kubectl label pod frontend-d8rs5 tier=lemon --overwrite=<span class="literal">true</span></span><br><span class="line">pod/frontend-d8rs5 labeled</span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE    LABELS</span><br><span class="line">frontend-d8rs5   1/1     Running   0          3m3s   tier=lemon</span><br><span class="line">frontend-gczvb   1/1     Running   0          3m3s   tier=web</span><br><span class="line">frontend-mrm8n   1/1     Running   0          10s    tier=web</span><br><span class="line">frontend-twj7z   1/1     Running   0          3m3s   tier=web</span><br><span class="line"></span><br><span class="line">$ kubectl delete pod --all</span><br><span class="line">pod <span class="string">&quot;frontend-d8rs5&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;frontend-gczvb&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;frontend-mrm8n&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;frontend-twj7z&quot;</span> deleted</span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">frontend-26xlj   1/1     Running   0          11s   tier=web</span><br><span class="line">frontend-m4vhl   1/1     Running   0          11s   tier=web</span><br><span class="line">frontend-zs9tk   1/1     Running   0          11s   tier=web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 RS</span></span><br><span class="line">$ kubectl delete rs frontend -n default</span><br></pre></td></tr></table></figure><h3 id="3-Deployment"><a href="#3-Deployment" class="headerlink" title="3. Deployment"></a>3. Deployment</h3><p>Deployments（无状态，守护进程类，只关注群体不关注个体）</p><ul><li>一个 <em>Deployment</em> 控制器为 Pods和 ReplicaSets 提供声明式的更新能力。</li><li>虽然 ReplicaSet可以独立使用，但一般还是建议使用 Deployment来自动管理ReplicaSe，这样就无需担心跟其他机制的不兼容问题（比如 ReplicaSe不支持rolling-update 但 Deployment支持）。</li></ul><p>Deployment 为 Pod 和 ReplicaSet 提供了一个声明式定义 (declarative) 方法，用来替代以前的ReplicationController 来方便的管理应用。典型的应用场景包括；</p><ul><li>定义 Deployment 来创建 Pod 和 ReplicaSet</li><li>应用扩容和缩容</li><li>滚动升级和回滚</li><li>暂停和继续 Deployment</li></ul><h4 id="3-1-创建一个-deployment-对象"><a href="#3-1-创建一个-deployment-对象" class="headerlink" title="3.1 创建一个 deployment 对象"></a>3.1 创建一个 deployment 对象</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deploy</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3     3            3           62s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-687dc75df7   3         3         3       65s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-687dc75df7-88tkk   1/1     Running   0          68s</span><br><span class="line">nginx-deployment-687dc75df7-b6whp   1/1     Running   0          68s</span><br><span class="line">nginx-deployment-687dc75df7-ljh46   1/1     Running   0          68s</span><br></pre></td></tr></table></figure><h4 id="3-2-Deployment-扩容缩"><a href="#3-2-Deployment-扩容缩" class="headerlink" title="3.2 Deployment 扩容缩"></a>3.2 Deployment 扩容缩</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale deployment nginx-deployment --replicas=5</span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-687dc75df7-88tkk   1/1     Running   0          7m22s</span><br><span class="line">nginx-deployment-687dc75df7-b6whp   1/1     Running   0          7m22s</span><br><span class="line">nginx-deployment-687dc75df7-ljh46   1/1     Running   0          7m22s</span><br><span class="line">nginx-deployment-687dc75df7-rnjzt   1/1     Running   0          8s</span><br><span class="line">nginx-deployment-687dc75df7-wfx74   1/1     Running   0          8s</span><br><span class="line"></span><br><span class="line">$ kubectl scale deployment nginx-deployment --replicas=2</span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-687dc75df7-88tkk   1/1     Running   0          8m18s</span><br><span class="line">nginx-deployment-687dc75df7-ljh46   1/1     Running   0          8m18s</span><br></pre></td></tr></table></figure><p>如果集群支持 horizontal pod autoscaling 的话，还可以为Deployment设置自动扩展</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl autoscale deployment nginx-deployment --min=10--max=15--cpu-percent=80</span><br></pre></td></tr></table></figure><h4 id="3-3-滚动升级和回滚"><a href="#3-3-滚动升级和回滚" class="headerlink" title="3.3 滚动升级和回滚"></a>3.3 滚动升级和回滚</h4><blockquote><p>Deployment 更新策略</p></blockquote><p>Deployment 可以保证在升级时只有一定数量的 Pod 是 down 的。默认的，它会确保至少有比期望的Pod数量少一个是up状态（最多一个不可用）。</p><p>Deployment 同时也可以确保只创建出超过期望数量的一定数量的 Pod。默认的，它会确保最多比期望的Pod数量多一个的 Pod 是 up 的（最多1个 surge ）。</p><p>未来的 Kuberentes 版本中，将从1-1变成25%-25% 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 滚动升级</span></span><br><span class="line">$ kubectl <span class="built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:1.9.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">$ kubectl rollout undo deployment/nginx-deployment</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:1.7.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用edit命令来编辑 Deployment</span></span><br><span class="line">$ kubectl edit deployment nginx-deployment</span><br><span class="line">     40       - image: nginx:latest</span><br><span class="line">deployment.extensions/nginx-deployment edited</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新镜像实际上就是重新创建了一个rs</span></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-5458686b99   2         2         2       23s</span><br><span class="line">nginx-deployment-687dc75df7   0         0         0       18m</span><br><span class="line">nginx-deployment-6df444bb79   0         0         0       5m55s</span><br></pre></td></tr></table></figure><blockquote><p>Rollover（多个rollout并行）</p></blockquote><p>假如您创建了一个有5个niginx:1.7.9 replica的 Deployment，但是当还只有3个nginx:1.7.9的 replica 创建出来的时候您就开始更新含有5个nginx:1.9.1 replica 的 Deployment。在这种情况下，Deployment 会立即杀掉已创建的3个nginx:1.7.9的 Pod，并开始创建nginx:1.9.1的 Pod。它不会等到所有的5个nginx:1.7.9的Pod 都创建完成后才开始改变航道。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 --revision参数指定某个历史版本</span></span><br><span class="line">$ kubectl rollout undo deployment nginx-deployment --to-revision=2</span><br><span class="line">deployment.extensions/nginx-deployment rolled back</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:1.9.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ps: kubectl rollout pause deployment nginx-deployment    <span class="comment">## 暂停 deployment 的更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除DeployMent</span></span><br><span class="line">$ kubectl delete deployment nginx-deployment -n default</span><br></pre></td></tr></table></figure><blockquote><p>清理 Policy</p></blockquote><p>可以通过设置.spec.revisonHistoryLimit项来指定 deployment 最多保留多少 revision 历史记录。默认的会保留所有的 revision；如果将该项设置为0，Deployment 就不允许回退了</p><h3 id="4-DaemonSet"><a href="#4-DaemonSet" class="headerlink" title="4. DaemonSet"></a>4. DaemonSet</h3><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod</p><p>使用 DaemonSet 的一些典型用法：</p><ul><li>运行集群存储 daemon，例如在每个 Node 上运行glusterd、ceph</li><li>在每个 Node 上运行日志收集 daemon，例如fluentd、logstash</li><li>在每个 Node 上运行监控 daemon，例如Prometheus Node Exporter、collectd、Datadog 代理、New Relic 代理，或 Ganglia gmond</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deamonset-example</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">daemonset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">deamonset-example</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">deamonset-example</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">deamonset-example-tqmfx   1/1     Running   0          94s</span><br><span class="line">deamonset-example-wqvsm   1/1     Running   0          94s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 DaemonSet</span></span><br><span class="line">$ kubectl delete daemonset deamonset-example -n default</span><br></pre></td></tr></table></figure><h3 id="5-Jobs-：一次性任务"><a href="#5-Jobs-：一次性任务" class="headerlink" title="5. Jobs ：一次性任务"></a>5. Jobs ：一次性任务</h3><p>一次性任务，运行完成后pod销毁，不再重新启动新容器。还可以任务定时运行。</p><p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束</p><p>特殊说明:</p><ul><li><p>spec.template 格式同 Pod</p></li><li><p>RestartPolicy 仅支持 Never 或 OnFailure</p></li><li><p>单个Pod时，默认 Pod 成功运行后 Job 即结束</p></li><li><p>spec.completions 标志 Job 结束需要成功运行的 Pod 个数，默认为1</p></li><li><p>spec.parallelism 标志并行运行的 Pod 的个数，默认为1</p></li><li><p>spec.activeDeadlineSeconds 标志失败Pod的重试最大时间，超过这个时间不会继续重试</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>,<span class="string">&quot;-Mbignum=bpi&quot;</span>,<span class="string">&quot;-wle&quot;</span>,<span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get job</span><br><span class="line">NAME   COMPLETIONS   DURATION   AGE</span><br><span class="line">pi     1/1           3m26s      8m54s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">pi-bfmq8                  0/1     Completed   0          9m1s</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">log</span> -f pi-bfmq8</span><br><span class="line"><span class="built_in">log</span> is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use logs instead.</span><br><span class="line">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275905</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Job</span></span><br><span class="line">$ kubectl delete job pi -n default</span><br></pre></td></tr></table></figure><h3 id="6-CronJob-：定时任务"><a href="#6-CronJob-：定时任务" class="headerlink" title="6. CronJob ：定时任务"></a>6. CronJob ：定时任务</h3><p>cronjob 其实就是在job的基础上加上了时间调度，可以：在给定的时间点运行一个任务，也可以周期性的在给定时间点运行。（与linux中的crontab类似）</p><p>Cron Job管理基于时间的 Job，即：</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul><p>使用前提条件：当前使用的Kubernetes集群，版本 &gt;= 1.8(对 CronJob)。对于先前版本的集群，版本 &lt;1.8，启动 API Server时，通过传递选项–runtime-config=batch/v2alpha1=true可以开启 batch/v2alpha1API。</p><p>典型的用法如下所示：</p><ul><li>在给定的时间点调度 Job 运行</li><li>创建周期性运行的 Job，例如：数据库备份、发送邮件</li></ul><p>特殊说明：</p><ul><li><p>spec.template 格式同 Pod</p></li><li><p>RestartPolicy 仅支持 Never 或 OnFailure</p></li><li><p>单个 Pod 时，默认 Pod 成功运行后 Job 即结束</p></li><li><p>spec.completions 标志 Job 结束需要成功运行的 Pod 个数，默认为1</p></li><li><p>spec.parallelism 标志并行运行的 Pod 的个数，默认为1</p></li><li><p>spec.activeDeadlineSeconds 标志失败 Pod 的重试最大时间，超过这个时间不会继续重试</p></li><li><p>spec.schedule：调度，必需字段，指定任务运行周期，格式同 Cron</p></li><li><p>spec.jobTemplate：Job 模板，必需字段，指定需要运行的任务，格式同 Job</p></li><li><p>spec.startingDeadlineSeconds：启动 Job 的期限（秒级别），该字段是可选的。如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限</p></li><li><p>spec.concurrencyPolicy：并发策略，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。只允许指定下面策略中的一种：</p><ul><li><p>Allow（默认）：允许并发运行 Job</p></li><li><p>Forbid：禁止并发运行，如果前一个还没有完成，则直接跳过下一个</p></li><li><p>Replace：取消当前正在运行的 Job，用一个新的来替换</p><p>注意, 当前策略只能应用于同一个Cron Job创建的Job。如果存在多个Cron Job, 它们创建的 Job 之间总是允许并发运行。</p></li></ul></li><li><p>spec.suspend：挂起，该字段也是可选的。如果设置为true，后续所有执行都会被挂起。它对已经开始执行的 Job 不起作用。默认值为false。</p></li><li><p>spec.successfulJobsHistoryLimit和.spec.failedJobsHistoryLimit：历史限制，是可选的字段。它们指定了可以保留多少完成和失败的 Job。默认情况下，它们分别设置为3和1。设置限制的值为0，相关类型的 Job 完成后将不会被保留。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get cronjob</span><br><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   */1 * * * *   False     1        10s             22s</span><br><span class="line"></span><br><span class="line">$ kubectl get job</span><br><span class="line">NAME               COMPLETIONS   DURATION   AGE</span><br><span class="line">hello-1614322500   1/1           3s         62s</span><br><span class="line">hello-1614322560   0/1           2s         2s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                     READY   STATUS      RESTARTS   AGE</span><br><span class="line">hello-1614322500-p7wmh   0/1     Completed   0          6s</span><br><span class="line">hello-1614322560-vsz58   0/1     Completed   0          27s</span><br><span class="line"></span><br><span class="line">$ kubectl logs -f hello-1614322500-p7wmh</span><br><span class="line">Sat Mar 20 13:03:17 UTC 2021</span><br><span class="line">Hello from the Kubernetes cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 cronjob</span></span><br><span class="line">$ kubectl delete cronjob hello -n default</span><br></pre></td></tr></table></figure><h3 id="7-StateFulSet"><a href="#7-StateFulSet" class="headerlink" title="7. StateFulSet"></a>7. StateFulSet</h3><p>StatefulSets（管理有状态应用） 作为 Controller 为 Pod 提供唯一的标识。它可以保证部署和 scale 的顺序StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括：</p><ul><li>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现。</li><li>稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现。</li><li>有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现。</li><li>有序收缩，有序删除（即从N-1到0）。</li></ul><h3 id="8-Horizontal-Pod-Autoscaler"><a href="#8-Horizontal-Pod-Autoscaler" class="headerlink" title="8. Horizontal Pod Autoscaler"></a>8. Horizontal Pod Autoscaler</h3><p>Horizontal Pod Autoscaler 应用的资源使用率通常都有高峰和低谷的时候，如何削峰填谷，提高集群的整体资源利用率，让service中的Pod个数自动调整呢？这就有赖于Horizontal Pod Autoscaler了，顾名思义，使Pod水平自动缩放。</p><h2 id="5、Service"><a href="#5、Service" class="headerlink" title="5、Service"></a>5、Service</h2><blockquote><p>Kubernetes Service定义了这样一种抽象：一个Pod的逻辑分组，一种可以访问它们的策略 —— 通常称为微服务。这一组Pod能够被Service访问到，通常是通过Label Selector 。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v20t5rzj30v50gwtc0.jpg" alt="image-20210301102544478"></p><p>Service能够提供负载均衡的能力，但是在使用上有个限制：Service 只提供 4 层负载均衡能力，而没有 7 层功能, 但有时可能需要更多的匹配规则来转发请求，这点上 4 层负载均衡是不支持的。</p><h3 id="5-1-Service-的类型"><a href="#5-1-Service-的类型" class="headerlink" title="5.1 Service 的类型"></a>5.1 Service 的类型</h3><p>Service 在 K8s 中有以下四种类型：</p><ul><li>ClusterIp：默认类型，自动分配一个仅 Cluster 内部可以访问的虚拟 IP</li><li>NodePort：在 ClusterIP 基础上为 Service 在每台机器上绑定一个端口，这样就可以通过: NodePort 来访问该服务</li><li>LoadBalancer：在 NodePort 的基础上，借助 cloud provider 创建一个外部负载均衡器，并将请求转发到: NodePort</li><li>ExternalName：把集群外部的服务引入到集群内部来，在集群内部直接使用。没有任何类型代理被创建，这只有 kubernetes 1.7 或更高版本的 kube-dns 才支持</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v25ddjsj30s50lnafb.jpg" alt="image-20210301102927561"></p><h3 id="5-2-VIP-和-Service-代理"><a href="#5-2-VIP-和-Service-代理" class="headerlink" title="5.2 VIP 和 Service 代理"></a>5.2 VIP 和 Service 代理</h3><p>在 Kubernetes 集群中，每个 Node 运行一个kube-proxy进程。kube-proxy负责为Service实现了一种VIP（虚拟 IP）的形式，而不是ExternalName的形式。在 Kubernetes v1.0 版本，代理完全在 userspace。在Kubernetes v1.1 版本，新增了 iptables 代理，但并不是默认的运行模式。从 Kubernetes v1.2 起，默认就是iptables 代理。在 Kubernetes v1.8.0-beta.0 中，添加了 ipvs 代理。</p><p>在 Kubernetes 1.14 版本开始默认使用ipvs 代理。</p><p>在 Kubernetes v1.0 版本，Service是 “4层”（TCP/UDP over IP）概念。在 Kubernetes v1.1 版本，新增了Ingress API（beta 版），用来表示 “7层”（HTTP）服务。</p><p>代理模式的分类如下：</p><p>1、userspace 代理模式</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2ayww4j30sx0jd11p.jpg" alt="image-20210301103543203"></p><p>2、iptables 代理模式</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2gjt4wj30sw0it471.jpg" alt="image-20210301103602493"></p><p>3、ipvs 代理模式</p><p>这种模式，kube-proxy 会监视 Kubernetes Service对象和Endpoints，调用netlink接口以相应地创建ipvs 规则并定期与 Kubernetes Service对象和Endpoints对象同步 ipvs 规则，以确保 ipvs 状态与期望一致。访问服务时，流量将被重定向到其中一个后端 Pod。</p><p>与 iptables 类似，ipvs 于 netfilter 的 hook 功能，但使用哈希表作为底层数据结构并在内核空间中工作。这意味着 ipvs 可以更快地重定向流量，并且在同步代理规则时具有更好的性能。此外，ipvs 为负载均衡算法提供了更多选项，例如：</p><ul><li>rr：轮询调度</li><li>lc：最小连接数</li><li>dh：目标哈希</li><li>sh：源哈希</li><li>sed：最短期望延迟</li><li>nq：不排队调度</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2lb7tmj30sv0irgwj.jpg" alt="image-20210301103456348"></p><h3 id="5-3-ClusterIP"><a href="#5-3-ClusterIP" class="headerlink" title="5.3 ClusterIP"></a>5.3 ClusterIP</h3><p>clusterIP 主要在每个 node 节点使用 IPVS，将发向 clusterIP 对应端口的数据，转发到 kube-proxy 中。然后 kube-proxy 自己内部实现有负载均衡的方法，并可以查询到这个 service 下对应 pod 的地址和端口，进而把数据转发给对应的 pod 的地址和端口。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2owu0xj60s60fcacs02.jpg" alt="image-20210301111213452"></p><p>为了实现图上的功能，主要需要以下几个组件的协同工作：</p><ul><li>apiserver 用户通过kubectl命令向apiserver发送创建service的命令，apiserver接收到请求后将数据存储到etcd中</li><li>kube-proxy kubernetes的每个节点中都有一个叫做kube-porxy的进程，这个进程负责感知service，pod的变化，并将变化的信息写入本地的 IPVS 规则中</li><li>IPVS 使用NAT等技术将virtualIP的流量转至endpoint中</li></ul><p><strong>创建 myapp-deploy-svc.yaml 文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-deploy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>查看 IPVSADM</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE     SELECTOR</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   172d    &lt;none&gt;</span><br><span class="line">myapp        ClusterIP   10.104.132.57   &lt;none&gt;        80/TCP    3m10s   app=myapp,release=stabel</span><br><span class="line"></span><br><span class="line">$ ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 192.168.2.1:6443             Masq    1      3          0         </span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.14:53               Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.15:53               Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.0.14:9153             Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.15:9153             Masq    1      0          0         </span><br><span class="line">TCP  10.104.132.57:80 rr</span><br><span class="line">  -&gt; 10.244.1.40:80               Masq    1      0          3         </span><br><span class="line">  -&gt; 10.244.1.41:80               Masq    1      0          3         </span><br><span class="line">  -&gt; 10.244.2.40:80               Masq    1      0          3         </span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.14:53               Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.15:53               Masq    1      0          0</span><br></pre></td></tr></table></figure><h3 id="5-4-Headless-Service"><a href="#5-4-Headless-Service" class="headerlink" title="5.4 Headless Service"></a>5.4 Headless Service</h3><p>有时不需要或不想要负载均衡，以及单独的 Service IP 。遇到这种情况，可以通过指定 ClusterIP(spec.clusterIP) 的值为 “None” 来创建 Headless Service 。这类 Service 并不会分配 Cluster IP， kube-proxy 不会处理它们，而且平台也不会为它们进行负载均衡和路由。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-headless</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span>  </span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">&quot;None&quot;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE     SELECTOR</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   172d    &lt;none&gt;</span><br><span class="line">myapp            ClusterIP   10.104.132.57   &lt;none&gt;        80/TCP    5m30s   app=myapp,release=stabel</span><br><span class="line">myapp-headless   ClusterIP   None            &lt;none&gt;        80/TCP    19s     app=myapp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ dig -t A myapp-headless.default.svc.cluster.local. @10.96.0.10</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-16.P2.el7_8.6 &lt;&lt;&gt;&gt; -t A myapp-headless.default.svc.cluster.local. @10.96.0.10</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; WARNING: .<span class="built_in">local</span> is reserved <span class="keyword">for</span> Multicast DNS</span><br><span class="line">;; You are currently testing what happens when an mDNS query is leaked to DNS</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 5421</span></span><br><span class="line"><span class="string">;; flags: qr aa rd; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string">;; WARNING: recursion requested but not available</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;myapp-headless.default.svc.cluster.local. IN A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">myapp-headless.default.svc.cluster.local. 30 INA 10.244.1.41</span></span><br><span class="line"><span class="string">myapp-headless.default.svc.cluster.local. 30 INA 10.244.1.40</span></span><br><span class="line"><span class="string">myapp-headless.default.svc.cluster.local. 30 INA 10.244.2.40</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 0 msec</span></span><br><span class="line"><span class="string">;; SERVER: 10.96.0.10#53(10.96.0.10)</span></span><br><span class="line"><span class="string">;; WHEN: 四 3月 04 10:36:53 CST 2021</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 237</span></span><br></pre></td></tr></table></figure><h3 id="5-5-NodePort"><a href="#5-5-NodePort" class="headerlink" title="5.5 NodePort"></a>5.5 NodePort</h3><p>nodePort 的原理在于在 node 上开了一个端口，将向该端口的流量导入到 kube-proxy，然后由 kube-proxy 进一步到给对应的 pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapps</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">ports:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE     SELECTOR</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        172d    &lt;none&gt;</span><br><span class="line">myapp            ClusterIP   10.104.132.57   &lt;none&gt;        80/TCP         11m     app=myapp,release=stabel</span><br><span class="line">myapp-headless   ClusterIP   None            &lt;none&gt;        80/TCP         6m42s   app=myapp</span><br><span class="line">myapps           NodePort    10.100.41.94    &lt;none&gt;        80:32195/TCP   42s     app=web,release=stabel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询流程,并且在每台节点上都会打开一个32195端口</span></span><br><span class="line">ipvsadm -Ln</span><br></pre></td></tr></table></figure><h3 id="5-6-LoadBalancer"><a href="#5-6-LoadBalancer" class="headerlink" title="5.6 LoadBalancer"></a>5.6 LoadBalancer</h3><p>loadBalancer 和 nodePort 其实是同一种方式。区别在于 loadBalancer 比 nodePort 多了一步，就是可以调用cloud provider 去创建 LB 来向节点导流。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2ulrlwj30sa0ln76f.jpg" alt="image-20210301113038598"></p><h3 id="5-7-ExternalName"><a href="#5-7-ExternalName" class="headerlink" title="5.7 ExternalName"></a>5.7 ExternalName</h3><p>这种类型的 Service 通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容( 例如：hub.atguigu.com )。</p><p>ExternalName Service 是 Service 的特例，它没有 selector，也没有定义任何的端口和Endpoint。相反的，对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service-1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ExternalName</span></span><br><span class="line">  <span class="attr">externalName:</span> <span class="string">hub.armin.com</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME             TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE     SELECTOR</span><br><span class="line">kubernetes       ClusterIP      10.96.0.1       &lt;none&gt;          443/TCP        172d    &lt;none&gt;</span><br><span class="line">my-service-1     ExternalName   &lt;none&gt;          hub.armin.com   &lt;none&gt;         29s     &lt;none&gt;</span><br><span class="line">myapp            ClusterIP      10.104.132.57   &lt;none&gt;          80/TCP         21m     app=myapp,release=stabel</span><br><span class="line">myapp-headless   ClusterIP      None            &lt;none&gt;          80/TCP         15m     app=myapp</span><br><span class="line">myapps           NodePort       10.100.41.94    &lt;none&gt;          80:32195/TCP   9m51s   app=web,release=stabel</span><br><span class="line"></span><br><span class="line">$ dig -t A hub.armin.com.svc.cluster.local. @10.96.0.10</span><br></pre></td></tr></table></figure><p>当查询主机 my-service.defalut.svc.cluster.local ( SVC_NAME.NAMESPACE.svc.cluster.local )时，集群的DNS 服务将返回一个值 my.database.example.com 的 CNAME 记录。访问这个服务的工作方式和其他的相同，唯一不同的是重定向发生在 DNS 层，而且不会进行代理或转发。</p><h2 id="6、Ingress"><a href="#6、Ingress" class="headerlink" title="6、Ingress"></a>6、Ingress</h2><blockquote><p>实际上Ingress也是Kubernetes API的标准资源类型之一，它其实就是一组基于DNS名称（host）或URL路径把请求转发到指定的Service资源的规则。用于将集群外部的请求流量转发到集群内部完成的服务发布。我们需要明白的是，Ingress资源自身不能进行“流量穿透”，仅仅是一组规则的集合，这些集合规则还需要其他功能的辅助，比如监听某套接字，然后根据这些规则的匹配进行路由转发，这些能够为Ingress资源监听套接字并将流量转发的组件就是Ingress Controller。</p><p>Ingress 控制器不同于Deployment 控制器的是，Ingress控制器不直接运行为kube-controller-manager的一部分，它仅仅是Kubernetes集群的一个附件，类似于CoreDNS，需要在集群上单独部署。</p></blockquote><p>Ingress-Nginx github 地址：<a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></p><p>Ingress-Nginx 官方网站：<a href="https://kubernetes.github.io/ingress-nginx/">https://kubernetes.github.io/ingress-nginx/</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2zr3qej314c0ijah5.jpg" alt="image-20210305163255636"></p><h3 id="6-1-部署-Ingress-Nginx"><a href="#6-1-部署-Ingress-Nginx" class="headerlink" title="6.1 部署 Ingress-Nginx"></a>6.1 部署 Ingress-Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># mkdir -p /etc/kubernetes/ingress-nginx &amp;&amp; cd /etc/kubernetes/ingress-nginx</span></span><br></pre></td></tr></table></figure><h2 id="7、K8S-存储"><a href="#7、K8S-存储" class="headerlink" title="7、K8S - 存储"></a>7、K8S - 存储</h2><ul><li>ConfigMap</li><li>Secret</li><li>volume</li><li>Persistent Volume（PV）</li></ul><h3 id="7-1-ConfigMap"><a href="#7-1-ConfigMap" class="headerlink" title="7.1 ConfigMap"></a>7.1 ConfigMap</h3><blockquote><p>ConfigMap 功能在 Kubernetes1.2 版本中引入，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。ConfigMap API 给我们提供了向容器中注入配置信息的机制，ConfigMap 可以被用来保存单个属性，也可以用来保存整个配置文件或者 JSON 二进制大对象。</p></blockquote><h4 id="7-1-1-ConfigMap-的创建"><a href="#7-1-1-ConfigMap-的创建" class="headerlink" title="7.1.1 ConfigMap 的创建"></a>7.1.1 ConfigMap 的创建</h4><ul><li>目录创建</li><li>文件创建</li><li>字面值创建</li></ul><p><strong>使用目录创建</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">$ ll /etc/kubernetes/configmap-dir/</span><br><span class="line">game.properties</span><br><span class="line">ui.properties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /etc/kubernetes/configmap-dir/game.properties</span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=<span class="literal">true</span></span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=<span class="literal">true</span></span><br><span class="line">secret.code.lives=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /etc/kubernetes/configmap-dir/ui.properties</span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br><span class="line">how.nice.to.look=fairlyNice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --from-file 指定在目录下的所有文件都会被用在 ConfigMap 里面创建一个键值对，键的名字就是文件名，值就是文件的内容。</span></span><br><span class="line">$ kubectl create configmap game-config-1 --from-file=/etc/kubernetes/configmap-dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get configmap -n default -owide</span><br><span class="line">NAME            DATA   AGE</span><br><span class="line">game-config-1   2      &lt;invalid&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get configmap -n default -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">items:</span><br><span class="line">- apiVersion: v1</span><br><span class="line">  data:</span><br><span class="line">    game.properties: |</span><br><span class="line">      enemies=aliens</span><br><span class="line">      lives=3</span><br><span class="line">      enemies.cheat=<span class="literal">true</span></span><br><span class="line">      enemies.cheat.level=noGoodRotten</span><br><span class="line">      secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">      secret.code.allowed=<span class="literal">true</span></span><br><span class="line">      secret.code.lives=30</span><br><span class="line">    ui.properties: |</span><br><span class="line">      color.good=purple</span><br><span class="line">      color.bad=yellow</span><br><span class="line">      allow.textmode=<span class="literal">true</span></span><br><span class="line">      how.nice.to.look=fairlyNice</span><br><span class="line">  kind: ConfigMap</span><br><span class="line">  metadata:</span><br><span class="line">    creationTimestamp: <span class="string">&quot;2021-03-08T11:54:57Z&quot;</span></span><br><span class="line">    name: game-config-1</span><br><span class="line">    namespace: default</span><br><span class="line">    resourceVersion: <span class="string">&quot;15839&quot;</span></span><br><span class="line">    selfLink: /api/v1/namespaces/default/configmaps/game-config-1</span><br><span class="line">    uid: cb84c4f5-e509-4ecb-8513-68184b8b57af</span><br><span class="line">kind: List</span><br><span class="line">metadata:</span><br><span class="line">  resourceVersion: <span class="string">&quot;&quot;</span></span><br><span class="line">  selfLink: <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl describe configmap game-config-1 -n default</span><br><span class="line">Name:         game-config-1</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ui.properties:</span><br><span class="line">----</span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br><span class="line">how.nice.to.look=fairlyNice</span><br><span class="line"></span><br><span class="line">game.properties:</span><br><span class="line">----</span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=<span class="literal">true</span></span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=<span class="literal">true</span></span><br><span class="line">secret.code.lives=30</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>使用文件创建</strong></p><p>只要指定为一个文件就可以从单个文件中创建 ConfigMap</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create configmap game-config-2 --from-file=/etc/kubernetes/configmap-dir/game.properties</span><br><span class="line">$ kubectl get configmaps game-config-2 -o yaml</span><br><span class="line"><span class="comment"># --from-file这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的。</span></span><br></pre></td></tr></table></figure><p><strong>使用字面值创建</strong></p><p>使用文字值创建，利用–from-literal参数传递配置信息，该参数可以使用多次</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create configmap game-config-3 --from-literal=k1.how=v1 --from-literal=k2.how=v2</span><br><span class="line">$ kubectl get configmaps game-config-3 -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  k1.how: v1</span><br><span class="line">  k2.how: v2</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-03-08T12:01:19Z&quot;</span></span><br><span class="line">  name: game-config-3</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;16388&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/game-config-3</span><br><span class="line">  uid: b9e048f3-a17d-4517-bfe5-311c51377aaa</span><br></pre></td></tr></table></figure><h4 id="7-1-2-Pod-中使用-ConfigMap"><a href="#7-1-2-Pod-中使用-ConfigMap" class="headerlink" title="7.1.2 Pod 中使用 ConfigMap"></a>7.1.2 Pod 中使用 ConfigMap</h4><p><strong>使用 ConfigMap 来替代环境变量</strong></p><ul><li>env: 指定导入k/v</li><li>envFrom: 全部导入</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat cm-test-01.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">special.how:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">special.sam:</span> <span class="string">charm</span></span><br><span class="line">  <span class="attr">special.lep:</span> <span class="string">value</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-test-pod-01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_HOW_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.how</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_SAM_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.sam</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f cm-test-01.yaml</span><br><span class="line">$ kubectl logs cm-test-pod-01 | grep SPECIAL</span><br><span class="line">SPECIAL_HOW_KEY=very</span><br><span class="line">SPECIAL_SAM_KEY=charm</span><br></pre></td></tr></table></figure><p><strong>用 ConfigMap 设置命令行参数</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat cm-test-02.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">config-01</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">a:</span> <span class="string">b</span></span><br><span class="line">  <span class="attr">c:</span> <span class="string">d</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-test-pod-02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo $(KEY-01) $(KEY-02)&quot;</span>]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KEY-01</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">config-01</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">a</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KEY-02</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">config-01</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">c</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs cm-test-pod-02</span><br><span class="line">b d</span><br></pre></td></tr></table></figure><p><strong>通过数据卷插件使用ConfigMap</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat cm-test-03.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">config-02</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">how:</span> <span class="string">HOW</span></span><br><span class="line">  <span class="attr">sam:</span> <span class="string">SAM</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 在数据卷里面使用这个 ConfigMap,有不同的选项。最基本的就是将文件填入数据卷,在这个文件中,键就是文件名,键值就是文件内容。</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod-02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 36000&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">config-02</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pod-02 -- ls -lh /etc/config</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root          10 Mar  9 08:44 how -&gt; ..data/how</span><br><span class="line">lrwxrwxrwx    1 root     root          10 Mar  9 08:44 sam -&gt; ..data/sam</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pod-02 -- cat /etc/config/how</span><br><span class="line">HOW</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pod-02 -- cat /etc/config/sam</span><br><span class="line">SAM</span><br></pre></td></tr></table></figure><h4 id="7-1-3-ConfigMap-的热更新"><a href="#7-1-3-ConfigMap-的热更新" class="headerlink" title="7.1.3 ConfigMap 的热更新"></a>7.1.3 ConfigMap 的热更新</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">log-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">log-config</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it my-nginx-7b6584d96d-hpbml -- cat /etc/config/log_level</span><br><span class="line">INFO</span><br></pre></td></tr></table></figure><p>修改 ConfigMap，将其INFO改为DEBUG</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl edit configmap log-config</span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  log_level: DEBUG</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubectl.kubernetes.io/last-applied-configuration: |</span><br><span class="line">      &#123;<span class="string">&quot;apiVersion&quot;</span>:<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;log_level&quot;</span>:<span class="string">&quot;DEBUG&quot;</span>&#125;,<span class="string">&quot;kind&quot;</span>:<span class="string">&quot;ConfigMap&quot;</span>,<span class="string">&quot;metadata&quot;</span>:&#123;<span class="string">&quot;annotations&quot;</span>:&#123;&#125;,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;log-config&quot;</span>,<span class="string">&quot;namespace&quot;</span>:<span class="string">&quot;default&quot;</span>&#125;&#125;</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-03-09T09:04:08Z&quot;</span></span><br><span class="line">  name: log-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;36210&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/log-config</span><br><span class="line">  uid: 8e2f15fc-cc05-414b-ad2f-9597cacf7c9a</span><br></pre></td></tr></table></figure><p>修改log_level的值为DEBUG等待大概 10 秒钟时间，再次查看环境变量的值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it my-nginx-7b6584d96d-hpbml -- cat /etc/config/log_level</span><br><span class="line">DEBUG</span><br></pre></td></tr></table></figure><h3 id="7-2-Secret"><a href="#7-2-Secret" class="headerlink" title="7.2 Secret"></a>7.2 Secret</h3><blockquote><p>Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec中。</p><p>并且，Secret 可以以 Volume 或者 环境变量的方式使用。</p></blockquote><p>Secret 有三种类型</p><ul><li>Service Account</li><li>Opaque</li><li>kubernetes.io/dockerconfigjson</li></ul><h4 id="7-2-1-Service-Account"><a href="#7-2-1-Service-Account" class="headerlink" title="7.2.1 Service Account"></a>7.2.1 Service Account</h4><blockquote><p>大致了解一下即可，Service Account 用来访问 Kubernetes API，由 Kubernetes 自动创建，并且会自动挂载到 Pod的/run/secrets/kubernetes.io/serviceaccount目录中。</p><p>PS : 只有与 apiserver 组件进行交互的 pod 才会有如下的 证书、命名空间、tekon密钥。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it kube-proxy-2x7r8 -n kube-system -- ls -lh /run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 13 Mar 10 02:50 ca.crt -&gt; ..data/ca.crt</span><br><span class="line">lrwxrwxrwx 1 root root 16 Mar 10 02:50 namespace -&gt; ..data/namespace</span><br><span class="line">lrwxrwxrwx 1 root root 12 Mar 10 02:50 token -&gt; ..data/token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这几个文件是 default-token 提供的，而 default-token 是 k8s 默认为每一个namespace 创建的，用于Service Account</span></span><br><span class="line">$ kubectl get secret</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-c6vqw   kubernetes.io/service-account-token   3      46d</span><br><span class="line"></span><br><span class="line">$ kubectl describe secret default-token-c6vqw</span><br><span class="line">…………………………………………………………………………</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tYzZ2cXciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjJjNjlmMjkzLTcwNTQtNDY4My05ODNmLTljYmQyNTBlZTQ1ZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.WdQ32P2ndcKUNbyrsKouTgBEVQf8Smq1mSd9zRpBou1KN2DUJ6UPWHvMdDlqwvN2CACOWZcri0eN8NABvNEW6cQMv7O7-GoVsuv5HLDxmO1IC1tTVUr8d-uBxULiSiQZ_Mj2LK1QKYNAHzVYRlEozzI3wZAOWBDqA7ZFVpXRQMES0lzlRc9ETZqQmxIHgF_hyTzpsRaLkR480vppOTORejZGrm_wiSvYVKKvNe3H35TRtHARCZDlGv7DAickld2rnYuKSyLdZz29CmDiE6L0ZyzTCMgPalNkmjcuij28XG19I4GLio7IiS5ZMDrQsmr_4t3G449PPSiH_0C78LICuA</span><br></pre></td></tr></table></figure><h4 id="7-2-2-Opaque-Secret"><a href="#7-2-2-Opaque-Secret" class="headerlink" title="7.2.2 Opaque Secret"></a>7.2.2 Opaque Secret</h4><blockquote><p>base64编码格式的Secret，用来存储密码、密钥等。</p><p>Opaque 类型的数据是一个 map 类型，要求 value 是 base64 编码格式。</p></blockquote><p>1、创建 Opaque-Secret</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64 -d 选项为解密</span></span><br><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;admin&quot;</span> | base64</span><br><span class="line">YWRtaW4=</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;1f2d1e2e67df&quot;</span> | base64</span><br><span class="line">MWYyZDFlMmU2N2Rm</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat opaque-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">op-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get secret</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-c6vqw   kubernetes.io/service-account-token   3      46d</span><br><span class="line">op-secret             Opaque                                2      11s</span><br><span class="line"></span><br><span class="line">$ kubectl describe secret op-secret</span><br><span class="line">…………………………………………………………………………</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:  12 bytes</span><br><span class="line">username:  5 bytes</span><br></pre></td></tr></table></figure><p>2、使用方式</p><ul><li>将 Secret 挂载到 Volume 中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat volume-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seret-test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">seret-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">op-secret</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secrets</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&#x27;/etc/secrets&#x27;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it seret-test -- ls -l /etc/secrets</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root            15 Mar 10 03:25 password -&gt; ..data/password</span><br><span class="line">lrwxrwxrwx    1 root     root            15 Mar 10 03:25 username -&gt; ..data/username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且 secret 是会自己进行解密的</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it seret-test -- cat /etc/secrets/password</span><br><span class="line">1f2d1e2e67df</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it seret-test -- cat /etc/secrets/username</span><br><span class="line">admin</span><br></pre></td></tr></table></figure><ul><li>将 Secret 导出到环境变量中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat env-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pod-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-1</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_USER</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">op-secret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">op-secret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it pod-deployment-7cfd69dcf7-222q2 -- /bin/sh</span><br><span class="line">/ <span class="comment"># echo $TEST_USER</span></span><br><span class="line">admin</span><br><span class="line">/ <span class="comment"># echo $TEST_PASSWORD</span></span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure><h4 id="7-2-3-dockerconfigjson"><a href="#7-2-3-dockerconfigjson" class="headerlink" title="7.2.3 dockerconfigjson"></a>7.2.3 dockerconfigjson</h4><blockquote><p>用来存储私有 docker registry 的认证信息。</p></blockquote><p>1、使用 Kuberctl 创建 docker registry 认证的 secret（注：针对私有仓库）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># --docker-server      仓库地址</span></span><br><span class="line"><span class="comment"># --docker-username    仓库用户</span></span><br><span class="line"><span class="comment"># --docker-password    仓库密码</span></span><br></pre></td></tr></table></figure><p>2、在创建 Pod 的时候，通过 imagePullSecrets 来引用刚创建的 myregistrykey</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat key-secret.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">hub.lemon.com/library/my_nginx:v1</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myregistrykey</span></span><br></pre></td></tr></table></figure><h3 id="7-3-Volume"><a href="#7-3-Volume" class="headerlink" title="7.3 Volume"></a>7.3 Volume</h3><blockquote><p>容器磁盘上的文件的生命周期是短暂的，这就使得在容器中运行重要应用时会出现一些问题。首先，当容器崩溃时，kubelet 会重启它，但是容器中的文件将丢失——容器以干净的状态（镜像最初的状态）重新启动。其次，在Pod中同时运行多个容器时，这些容器之间通常需要共享文件。Kubernetes 中的Volume抽象就很好的解决了这些问题。</p><p>Kubernetes 中的卷有明确的寿命 —— 与封装它的 Pod 相同。所f以，卷的生命比 Pod 中的所有容器都长，当这个容器重启时数据仍然得以保存。当然，当 Pod 不再存在时，卷也将不复存在。也许更重要的是，Kubernetes支持多种类型的卷，Pod 可以同时使用任意数量的卷。</p></blockquote><p><strong>Kubernetes 支持以下类型的卷：</strong></p><ul><li>awsElasticBlockStore、azureDisk、azureFile、cephfs、csi、downwardAPI、emptyDir</li><li>fc、flocker、gcePersistentDisk、gitRepo、glusterfs、hostPath、iscsi、local、nfs</li><li>persistentVolumeClaim、projected、portworxVolume、quobyte、rbd、scaleIO、secret</li><li>storageos、vsphereVolume</li></ul><p><strong>==比较常用的两类 emptyDir、hostPath==</strong></p><h4 id="7-3-1-emptyDir"><a href="#7-3-1-emptyDir" class="headerlink" title="7.3.1 emptyDir"></a>7.3.1 emptyDir</h4><blockquote><p>当 Pod 被分配给节点时，首先创建emptyDir卷，并且只要该 Pod 在该节点上运行，该卷就会存在。正如卷的名字所述，它最初是空的。Pod 中的容器可以读取和写入emptyDir卷中的相同文件，尽管该卷可以挂载到每个容器中的相同或不同路径上。当出于任何原因从节点中删除 Pod 时，emptyDir中的数据将被永久删除。</p></blockquote><p><strong>emptyDir的用法有：</strong></p><ul><li>暂存空间，例如用于基于磁盘的合并排序</li><li>用作长时间计算崩溃恢复时的检查点</li><li>Web服务器容器提供数据时，保存内容管理器容器提取的文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat emptyDir.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container01</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache01</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container02</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:latest</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache02</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pd -c test-container01 -- /bin/sh</span><br><span class="line">/ <span class="comment"># cd /cache01</span></span><br><span class="line">/cache01 <span class="comment"># hostname &gt;&gt; test.log</span></span><br><span class="line">/cache01 <span class="comment"># cat test.log </span></span><br><span class="line">test-pd</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pd -c test-container02 -- /bin/sh</span><br><span class="line"><span class="comment"># cd /cache02</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">test.log</span><br><span class="line"><span class="comment"># cat test.log</span></span><br><span class="line">test-pd</span><br></pre></td></tr></table></figure><h4 id="7-3-2-hostPath"><a href="#7-3-2-hostPath" class="headerlink" title="7.3.2 hostPath"></a>7.3.2 hostPath</h4><blockquote><p>hostPath卷将主机节点的文件系统中的文件或目录挂载到集群中。</p></blockquote><p><strong>hostPath 的用途如下：</strong></p><ul><li>运行需要访问 Docker 内部的容器；使用 /var/lib/docker 的 hostPath</li><li>在容器中运行 cAdvisor；使用 /dev/cgroups 的 hostPath</li><li>允许 pod 指定给定的 hostPath 是否应该在 pod 运行之前存在，是否应该创建，以及它应该以什么形式存在</li></ul><p><strong>除了所需的path属性之外，用户还可以为hostPath卷指定type</strong></p><table><thead><tr><th>值</th><th>行为</th></tr></thead><tbody><tr><td></td><td>空字符串（默认）用于向后兼容，这意味着在挂载 hostPath 卷之前不会执行任何检查。</td></tr><tr><td>DirectoryOrCreate</td><td>如果在给定的路径上没有任何东西存在，那么将根据需要在那里创建一个空目录，权限设置为 0755，与 Kubelet 具有相同的组和所有权。</td></tr><tr><td>Directory</td><td>给定的路径下必须存在目录。</td></tr><tr><td>FileOrCreate</td><td>如果在给定的路径上没有任何东西存在，那么会根据需要创建一个空文件，权限设置为 0644，与 Kubelet 具有相同的组和所有权。</td></tr><tr><td>File</td><td>给定的路径下必须存在文件。</td></tr><tr><td>Socket</td><td>给定的路径下必须存在 UNIX 套接字。</td></tr><tr><td>CharDevice</td><td>给定的路径下必须存在字符设备。</td></tr><tr><td>BlockDevice</td><td>给定的路径下必须存在块设备。</td></tr></tbody></table><p><strong>使用这种卷类型是请注意，因为：</strong></p><ul><li>由于每个节点上的文件都不同，具有相同配置（例如从 podTemplate 创建的）的 pod 在不同节点上的行为可能会有所不同。</li><li>当 Kubernetes 按照计划添加资源感知调度时，将无法考虑hostPath使用的资源。</li><li>在底层主机上创建的文件或目录只能由 root 写入。您需要在特权容器中以 root 身份运行进程，或修改主机上的文件权限以便写入hostPath卷。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat hostpath.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">h-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/hv</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># directory location on host</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line">      <span class="comment"># this field is optional</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide</span><br><span class="line">NAME    READY   STATUS              RESTARTS   AGE   IP       NODE                 </span><br><span class="line">h-pod   0/1     ContainerCreating   0          7s    &lt;none&gt;   k8s-node-192.168.2.22</span><br><span class="line"></span><br><span class="line">$ hostname</span><br><span class="line">k8s-node-192.168.2.22</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hv test&#x27;</span> &gt; /data/h-test.log</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it h-pod -- cat /hv/h-test.log</span><br><span class="line">hv <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="7-4-Persistent-Volume（PV）"><a href="#7-4-Persistent-Volume（PV）" class="headerlink" title="7.4 Persistent Volume（PV）"></a>7.4 Persistent Volume（PV）</h3><blockquote><p>PersistentVolume（简称PV） 是 Volume 之类的卷插件，也是集群中的资源，但独立于Pod的生命周期（即不会因Pod删除而被删除），不归属于某个Namespace。</p><p>PersistentVolumeClaim（简称PVC）是用户存储的请求，PVC消耗PV的资源，可以请求特定的大小和访问模式，需要指定归属于某个Namespace，在同一个Namespace 的 Pod才可以指定对应的PVC。</p></blockquote><p>PV (持久化卷)，是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置, 它和具体的底层的共享存储技术的实现方式有关，比如Ceph、GlusterFS、NFS等，都是通过插件机制完成与共享存储的对接。</p><p>PVC (持久化卷声明)，PVC 是用户存储的一种声明，PVC 和 Pod 比较类型，Pod 是消耗节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 的内存，而 PVC 可以请求特定的存储空间和访问模式。对于真正存储的用户不需要关心底层的存储实现细节，只需要直接使用PVC即可。</p><p>但是通过PVC请求一定的存储空间也很有可能不足以满足对于存储设备的各种需求，而且不同的应用程序对于存储性能的要求也能也不尽相同，比如读写速度、并发性能等，为了解决这一问题，Kubernetes又为我们引入了一个新的资源对象: StorageClass,通过StorageClass的定义，管理员可以将存储资源定义为某种类型的资源，比如快速存储、慢速存储等，用户根据StorageClass的描述就可以非常直观的知道各种存储资源特性了，这样就可以根据应用的特性去申请合适的存储资源了。</p><h4 id="7-4-1-PV-和-PVC的生命周期"><a href="#7-4-1-PV-和-PVC的生命周期" class="headerlink" title="7.4.1 PV 和 PVC的生命周期"></a>7.4.1 PV 和 PVC的生命周期</h4><blockquote><p>PV 可以看作可用的存储资源，PVC则是对存储资源的需求，PV 和 PVC的互相关系遵循如下图</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3b92l4j31720loh4b.jpg" alt="image-20210311104829767"></p><h4 id="7-4-2-资源供应-Provisioning"><a href="#7-4-2-资源供应-Provisioning" class="headerlink" title="7.4.2 资源供应 (Provisioning)"></a>7.4.2 资源供应 (Provisioning)</h4><blockquote><p>Kubernetes支持两种资源的供应模式：静态模式(Staic)和动态模式(Dynamic)。资源供应的结果就是创建好的PV。</p></blockquote><ul><li>静态模式：集群管理员手工创建许多 PV，在定义 PV 时需要将后端存储的特性进行设置。</li><li>动态模式：集群管理员无须手工创建 PV，而是通过 StorageClass 的设置对后端存储进行描述，标记为某种 “类型(Class)”。此时要求 PVC 对存储的类型进行声明，系统将自动完成 PV 的创建及 PVC 的绑定。<ul><li>PVC 可以声明 Class 为””，说明该 PVC 禁止使用动态模式。</li></ul></li></ul><p>1、静态资源下，通过PV和PVC完成绑定，并供Pod使用的存储管理机制</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3j0i4cj31on0u0e81.jpg" alt="image-20210311105424072"></p><p>2.动态资源下，通过StorageClass和PVC完成资源动态绑定 (系统自动生成PV，并供Pod使用的存储管理机制)</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3mu4rwj31ny0u0e81.jpg" alt="image-20210311105449805"></p><h4 id="7-4-3-资源绑定-Binding"><a href="#7-4-3-资源绑定-Binding" class="headerlink" title="7.4.3 资源绑定 (Binding)"></a>7.4.3 资源绑定 (Binding)</h4><p>在用户定义好PVC后，系统将根据PVC对存储资源的请求 (存储空间和访问模式)在已存在的PV中选择一个满足PVC要求的PV，一旦找到，就将该PV与用户定义的PVC进行绑定，然后用户的应用就可以使用这个PVC了。如果系统中没有满足PVC要求的PV，PVC则会无限期处于Pending状态，直到等到系统管理员创建了一个符合要求的PV。PV一旦绑定在某个PVC上，就被这个PVC独占，不能再与其他PVC进行绑定了。在这种情况下，当PVC申请的存储空间比PV的少时，整个PV的空间都能够为PVC所用，可能会造成资源的浪费。如果资源供应使用的是动态模式，则系统在PVC找到合适的StorageClass后，将会自动创建PV并完成PVC的绑定。</p><h4 id="7-4-4-资源使用-Using"><a href="#7-4-4-资源使用-Using" class="headerlink" title="7.4.4 资源使用 (Using)"></a>7.4.4 资源使用 (Using)</h4><p>Pod 使用volume的定义, 将 PVC 挂载到容器内的某个路径进行使用。volume 的类型为 persistentVoulumeClaim , 在容器应用挂载了一个 PVC 后, 就能被持续独占使用。</p><p>不过, 多个Pod可以挂载同一个PVC, 应用程序需要考虑多个实例共同访问一块存储空间的问题。</p><h4 id="7-4-5-资源释放-Releasing"><a href="#7-4-5-资源释放-Releasing" class="headerlink" title="7.4.5 资源释放 (Releasing)"></a>7.4.5 资源释放 (Releasing)</h4><p>当用户对存储资源使用哪个完毕后，用户可以删除PVC，与该PVC绑定的PV将会被标记为已释放，但还不能立刻与其他PVC进行绑定。通过之前PVC写入的数据可能还留在存储设备上，只有在清除之后该PV才能继续使用。</p><h4 id="7-4-6-资源回收-Reclaiming"><a href="#7-4-6-资源回收-Reclaiming" class="headerlink" title="7.4.6 资源回收 (Reclaiming)"></a>7.4.6 资源回收 (Reclaiming)</h4><p>对于PV，管理员可以设定回收策略(Reclaim Policy)用于设置与之绑定的PVC释放资源之后，对于遗留数据如何处理。只有PV的存储空间完成回收，才能供新的PVC绑定和使用。</p><h4 id="7-4-7-持久化卷声明的保护"><a href="#7-4-7-持久化卷声明的保护" class="headerlink" title="7.4.7 持久化卷声明的保护"></a>7.4.7 持久化卷声明的保护</h4><p>PVC 保护的目的是确保由 pod 正在使用的 PVC 不会从系统中移除，因为如果被移除的话可能会导致数据丢失，当启用 PVC 保护 alpha 功能时，如果用户删除了一个 pod 正在使用的 PVC，则该 PVC 不会被立即删除。PVC 的删除将被推迟，直到 PVC 不再被任何 pod 使用。</p><h4 id="7-4-8-PV-的类型-及-访问模式"><a href="#7-4-8-PV-的类型-及-访问模式" class="headerlink" title="7.4.8 PV 的类型 及 访问模式"></a>7.4.8 PV 的类型 及 访问模式</h4><blockquote><p>PersistentVolume 类型以插件形式实现。以下仅列部分常用类型：</p></blockquote><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li>NFS</li><li>RBD (Ceph Block Device)</li><li>CephFS、Glusterfs</li></ul><blockquote><p>PV 的访问模式 有三种 ReadWriteOnce 、 ReadOnlyMany 、 ReadWriteMany</p></blockquote><p>PersistentVolume 可以以资源提供者支持的任何方式挂载到主机上。如下表所示，供应商具有不同的功能，每个PV 的访问模式都将被设置为该卷支持的特定模式。例如，NFS 可以支持多个读/写客户端，但特定的 NFS PV 可能以只读方式导出到服务器上。每个 PV 都有一套自己的用来描述特定功能的访问模式。</p><ul><li>ReadWriteOnce——该卷可以被单个节点以读/写模式挂载（命令行缩写：RWO）</li><li>ReadOnlyMany——该卷可以被多个节点以只读模式挂载（命令行缩写：ROX）</li><li>ReadWriteMany——该卷可以被多个节点以读/写模式挂载（命令行缩写：RWX）</li></ul><p>一个卷一次只能使用一种访问模式挂载，即使它支持很多访问模式。以下只列举部分常用插件</p><table><thead><tr><th align="left">Volume 插件</th><th align="left">ReadWriteOnce</th><th align="left">ReadOnlyMany</th><th align="left">ReadWriteMany</th></tr></thead><tbody><tr><td align="left">AWSElasticBlockStore</td><td align="left">✓</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">CephFS</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td></tr><tr><td align="left">GCEPersistentDisk</td><td align="left">✓</td><td align="left">✓</td><td align="left">-</td></tr><tr><td align="left">Glusterfs</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td></tr><tr><td align="left">HostPath</td><td align="left">✓</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">NFS</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td></tr><tr><td align="left">RBD</td><td align="left">✓</td><td align="left">✓</td><td align="left">-</td></tr></tbody></table><h4 id="7-4-9-PV-的回收策略-及-阶段状态"><a href="#7-4-9-PV-的回收策略-及-阶段状态" class="headerlink" title="7.4.9 PV 的回收策略 及 阶段状态"></a>7.4.9 PV 的回收策略 及 阶段状态</h4><blockquote><p>回收策略包括</p></blockquote><ul><li>Retain（保留）——手动回收</li><li>Recycle（回收）——基本擦除（ rm -rf /thevolume/* ）【ps 在新版本中该策略已被弃用】</li><li>Delete（删除）——关联的存储资产（例如 AWS EBS、GCE PD、Azure Disk 和 OpenStack Cinder 卷）将被删除。</li></ul><p>当前，只有 NFS 和 HostPath 支持回收策略。AWS EBS、GCE PD、Azure Disk 和 Cinder 卷支持删除策略。</p><blockquote><p>PV 可以处于以下的某种状态</p></blockquote><ul><li>Available（可用）——一块空闲资源还没有被任何声明绑定</li><li>Bound（已绑定）——卷已经被声明绑定</li><li>Released（已释放）——声明被删除，但是资源还未被集群重新声明</li><li>Failed（失败）——该卷的自动回收失败</li></ul><p>命令行会显示绑定到 PV 的 PVC 的名称。</p><h4 id="7-4-10-PV-的实验演练-NFS"><a href="#7-4-10-PV-的实验演练-NFS" class="headerlink" title="7.4.10 PV 的实验演练 - NFS"></a>7.4.10 PV 的实验演练 - NFS</h4><p>1、安装 NFS 服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有的节点都需要安装 nfs-utils 和 rpcbind</span></span><br><span class="line">$ yum install -y nfs-common nfs-utils  rpcbind</span><br><span class="line">$ mkdir -p /nfs01 /nfs02 /nfs03 /nfs04</span><br><span class="line">$ chmod 777 /nfs01 /nfs02 /nfs03 /nfs04</span><br><span class="line">$ chown nfsnobody /nfs01 /nfs02 /nfs03 /nfs04</span><br><span class="line">$ cat /etc/exports</span><br><span class="line">/nfs01 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">/nfs02 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">/nfs03 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">/nfs04 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">$ systemctl start rpcbind nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆k8s任意一台节点上测试下nfs</span></span><br><span class="line">$ showmount -e 192.168.245.44</span><br><span class="line">Export list <span class="keyword">for</span> 192.168.245.44:</span><br><span class="line">/nfs01 *</span><br><span class="line">/nfs02 *</span><br><span class="line">/nfs03 *</span><br><span class="line">/nfs04 *</span><br><span class="line">$ mkdir /<span class="built_in">test</span></span><br><span class="line">$ mount -t nfs 192.168.245.44:/nfs01 /<span class="built_in">test</span>/</span><br><span class="line">$ <span class="built_in">cd</span> /<span class="built_in">test</span>/</span><br><span class="line">$ touch tset.txt</span><br><span class="line">$ <span class="built_in">echo</span> lemon &gt; test.txt</span><br><span class="line">$ cat test.txt </span><br><span class="line">lemon</span><br><span class="line">$ umount /<span class="built_in">test</span></span><br><span class="line">$ rm -rf /<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>2、部署 PV</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat pv.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs01</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs02</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs03</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv4</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">30Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">static</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs04</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br></pre></td></tr></table></figure><p>3、创建服务并使用 PVC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat pvc.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;nfs&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3vm0fdj31cu0p2n3w.jpg" alt="image-20210311162007092"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;web-0&#x27;</span> &gt; /nfs01/index.html</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;web-1&#x27;</span> &gt; /nfs02/index.html</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;web-2&#x27;</span> &gt; /nfs03/index.html</span><br><span class="line"></span><br><span class="line">$ curl 10.244.2.24</span><br><span class="line">web-0</span><br><span class="line">$ curl 10.244.1.26</span><br><span class="line">web-1</span><br><span class="line">$ curl 10.244.1.27</span><br><span class="line">web-2</span><br></pre></td></tr></table></figure><h4 id="7-4-11-关于-StatefulSet-的说明"><a href="#7-4-11-关于-StatefulSet-的说明" class="headerlink" title="7.4.11 关于 StatefulSet 的说明"></a>7.4.11 关于 StatefulSet 的说明</h4><ul><li>匹配 Pod name ( 网络标识 ) 的模式为：$(statefulset名称)-$(序号)，比如上面的示例：web-0，web-1，web-2 。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod </span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">h-pod   1/1     Running   0          23h</span><br><span class="line">web-0   1/1     Running   0          48m</span><br><span class="line">web-1   1/1     Running   0          48m</span><br><span class="line">web-2   1/1     Running   0          48m</span><br></pre></td></tr></table></figure><ul><li>StatefulSet 为每个 Pod 副本创建了一个 DNS 域名，这个域名的格式为： $(podname).(headless servername)，也就意味着服务间是通过Pod域名来通信而非 Pod IP，因为当Pod所在Node发生故障时， Pod 会被飘移到其它 Node 上，Pod IP 会发生变化，但是 Pod 域名不会有变化。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it h-pod -- /bin/sh</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ping -c 3 web-0.nginx</span></span><br><span class="line">PING web-0.nginx (10.244.2.24): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.24: seq=0 ttl=64 time=0.137 ms</span><br><span class="line">64 bytes from 10.244.2.24: seq=1 ttl=64 time=0.056 ms</span><br><span class="line">64 bytes from 10.244.2.24: seq=2 ttl=64 time=0.076 ms</span><br></pre></td></tr></table></figure><ul><li>StatefulSet 使用 Headless 服务来控制 Pod 的域名，这个域名的 FQDN 为：$(servicename).$(namespace).svc.cluster.local，其中，“cluster.local” 指的是集群的域名。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide -n kube-system | grep coredns</span><br><span class="line">coredns-5c98db65d4-4v4kd                            1/1     Running   13         47d   10.244.1.17</span><br><span class="line">coredns-5c98db65d4-9k5xw                            1/1     Running   7          47d   10.244.0.9</span><br><span class="line"></span><br><span class="line">$ dig -t A nginx.default.svc.cluster.local. @10.244.0.9</span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">nginx.default.svc.cluster.local. 11 IN  A       10.244.2.24</span><br><span class="line">nginx.default.svc.cluster.local. 11 IN  A       10.244.1.26</span><br><span class="line">nginx.default.svc.cluster.local. 11 IN  A       10.244.1.27</span><br></pre></td></tr></table></figure><ul><li>根据 volumeClaimTemplates，为每个 Pod 创建一个 pvc，pvc 的命名规则匹配模式：(volumeClaimTemplates.name)-(pod_name)，比如上面的 volumeMounts.name=www， Podname=web-[0-2]，因此创建出来的 PVC 是 www-web-0、www-web-1、www-web-2 。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pvc</span><br><span class="line">NAME        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">www-web-0   Bound    nfspv1   1Gi        RWO            nfs            173m</span><br><span class="line">www-web-1   Bound    nfspv2   10Gi       RWO            nfs            172m</span><br><span class="line">www-web-2   Bound    nfspv3   20Gi       RWO            nfs            172m</span><br></pre></td></tr></table></figure><ul><li>删除 Pod 不会删除其 pvc，手动删除 pvc 将自动释放 pv</li></ul><p><strong>Statefulset的启停顺序</strong></p><ul><li>有序部署：部署StatefulSet时，如果有多个Pod副本，它们会被顺序地创建（从0到N-1）并且，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pv </span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS</span><br><span class="line">nfspv1   1Gi        RWO            Retain           Available           nfs         </span><br><span class="line">nfspv2   10Gi       RWO            Retain           Available           static      </span><br><span class="line">nfspv3   20Gi       RWO            Retain           Available           slow</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pvc.yaml</span><br><span class="line">service/nginx created</span><br><span class="line">statefulset.apps/web created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里可以看到第二个 pod 一直处于 pending 状态，导致第三个 pod 都没有创建出来</span></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">web-0   1/1     Running   0          19s</span><br><span class="line">web-1   0/1     Pending   0          16s</span><br></pre></td></tr></table></figure><ul><li>有序删除：当Pod被删除时，它们被终止的顺序是从N-1到0。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide -n default -w</span><br><span class="line">$ kubectl delete statefulset web -n default</span><br></pre></td></tr></table></figure><ul><li>有序扩展：当对 Pod 执行扩展操作时，与部署一样，它前面的Pod必须都处于Running和Ready状态。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale statefulset/web --replicas=4</span><br></pre></td></tr></table></figure><p><strong>StatefulSet使用场景</strong></p><ul><li>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现。</li><li>稳定的网络标识符，即 Pod 重新调度后其 PodName 和 HostName 不变。</li><li>有序部署，有序扩展，基于 init containers 来实现。</li><li>有序收缩。</li></ul><h4 id="7-4-12-PV卷-的资源释放流程"><a href="#7-4-12-PV卷-的资源释放流程" class="headerlink" title="7.4.12 PV卷 的资源释放流程"></a>7.4.12 PV卷 的资源释放流程</h4><blockquote><p>生产环境下要再三确认后才可以进行如下操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># statefulset &gt; svc &gt; pvc &gt; 使用 edit 删除 pv 卷上的 pvc 记录</span></span><br><span class="line">$ kubectl delete -f pvc.yaml</span><br><span class="line">$ kubectl delete pvc www-web-0 www-web-1 www-web-2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然已经删除了 pvc，但实际上还并没有释放 pv，因为在pv的记录信息里面还是有使用者信息的，需要手工删除后才会释放</span></span><br><span class="line">$ kubectl get pv</span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS</span><br><span class="line">nfspv1   1Gi        RWO            Retain           Released    default/www-web-0   nfs</span><br><span class="line">nfspv2   10Gi       RWO            Retain           Released    default/www-web-1   nfs</span><br><span class="line">nfspv3   20Gi       RWO            Retain           Released    default/www-web-2   nfs</span><br><span class="line">nfspv4   30Gi       RWX            Retain           Available                       static</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动删除这一段，pv 就会释放资源了, 其他的 pod 也就可以继续使用这些 pv 卷了</span></span><br><span class="line">$ kubectl get pv nfspv1 -o yaml</span><br><span class="line">  claimRef:</span><br><span class="line">    apiVersion: v1</span><br><span class="line">    kind: PersistentVolumeClaim</span><br><span class="line">    name: www-web-0</span><br><span class="line">    namespace: default</span><br><span class="line">    resourceVersion: <span class="string">&quot;69260&quot;</span></span><br><span class="line">    uid: e175a86b-aa2c-4900-a7c4-faa1865315ab</span><br><span class="line"></span><br><span class="line">$ kubectl get pv</span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS</span><br><span class="line">nfspv1   1Gi        RWO            Retain           Available           nfs         </span><br><span class="line">nfspv2   10Gi       RWO            Retain           Available           nfs         </span><br><span class="line">nfspv3   20Gi       RWO            Retain           Available           nfs         </span><br><span class="line">nfspv4   30Gi       RWX            Retain           Available           static     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果这些卷及数据都不想要了的话，直接在对应的nfs机器上删除挂在点上的数据，并在master上删除pv卷 kubectl delete pv xx</span></span><br></pre></td></tr></table></figure><h1 id="五、K8S集群调度"><a href="#五、K8S集群调度" class="headerlink" title="五、K8S集群调度"></a>五、K8S集群调度</h1><blockquote><p>Scheduler 是 kubernetes 的调度器，主要任务是把定义的 pod 分配到集群的节点上。有四点需要考虑：</p></blockquote><ul><li>公平：如何保证每个节点都能被分配资源</li><li>资源高效利用：集群所有资源最大化被使用</li><li>灵活：允许用户根据自己的需求控制调度的逻辑</li><li>效率：调度的性能要好，能够尽快地对大批量的 pod 完成调度工作</li></ul><p>Sheduler 是作为单独的程序运行的，启动之后会一直监听 API Server，获取PodSpec.NodeName为空的 pod，对每个 pod 都会创建一个 binding，表明该 pod 应该放到哪个节点上。</p><h2 id="1、调度说明"><a href="#1、调度说明" class="headerlink" title="1、调度说明"></a>1、调度说明</h2><h3 id="调度过程"><a href="#调度过程" class="headerlink" title="调度过程"></a>调度过程</h3><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为<code>predicate</code>；然后对通过的节点按照优先级排序，这个是<code>priority</code>；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。</p><p><strong>Predicate 有一系列的算法可以使用：</strong></p><ul><li>PodFitsResources：节点上剩余的资源是否大于 pod 请求的资源</li><li>PodFitsHost：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</li><li>PodFitsHostPorts：节点上已经使用的 port 是否和 pod 申请的 port 冲突</li><li>PodSelectorMatches：过滤掉和 pod 指定的 label 不匹配的节点</li><li>NoDiskConflict：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读</li></ul><p>如果在 predicate 过程中没有合适的节点，pod 会一直在pending状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：按照优先级大小对节点排序。</p><p>优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：</p><ul><li>LeastRequestedPriority：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点</li><li>BalancedResourceAllocation：节点上 CPU 和 Memory 使用率越接近, 权重越高。这个要和上面的一起使用, 不应该单独使用</li><li>ImageLocalityPriority：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高</li></ul><p><strong>通过算法对所有的优先级项目和权重进行计算，得出最终的结果。</strong></p><h3 id="自定义调度器"><a href="#自定义调度器" class="headerlink" title="自定义调度器"></a>自定义调度器</h3><p>除了 kubernetes 自带的调度器，你也可以编写自己的调度器。通过spec:schedulername参数指定调度器的名字，可以为 pod 选择某个调度器进行调度。比如下面的 pod 选择my-scheduler进行调度，而不是默认的default-scheduler：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">annotation-second-scheduler</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">multischeduler-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulername:</span> <span class="string">my-scheduler</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-with-second-annotation-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br></pre></td></tr></table></figure><h2 id="2、调度亲和性"><a href="#2、调度亲和性" class="headerlink" title="2、调度亲和性"></a>2、调度亲和性</h2><blockquote><p>一般情况下 POD 是通过集群自动调度选择某个节点的，默认情况下调度器考虑的是资源足够，并且负载尽量平均，但是有的时候需要能够更加细粒度的去控制 POD 的调度，比如内部的一些服务 gitlab 之类的也是跑在<code>Kubernetes</code>集群上的，就不希望对外的一些服务和内部的服务跑在同一个节点上了，害怕内部服务对外部的服务产生影响；有的时候两个服务直接交流比较频繁，又希望能够将这两个服务的 POD 调度到同样的节点上。</p><p>这就需要用到 Kubernetes 里面的一个概念：亲和性，亲和性主要分为两类：<code>nodeAffinity</code>和<code>podAffinity</code>。</p></blockquote><h3 id="节点亲和性（nodeAffinity）"><a href="#节点亲和性（nodeAffinity）" class="headerlink" title="节点亲和性（nodeAffinity）"></a>节点亲和性（nodeAffinity）</h3><p><strong>键值运算关系</strong></p><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在</li><li>DoesNotExist：某个 label 不存在</li></ul><p><code>pod.spec.nodeAffinity</code></p><ul><li>requiredDuringSchedulingIgnoredDuringExecution：硬策略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeaffinity01</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">k8s-node-192.168.2.55</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes --show-labels   <span class="comment"># 查看节点的LABELS</span></span><br><span class="line"></span><br><span class="line">$ kubectl get pod -owide   <span class="comment"># 由于没有k8s-node-192.168.2.55值的key，而且还是硬策略，所以pod会一直pending中。</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nodeaffinity01   0/1     Pending   0          5s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li>preferredDuringSchedulingIgnoredDuringExecution：软策略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeaffinity02</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">k8s-node-192.168.2.55</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide     <span class="comment"># 软策略</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE     IP           NODE</span><br><span class="line">nodeaffinity01   0/1     Pending   0          3m46s   &lt;none&gt;       &lt;none&gt;</span><br><span class="line">nodeaffinity02   1/1     Running   0          5s      10.244.4.8   k8s-node-192.168.2.33</span><br></pre></td></tr></table></figure><p>==Tips：硬策略和软策略是可以合并一起使用的，但是必须要先满足硬策略，才能在满足软策略。==</p><h3 id="Pod-亲和性（podAffinity）"><a href="#Pod-亲和性（podAffinity）" class="headerlink" title="Pod 亲和性（podAffinity）"></a>Pod 亲和性（podAffinity）</h3><p><code>pod.spec.affinity.podAffinity/podAntiAffinity</code></p><ul><li>preferredDuringSchedulingIgnoredDuringExecution：软策略</li><li>requiredDuringSchedulingIgnoredDuringExecution：硬策</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lemon</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">k8s-node-192.168.2.33</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lemon</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lemon</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">lemon</span></span><br><span class="line">        <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">    <span class="attr">podAntiAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">podAffinityTerm:</span></span><br><span class="line">          <span class="attr">labelSelector:</span></span><br><span class="line">            <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">tools</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">armin</span></span><br><span class="line">          <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE   IP            NODE</span><br><span class="line">lemon   1/1     Running   0          4s    10.244.4.12   k8s-node-192.168.2.33</span><br><span class="line"><span class="built_in">test</span>    1/1     Running   0          4s    10.244.4.11   k8s-node-192.168.2.33</span><br></pre></td></tr></table></figure><p><strong>亲和性/反亲和性调度策略比较如下：</strong></p><table><thead><tr><th>调度策略</th><th>匹配标签</th><th>操作符</th><th>拓扑域支持</th><th>调度目标</th></tr></thead><tbody><tr><td>nodeAffinity</td><td>主机</td><td>In, NotIn, Exists,DoesNotExist, Gt, Lt</td><td>否</td><td>指定主机</td></tr><tr><td>podAffinity</td><td>POD</td><td>In, NotIn, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD同一拓扑域</td></tr><tr><td>podAnitAffinity</td><td>POD</td><td>In, NotIn, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD不在同一拓扑域</td></tr></tbody></table><p>==Tips：拓扑域 就是节点的意思==</p><h2 id="3、调度污点"><a href="#3、调度污点" class="headerlink" title="3、调度污点"></a>3、调度污点</h2><blockquote><p>节点亲和性，是pod的一种属性（偏好或硬性要求），它使pod被吸引到一类特定的节点。Taint 则相反，它使节点能够排斥一类特定的 pod。</p><p><strong>Taint 和 Toleration</strong></p><p>Taint 和 toleration 相互配合，可以用来避免 pod 被分配到不合适的节点上。每个节点上都可以应用一个或多个taint ，这表示对于那些不能容忍这些 taint 的 pod，是不会被该节点接受的。如果将 toleration 应用于 pod上，则表示这些 pod 可以（但不要求）被调度到具有匹配 taint 的节点上</p></blockquote><h3 id="污点-Taint"><a href="#污点-Taint" class="headerlink" title="污点(Taint)"></a>污点(Taint)</h3><p><strong>1、污点 ( Taint ) 的组成</strong></p><p>使用<code>kubectl taint</code>命令可以给某个 Node 节点设置污点，Node 被设置上污点之后就和 Pod 之间存在了一种相斥的关系，可以让 Node 拒绝 Pod 的调度执行，甚至将 Node 已经存在的 Pod 驱逐出去。</p><p>每个污点的组成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">key=value:effect</span></span><br></pre></td></tr></table></figure><p>每个污点有一个 key 和 value 作为污点的标签, 其中 value 可以为空, effect 描述污点的作用。当前 tainteffect 支持如下三个选项：</p><ul><li><code>NoSchedule</code>：表示 k8s 将不会将 Pod 调度到具有该污点的 Node 上</li><li><code>PreferNoSchedule</code>：表示 k8s 将尽量避免将 Pod 调度到具有该污点的 Node 上</li><li><code>NoExecute</code>：表示 k8s 将不会将 Pod 调度到具有该污点的 Node 上，同时会将 Node 上已经存在的 Pod 驱逐出去</li></ul><p><strong>2、污点的设置、查看和去除</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置污点</span></span><br><span class="line">$ kubectl taint nodes node1 key1=value1:NoExecute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点说明中，查找 Taints 字段</span></span><br><span class="line">$ kubectl describe node node-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除污点</span></span><br><span class="line">$ kubectl taint nodes node1 key1:NoExecute-</span><br></pre></td></tr></table></figure><h3 id="容忍-Tolerations"><a href="#容忍-Tolerations" class="headerlink" title="容忍(Tolerations)"></a>容忍(Tolerations)</h3><p>设置了污点的 Node 将根据 taint 的 effect：NoSchedule、PreferNoSchedule、NoExecute 和 Pod 之间产生互斥的关系，Pod 将在一定程度上不会被调度到 Node 上。但我们可以在 Pod 上设置容忍 ( Toleration ) ，意思是设置了容忍的 Pod 将可以容忍污点的存在，可以被调度到存在污点的 Node 上。</p><p><strong>pod.spec.tolerations</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key1&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;value1&quot;</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">&quot;NoExecute&quot;</span></span><br><span class="line">  <span class="attr">tolerationSeconds:</span> <span class="number">3600</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key1&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;value1&quot;</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key2&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">&quot;PreferNoSchedule&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>其中 key, vaule, effect 要与 Node 上设置的 taint 保持一致</p></li><li><p>operator 的值为 Exists 将会忽略 value 值</p></li><li><p>tolerationSeconds 用于描述当 Pod 需要被驱逐时可以在 Node 上继续保留运行的时间，会一直循环</p></li></ul><p><strong>1、不指定 key 值时，表示容忍所有的污点 key</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2、当不指定 effect 值时，表示容忍所有的污点作用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3、有多个 Master 存在时，防止资源浪费，可以如下设置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes Node-Name node-role.kubernetes.io/master=:PreferNoSchedule</span><br></pre></td></tr></table></figure><h2 id="4、固定节点"><a href="#4、固定节点" class="headerlink" title="4、固定节点"></a>4、固定节点</h2><h3 id="指定调度节点"><a href="#指定调度节点" class="headerlink" title="指定调度节点"></a>指定调度节点</h3><p><strong>1、Pod.spec.nodeName 将 Pod 直接调度到指定的 Node 节点上，会跳过 Scheduler 的调度策略，该匹配规则是强制匹配。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web01</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">k8s-node-192.168.2.22</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web01</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>2、Pod.spec.nodeSelector：通过 kubernetes 的 label-selector 机制选择节点，由调度器调度策略匹配 label，而后调度 Pod 到目标节点，该匹配规则属于强制约束。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web02</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web02</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label node k8s-node-192.168.2.33 k1=v1</span><br></pre></td></tr></table></figure><h1 id="六、K8S-集群安全"><a href="#六、K8S-集群安全" class="headerlink" title="六、K8S 集群安全"></a>六、K8S 集群安全</h1><blockquote><p>机制说明：Kubernetes 作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。API Server 是集群内部各个组件通信的中介，也是外部控制的入口。所以 Kubernetes 的安全机制基本就是围绕保护 API Server 来设计的。Kubernetes 使用了认证（Authentication）、鉴权（Authorization）、准入控制（AdmissionControl）三步来保证API Server的安全。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v47gg29j31mc0qeqhz.jpg" alt="image-20210406174845095"></p><h2 id="1、集群认证"><a href="#1、集群认证" class="headerlink" title="1、集群认证"></a>1、集群认证</h2><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><ul><li>HTTP Token 认证：通过一个 Token 来识别合法用户<ul><li>HTTP Token 的认证是用一个很长的特殊编码方式的并且难以被模仿的字符串 - Token 来表达客户的一种方式。Token 是一个很长的很复杂的字符串，每一个 Token 对应一个用户名存储在 API Server 能访问的文件中。当客户端发起 API 调用请求时，需要在 HTTP Header 里放入 Token。</li></ul></li><li>HTTP Base 认证：通过用户名+密码的方式认证<ul><li>用户名+：+密码用 BASE64 算法进行编码后的字符串放在 HTTP Request 中的 HeatherAuthorization 域里发送给服务端，服务端收到后进行编码，获取用户名及密码</li></ul></li><li>最严格的 HTTPS 证书认证：基于 CA 根证书签名的客户端身份认证方式</li></ul><h3 id="HTTPS-证书认证"><a href="#HTTPS-证书认证" class="headerlink" title="HTTPS 证书认证"></a>HTTPS 证书认证</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v4bw64tj31720s0jw1.jpg" alt="image-20210406175149666"></p><h3 id="需要认证的节点"><a href="#需要认证的节点" class="headerlink" title="需要认证的节点"></a>需要认证的节点</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v4fnrinj311o0okn8s.jpg" alt="image-20210406175424225"></p><p><strong>两种类型</strong></p><ul><li>两种类型Kubenetes 组件对 API Server 的访问：kubectl、Controller Manager、Scheduler、kubelet、kube-proxy</li><li>Kubernetes 管理的 Pod 对容器的访问：Pod（dashborad 也是以 Pod 形式运行）</li></ul><p><strong>安全性说明</strong></p><ul><li>Controller Manager、Scheduler 与 API Server 在同一台机器，所以直接使用 API Server 的非安全端口访问，<code>--insecure-bind-address=127.0.0.1</code></li><li>kubectl、kubelet、kube-proxy 访问 API Server 就都需要证书进行 HTTPS 双向认证</li></ul><p><strong>证书颁发</strong></p><ul><li>手动签发：通过 k8s 集群的跟 ca 进行签发 HTTPS 证书</li><li>自动签发：kubelet 首次访问 API Server 时，使用 token 做认证，通过后，Controller Manager 会为kubelet 生成一个证书，以后的访问都是用证书做认证了</li></ul><h3 id="kubeconfig"><a href="#kubeconfig" class="headerlink" title="kubeconfig"></a>kubeconfig</h3><p>kubeconfig 文件包含集群参数（CA证书、API Server地址），客户端参数（上面生成的证书和私钥），集群context 信息（集群名称、用户名）。Kubenetes 组件通过启动时指定不同的 kubeconfig 文件可以切换到不同的集群。</p><h3 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h3><p>Pod中的容器访问API Server。因为Pod的创建、销毁是动态的，所以要为它手动生成证书就不可行了。Kubenetes使用了Service Account解决Pod 访问API Server的认证问题。</p><h3 id="Secret-与-SA-的关系"><a href="#Secret-与-SA-的关系" class="headerlink" title="Secret 与 SA 的关系"></a>Secret 与 SA 的关系</h3><p>Kubernetes 设计了一种资源对象叫做 Secret，分为两类，一种是用于 ServiceAccount 的 service-account-token，另一种是用于保存用户自定义保密信息的 Opaque。ServiceAccount 中用到包含三个部分：Token、ca.crt、namespace。</p><ul><li>oken是使用 API Server 私钥签名的 JWT。用于访问API Server时，Server端认证</li><li>ca.crt，根证书。用于Client端验证API Server发送的证书</li><li>namespace, 标识这个service-account-token的作用域名空间</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --all-namespaces</span><br><span class="line">kubectl describe secret default-token-5gm9r --namespace=kube-system</span><br></pre></td></tr></table></figure><p>默认情况下，每个 namespace 都会有一个 ServiceAccount，如果 Pod 在创建时没有指定 ServiceAccount，就会使用 Pod 所属的 namespace 的 ServiceAccount。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v4kfopij31jw0cgq6z.jpg" alt="image-20210406175833477"></p><h2 id="2、集群鉴权"><a href="#2、集群鉴权" class="headerlink" title="2、集群鉴权"></a>2、集群鉴权</h2><h2 id="3、准入控制"><a href="#3、准入控制" class="headerlink" title="3、准入控制"></a>3、准入控制</h2><p>准入控制是API Server的插件集合，通过添加不同的插件，实现额外的准入控制规则。甚至于API Server的一些主要的功能都需要通过 Admission Controllers 实现，比如 ServiceAccount。</p><p>官方文档上有一份针对不同版本的准入控制器推荐列表，其中最新的 1.14 的推荐列表是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota</span><br></pre></td></tr></table></figure><p>列举几个插件的功能：</p><ul><li>NamespaceLifecycle：防止在不存在的 namespace 上创建对象，防止删除系统预置 namespace，删除namespace 时，连带删除它的所有资源对象。</li><li>LimitRanger：确保请求的资源不会超过资源所在 Namespace 的 LimitRange 的限制。</li><li>ServiceAccount：实现了自动化添加 ServiceAccount。</li><li>ResourceQuota：确保请求的资源不会超过资源的 ResourceQuota 限制。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2021/06/06/Nginx/"/>
      <url>/2021/06/06/Nginx/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Web网站概念"><a href="#Web网站概念" class="headerlink" title="Web网站概念"></a>Web网站概念</h1><h2 id="1-Web网站常识"><a href="#1-Web网站常识" class="headerlink" title="1. Web网站常识"></a>1. Web网站常识</h2><ol><li><p>域名：域名是一个IP地址的“面具” ，目的是便于记忆和访问一个或一组服务器的地址（网站，电子邮件，FTP等）。</p></li><li><p>域名解析：本地HOSTS解析、DNS服务器解析</p></li><li><p>网站的基本概念：网站、网页、主页；HTTP、URL、HTML、超链接</p></li><li><p>web网站：有web1.0（以编辑为特征）和web2.0（侧重用户交互）</p></li><li><p>动态页面与静态页面的差别, 静态页面内容几乎是固定的, 而动态页面的内容会因用户、浏览器、时间等而发生变化</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7shti58wj30s60gyjxt.jpg" alt="image-20200625141505969"></p><h2 id="2-URL的组成部分"><a href="#2-URL的组成部分" class="headerlink" title="2. URL的组成部分"></a>2. URL的组成部分</h2><h3 id="2-1-协议-Protocol"><a href="#2-1-协议-Protocol" class="headerlink" title="2.1 协议(Protocol)"></a>2.1 协议(Protocol)</h3><p><em><strong>http://</strong></em> 为协议名, 标明了请求需要使用的协议, 通常使用的就是HTTP协议 或 安全协议 HTTPS。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sib6vh9j30xc05adgj.jpg" alt="image-20200625143705588"></p><h3 id="2-2-域名-Domain"><a href="#2-2-域名-Domain" class="headerlink" title="2.2 域名(Domain)"></a>2.2 域名(Domain)</h3><p><em><strong><a href="http://www.example.com/">www.example.com</a></strong></em> 为域名, 标明了需要请求的服务器的地址。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sifs8jij30xc05a0tw.jpg" alt="image-20200625143903439"></p><h3 id="2-3-端口-Port"><a href="#2-3-端口-Port" class="headerlink" title="2.3 端口(Port)"></a>2.3 端口(Port)</h3><p><em><strong>:80</strong></em> 是端口号, 标明了获取服务器资源的入口, 端口号用于区分服务的端口, 一台拥有公网IP的服务器可以提供许多服务, 比如Web服务、FTP服务、SMTP服务等;  服务器的资源是通过“IP地址+端口号”来区分不同的服务,  如果把服务器比作房子,  端口号就可以看做是通向不同服务的门。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sijfogoj30xc05amxs.jpg" alt="image-20200625143922623"></p><h3 id="2-4-URL文件资源"><a href="#2-4-URL文件资源" class="headerlink" title="2.4 URL文件资源"></a>2.4 URL文件资源</h3><p><em><strong>/path/to/myfile.html</strong></em> 表示服务器上资源的路径, 过去这样的路径标记的是服务器上文件的物理路径, 但是现在路径表示的只是一个抽象地址, 并不指代任何物理地址。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7siu0d8dj30xc05amy8.jpg" alt="image-20200625144036536"></p><h3 id="2-5-参数-query"><a href="#2-5-参数-query" class="headerlink" title="2.5 参数(query)"></a>2.5 参数(query)</h3><p><em><strong>?key1=value1&amp;key2=value2</strong></em> 是请求里提供的额外参数, 这些参数是以键值对的形式,通过<code>&amp;</code>符号分隔开来,服务器可以通过这些参数进行相应的个性化处理。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sj2bd5mj30xc05amyb.jpg" alt="image-20200625144053593"></p><h3 id="2-6-片段-fragment"><a href="#2-6-片段-fragment" class="headerlink" title="2.6 片段(fragment)"></a>2.6 片段(fragment)</h3><p><em><strong>#SomewhereInTheDocument</strong></em> 是对资源的部分补充, <code>fragment</code>可以理解为资源内部的<code>书签</code>, 用来想服务器指明展示的内容所在的<code>书签</code>的点; 例如对于<code>HTML</code>文件来说, 浏览器会滚动到特定的或者上次浏览过的位置.对于音频或者视频资源来说,浏览器又会跳转到对应的时间节点。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sj8btgnj30xc05adgq.jpg" alt="image-20200625144100710"></p><h1 id="HTTP协议概念"><a href="#HTTP协议概念" class="headerlink" title="HTTP协议概念"></a>HTTP协议概念</h1><blockquote><p>HTTP是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP默认使用80端口，这个端口指的是服务端的端口，而客户端使用的端口是动态分配的。当我们没有指定端口访问时，浏览器会默认帮我们添加80端口。我们也可以自己指定访问端口如：<a href="http://www.ip.com:80。">http://www.ip.com:80。</a> </p><p>需要注意的是，现在大多数访问都使用了HTTPS协议，而HTTPS的默认端口为443，如果使用80端口访问HTTPS协议的服务器可能会被拒绝。</p></blockquote><h2 id="1-HTTP协议简介"><a href="#1-HTTP协议简介" class="headerlink" title="1. HTTP协议简介"></a>1. HTTP协议简介</h2><ol><li><p>HTTP协议的核心功能是传输Web服务器上的HTML 页面及其他文件；可以理解HTTP协议就是做业务的。</p></li><li><p>HTTP协议版本 http0.9（已过时）、==http1.0和http1.1（目前广泛使用）==、http2.0（未普及）</p></li><li><p>HTTP协议有多种获得 Web 资源的方法，最为常见的就是GET和POST及方法</p></li><li><p>HTTP请求会有很多的状态码，常看到的有：200、301、404、500等等</p></li><li><p>HTTP报文格式，一个完整的http访问包含请求（request）和响应（response）</p></li></ol><h2 id="2-HTTP请求的方法"><a href="#2-HTTP请求的方法" class="headerlink" title="2. HTTP请求的方法"></a>2. HTTP请求的方法</h2><blockquote><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h2 id="3-HTTP响应头信息"><a href="#3-HTTP响应头信息" class="headerlink" title="3. HTTP响应头信息"></a>3. HTTP响应头信息</h2><table><thead><tr><th>应答头</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE  5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td>Content-Length</td><td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入  ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a>  注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh”  CONTENT=”5;URL=<a href="http://host/path&quot;%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>   注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。   注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。  注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h2 id="4-HTTP状态代码"><a href="#4-HTTP状态代码" class="headerlink" title="4. HTTP状态代码"></a>4. HTTP状态代码</h2><blockquote><p>HTTP状态码的英文为HTTP Status Code。</p><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：1xx   2xx   3xx   4xx   5xx 。</p><p>当用户访问一个网页时，浏览器会向网页所在服务器发出请求，当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p></blockquote><p><strong>下面是最常见的HTTP状态码：</strong></p><blockquote><p>200        服务器成功返回内容</p><p>301/2     永久/临时重定向</p><p>304        未修改 Not Modified</p><p>307        重定向中保留原始数据</p><p>404        请求的页面不存在</p><p>413        请求实体太大，服务器拒绝处理当前请求</p><p>500        服务器内部错误</p><p>502        代理请求后端失败</p><p>503        服务器暂时不可用</p><p>504        请求成功，但是连接超时</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sjfsm2tj310c0fsk1o.jpg" alt="image-20200625162413480"></p><p><strong><a href="https://www.runoob.com/http/http-status-codes.html">其他的一些HTTP状态码</a></strong></p><h2 id="5-HTTP-content-type"><a href="#5-HTTP-content-type" class="headerlink" title="5. HTTP  content-type"></a>5. HTTP  content-type</h2><p><strong>简介</strong></p><blockquote><p>Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些 PHP 网页点击的结果却是下载一个文件或一张图片的原因。</p><p>Content-Type 标头告诉客户端实际返回的内容的内容类型。</p></blockquote><p><strong>语法</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=something</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sjj2cpcj316w0cltaq.jpg" alt="image-20200625160438655"></p><p><strong>常见的媒体格式类型如下</strong></p><ul><li>text/html ： HTML格式</li><li>text/plain ：纯文本格式</li><li>text/xml ： XML格式</li><li>image/gif ：gif图片格式</li><li>image/jpeg ：jpg图片格式</li><li>image/png：png图片格式</li></ul><p><strong>以application开头的媒体格式类型</strong></p><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml： XML数据格式</li><li>application/atom+xml ：Atom XML聚合格式</li><li>application/json： JSON数据格式</li><li>application/pdf：pdf格式</li><li>application/msword ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li></ul><p><strong>常见的媒体格式是上传文件之时使用的</strong></p><ul><li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><p><strong><a href="https://www.runoob.com/http/http-content-type.html">更加详细的HTTP  content-type 对照表</a></strong></p><h1 id="Nginx原理介绍"><a href="#Nginx原理介绍" class="headerlink" title="Nginx原理介绍"></a>Nginx原理介绍</h1><h2 id="1-1-Nginx-概述"><a href="#1-1-Nginx-概述" class="headerlink" title="1.1 Nginx 概述"></a>1.1 Nginx 概述</h2><blockquote><p>Nginx是⼀一个开源且⾼高性能、可靠的HTTP中间件、代理理服务。</p><p>开源: 直接获取源代码</p><p>⾼高性能: 支持海海量量并发</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sjrtucsj61c90su4qt02.jpg" alt="image-2020062420084954569"></p><h2 id="1-2-Nginx的优缺点"><a href="#1-2-Nginx的优缺点" class="headerlink" title="1.2 Nginx的优缺点"></a>1.2 Nginx的优缺点</h2><ul><li><p>==<strong>优点</strong>==</p><ul><li><strong>高并发量</strong><ul><li>根据官方给出的数据，能够支持高达 50000 个<a href="https://baike.sogou.com/v193462.htm">并发连接数</a>的响应。</li></ul></li><li><strong>内存消耗少</strong><ul><li>处理静态文件，同样起web 服务，比apache 占用更少的内存及资源，所以它是轻量级的。</li></ul></li><li><strong>简单稳定</strong><ul><li>配置简单，基本在一个conf文件中配置，性能比较稳定，可以7*24小时长时间不间断运行。</li></ul></li><li><strong>支持Rwrite重写规则</strong><ul><li>能够根据域名、URL的不同， 将HTTP请求分发到不同的后端服务器群组。</li></ul></li><li><strong>功能多，低成本</strong><ul><li>Nginx可以做高并发的负载均衡，且Nginx是开源免费的，如果使用F5等硬件来做负载均衡，硬件成本比较高。</li></ul></li></ul></li><li><p>==<strong>缺点</strong>==</p><ul><li><strong>动态处理差</strong><ul><li>Nginx处理静态文件好，耗费内存少，但是处理动态页面则很鸡肋</li></ul></li><li><strong>rewrite弱</strong><ul><li>虽然Nginx支持rewrite功能，但是相比于Apache来说，Apache比nginx 的rewrite 要强大。</li></ul></li></ul></li></ul><h2 id="1-3-Nginx应用场景"><a href="#1-3-Nginx应用场景" class="headerlink" title="1.3 Nginx应用场景"></a>1.3 Nginx应用场景</h2><blockquote><p>静态处理</p><p>反向代理</p><p>负载均衡</p><p>资源缓存</p><p>安全防护</p><p>访问限制</p><p>访问认证</p></blockquote><h2 id="1-4-Nginx的进程模型"><a href="#1-4-Nginx的进程模型" class="headerlink" title="1.4 Nginx的进程模型"></a>1.4 Nginx的进程模型</h2><blockquote><p>==<strong>Nginx的启动方式有两种：</strong>==</p></blockquote><ul><li><p><strong>单进程启动：</strong></p><ul><li>此时系统中只有一个进程，这个进程既是master进程，也是worker进程。</li></ul></li><li><p><strong>多进程启动：</strong></p><ul><li>此时系统中有且仅有一个master进程，有多个worker进程，master进程主要是用来管理worker进程的。</li></ul></li></ul><blockquote><p>==<strong>Nginx有两种进程：</strong>==</p></blockquote><p><strong>Master主进程：</strong></p><ol><li>接收客户端的请求，然后在将客户端的请求交给他下面的子进程，子进程返回处理结果后，再将处理结果返回给客户端</li><li>监控并管理子进程的运行状态，当子进程出现异常情况下退出后，自动生成新的子进程</li></ol><p><strong>Worker子进程：</strong></p><ol><li>将主进程的请求交给内核去处理，然后在继续接收主进程发来的请求，当内核处理完后，返回给子进程处理结果，然后子进程再将结果返回给主进程。</li><li>Nginx子进程的数量一般我们会设置与当前服务器的CPU核心数一致，可以使用<code>auto</code>指令让Nginx跟进系统自动设置worker</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sm56u9ej30rb0koju4.jpg" alt="image-20200621181846932"></p><h2 id="1-5-Nginx的组成逻辑图"><a href="#1-5-Nginx的组成逻辑图" class="headerlink" title="1.5 Nginx的组成逻辑图"></a>1.5 Nginx的组成逻辑图</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7smqjjvnj31540lfnbl.jpg" alt="image-20200624200849579"></p><h2 id="1-6-Nginx的模块是什么"><a href="#1-6-Nginx的模块是什么" class="headerlink" title="1.6 Nginx的模块是什么"></a>1.6 Nginx的模块是什么</h2><blockquote><p>Nginx之所以有如此多的特性和功能，就是因为有大量的第三方开发者为其开发第三方模块</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7smwit7rj31890emwjm.jpg" alt="image-20200624213430515"></p><p>==上图中都可以在<a href="http://nginx.org/en/docs/">nginx官方文档</a>中查询，这里就不再叙述了~~==</p><h1 id="Nginx应用部署"><a href="#Nginx应用部署" class="headerlink" title="Nginx应用部署"></a>Nginx应用部署</h1><h2 id="1-1-进入-nginx-官网，下载"><a href="#1-1-进入-nginx-官网，下载" class="headerlink" title="1.1 进入 nginx 官网，下载"></a>1.1 进入 nginx 官网，下载</h2><blockquote><p><strong>Nginx官方网站：<a href="http://nginx.org/">http://nginx.org/</a></strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sn678zxj311e0lsdip.jpg" alt="image-20200621205106691"></p><h2 id="1-2-安装Nginx依赖"><a href="#1-2-安装Nginx依赖" class="headerlink" title="1.2 安装Nginx依赖"></a>1.2 安装Nginx依赖</h2><blockquote><p><strong>安装 openssl、zlib</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc gcc-c++ libtool openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure><h2 id="1-3-安装Nginx并修改属主属祖"><a href="#1-3-安装Nginx并修改属主属祖" class="headerlink" title="1.3 安装Nginx并修改属主属祖"></a>1.3 安装Nginx并修改属主属祖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar xf nginx-1.12.2.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/nginx-1.12.2/</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置、编译、安装</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module &amp;&amp; make &amp;&amp; make install &amp;&amp; <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改属主属组</span></span><br><span class="line">useradd -s /sbin/nologin -M nginx</span><br><span class="line">chown -R nginx:nginx /usr/<span class="built_in">local</span>/nginx/</span><br></pre></td></tr></table></figure><blockquote><p><strong>编译参数解释：</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这三个模块是用来做四层负载转发的</span></span><br><span class="line">--with-stream</span><br><span class="line">--with-stream_ssl_module</span><br><span class="line">--with-stream_realip_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定安装位置</span></span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定worker进程运行的用户和组</span></span><br><span class="line">--user=nginx --group=nginx      </span><br><span class="line"></span><br><span class="line"><span class="comment">#开启状态监听模块 </span></span><br><span class="line">--with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#指向配置文件存放位置</span></span><br><span class="line">--conf-path=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#指向错误日志存放位置</span></span><br><span class="line">--error-log-path=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#指向pid文件存放位置 </span></span><br><span class="line">--pid-path=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用rtsig模块支持（实时信号）</span></span><br><span class="line">--with-rtsig_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时缓存⽂文件</span></span><br><span class="line">--http-client-body-temp-path=/xxx/xxx/client_tem</span><br><span class="line">--http-proxy-temp-path=/xxx/xxx/proxy_temp</span><br><span class="line">--http-fastcgi-temp-path=/xxx/xxx/fastcgi_temp</span><br><span class="line">--http-uwsgi-temp-path=/xxx/xxx/uwsgi_temp</span><br><span class="line">--http-scgi-temp-path=/xxx/xxx/scgi_temp</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加模块</span></span><br><span class="line">--add-module=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用select模块支持（一种轮询模式,不推荐在高载环境下使用）禁用：--without-select_module</span></span><br><span class="line">--with-select_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_ssl_module支持(使支持https请求，需已安装openssl)</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_xslt_module支持（过滤转换XML请求）</span></span><br><span class="line">--with-http_xslt_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_image_filter_module支持（传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用，要用到gd库） </span></span><br><span class="line">--with-http_image_filter_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）</span></span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_degradation_module支持（允许在内存不足的情况下返回204或444码）</span></span><br><span class="line">--with-http_degradation_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_access_module支持（该模块提供了一个简单的基于主机的访问控制，允许或拒绝基于ip地址）</span></span><br><span class="line">--without-http_access_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_auth_basic_module（该模块是可以使用用户名和密码基于http基本认证方法，来保护你的站点或其部分内容）</span></span><br><span class="line">--without-http_auth_basic_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_rewrite_module支持（该模块允许使用正则表达式改变URL）</span></span><br><span class="line">--without-http_rewrite_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_fastcgi_module支持（该模块允许Nginx 与FastCGI 进程交互，并通过传递参数来控制FastCGI 进程工作。）</span></span><br><span class="line">--without-http_fastcgi_module</span><br></pre></td></tr></table></figure><h2 id="1-4-设置防火墙规则"><a href="#1-4-设置防火墙规则" class="headerlink" title="1.4 设置防火墙规则"></a>1.4 设置防火墙规则</h2><blockquote><p><strong>开放80端口号</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看开放的端口号</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line">设置开放的端口号</span><br><span class="line">firewall-cmd --add-service=http -permanent</span><br><span class="line">sudo firewall-cmd --add-port=80/tcp -permanent</span><br><span class="line"></span><br><span class="line">重启防火墙</span><br><span class="line">firewall-cmd -reload</span><br></pre></td></tr></table></figure><h2 id="1-5-Nginx常用命令-及-信号"><a href="#1-5-Nginx常用命令-及-信号" class="headerlink" title="1.5 Nginx常用命令 及 信号"></a>1.5 Nginx常用命令 及 信号</h2><blockquote><p><strong>命令</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sni7ry5j314f0p94by.jpg" alt="image-20200624203124482"></p><blockquote><p><strong>信号</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7so7k5uij31b10pee84.jpg" alt="image-202006242333124482"></p><p><strong>信号详解：</strong></p><p>1、TERM，INT：nginx的主进程马上被关闭，不能完整处理正在使用的nginx的用户的请求，等同于 nginx -s stop。</p><p>2、QUIT：优雅的关闭nginx进程，在处理完所有正在使用nginx用户请求后再关闭nginx进程，等同于nginx -s quit。</p><p>3、HUP： nginx主进程不变，nginx进程不关闭，但是重新加载配置文件。等同于nginx -s reload。</p><p>4、USR1：不用关闭nginx进程就可以重读日志，此命令可以用于nginx的日志定时备份，按月/日等时间间隔分割有用。</p><p>5、USR2：nginx的版本需要升级的时候，不需要停止nginx，就能对nginx升级。</p><p>6、WINCH：配合USR2对nginx升级，优雅的关闭nginx旧版本的进程，</p><blockquote><p>reload重载配置文件的过程</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sod9i5yj319o0qtkjo.jpg" alt="image-20200624211822429"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7soiwo8hj31340hejyb.jpg" alt="image-20200624211822429"></p><h2 id="1-6-优化Nginx且编写启动脚本"><a href="#1-6-优化Nginx且编写启动脚本" class="headerlink" title="1.6 优化Nginx且编写启动脚本"></a>1.6 优化Nginx且编写启动脚本</h2><blockquote><p><strong>两者做一个就行，当然也可以都做</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/* /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx启动脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /lib/systemd/system/nginx.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=nginx</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/nginx/sbin/nginx</span></span><br><span class="line"><span class="string">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span></span><br><span class="line"><span class="string">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给予启动脚本执行权限</span></span><br><span class="line">chmod u+x /lib/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述脚本解释</span></span><br><span class="line">[Unit]:服务的说明</span><br><span class="line">Description:描述服务</span><br><span class="line">After:描述服务类别</span><br><span class="line">[Service]服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span><br><span class="line">Type=forking是后台运行的形式</span><br><span class="line">ExecStart为服务的具体运行命令</span><br><span class="line">ExecReload为重启命令</span><br><span class="line">ExecStop为停止命令</span><br><span class="line">PrivateTmp=True表示给服务分配独立的临时空间</span><br><span class="line">[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure><h2 id="1-7-启动Nginx服务"><a href="#1-7-启动Nginx服务" class="headerlink" title="1.7 启动Nginx服务"></a>1.7 启动Nginx服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除nginx.conf配置文件所有的注释行和空行（这步可有可无）</span></span><br><span class="line">sed -i /<span class="comment">#.*/d /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">sed -i /^$/d /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">netstat -anptu|grep <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      4827/nginx: master</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line"></span><br><span class="line">ps -aux|grep <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line">root 4827  0.0  0.1  46108  1152 ?  Ss  21:56   0:00 nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">nginx      4830  0.0  0.1  46556  1936 ?        S    21:56   0:00 nginx: worker process</span><br><span class="line">root       4849  0.0  0.0 112676   980 pts/0    R+   21:57   0:00 grep --color=auto nginx</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装Nginx时的编译参数和版本</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line">nginx version: nginx/1.12.2</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br></pre></td></tr></table></figure><h1 id="Nginx常用模块及内置变量"><a href="#Nginx常用模块及内置变量" class="headerlink" title="Nginx常用模块及内置变量"></a>Nginx常用模块及内置变量</h1><h2 id="1-1-Nginx常用模块"><a href="#1-1-Nginx常用模块" class="headerlink" title="1.1 Nginx常用模块"></a>1.1 Nginx常用模块</h2><blockquote><p><strong>Nginx模块分为 Nginx官方模块 以及 Nginx第三方模块</strong></p></blockquote><table><thead><tr><th>Nginx编译选项</th><th>模块作用</th></tr></thead><tbody><tr><td>ngx_http_core_module</td><td>包含⼀些核心的http参数配置，对应Nginx的配置区块部分</td></tr><tr><td>ngx_http_access_module</td><td>访问控制模块，用来控制网站用户对Nginx的访问</td></tr><tr><td>ngx_http_gzip_module</td><td>压缩模块，对Nginx返回的数据压缩，属于性能优化模块</td></tr><tr><td>ngx_http_fastcgi_module</td><td>fastci模块，和动态应用相关的模块，例如PHP</td></tr><tr><td>ngx_http_proxy_module</td><td>proxy代理模块</td></tr><tr><td>ngx_http_upstream_module</td><td>负载均衡模块，可以实现网站的负载均衡功能及节点的健康检查。</td></tr><tr><td>ngx_http_rewrite_module</td><td>URL地址重写模块</td></tr><tr><td>ngx_http_limit_conn_module</td><td>限制用户并发连接数及请求数模块</td></tr><tr><td>ngx_http_limit_req_module</td><td>限制Nginx request processing rate根据定义的key</td></tr><tr><td>ngx_http_log_module</td><td>访问日志模块，以指定的格式记录Nginx客户访问日志等信息</td></tr><tr><td>ngx_http_auth_basic_module</td><td>Web认证模块，设置Web用户通过账号密码访问Nginx</td></tr><tr><td>nginx_http_ssl_module</td><td>ssl模块，用于加密的http连接，如https</td></tr></tbody></table><h2 id="1-2-Nginx内置变量"><a href="#1-2-Nginx内置变量" class="headerlink" title="1.2 Nginx内置变量"></a>1.2 Nginx内置变量</h2><blockquote><p><strong>http请求变量</strong></p><p><strong>Nginx内置变量</strong></p><p><strong>自定义变量</strong></p></blockquote><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>$uri</td><td>当前请求的uri，不带参数</td></tr><tr><td>$request_uri</td><td>请求的uri，带完整参数</td></tr><tr><td>$host</td><td>http请求报文中host首部,如果没有则以处理此请求的虚拟主机的主机名代替</td></tr><tr><td>$hostname</td><td>nginx服务运行在主机的主机名</td></tr><tr><td>$remote_addr</td><td>客户端IP</td></tr><tr><td>$remote_port</td><td>客户端口</td></tr><tr><td>$remote_user</td><td>用户认证时客户端用户输入的用户名</td></tr><tr><td>$request_filename</td><td>用户请求中的URI经过本地root或alias转换后映射的本地文件路径</td></tr><tr><td>$request_method</td><td>请求方法, GET POST PUT</td></tr><tr><td>$server_addr</td><td>服务器地址</td></tr><tr><td>$server_port</td><td>服务器端口</td></tr><tr><td>$server_name</td><td>服务器名称</td></tr><tr><td>$server_protocol</td><td>服务器向客户端发送响应时的协议, 如http/1.1 http/1.0</td></tr><tr><td>$scheme</td><td>在请求中使用scheme, 如<a href="http://xxx.com中的http/">http://xxx.com中的http</a></td></tr><tr><td>$http_HEADER</td><td>匹配请求报文中指定的HEADER</td></tr><tr><td>$http_host</td><td>匹配请求报文中的host首部</td></tr><tr><td>$document_root</td><td>当前请求映射到的root配置</td></tr></tbody></table><h1 id="Nginx-conf-配置文件"><a href="#Nginx-conf-配置文件" class="headerlink" title="Nginx.conf 配置文件"></a><a href="https://www.cnblogs.com/dongye95/p/11096785.html#_label2_0">Nginx.conf 配置文件</a></h1><h2 id="1-1-Nginx配置文件语法"><a href="#1-1-Nginx配置文件语法" class="headerlink" title="1.1 Nginx配置文件语法"></a>1.1 Nginx配置文件语法</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sop7go5j315y0odas7.jpg" alt="image-20200624202639852"></p><h2 id="1-2-配置文件整体结构"><a href="#1-2-配置文件整体结构" class="headerlink" title="1.2 配置文件整体结构"></a>1.2 配置文件整体结构</h2><p>==<strong>Nginx主配置文件 nginx.conf，整个配置文件是以区块的形式组织的；一般，每个区块以一对大括号 {} 来表示开始与结束。</strong>==</p><blockquote><ol><li><p>Main位于nginx.conf配置文件的最高层；Main层下可以有Event、HTTP层</p></li><li><p>HTTP层下面允许有多个Server层, 用于对不同的网站做不同的配置</p></li><li><p>Server层也允许有多个location, 用于对不同的路径资源进行不同模块的配置</p></li></ol></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sozuqmoj30pc0fwq3r.jpg" alt="image-20200621230154767"></p><h3 id="1-2-1-main全局块"><a href="#1-2-1-main全局块" class="headerlink" title="1.2.1 main全局块"></a>1.2.1 main全局块</h3><p>配置影响nginx全局的指令。主要包括：</p><ul><li>配置运行Nginx服务器用户（组）</li><li>worker process数</li><li>Nginx进程</li><li>PID存放路径错误日志的存放路径</li><li>配置文件的引入</li></ul><h3 id="1-2-2-events块"><a href="#1-2-2-events块" class="headerlink" title="1.2.2 events块"></a>1.2.2 events块</h3><p>配置影响nginx服务器或与用户的网络连接。主要包括：</p><ul><li>设置网络连接的序列化</li><li>是否允许同时接收多个网络连接</li><li>事件驱动模型的选择</li><li>最大连接数的配置</li></ul><h3 id="1-2-3-http块"><a href="#1-2-3-http块" class="headerlink" title="1.2.3 http块"></a>1.2.3 http块</h3><p>可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。主要包括：</p><ul><li>定义MIMI-Type</li><li>自定义服务日志</li><li>允许sendfile方式传输文件</li><li>连接超时时间</li><li>单连接请求数上限</li></ul><h3 id="1-2-4-server块"><a href="#1-2-4-server块" class="headerlink" title="1.2.4 server块"></a>1.2.4 server块</h3><p>配置虚拟主机的相关参数，一个http中可以有多个server。主要包括：</p><ul><li>配置网络监听</li><li>基于名称的虚拟主机配置</li><li>基于IP的虚拟主机配置</li></ul><h3 id="1-2-5-location块"><a href="#1-2-5-location块" class="headerlink" title="1.2.5 location块"></a>1.2.5 location块</h3><p>配置请求的路由，以及各种页面的处理情况。主要包括：</p><ul><li>location配置</li><li>请求根目录配置更改</li><li>location的URI</li><li>网站默认首页配置</li></ul><h2 id="1-3-Nginx的默认配置"><a href="#1-3-Nginx的默认配置" class="headerlink" title="1.3 Nginx的默认配置"></a>1.3 Nginx的默认配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### main全局块 ####</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;                           // nginx的worker工作进程，一般数值为cpu核数</span><br><span class="line"></span><br><span class="line"><span class="comment">#### events事件块 ####</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;                  // 每个后台<span class="attribute">worker</span> process进程的最大并发连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#### http块 ####</span></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;                  // 文件扩展名与类型映射表</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;    // 默认文件类型</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;                        // 开启高效传输模式，默认为<span class="attribute">off</span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;                     // 连接超时时间，单位是秒</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#### server块 ####</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;                       // 监听端口</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;                // 提供服务的域名或主机名</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#### location块 ####</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;                       // 存放网站路径</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;       // 默认访问首⻚文件</span><br><span class="line">        &#125;</span><br><span class="line">        // 指定错误代码, 统一定义错误页面, 错误代码重定向到新的 Locaiton资源上</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx日志文件详解"><a href="#Nginx日志文件详解" class="headerlink" title="Nginx日志文件详解"></a>Nginx日志文件详解</h1><h2 id="1-1-Nginx日志配置"><a href="#1-1-Nginx日志配置" class="headerlink" title="1.1 Nginx日志配置"></a>1.1 Nginx日志配置</h2><blockquote><p><strong>在学习日志之前, 我们需要先了解下HTTP请求和返回</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v https://www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7spblndjj30u10csaek.jpg" alt="image-20200621232120269"></p><p>==<strong>log_format语法格式及参数语法说明如下:</strong>==</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 配置语法: 包括: error.log access.log ###</span></span><br><span class="line">Syntax: <span class="attribute">log_format</span>  &lt;NAME&gt;  &lt;String&gt;;</span><br><span class="line">Default: <span class="attribute">log_format</span> combined <span class="string">&quot;...&quot;</span>;</span><br><span class="line">Context: <span class="attribute">http</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Nginx默认日志格式 ###</span></span><br><span class="line">log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">### Nginx日志变量解释 ###</span></span><br><span class="line"><span class="attribute">log_format</span></span><br><span class="line">    $remote_addr             <span class="comment">#记录访问网站的客户端地址</span></span><br><span class="line">    $remote_user             <span class="comment">#nginx认证用户名</span></span><br><span class="line">    $time_local              <span class="comment">#记录访问时间与时区</span></span><br><span class="line">    $request                 <span class="comment">#用户的http请求行, GET等方法、http协议版本</span></span><br><span class="line">    $status                  <span class="comment">#http状态码，记录请求返回的状态码，例如：200、301、404等</span></span><br><span class="line">    $body_bytes_sent         <span class="comment">#服务器发送给客户端的响应body字节数大小，默认为B(byte)</span></span><br><span class="line">    $http_referer            <span class="comment">#记录此次请求是从哪个连接访问过来的，可以根据该参数进行防盗链设置。</span></span><br><span class="line">    $http_user_agent         <span class="comment">#记录客户端访问信息，例如：浏览器、手机客户端等</span></span><br><span class="line">    $http_x_forwarded_for    <span class="comment">#当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置</span></span><br></pre></td></tr></table></figure><h2 id="1-2访问日志段分析"><a href="#1-2访问日志段分析" class="headerlink" title="1.2访问日志段分析"></a>1.2访问日志段分析</h2><p>摘出来一段部分结果：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">120.4.15.223 - <span class="attribute">lemon</span> [<span class="number">22</span>/Jun/<span class="number">2020</span>:<span class="number">12</span>:<span class="number">01</span>:<span class="number">43</span> +<span class="number">0800</span>] <span class="string">&quot;GET /index.php/archives/56/ HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">4865</span> <span class="string">&quot;http://www.lemon-li.cn/&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure><p>各个字段所对应的变量</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.254                            //$<span class="attribute">remote_addr</span></span><br><span class="line">lemon                                    //$remote_user</span><br><span class="line">[<span class="number">22</span>/Jun/<span class="number">2020</span>:<span class="number">12</span>:<span class="number">01</span>:<span class="number">43</span> +<span class="number">0800</span>]             //$time_local</span><br><span class="line"><span class="string">&quot;GET /index.php/archives/56/ HTTP/1.1&quot;</span>   //$request</span><br><span class="line"><span class="number">200</span>                                      //$status</span><br><span class="line"><span class="number">4865</span>                                     //$body_bytes_sent</span><br><span class="line"><span class="string">&quot;http://www.lemon-li.cn/&quot;</span>                //$http_referer</span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Windows xx Firefox/77.0&quot;</span>   //$http_user_agent</span><br><span class="line"><span class="string">&quot;-&quot;</span>                                      //$http_x_forwarded_for</span><br></pre></td></tr></table></figure><h2 id="1-3-Nginx访问日志统计"><a href="#1-3-Nginx访问日志统计" class="headerlink" title="1.3 Nginx访问日志统计"></a>1.3 Nginx访问日志统计</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##统计tcp连接数</span></span><br><span class="line">netstat -anpt|awk <span class="string">&#x27;NR&gt;=3&#123;print $6&#125;&#x27;</span>|sort -rn|uniq -c</span><br><span class="line"></span><br><span class="line"><span class="comment">##统计访问日志中访问量最多的10个IP地址, 这下面两个都行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /usr/<span class="built_in">local</span>/nginx/logs/access.log | sort | uniq -c | sort -nr -k1 | head -n 10</span><br><span class="line">cat /usr/<span class="built_in">local</span>/nginx/logs/access.log|awk <span class="string">&#x27;&#123;a[$1]++&#125; END &#123;for(b in a) print b&quot;\t&quot;a[b]&#125;&#x27;</span>|sort -k2 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment">##统计HTTP状态码次数</span></span><br><span class="line">awk <span class="string">&#x27;&#123;S[$9]++&#125;;END&#123;for(i in S) &#123;print S[i],i&#125;&#125;&#x27;</span> /usr/<span class="built_in">local</span>/nginx/logs/access.log|sort -nr|head</span><br><span class="line"></span><br><span class="line"><span class="comment">##注解：</span></span><br><span class="line">awk <span class="string">&#x27;&#123; print $1&#125;&#x27;</span>：取数据的低1域（第1列）。</span><br><span class="line">sort：对IP部分进行排序。</span><br><span class="line">uniq -c：打印每一重复行出现的次数。（并去掉重复行）。</span><br><span class="line">sort -nr -k1：按照重复行出现的次序倒序排列，-k1以第一列为标准排序。</span><br><span class="line">head -n 10：取排在前5位的IP 。</span><br></pre></td></tr></table></figure><h2 id="1-4-http-access-module局限性"><a href="#1-4-http-access-module局限性" class="headerlink" title="1.4 http_access_module局限性"></a>1.4 http_access_module局限性</h2><blockquote><p>下图是没有使用 http_x_forwarded_for 记录真实客户端IP地址以及代理服务器IP</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7spiu5oej30on0bdwgx.jpg" alt="image-20200623102751786"></p><blockquote><p>下图是使用 http_x_forwarded_for 记录真实客户端IP地址以及代理服务器IP</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7spqmr40j30qr0cn41u.jpg" alt="image-20200623104731498"></p><p><strong>解决方式</strong></p><ol><li><p>==采用HTTP头信息控制访问, 代理以及web服务开启 http_x_forwarded_for==</p></li><li><p>结合geo模块作</p></li><li><p>通过HTTP自动以变量传递</p></li></ol><h1 id="Nginx常用的基本配置"><a href="#Nginx常用的基本配置" class="headerlink" title="Nginx常用的基本配置"></a>Nginx常用的基本配置</h1><h2 id="1-1-Nginx-虚拟主机"><a href="#1-1-Nginx-虚拟主机" class="headerlink" title="1.1 Nginx 虚拟主机"></a>1.1 Nginx 虚拟主机</h2><blockquote><p>所谓虚拟主机，在web服务器里就是一个独立的网站 站点，这个站点对应独立的域名(也可能是IP或端口)，具有独立的程序及资源目录，可以独立地对外提供服务供用户访问。</p></blockquote><h3 id="1-1-1-配置基于域名虚拟主机（最常用的）"><a href="#1-1-1-配置基于域名虚拟主机（最常用的）" class="headerlink" title="1.1.1 配置基于域名虚拟主机（最常用的）"></a>1.1.1 配置基于域名虚拟主机（最常用的）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.创建web站点⽬目录</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># mkdir -p /soft/code/&#123;www,bbs&#125;</span></span><br><span class="line">[root@nginx conf]<span class="comment"># echo &quot;www&quot; &gt; /soft/code/www/index.html</span></span><br><span class="line">[root@nginx conf]<span class="comment"># echo &quot;bbs&quot; &gt; /soft/code/bbs/index.html</span></span><br><span class="line">[root@nginx conf]<span class="comment"># tree /soft/</span></span><br><span class="line">/soft/</span><br><span class="line">└── code</span><br><span class="line">    ├── bbs</span><br><span class="line">    │   └── index.html</span><br><span class="line">    └── www</span><br><span class="line">        └── index.html</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.配置虚拟主机</span><br><span class="line">[root@nginx conf]<span class="comment"># cat vhosts/&#123;www,bbs&#125;.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.lemon-li.cn;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/www;</span><br><span class="line">    <span class="attribute">index</span>    index.html;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.lemon-li.cn;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/bbs;</span><br><span class="line">    <span class="attribute">index</span>    index.html;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.访问</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># curl www.lemon-li.cn</span></span><br><span class="line">www</span><br><span class="line"></span><br><span class="line">[root@nginx conf]<span class="comment"># curl bbs.lemon-li.cn</span></span><br><span class="line">bbs</span><br></pre></td></tr></table></figure><h3 id="1-1-2-配置不同端口访问不同虚拟主机"><a href="#1-1-2-配置不同端口访问不同虚拟主机" class="headerlink" title="1.1.2 配置不同端口访问不同虚拟主机"></a>1.1.2 配置不同端口访问不同虚拟主机</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 仅修改 <span class="attribute">listen</span> 监听端口即可 , 但不能和系统端口发生冲突!</span><br><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8002</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-配置虚拟主机别名"><a href="#1-1-3-配置虚拟主机别名" class="headerlink" title="1.1.3 配置虚拟主机别名"></a>1.1.3 配置虚拟主机别名</h3><blockquote><p>所谓虚拟主机别名，就是虚拟主机设置除了主域名以外的一个域名，实现用户访问的多个域名对应同一个虚拟主机网站的功能</p><p>这里以bbs.lemon-li.cn域名的虚拟主机为例，为其增加一个别名lemon.com时，出现网站内容和访问bbs.lemon-li.cn是一样的</p><p>具体配置如下：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 默认配置</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.lemon-li.cn;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 别名配置</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.lemon-li.cn lemon-li-cn;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用 <span class="attribute">Linux</span> 下 curl 测试结果</span><br><span class="line">[root@nginx conf]<span class="comment"># curl lemon-li.cn</span></span><br><span class="line">bbs.lemon-li.cn</span><br><span class="line"></span><br><span class="line">[root@nginx conf]<span class="comment"># curl bbs.lemon-li.cn</span></span><br><span class="line">bbs.lemon-li.cn</span><br><span class="line"></span><br><span class="line">// 访问带 bbs 和不带 bbs 是一样的, 当然除了别名实现也可以通过 rewrite 实现</span><br></pre></td></tr></table></figure><h2 id="1-2-Nginx-状态监控"><a href="#1-2-Nginx-状态监控" class="headerlink" title="1.2 Nginx 状态监控"></a>1.2 Nginx 状态监控</h2><blockquote><p>–with-http_stub_status_module             记录 Nginx 客户端基本访问状态信息</p></blockquote><p><strong>默认用法：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: stub_status;</span><br><span class="line">Default: <span class="attribute">off</span></span><br><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><p><strong>具体配置：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line">  <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提供了以下状态信息：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 1</span><br><span class="line"><span class="comment">## Nginx 当前活跃连接数, 有多少人在请求</span></span><br><span class="line"></span><br><span class="line">server accepts handled requests</span><br><span class="line"> 1 1 1</span><br><span class="line"><span class="comment">## server表示Nginx处理接收握⼿总次数。</span></span><br><span class="line"><span class="comment">## accepts表示Nginx处理接收总连接数。</span></span><br><span class="line"><span class="comment">## 请求丢失数=(握⼿数-连接数)可以看出,本次状态显示没有丢失请求。</span></span><br><span class="line"><span class="comment">## handled requests，表示总共处理了了1次请求。</span></span><br><span class="line"></span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br><span class="line"><span class="comment">## Reading表示Nginx读取数据</span></span><br><span class="line"><span class="comment">## Writing表示Nginx写的情况</span></span><br><span class="line"><span class="comment">## Waiting表示Nginx开启keep-alive长连接情况下, 既没有读也没有写, 建立连接情况</span></span><br></pre></td></tr></table></figure><p><strong>使用ab命令测试压力</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 100 http://192.168.2.1:80/index.html</span><br><span class="line">-c  并发数</span><br><span class="line">-n  总的请求数</span><br><span class="line">-k  是否开启长连接</span><br></pre></td></tr></table></figure><p><strong>访问查看</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7spyv97xj30to05mglw.jpg" alt="image-20200622162405702"></p><h2 id="1-3-Nginx下载站点"><a href="#1-3-Nginx下载站点" class="headerlink" title="1.3 Nginx下载站点"></a>1.3 Nginx下载站点</h2><blockquote><p>Nginx默认是不允许列出整个目录浏览下载的 !</p></blockquote><p><strong>默认用法：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">autoindex</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: off;</span><br><span class="line">Context: http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">//autoindex常⽤用参数</span><br><span class="line">autoindex_exact_size <span class="literal">off</span>;</span><br><span class="line">默认为on， 显示出文件的确切大小，单位是bytes。</span><br><span class="line">修改为off，显示出文件的大概大小，单位是kB或者MB或者GB。</span><br><span class="line"></span><br><span class="line"><span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">默认为off，显示的文件时间为GMT时间。</span><br><span class="line">修改为on， 显示的文件时间为文件的服务器时间。</span><br><span class="line"></span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>,gbk;</span><br><span class="line">默认中文目录乱码，添加上解决乱码。</span><br></pre></td></tr></table></figure><p><strong>具体配置：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//开启目录浏览</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>  /download;</span><br><span class="line">    <span class="attribute">autoindex</span>  <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>,gbk;</span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建站点资源</span><br><span class="line">[root@<span class="attribute">nginx</span> /]<span class="comment"># mkdir -p /download</span></span><br><span class="line">[root@nginx /]<span class="comment"># cd download/</span></span><br><span class="line">[root@nginx download]<span class="comment"># touch lemon&#123;1..20&#125;.txt</span></span><br></pre></td></tr></table></figure><p><strong>展示效果：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sq2htlfj30ww0jjtb8.jpg" alt="image-20200624125401798"></p><h2 id="1-4-Nginx-访问控制"><a href="#1-4-Nginx-访问控制" class="headerlink" title="1.4 Nginx 访问控制"></a>1.4 Nginx 访问控制</h2><blockquote><p><strong>基于IP的访问控制 http_access_module</strong></p><p><strong>基于⽤用户登陆认证 http_auth_basic_module</strong></p></blockquote><h3 id="1-4-1-基于IP的访问控制"><a href="#1-4-1-基于IP的访问控制" class="headerlink" title="1.4.1 基于IP的访问控制"></a>1.4.1 基于IP的访问控制</h3><p><strong>语法格式如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 允许配置语法</span><br><span class="line">Syntax: <span class="attribute">allow</span> address | CIDR | unix: | all;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, <span class="attribute">limit_except</span></span><br><span class="line"></span><br><span class="line">// 拒绝配置语法</span><br><span class="line">Syntax: deny address | CIDR | unix: | all;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, limit_except</span><br></pre></td></tr></table></figure><p><strong>具体配置如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 配置拒绝某一个 IP, 其他全部允许</span><br><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">192.168.2.254</span>;</span><br><span class="line">    <span class="attribute">allow</span> all;</span><br><span class="line">    <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 只允许某一个网段访问 , 其它全部拒绝</span><br><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">192.168.2.0</span>/<span class="number">24</span>;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">    <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-基于用户登陆认证"><a href="#1-4-2-基于用户登陆认证" class="headerlink" title="1.4.2 基于用户登陆认证"></a>1.4.2 基于用户登陆认证</h3><p><strong>语法格式如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 配置语法</span><br><span class="line">Syntax:  <span class="attribute">auth_basic</span> string | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">auth_basic</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">limit_except</span></span><br><span class="line"></span><br><span class="line">// ⽤户密码记录配置文件</span><br><span class="line">Syntax:  auth_basic_user_file file;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, limit_except</span><br></pre></td></tr></table></figure><p><strong>具体配置如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 需要安装依赖组件</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># yum install httpd-tools</span></span><br><span class="line">[root@nginx ~]<span class="comment"># htpasswd -c /usr/local/nginx/conf/user.conf lemon</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx/conf/user.conf</span></span><br><span class="line">lemon:$apr1$TLvI5fjG$vOFaI7v3AxSFD/M/NO3TP/</span><br><span class="line"></span><br><span class="line">// 可在 http,server,location 里添加如下信息</span><br><span class="line">auth_basic <span class="string">&quot;Auth access Blog Input your Passwd!&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /usr/local/nginx/conf/user.conf;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-上面两者也可以一起用"><a href="#1-4-3-上面两者也可以一起用" class="headerlink" title="1.4.3 上面两者也可以一起用"></a>1.4.3 上面两者也可以一起用</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//想对哪个网页进行加密就在哪个里面加入以下配置：</span><br><span class="line"><span class="attribute">auth_basic</span> <span class="string">&quot;Auth access Blog Input your Passwd!&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /usr/local/nginx/conf/user.conf;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.168.2.254</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure><h2 id="1-5-Nginx-访问限制"><a href="#1-5-Nginx-访问限制" class="headerlink" title="1.5 Nginx 访问限制"></a>1.5 Nginx 访问限制</h2><h3 id="1-5-1-http协议的连接与请求"><a href="#1-5-1-http协议的连接与请求" class="headerlink" title="1.5.1 http协议的连接与请求"></a>1.5.1 http协议的连接与请求</h3><blockquote><p>HTTP是建立在TCP,  在完成HTTP请求需要先建立TCP三次握手（称为TCP连接），在连接的基础上在HTTP请求。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sq6u6r6j30tu0ea3zu.jpg" alt="image-20200622000823214"></p><h3 id="1-5-2-HTTP-协议的连接与请求"><a href="#1-5-2-HTTP-协议的连接与请求" class="headerlink" title="1.5.2 HTTP 协议的连接与请求"></a>1.5.2 HTTP 协议的连接与请求</h3><ul><li><p>HTTP 请求建立在一次 TCP 连接基础上</p></li><li><p>一次 TCP 请求至少产生一次 HTTP 请求</p></li></ul><table><thead><tr><th>HTTP协议版本</th><th>连接关系</th></tr></thead><tbody><tr><td>HTTP1.0</td><td>TCP不能复用</td></tr><tr><td>HTTP1.1</td><td>顺序性TCP复用</td></tr><tr><td>HTTP2.0</td><td>多路复用TCP复用</td></tr></tbody></table><h3 id="1-5-3-Nginx-连接限制"><a href="#1-5-3-Nginx-连接限制" class="headerlink" title="1.5.3 Nginx 连接限制"></a>1.5.3 Nginx 连接限制</h3><blockquote><p><strong>连接频率限制  limit_conn_module</strong></p></blockquote><p><strong>连接限制语法：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sv34f1oj61hc0sinph02.jpg" alt="image-20200622000823214"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7svbstuxj313z0l44qs.jpg" alt="image-20200624225455880"></p><p><strong>具体配置如下 :</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    //<span class="attribute">http</span> 段配置连接限制 , 同一时刻只允许一个客户端 IP 连接</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=conn_zone:<span class="number">10m</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            // 限制向客户端返回的速度，每秒钟速率50字节，这个配置仅仅只是为了能看到效果</span><br><span class="line">            <span class="attribute">limit_rate</span> <span class="number">50</span>;</span><br><span class="line">          // 同一时刻只允许一个客户端 <span class="attribute">IP</span> 连接</span><br><span class="line">            limit_conn conn_zone <span class="number">1</span>;</span><br><span class="line">            // 修改限制发生时向客户端返回的错误码，可做可不做</span><br><span class="line">            <span class="attribute">limit_conn_status</span> <span class="number">500</span>;</span><br><span class="line">            // 修改限制发生时的日志级别，可做可不做</span><br><span class="line">            <span class="attribute">limit_conn_log_level</span> <span class="literal">warn</span>;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打开两个终端同时请求</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://ttk.lemon-li.cn/</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7svgvf0tj30t80820t3.jpg" alt="image-20200624231652524"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7svmwy6hj30pu03d74x.jpg" alt="image-20200624231848233"></p><h3 id="1-5-4-Nginx-请求限制"><a href="#1-5-4-Nginx-请求限制" class="headerlink" title="1.5.4 Nginx 请求限制"></a>1.5.4 Nginx 请求限制</h3><blockquote><p>请求频率限制 limit_req_module</p></blockquote><p><strong>请求限制语法：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7svvyiutj31aj0sdu10.jpg" alt="image-20200624231848233"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sw0ycd2j61au0rfqv802.jpg" alt="image-20200624231848233"></p><p><strong>具体配置如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    //<span class="attribute">http</span> 段配置请求限制, rate 限制速率，限制一秒钟最多一个 IP 请求</span><br><span class="line">    limit_req_zone $binary_remote_addr zone=req_zone:<span class="number">10m</span> rate=1r/s;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">// 1r/<span class="attribute">s</span> 内只接收一个请求, 剩下的将被延迟处理, 请求数超过 burst 定义的数量, 多余请求拒绝处理并返回<span class="number">503</span>错误码给客户端</span><br><span class="line">            limit_req zone=req_zone burst=<span class="number">3</span> nodelay;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ab压力测试：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 100 http://192.168.2.1:80/index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Benchmarking ttk.lemon-li.cn (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx</span><br><span class="line">Server Hostname:        ttk.lemon-li.cn</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        25 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      20</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   0.033 seconds</span><br><span class="line">Complete requests:      50</span><br><span class="line">Failed requests:        46         <span class="comment"># 可以看到这里，失败了46次，也就是说50次请求只成功了4次，也就是1 + 3 = 4</span></span><br><span class="line">   (Connect: 0, Receive: 0, Length: 46, Exceptions: 0)</span><br><span class="line">Write errors:           0</span><br><span class="line">Non-2xx responses:      46</span><br><span class="line">Total transferred:      18062 bytes</span><br><span class="line">HTML transferred:       9576 bytes</span><br><span class="line">Requests per second:    1503.17 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       13.305 [ms] (mean)</span><br><span class="line">Time per request:       0.665 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          530.28 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        3    4   0.6      4       5</span><br><span class="line">Processing:     3    4   0.6      4       5</span><br><span class="line">Waiting:        3    4   0.6      4       5</span><br><span class="line">Total:          6    8   1.1      8      10</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      8</span><br><span class="line">  66%      8</span><br><span class="line">  75%      9</span><br><span class="line">  80%      9</span><br><span class="line">  90%      9</span><br><span class="line">  95%      9</span><br><span class="line">  98%     10</span><br><span class="line">  99%     10</span><br><span class="line"> 100%     10 (longest request)</span><br></pre></td></tr></table></figure><p><strong>使用浏览器测试狂点刷新5次就会报503</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sw5uzz7g310c0c7gm9.gif" alt="image-20200621205106691"></p><p><strong>查看错误日志信息</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020/06/24 16:27:04 [error] 960<span class="comment">#0: *1903 limiting requests, excess: 3.486 by zone &quot;req_zone&quot;, client: 101.200.227.38, server: ttk.lemon-li.cn, request: &quot;GET / HTTP/1.0&quot;, host: &quot;ttk.lemon-li.cn&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-5-整体总结"><a href="#1-5-5-整体总结" class="headerlink" title="1.5.5 整体总结"></a>1.5.5 整体总结</h3><blockquote><p>==<strong>连接限制 没有 请求限制有效?</strong>==</p></blockquote><ul><li><p>前面说过, 多个请求可以建立在一次的TCP连接之上,  那么我们对请求的精度限制，当然比对一个连接的限制会更加的有效。</p></li><li><p>因为同一时刻只允许一个连接请求进入。</p></li><li><p>但是同一时刻多个请求可以通过一个连接进入。</p></li><li><p>所以请求限制才是比较合理的限制解决方案。</p></li></ul><h2 id="1-6-Nginx日志分割"><a href="#1-6-Nginx日志分割" class="headerlink" title="1.6 Nginx日志分割"></a>1.6 Nginx日志分割</h2><blockquote><p><strong>技术要点：</strong></p><ol><li><p>剪切日志后，使用 ==kill -USR1== 发送信号重新生成日志文件，同时还不影响网站请求处理进程。</p></li><li><p>错误时通过echo和tee -a命令将错误显示的同时写入到日志文件/var/log/messages。</p></li></ol></blockquote><h3 id="1-6-1-手动日志分割"><a href="#1-6-1-手动日志分割" class="headerlink" title="1.6.1 手动日志分割"></a>1.6.1 手动日志分割</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 查看nginx日志文件</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># ll -h /usr/local/nginx/logs/</span></span><br><span class="line">总用量 <span class="number">60K</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">41</span> access.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">478</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">39</span> <span class="literal">error</span>.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">4</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">33</span> nginx.pid</span><br><span class="line"></span><br><span class="line">// 先备份日志文件</span><br><span class="line">[root@nginx logs]<span class="comment"># pwd</span></span><br><span class="line">/usr/local/nginx/logs</span><br><span class="line">[root@nginx logs]<span class="comment"># cp access.log access.log.bak</span></span><br><span class="line">[root@nginx logs]<span class="comment"># ll -h</span></span><br><span class="line">总用量 <span class="number">60K</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">51</span> access.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">41</span> access.log.bak</span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root <span class="number">829</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">52</span> <span class="literal">error</span>.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root   <span class="number">4</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">33</span> nginx.pid</span><br><span class="line"></span><br><span class="line">// 手动执行日志切割命令 或 发送信号</span><br><span class="line">[root@nginx logs]<span class="comment"># nginx -s reopen</span></span><br><span class="line">[root@nginx logs]<span class="comment"># ll -h</span></span><br><span class="line">总用量 <span class="number">60K</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root   <span class="number">0</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">51</span> access.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">41</span> access.log.bak</span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root <span class="number">829</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">52</span> <span class="literal">error</span>.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root   <span class="number">4</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">33</span> nginx.pid</span><br></pre></td></tr></table></figure><h3 id="1-6-2-自动日志分割"><a href="#1-6-2-自动日志分割" class="headerlink" title="1.6.2 自动日志分割"></a>1.6.2 自动日志分割</h3><blockquote><p><strong>就是写一个脚本，然后放到计划任务当中按时间自动切割日志</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 编写日志切割脚本</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># vi /root/cut_nginx_log.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">datetime=$(date -d <span class="string">&quot;-1 day&quot;</span> <span class="string">&quot;+%Y%m%d&quot;</span>)</span><br><span class="line">log_path=<span class="string">&quot;/usr/local/nginx/logs&quot;</span></span><br><span class="line">pid_path=<span class="string">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span></span><br><span class="line">mkdir -p $log_path/backup</span><br><span class="line">if [ -f $pid_path ];<span class="attribute">then</span></span><br><span class="line">    mv $log_path/access.log $log_path/backup/access.log-$datetime</span><br><span class="line">    kill -USR1 $(cat $pid_path)  <span class="comment">#USR1通常被用来告知应用程序重载配置文件</span></span><br><span class="line">    find $log_path/backup -mtime +<span class="number">30</span> | xargs rm -f</span><br><span class="line">else</span><br><span class="line">    echo <span class="string">&quot;Error,Nginx is not working!&quot;</span>  &gt;&gt; /var/log/messages</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">// 给予脚本执行权限</span><br><span class="line">[root@nginx ~]<span class="comment"># chmod +x /root/cut_nginx_log.sh</span></span><br><span class="line"></span><br><span class="line">//添加至计划任务，每天的<span class="number">00</span>:<span class="number">00</span>点执行</span><br><span class="line">[root@nginx ~]<span class="comment"># echo &quot;0 0 * * * /root/cut_nginx_log.sh&quot; &gt;&gt; /var/spool/cron/root</span></span><br><span class="line">[root@nginx ~]<span class="comment"># crontab –l</span></span><br><span class="line"></span><br><span class="line">//手动执行一下这个脚本验证下效果</span><br><span class="line">[root@nginx ~]<span class="comment"># bash -x /root/cut_nginx_log.sh</span></span><br><span class="line">++ date -d <span class="string">&#x27;-1 day&#x27;</span> +%Y%m%d</span><br><span class="line">+ datetime=<span class="number">20200624</span></span><br><span class="line">+ log_path=/usr/local/nginx/logs</span><br><span class="line">+ pid_path=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">+ mkdir -p /usr/local/nginx/logs/backup</span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> -f /usr/local/nginx/logs/nginx.pid <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ mv /usr/local/nginx/logs/access.log /usr/local/nginx/logs/backup/access.log-<span class="number">20200624</span></span><br><span class="line">++ cat /usr/local/nginx/logs/nginx.pid</span><br><span class="line">+ kill -USR1 <span class="number">968</span></span><br><span class="line">+ find /usr/local/nginx/logs/backup -mtime +<span class="number">30</span></span><br><span class="line">+ xargs rm -f</span><br><span class="line"></span><br><span class="line">// 查看日志是否被切割及备份</span><br><span class="line">[root@nginx ~]<span class="comment"># ls /usr/local/nginx/logs/backup/</span></span><br><span class="line">access.log-<span class="number">20200624</span></span><br></pre></td></tr></table></figure><h2 id="1-7-Nginx平滑升级部署"><a href="#1-7-Nginx平滑升级部署" class="headerlink" title="1.7 Nginx平滑升级部署"></a>1.7 Nginx平滑升级部署</h2><blockquote><ul><li><strong>作用：在不影响客户端业务的情况下升级Nginx服务</strong></li><li>==<strong>切记，这里一定要使用绝对路径启动Nginx，才能够作热升级</strong>==</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7swahpqrj31610qp4gv.jpg" alt="image-20200624212307459"></p><p><strong>Nginx信号详解：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.TERM，INT：nginx的主进程马上被关闭，不能完整处理正在使用的nginx的用户的请求，等同于 <span class="attribute">nginx</span> -s stop。</span><br><span class="line"><span class="number">2</span>.QUIT：优雅的关闭nginx进程，在处理完所有正在使用nginx用户请求后再关闭nginx进程，等同于nginx -s quit。</span><br><span class="line"><span class="number">3</span>.HUP： nginx主进程不变，nginx进程不关闭，但是重新加载配置文件。等同于nginx -s reload。</span><br><span class="line"><span class="number">4</span>.USR1：不用关闭nginx进程就可以重读日志，此命令可以用于nginx的日志定时备份，按月/日等时间间隔分割有用。</span><br><span class="line"><span class="number">5</span>.USR2：nginx的版本需要升级的时候，不需要停止nginx，就能对nginx升级。</span><br><span class="line"><span class="number">6</span>.WINCH：配合USR2对nginx升级，优雅的关闭nginx旧版本的进程</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7swidxvcj319a0e97bj.jpg" alt="image-20200624212511817"></p><blockquote><p><strong>具体操作如下：</strong></p><ul><li>当前版本为：nginx-1.12.2</li><li>升级版本为：nginx-1.16.1</li></ul></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// 查看旧的nginx都编译了什么模块，一会编译新版本时就照着加就行了</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br><span class="line"></span><br><span class="line">// 查看旧版本nginx的后台进程PID，一会升级nginx时会用到</span><br><span class="line">[root@nginx ~]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">2241</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56316</span>  <span class="number">1156</span> ?  Ss  <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">2242</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56700</span>  <span class="number">1932</span> ?  S   <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line"></span><br><span class="line">// 备份旧nginx的二进制命令文件</span><br><span class="line">[root@nginx ~]<span class="comment"># cp -r /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span></span><br><span class="line">[root@nginx ~]<span class="comment"># ll /usr/local/nginx/sbin/</span></span><br><span class="line">总用量 <span class="number">14888</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> nginx nginx <span class="number">7621776</span> <span class="number">6</span>月  <span class="number">21</span> <span class="number">21</span>:<span class="number">53</span> nginx</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root  root  <span class="number">7621776</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">02</span>:<span class="number">01</span> nginx.old</span><br><span class="line"></span><br><span class="line">// 准备nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>源码包</span><br><span class="line">[root@nginx ~]<span class="comment"># wget http://nginx.org/download/nginx-1.16.1.tar.gz</span></span><br><span class="line"></span><br><span class="line">// 解压、配置、编译nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>源码包。注：<span class="comment">#不能加make install，如若添加，则覆盖了!</span></span><br><span class="line">[root@nginx ~]<span class="comment"># tar xf nginx-1.16.1.tar.gz  -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.16.1/</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module &amp;&amp; make</span></span><br><span class="line"></span><br><span class="line">// 进入编译好的objs目录中将编译好的nginx1.<span class="number">16</span>.<span class="number">1</span>的二进制命令文件拷贝至对应位置</span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># cd objs/ &amp;&amp; ll</span></span><br><span class="line">总用量 <span class="number">7976</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">18617</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> autoconf.err</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">56144</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> Makefile</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">7961952</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">56</span> nginx</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">5341</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">56</span> nginx.<span class="number">8</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">7651</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> ngx_auto_config.h</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root     <span class="number">657</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> ngx_auto_headers.h</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">9435</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> ngx_modules.c</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">93664</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">56</span> ngx_modules.o</span><br><span class="line">drwxr-xr-x <span class="number">9</span> root root      <span class="number">91</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> src</span><br><span class="line">[root@nginx objs]<span class="comment"># cp -rf nginx /usr/local/nginx/sbin/</span></span><br><span class="line">cp：是否覆盖<span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span>？ y</span><br><span class="line">[root@nginx objs]<span class="comment"># ll /usr/local/nginx/sbin/</span></span><br><span class="line">总用量 <span class="number">15220</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">7961952</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">02</span>:<span class="number">04</span> nginx</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">7621776</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">02</span>:<span class="number">01</span> nginx.old</span><br><span class="line"></span><br><span class="line">// 开始使用信号实现热升级nginx</span><br><span class="line"><span class="comment">## 发送 USR2 信号，向主进程（ master）发送 USR2 信号，Nginx 会启动一个新版本的 master 进程和对应工作进程，和旧版一起处理请求。</span></span><br><span class="line">[root@nginx objs]<span class="comment"># kill -USR2 2241</span></span><br><span class="line">[root@nginx objs]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">2241</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56316</span>  <span class="number">1340</span> ?  Ss  <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">2242</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56700</span>  <span class="number">1932</span> ?  S   <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process     <span class="comment">#老版本进程</span></span><br><span class="line">root  <span class="number">5361</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">3</span>  <span class="number">56348</span>  <span class="number">3336</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">5362</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56744</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process     <span class="comment">#新版本进程</span></span><br><span class="line"></span><br><span class="line">[root@nginx objs]<span class="comment"># kill -WINCH 2242      # 关闭老版本进程的worker进程</span></span><br><span class="line">[root@nginx objs]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">2241</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56316</span>  <span class="number">1340</span> ?  Ss  <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">root  <span class="number">5361</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">3</span>  <span class="number">56348</span>  <span class="number">3336</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">5362</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56744</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line">nginx <span class="number">5366</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56700</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">10</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process  <span class="comment">#这是关掉老版本woker之后新生成的woker进程</span></span><br><span class="line"></span><br><span class="line">[root@nginx objs]<span class="comment"># kill -QUIT 2241      # 关闭老版本进程的master进程</span></span><br><span class="line">[root@nginx objs]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">5361</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">3</span>  <span class="number">56348</span>  <span class="number">3336</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">5362</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56744</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line"></span><br><span class="line">[root@nginx objs]<span class="comment"># nginx -V             # 至此，nginx就算是热升级成功了</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br></pre></td></tr></table></figure><h2 id="1-8-index-和-autoindex的区别"><a href="#1-8-index-和-autoindex的区别" class="headerlink" title="1.8 index 和 autoindex的区别"></a>1.8 index 和 autoindex的区别</h2><blockquote><p><strong>index模块</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7swmxm9gj316f0qj4qs.jpg" alt="image-20200624212307459"></p><blockquote><p><strong>autoindex模块</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7swuhc5wj61a80pue8402.jpg" alt="image-20200624212307459"></p><p><strong>autoindex 主要有下面四个指令：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sx06ldjj30tn0lv7wj.jpg" alt="image-20200625013255522"></p><h2 id="1-9-root-和-alias-的区别（重点）"><a href="#1-9-root-和-alias-的区别（重点）" class="headerlink" title="1.9 root 和 alias 的区别（重点）"></a>1.9 root 和 alias 的区别（重点）</h2><blockquote><p><strong>root属性指定的值是要加入到最终路径的，所以访问的位置变成了 root的值/locaiton的值。而我不想把访问的URI加入到路径中。所以就需要使用alias属性，其会抛弃URI，直接访问alias指定的位置</strong></p></blockquote><h3 id="1-9-1-root属性"><a href="#1-9-1-root属性" class="headerlink" title="1.9.1 root属性"></a>1.9.1 root属性</h3><blockquote><p><strong>结论： root属性，会把root的值（这里是yyy）加入到访问路径（locaition）之前</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> xxx &#123;</span><br><span class="line">    <span class="attribute">root</span> yyy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://url/aaa.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/aaa.html，实际访问的是</a>  <a href="http://url/yyy/xxx/aaa.html">http://URL/yyy/xxx/aaa.html</a></p><p>浏览器访问 <a href="http://url/xxx/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/abc.html，实际访问的是</a>  <a href="http://url/yyy/xxx/abc.html">http://URL/yyy/xxx/abc.html</a></p><p>浏览器访问 <a href="http://url/xxx/ccc/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/ccc/abc.html，实际访问的是</a>  <a href="http://url/yyy/xxx/ccc/abc.html">http://URL/yyy/xxx/ccc/abc.html</a></p><h3 id="1-9-2-alias属性（别名）"><a href="#1-9-2-alias属性（别名）" class="headerlink" title="1.9.2 alias属性（别名）"></a>1.9.2 alias属性（别名）</h3><blockquote><p><strong>结论：alias属性，会把alias的值（这里是yyy）替代访问路径匹配的部分（这里是xxx）</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">locaiton</span> xxx &#123;</span><br><span class="line">    <span class="comment"># alias必须以 / 结束，否则无效!!!</span></span><br><span class="line">    <span class="attribute">alias</span> /yyy/; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://url/xxx.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx.html，实际访问的是</a>  <a href="http://url/yyy/xxx.html">http://URL/yyy/xxx.html</a></p><p>浏览器访问 <a href="http://url/xxx/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/abc.html，实际访问的是</a>  <a href="http://url/yyy/abc.html">http://URL/yyy/abc.html</a></p><p>浏览器访问 <a href="http://url/xxx/ccc/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/ccc/abc.html，实际访问的是</a>  <a href="http://url/yyy/ccc/abc.html">http://URL/yyy/ccc/abc.html</a></p><h2 id="1-10-定义错误页面"><a href="#1-10-定义错误页面" class="headerlink" title="1.10 定义错误页面"></a>1.10 定义错误页面</h2><blockquote><p><strong>模块：</strong>error_page，作用是根据客户端的访问网站的返回状态码，为其指定到特定的错误页面</p></blockquote><p>语法：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page <span class="keyword">code</span> [ <span class="keyword">code</span>... ] [ = | =answer-<span class="keyword">code</span> ] uri | @named_location </span><br></pre></td></tr></table></figure><p><strong>简单示例：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 编写错误页面</span><br><span class="line"><span class="attribute">echo</span> <span class="string">&#x27;client_4xx_error&#x27;</span> &gt; /www/test/400_error.html</span><br><span class="line">echo <span class="string">&#x27;client_5xx_error&#x27;</span> &gt; /www/test/500_error.html</span><br><span class="line"></span><br><span class="line">// 定义客户端错误页面</span><br><span class="line">error_page <span class="number">400</span> <span class="number">401</span> <span class="number">402</span> <span class="number">403</span> <span class="number">404</span> /400_error.html;</span><br><span class="line"><span class="attribute">location</span> /400_error.html &#123;</span><br><span class="line">  <span class="attribute">root</span> /www/test;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义服务端错误页面</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">501</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /500_error.html;</span><br><span class="line"><span class="attribute">location</span> /500_error.html &#123;</span><br><span class="line">  <span class="attribute">root</span> /www/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证一下效果</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sy86vfej30u404l74g.jpg" alt="image-20200625104239563"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sy27w9hj30qh03kgls.jpg" alt="image-20200625104314946"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sxfyj9hj31hc0bbgnr.jpg" alt="image-20200625104456679"></p><h2 id="1-11-设置Nginx防盗链"><a href="#1-11-设置Nginx防盗链" class="headerlink" title="1.11 设置Nginx防盗链"></a>1.11 设置Nginx防盗链</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">zhen主机配置防盗链</span><br><span class="line">[root@zhen ~]<span class="comment"># vi /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">在server&#123;&#125;区域里添加以下配置：</span><br><span class="line">        location ~* \.(wma|wmv|asf|mp3|mmf|zip|rar|gif|png|swf|flv|jpeg) &#123;</span><br><span class="line">            valid_referers nonde blocked  *.zhen.com  zhen.com;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">               rewrite  ^/  http://www.zhen.com/error.jpg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#注意：不能存在以下缓存配置：</span></span><br><span class="line">     55         location  ~  \.(gif|jpg|jpeg|png|bmp|ico)$   &#123;</span><br><span class="line">     56             expires 1d;</span><br><span class="line">     57         &#125;</span><br><span class="line">wq!</span><br><span class="line">[root@zhen html]<span class="comment"># systemctl restart nginx</span></span><br><span class="line">解释：</span><br><span class="line">第一行： wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv 表示对这些后缀的文件进行防盗链。</span><br><span class="line">第二行：valid_referers表示被允许的URL，none表示浏览器中 referer（Referer 是 header 的一部分，当浏览器向 web 服务器发送请求时，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理） 为空的情况，就直接在浏览器访问图片，blocked referer 不为空的情况，但是值被代理或防火墙删除了，这些值不以http://或 https://开头，*.zhen是匹配URL的域名。</span><br><span class="line">第三行：<span class="keyword">if</span>&#123;&#125;判断如果是来自于invalid_referer（不被允许的URL）链接，即不是来自第二行指定的URL,就强制跳转到错误页面，当然直接返回 404 （<span class="built_in">return</span> 404）也是可以的，也可以是图片。</span><br><span class="line">注意：防盗链测试时，不要和expires配置一起使用。</span><br></pre></td></tr></table></figure><h2 id="1-12-如何在已经安装好的nginx中添加模块"><a href="#1-12-如何在已经安装好的nginx中添加模块" class="headerlink" title="1.12 如何在已经安装好的nginx中添加模块"></a>1.12 如何在已经安装好的nginx中添加模块</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 原已经安装好的nginx，现在需要添加一个未被编译安装的模块:</span><br><span class="line"></span><br><span class="line">// 查看原来编译时都带了哪些参数</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -V</span></span><br><span class="line"><span class="attribute">nginx</span> version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span> <span class="number">20120313</span> (Red Hat <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span>-<span class="number">16</span>) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre</span><br><span class="line"></span><br><span class="line">进入nginx源码目录</span><br><span class="line"><span class="comment"># cd nginx-1.12.2</span></span><br><span class="line"></span><br><span class="line">// 添加的参数 （要加之前已经过的编译模块，不然最后只有新编译模块）</span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/nginx --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre --with-http_ssl_module</span></span><br><span class="line"></span><br><span class="line">// 编译，make完之后在objs目录下就多了个nginx，这个就是新版本的程序了。注意 &#123;不要<span class="attribute">make</span> install，否则就是覆盖安装&#125;</span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"></span><br><span class="line">// 替换nginx二进制文件</span><br><span class="line"><span class="comment"># cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak    (备份之前的nginx二进文件)</span></span><br><span class="line"><span class="comment"># cp ./objs/nginx  /usr/local/nginx/sbin/ </span></span><br><span class="line"></span><br><span class="line">// 测试新的nginx程序是否正确</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -t</span></span><br><span class="line">nginx: theconfiguration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx:configuration file /usr/local/nginx/conf/nginx.conf test issuccessful</span><br><span class="line"></span><br><span class="line">// 重新加载nginx</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -s reload</span></span><br><span class="line"></span><br><span class="line">// 查看ngixn版本极其编译参数</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span> <span class="number">20120313</span> (Red Hat <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span>-<span class="number">16</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.1e-fips <span class="number">11</span> Feb <span class="number">2013</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre --with-http_ssl_module</span><br></pre></td></tr></table></figure><h2 id="1-13-Nginx中的location指令（重点）"><a href="#1-13-Nginx中的location指令（重点）" class="headerlink" title="1.13 Nginx中的location指令（重点）"></a>1.13 Nginx中的location指令（重点）</h2><blockquote><p>location的作用是根据用户请求的URI来执行不同的应用，就是根据用户请求的网站URL进行匹配，匹配成功即进行相关的操作</p></blockquote><h3 id="1-13-1-安装第三方的模块"><a href="#1-13-1-安装第三方的模块" class="headerlink" title="1.13.1 安装第三方的模块"></a>1.13.1 安装第三方的模块</h3><ul><li><strong>下载第三方模块echo</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># wget https://github.com/openresty/echo-nginx-module/archive/v0.61.tar.gz</span></span><br></pre></td></tr></table></figure><ul><li><strong>重新编译添加三方echo模块</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br><span class="line"></span><br><span class="line">[root@nginx ~]<span class="comment"># tar -xf  v0.61.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.16.1/</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/usr/src/echo-nginx-module-0.61/ &amp;&amp; make</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># cp -rf objs/nginx /usr/local/nginx/sbin/</span></span><br><span class="line"></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/usr/src/echo-nginx-module-<span class="number">0</span>.<span class="number">61</span>/</span><br></pre></td></tr></table></figure><h3 id="1-13-2-location语法-及-符号规则"><a href="#1-13-2-location语法-及-符号规则" class="headerlink" title="1.13.2 location语法 及 符号规则"></a>1.13.2 location语法 及 符号规则</h3><ul><li><strong>location语法格式：</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~</span> ] uri &#123; ... &#125;</span><br><span class="line">Syntax: <span class="attribute">location</span> @name &#123; ... &#125;</span><br><span class="line">Default: —</span><br><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><ul><li><strong>location的符号：</strong></li></ul><table><thead><tr><th align="left">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">表示精确匹配</td></tr><tr><td align="left">^~</td><td align="left">表示uri以指定字符或字符串开头</td></tr><tr><td align="left">~</td><td align="left">表示区分大小写的正则匹配</td></tr><tr><td align="left">~*</td><td align="left">表示不区分大小写的正则匹配</td></tr><tr><td align="left">/</td><td align="left">通用匹配，任何请求都会匹配到</td></tr></tbody></table><ul><li><strong>注意事项：</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">有些资料上介绍location支持 不匹配 !~，</span><br><span class="line">如： <span class="attribute">location</span> !<span class="regexp">~ &#x27;png&#x27;</span>&#123; ... &#125;</span><br><span class="line">这是错误的，location不支持 !~</span><br><span class="line"></span><br><span class="line">如果有这样的需求，可以通过if来实现，</span><br><span class="line">如： <span class="attribute">if</span> ($uri !<span class="regexp">~ &#x27;png&#x27;)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">注意：location优先级小于if</span><br></pre></td></tr></table></figure><h3 id="1-13-4-location优先级及案例"><a href="#1-13-4-location优先级及案例" class="headerlink" title="1.13.4 location优先级及案例"></a>1.13.4 location优先级及案例</h3><blockquote><p>总结一句话：= 符号优先级最高，/ 符号优先级最低</p></blockquote><ul><li><strong>规则优先级：</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=  高于  ^~  高于  ~* 等于 ~  高于  /</span><br></pre></td></tr></table></figure><ul><li><strong>对比 / 和 ~</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span>  /abc &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：~</span><br></pre></td></tr></table></figure><ul><li><strong>对比 ~ 和 ~</strong>*</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：<span class="regexp">~</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">示例2：把他们两个的顺序调整一下</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：<span class="regexp">~*</span></span><br><span class="line"><span class="regexp">结论是：~和~*优先级其实是一样的，如果两个同时出现，配置文件中哪个location靠前，哪个生效。</span></span><br></pre></td></tr></table></figure><ul><li><strong>对比 ^~ 和 ~</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /abc &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;^~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：^~</span><br></pre></td></tr></table></figure><ul><li><strong>对比 = 和 ^~</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /abc.html &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;^~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /abc.html &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc.html</span><br><span class="line">结果是：=</span><br></pre></td></tr></table></figure><h1 id="Nginx静态资源控制"><a href="#Nginx静态资源控制" class="headerlink" title="Nginx静态资源控制"></a>Nginx静态资源控制</h1><h2 id="1-静态资源类型"><a href="#1-静态资源类型" class="headerlink" title="1. 静态资源类型"></a>1. 静态资源类型</h2><blockquote><p>Nginx 作为静态资源 Web 服务器部署配置, 传输非常的高效, 常常用于静态资源处理,  请求,  动静分离</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7syhozhaj30z30bq0y4.jpg" alt="image-20200625134655267"></p><blockquote><p>==<em><strong>非服务器动态运行 生成的文件就属于静态资源！</strong></em>==</p><ul><li><p><strong>静态资源：</strong>可以理解为前端的固定页面，这里面包含HTML、CSS、JS、图片等等，不需要查数据库也不需要程序处理，直接就能够显示的页面，如果想修改内容则必须修改页面，但是访问效率相当高。</p></li><li><p><strong>动态资源：</strong>需要程序处理或者从数据库中读数据，能够根据不同的条件在页面显示不同的数据，内容更新不需要修改页面但是访问速度不及静态页面。</p></li></ul></blockquote><table><thead><tr><th>类型</th><th>种类</th></tr></thead><tbody><tr><td>浏览器端渲染</td><td>HTML、CSS、JS</td></tr><tr><td>图片</td><td>JPEG、GIF、PNG</td></tr><tr><td>音频</td><td>FLV、Mp4</td></tr><tr><td>文件</td><td>TXT、任意下载文件</td></tr></tbody></table><h2 id="2-静态资源基本配置"><a href="#2-静态资源基本配置" class="headerlink" title="2. 静态资源基本配置"></a>2. 静态资源基本配置</h2><h3 id="2-1-文件读取高效-sendfile"><a href="#2-1-文件读取高效-sendfile" class="headerlink" title="2.1 文件读取高效 sendfile"></a>2.1 文件读取高效 sendfile</h3><p><strong>作用简介：</strong></p><blockquote><p>==sendfile可以让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据；开启这个参数后可以让数据不用经过用户buffer。==如果这个参数不开启，会先在用户空间（Nginx进程空间）申请一个buffer，用read函数把数据从磁盘读到cache，再从cache读取到用户空间的buffer，再用write函数把数据从用户空间的buffer写入到内核的buffer，最后到tcp socket。</p></blockquote><p><strong>语法格式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">sendfile</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">sendfile</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">if</span> in location</span><br></pre></td></tr></table></figure><h3 id="2-2-提高网络传输效率-tcp-nopush"><a href="#2-2-提高网络传输效率-tcp-nopush" class="headerlink" title="2.2 提高网络传输效率 tcp_nopush"></a>2.2 提高网络传输效率 tcp_nopush</h3><p><strong>作用简介：</strong></p><blockquote><p>告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。就是说数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。</p></blockquote><p><strong>语法格式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">tcp_nopush</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">tcp_nopush</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><h3 id="2-3-与-tcp-nopush-对应的配置-tcp-nodelay"><a href="#2-3-与-tcp-nopush-对应的配置-tcp-nodelay" class="headerlink" title="2.3 与 tcp_nopush 对应的配置 tcp_nodelay"></a>2.3 与 tcp_nopush 对应的配置 tcp_nodelay</h3><p><strong>作用简介：</strong></p><blockquote><p>告诉nginx不要缓存数据，而是一段一段的发送—当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。作用: 在keepalive连接下,提高网络的传输 ‘实时性’</p></blockquote><p><strong>语法格式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">tcp_nodelay</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><h3 id="2-4-注意事项"><a href="#2-4-注意事项" class="headerlink" title="2.4 注意事项"></a>2.4 注意事项</h3><ol><li><p>tcp_nopush配置 与 tcp_nodelay 互斥。</p></li><li><p>在nginx中tcp_nopush必须和sendfile配合使用。</p></li></ol><h2 id="3-静态资源文件压缩配置"><a href="#3-静态资源文件压缩配置" class="headerlink" title="3. 静态资源文件压缩配置"></a>3. 静态资源文件压缩配置</h2><blockquote><p>Nginx 将响应报文发送至客户端之前可以启用压缩功能，这能够有效的节约带宽，并提高响应至客户端的速度。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sypy5lmj30yd0aw0uo.jpg" alt="image-20200625215739171"></p><h3 id="3-1-gzip-压缩配置语法"><a href="#3-1-gzip-压缩配置语法" class="headerlink" title="3.1 gzip 压缩配置语法"></a>3.1 gzip 压缩配置语法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">gzip</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">gzip</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">if</span> in location</span><br><span class="line"></span><br><span class="line">作用: 数据传输时压缩</span><br></pre></td></tr></table></figure><h3 id="3-2-gzip-压缩比率配置语法"><a href="#3-2-gzip-压缩比率配置语法" class="headerlink" title="3.2 gzip 压缩比率配置语法"></a>3.2 gzip 压缩比率配置语法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">gzip_comp_level</span> level;</span><br><span class="line">Default: <span class="attribute">gzip_comp_level</span> <span class="number">1</span>;</span><br><span class="line">Context: http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">作用: 压缩本身比较耗费服务端性能</span><br></pre></td></tr></table></figure><h3 id="3-3-gzip-压缩协议版本"><a href="#3-3-gzip-压缩协议版本" class="headerlink" title="3.3 gzip 压缩协议版本"></a>3.3 gzip 压缩协议版本</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span> | <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">Default: <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">Context: http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">作用: 压缩使用在http哪个协议, 主流版本<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-4-图片压缩案例（不建议开启图片压缩）"><a href="#3-4-图片压缩案例（不建议开启图片压缩）" class="headerlink" title="3.4 图片压缩案例（不建议开启图片压缩）"></a>3.4 图片压缩案例（不建议开启图片压缩）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon-<span class="attribute">min</span> vhosts]<span class="comment"># mkdir -p /www/images</span></span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># cat ttl.lemon-li.cn.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">     <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">     <span class="attribute">server_name</span>  ttl.lemon-li.cn;</span><br><span class="line">     <span class="attribute">access_log</span>   logs/ttl_logs/access_ttl.lemon.cn.log    main;</span><br><span class="line">     <span class="attribute">error_log</span>    logs/ttl_logs/error_ttl.lemon.cn.log     <span class="literal">info</span>;</span><br><span class="line">     <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">       <span class="attribute">root</span> /www/images;</span><br><span class="line">         <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">         <span class="attribute">gzip</span>   <span class="literal">on</span>;</span><br><span class="line">         <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">         <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">         <span class="attribute">gzip_types</span> text/plain application/json application/x-javascript application/css application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7syvdbxpj30pi03mmxs.jpg" alt="image-20200625225001698"></p><p>没有开启 gzip 图片压缩时</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7sz2mjkyj31hc0rw7m5.jpg" alt="image-20200625225811631"></p><p>开启 gzip 图片压缩时(关于图片的压缩比率不是太过明显)</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7szkq003j31hc0rth41.jpg" alt="image-20200625230007749"></p><h3 id="3-5-文本压缩案例"><a href="#3-5-文本压缩案例" class="headerlink" title="3.5 文本压缩案例"></a>3.5 文本压缩案例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon-min vhosts]<span class="comment"># mkdir -p /www/doc</span></span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># for i in &#123;1..20000&#125;;do echo &quot;asdabnvfgf&quot; &gt;&gt; /www/doc/test.txt ; done</span></span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># ll -h /www/doc/</span></span><br><span class="line">总用量 216K</span><br><span class="line">-rw-r--r-- 1 root root 215K 6月  25 23:15 test.txt</span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># cat ttl.lemon-li.cn.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">     listen    80;</span><br><span class="line">     server_name  ttl.lemon-li.cn;</span><br><span class="line">     access_log   logs/ttl_logs/access_ttl.lemon.cn.log    main;</span><br><span class="line">     error_log    logs/ttl_logs/error_ttl.lemon.cn.log     info;</span><br><span class="line">     location ~ .*\.(txt|xml)$ &#123;</span><br><span class="line">      root /www/doc;</span><br><span class="line">      sendfile on;</span><br><span class="line">        gzip   on;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_types text/plain application/json application/x-javascript application/css application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有启用 gzip 文件压缩时</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7szpo4npj31gf0s077e.jpg" alt="image-20200625231806340"></p><p>启用 gzip 文件压缩时（可见压缩的重要性）</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7szvbsb9j31gf0rx77c.jpg" alt="image-20200625231931243"></p><h2 id="4-静态资源浏览器缓存"><a href="#4-静态资源浏览器缓存" class="headerlink" title="4. 静态资源浏览器缓存"></a>4. 静态资源浏览器缓存</h2><p>==<em><strong>HTTP协议定义的缓存机制 (如: Expires; Cache-control 等)</strong></em>==</p><blockquote><p><strong>1、浏览器无缓存</strong></p><p>浏览器请求-&gt;无缓存-&gt;请求WEB服务器-&gt;请求响应-&gt;呈现</p><p><strong>2、浏览器有缓存</strong></p><p>浏览器请求-&gt;有缓存-&gt;校验过期-&gt;是否有更新-&gt;呈现</p><p>校验是否过期 Expires HTTP1.0, Cache-Control(max-age) HTTP1.1</p><p>协议中Etag头信息校验 Etag ()</p><p>Last-Modified头信息校验 Last-Modified (具体时间)</p></blockquote><p><strong>1.缓存配置语法 expires</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">expires</span> [modified] time;</span><br><span class="line"><span class="attribute">expires</span> epoch | max | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">expires</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">if</span> in location</span><br></pre></td></tr></table></figure><p><strong>2.配置静态资源缓存</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(js|css|html)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/js;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(jpg|gif|png)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/images;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.开发代码没有正式上线时, 希望静态文件不被缓存</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//取消<span class="attribute">js</span> css html等静态文件缓存</span><br><span class="line">location <span class="regexp">~ .*\.(css|js|swf|json|mp4|htm|html)$</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-store;</span><br><span class="line">    <span class="attribute">add_header</span> Pragma <span class="literal">no</span>-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-静态资源防盗链"><a href="#5-静态资源防盗链" class="headerlink" title="5. 静态资源防盗链"></a>5. 静态资源防盗链</h2><blockquote><p><strong>防盗链就是防止别人盗用服务器中的图片、文件、视频等相关资源。防盗链：是通过location + rewrite + http_refer实现的。</strong></p></blockquote><p><strong>1. 基于 http_refer 防盗链配置模块</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">valid_referers</span> <span class="literal">none</span> | <span class="literal">blocked</span> | server_names | string ...;</span><br><span class="line">Default: —</span><br><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><p><strong>2. 准备html文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pachong<span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.69.113/test.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 启动防盗链</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(wma|wmv|asf|mp3|mmf|zip|rar|gif|png|swf|flv|jpeg)</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> nonde <span class="literal">blocked</span>  <span class="regexp">*.zhen.com</span>  zhen.com;</span><br><span class="line">    <span class="attribute">if</span> ($invalid_referer) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span> <span class="regexp"> ^/</span>  http://www.zhen.com/error.jpg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：不能存在以下缓存配置：</span></span><br><span class="line"><span class="attribute">location</span>  <span class="regexp">~  \.(gif|jpg|jpeg|png|bmp|ico)$</span>   &#123;</span><br><span class="line">    <span class="attribute">expires</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 验证</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 伪造协议头访问</span><br><span class="line">[root@C-<span class="attribute">Server</span> ~]<span class="comment"># curl -e &quot;http://www.baidu.com&quot; -I http://192.168.69.113/test.jpg</span></span><br><span class="line">HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="number">403</span> Forbidden</span><br><span class="line">Server: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">Date: Tue, <span class="number">17</span> Apr <span class="number">2018</span> <span class="number">04</span>:<span class="number">55</span>:<span class="number">18</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">169</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">// 伪造协议头访问</span><br><span class="line">[root@C-Server ~]<span class="comment"># curl -e &quot;http://www.xuliangwei.com&quot; -I http://192.168.69.113/tes</span></span><br><span class="line">t.jpg</span><br><span class="line">HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">Date: Tue, <span class="number">17</span> Apr <span class="number">2018</span> <span class="number">04</span>:<span class="number">55</span>:<span class="number">27</span> GMT</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line">Content-Length: <span class="number">174315</span></span><br><span class="line">Last-Modified: Wed, <span class="number">29</span> Nov <span class="number">2017</span> <span class="number">03</span>:<span class="number">16</span>:<span class="number">08</span> GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;5a1e2678-2a8eb&quot;</span></span><br><span class="line">Expires: Tue, <span class="number">17</span> Apr <span class="number">2018</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">27</span> GMT</span><br><span class="line">Cache-Control: max-age=<span class="number">43200</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
