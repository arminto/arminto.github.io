<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WEB &amp; HTTP</title>
      <link href="/2021/08/02/WEB-HTTP/"/>
      <url>/2021/08/02/WEB-HTTP/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="WEB-amp-HTTP"><a href="#WEB-amp-HTTP" class="headerlink" title="WEB &amp; HTTP"></a>WEB &amp; HTTP</h1><ul><li>web 网站</li><li>http协议</li></ul><h2 id="WEB-网站"><a href="#WEB-网站" class="headerlink" title="WEB 网站"></a>WEB 网站</h2><h3 id="1-Web网站"><a href="#1-Web网站" class="headerlink" title="1. Web网站"></a>1. Web网站</h3><blockquote><p>域名是一个IP地址的“面具” ，目的是便于记忆和访问一个或一组服务器的地址（网站，电子邮件，FTP等）。</p></blockquote><ol><li><p>域名解析：本地HOSTS解析、DNS服务器解析</p></li><li><p>网站的基本概念：网站、网页、主页；HTTP、URL、HTML、超链接</p></li><li><p>web网站：有web1.0（以编辑为特征）和web2.0（侧重用户交互）</p></li><li><p>动态页面与静态页面的差别, 静态页面内容几乎是固定的, 而动态页面的内容会因用户、浏览器、时间等而发生变化</p></li></ol><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20210803084720768.png" alt="image-20210803084720768"></p><h3 id="2-URL的组成部分"><a href="#2-URL的组成部分" class="headerlink" title="2. URL的组成部分"></a>2. URL的组成部分</h3><h4 id="2-1-协议-Protocol"><a href="#2-1-协议-Protocol" class="headerlink" title="2.1 协议(Protocol)"></a>2.1 协议(Protocol)</h4><p><em><strong>http://</strong></em> 为协议名, 标明了请求需要使用的协议, 通常使用的就是HTTP协议 或 安全协议 HTTPS。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20210803084720768.png" alt="image-20210803084720768"></p><h4 id="2-2-域名-Domain"><a href="#2-2-域名-Domain" class="headerlink" title="2.2 域名(Domain)"></a>2.2 域名(Domain)</h4><p><em><strong><a href="http://www.example.com/">www.example.com</a></strong></em> 为域名, 标明了需要请求的服务器的地址。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625143903439.png" alt="image-20200625143903439"></p><h4 id="2-3-端口-Port"><a href="#2-3-端口-Port" class="headerlink" title="2.3 端口(Port)"></a>2.3 端口(Port)</h4><p><em><strong>:80</strong></em> 是端口号, 标明了获取服务器资源的入口, 端口号用于区分服务的端口, 一台拥有公网IP的服务器可以提供许多服务, 比如Web服务、FTP服务、SMTP服务等;  服务器的资源是通过“IP地址+端口号”来区分不同的服务,  如果把服务器比作房子,  端口号就可以看做是通向不同服务的门。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625143922623.png" alt="image-20200625143922623"></p><h4 id="2-4-URL文件资源"><a href="#2-4-URL文件资源" class="headerlink" title="2.4 URL文件资源"></a>2.4 URL文件资源</h4><p><em><strong>/path/to/myfile.html</strong></em> 表示服务器上资源的路径, 过去这样的路径标记的是服务器上文件的物理路径, 但是现在路径表示的只是一个抽象地址, 并不指代任何物理地址。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625144036536.png" alt="image-20200625144036536"></p><h4 id="2-5-参数-query"><a href="#2-5-参数-query" class="headerlink" title="2.5 参数(query)"></a>2.5 参数(query)</h4><p><em><strong>?key1=value1&amp;key2=value2</strong></em> 是请求里提供的额外参数, 这些参数是以键值对的形式,通过<code>&amp;</code>符号分隔开来,服务器可以通过这些参数进行相应的个性化处理。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625144053593.png" alt="image-20200625144053593"></p><h4 id="2-6-片段-fragment"><a href="#2-6-片段-fragment" class="headerlink" title="2.6 片段(fragment)"></a>2.6 片段(fragment)</h4><p><em><strong>#SomewhereInTheDocument</strong></em> 是对资源的部分补充, <code>fragment</code>可以理解为资源内部的<code>书签</code>, 用来想服务器指明展示的内容所在的<code>书签</code>的点; 例如对于<code>HTML</code>文件来说, 浏览器会滚动到特定的或者上次浏览过的位置.对于音频或者视频资源来说,浏览器又会跳转到对应的时间节点。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625144100710.png" alt="image-20200625144100710"></p><h2 id="HTTP协议概念"><a href="#HTTP协议概念" class="headerlink" title="HTTP协议概念"></a>HTTP协议概念</h2><blockquote><p>HTTP是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP默认使用80端口，这个端口指的是服务端的端口，而客户端使用的端口是动态分配的。当我们没有指定端口访问时，浏览器会默认帮我们添加80端口。我们也可以自己指定访问端口如：<a href="http://www.ip.com:80。">http://www.ip.com:80。</a> </p></blockquote><p>需要注意的是，现在大多数访问都使用了HTTPS协议，而HTTPS的默认端口为443，如果使用80端口访问HTTPS协议的服务器可能会被拒绝。</p><h3 id="1-HTTP协议简介"><a href="#1-HTTP协议简介" class="headerlink" title="1. HTTP协议简介"></a>1. HTTP协议简介</h3><ol><li><p>HTTP协议的核心功能是传输Web服务器上的HTML 页面及其他文件；可以理解HTTP协议就是做业务的。</p></li><li><p>HTTP协议版本 http0.9（已过时）、http1.0和http1.1（目前广泛使用）、http2.0（未普及）</p></li><li><p>HTTP协议有多种获得 Web 资源的方法，最为常见的就是GET和POST及方法</p></li><li><p>HTTP请求会有很多的状态码，常看到的有：200、301、404、500等等</p></li><li><p>HTTP报文格式，一个完整的http访问包含请求（request）和响应（response）</p></li></ol><h3 id="2-HTTP请求的方法"><a href="#2-HTTP请求的方法" class="headerlink" title="2. HTTP请求的方法"></a>2. HTTP请求的方法</h3><blockquote><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p></blockquote><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="3-HTTP响应头信息"><a href="#3-HTTP响应头信息" class="headerlink" title="3. HTTP响应头信息"></a>3. HTTP响应头信息</h3><table><thead><tr><th>应答头</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE  5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td>Content-Length</td><td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入  ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a>  注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh”  CONTENT=”5;URL=<a href="http://host/path&quot;%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>   注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。   注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。  注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h3 id="4-HTTP状态代码"><a href="#4-HTTP状态代码" class="headerlink" title="4. HTTP状态代码"></a>4. HTTP状态代码</h3><blockquote><p>HTTP状态码的英文为HTTP Status Code。</p></blockquote><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：1xx   2xx   3xx   4xx   5xx 。</p><p><strong>下面是最常见的HTTP状态码：</strong></p><ul><li><p>200        服务器成功返回内容</p></li><li><p>301/2     永久/临时重定向</p></li><li><p>304        未修改 Not Modified</p></li><li><p>307        重定向中保留原始数据</p></li><li><p>404        请求的页面不存在</p></li><li><p>413        请求实体太大，服务器拒绝处理当前请求</p></li><li><p>500        服务器内部错误</p></li><li><p>502        代理请求后端失败</p></li><li><p>503        服务器暂时不可用</p></li><li><p>504        请求成功，但是连接超时</p></li></ul><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625162413480.png" alt="image-20200625162413480"></p><p><strong><a href="https://www.runoob.com/http/http-status-codes.html">其他的一些HTTP状态码</a></strong></p><h3 id="5-HTTP-content-type"><a href="#5-HTTP-content-type" class="headerlink" title="5. HTTP  content-type"></a>5. HTTP  content-type</h3><p><strong>简介</strong></p><blockquote><p>Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些 PHP 网页点击的结果却是下载一个文件或一张图片的原因。</p></blockquote><p><strong>Content-Type 标头告诉客户端实际返回的内容的内容类型。</strong></p><p><strong>语法</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=something</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625160438655.png" alt="image-20200625160438655"></p><p><strong>常见的媒体格式类型如下</strong></p><ul><li>text/html ： HTML格式</li><li>text/plain ：纯文本格式</li><li>text/xml ： XML格式</li><li>image/gif ：gif图片格式</li><li>image/jpeg ：jpg图片格式</li><li>image/png：png图片格式</li></ul><p><strong>以application开头的媒体格式类型</strong></p><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml： XML数据格式</li><li>application/atom+xml ：Atom XML聚合格式</li><li>application/json： JSON数据格式</li><li>application/pdf：pdf格式</li><li>application/msword ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li></ul><p><strong>常见的媒体格式是上传文件之时使用的</strong></p><ul><li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><p><strong><a href="https://www.runoob.com/http/http-content-type.html">更加详细的HTTP  content-type 对照表</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LVM逻辑卷</title>
      <link href="/2021/08/02/LVM%E9%80%BB%E8%BE%91%E5%8D%B7/"/>
      <url>/2021/08/02/LVM%E9%80%BB%E8%BE%91%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="LVM-逻辑卷"><a href="#LVM-逻辑卷" class="headerlink" title="LVM 逻辑卷"></a>LVM 逻辑卷</h1><blockquote><p>逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在<a href="https://www.linuxprobe.com/">Linux</a>或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理“逻辑”卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。</p></blockquote><h2 id="LVM使用分层结构"><a href="#LVM使用分层结构" class="headerlink" title="LVM使用分层结构"></a>LVM使用分层结构</h2><blockquote><p>如下图所示</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/NtTv8P.png" alt="NtTv8P"></p><p>图中顶部，首先是实际的物理磁盘及其划分的分区和其上的物理卷（PV）。一个或多个物理卷可以用来创建卷组（VG）。然后基于卷组可以创建逻辑卷（LV）。只要在卷组中有可用空间，就可以随心所欲的创建逻辑卷。文件系统就是在逻辑卷上创建的，然后可以在操作系统挂载和访问。</p><h2 id="LVM-实践演练"><a href="#LVM-实践演练" class="headerlink" title="LVM 实践演练"></a>LVM 实践演练</h2><blockquote><p>本文将介绍怎么在linux中创建和管理LVM卷。分成两个部分。第一个部分，首先要在一个硬盘上创建多个逻辑卷，然后将它们挂载在/lvm-mount目录。然后对创建好的卷调整大小。而第二部分，会从另外一块硬盘增加额外的卷到LVM中。</p></blockquote><h3 id="1、准备磁盘分区"><a href="#1、准备磁盘分区" class="headerlink" title="1、准备磁盘分区"></a>1、准备磁盘分区</h3><blockquote><p>通过使用fdisk，创建磁盘分区。我们需要创建3个1G分区，注意，并不要求分区的大小一致。同样，分区需要使用‘8e’类型来使他们可用于LVM。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fdisk /dev/sdb </span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n <span class="comment">## 新建</span></span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">p <span class="comment">## 主分区</span></span><br><span class="line"></span><br><span class="line">Partition number (1-4): 1 <span class="comment">## 分区号</span></span><br><span class="line">First cylinder (1-1044, default 1):  <span class="comment">## 回车用默认的1</span></span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-1044, default 1044): +1G <span class="comment">## 大小</span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t <span class="comment">## 改变类型</span></span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (<span class="built_in">type</span> L to list codes): 8e <span class="comment">## LVM 的分区代码</span></span><br><span class="line">Changed system <span class="built_in">type</span> of partition 1 to 8e (Linux LVM)</span><br></pre></td></tr></table></figure><p>重复上面的操作来创建其他两个分区。分区创建完成后，我们应该有类似如下的输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fdisk -l </span></span><br><span class="line">Device Boot         Start         End     Blocks    Id  System</span><br><span class="line">/dev/sdb1               1         132     1060258+  8e  Linux LVM</span><br><span class="line">/dev/sdb2             133         264     1060290   8e  Linux LVM</span><br><span class="line">/dev/sdb3             265         396     1060290   8e  Linux LVM</span><br></pre></td></tr></table></figure><h3 id="2、准备物理卷-PV"><a href="#2、准备物理卷-PV" class="headerlink" title="2、准备物理卷(PV)"></a>2、准备物理卷(PV)</h3><blockquote><p>刚创建的分区是用来储存物理卷的。LVM可以使用不同大小的物理卷。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvcreate /dev/sdb1</span></span><br><span class="line"><span class="comment"># pvcreate /dev/sdb2</span></span><br><span class="line"><span class="comment"># pvcreate /dev/sdb3 </span></span><br></pre></td></tr></table></figure><p>使用下列<a href="https://www.linuxcool.com/">命令</a>检查物理卷的创建情况。下面截取部分输出。”/dev/sdb2”是一个新的”1.01 GiB”物理卷。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvdisplay </span></span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb2</span><br><span class="line">  VG Name</span><br><span class="line">  PV Size               1.01 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0</span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               jszvzz-ENA2-g5Pd-irhV-T9wi-ZfA3-0xo092</span><br></pre></td></tr></table></figure><p>使用下列<a href="https://www.linuxcool.com/">命令</a>可以删除物理卷。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvremove /dev/sdb1 </span></span><br></pre></td></tr></table></figure><h3 id="3、准备卷组-VG"><a href="#3、准备卷组-VG" class="headerlink" title="3、准备卷组(VG)"></a>3、准备卷组(VG)</h3><blockquote><p>下列命令用来创建名为’volume-group1’的卷组，使用/dev/sdb1, /dev/sdb2 和 /dev/sdb3创建。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vgcreate volume-group1 /dev/sdb1 /dev/sdb2 /dev/sdb3</span></span><br></pre></td></tr></table></figure><p>使用下列命令可以来验证卷组。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vgdisplay </span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               volume-group1</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        3</span><br><span class="line">  Metadata Sequence No  1</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                0</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                3</span><br><span class="line">  Act PV                3</span><br><span class="line">  VG Size               3.02 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              774</span><br><span class="line">  Alloc PE / Size       0 / 0</span><br><span class="line">  Free  PE / Size       774 / 3.02 GiB</span><br><span class="line">  VG UUID               bwd2pS-fkAz-lGVZ-qc7C-TaKv-fFUC-IzGNBK</span><br></pre></td></tr></table></figure><p>从输出中，可以看见卷组的使用量/总量。物理卷给卷组提供空间。只要在这个卷组中还有可用空间，就可以随意创建逻辑卷。</p><p>使用下列命令删除卷组。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vgremove volume-group1 </span></span><br></pre></td></tr></table></figure><h3 id="4、创建逻辑卷-LV"><a href="#4、创建逻辑卷-LV" class="headerlink" title="4、创建逻辑卷(LV)"></a>4、创建逻辑卷(LV)</h3><blockquote><p>下列命令创建一个名为’1v1’、大小为100MB的逻辑卷。使用小分区减少执行时间。这个逻辑卷使用之前创建的卷组的空间。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvcreate -L 100M -n lv1 volume-group1 </span></span><br></pre></td></tr></table></figure><p>逻辑卷可使用lvdisplay命令查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvdisplay</span></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Name                /dev/volume-group1/lv1</span><br><span class="line">  VG Name                volume-group1</span><br><span class="line">  LV UUID                YNQ1aa-QVt1-hEj6-ArJX-I1Q4-y1h1-OFEtlW</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Status              available</span><br><span class="line">  <span class="comment"># open                 0</span></span><br><span class="line">  LV Size                100.00 MiB</span><br><span class="line">  Current LE             25</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently <span class="built_in">set</span> to     256</span><br><span class="line">  Block device           253:2</span><br></pre></td></tr></table></figure><p>现在逻辑卷已经准备好了，可以将其格式化和挂载逻辑卷，就像其它ext2/3/4分区一样！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkfs.ext4 /dev/volume-group1/lv1</span></span><br><span class="line"><span class="comment"># mkdir /lvm-mount</span></span><br><span class="line"><span class="comment"># mount /dev/volume-group1/lv1 /lvm-mount/ </span></span><br></pre></td></tr></table></figure><p>一旦逻辑卷挂载，就可以直接到挂载点 /lvm-mount/ 上读写了。要创建和挂载其它的逻辑卷，重复这个过程。</p><p>最后，使用 lvremove 可以删除逻辑卷。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># umount /lvm-mount/</span></span><br><span class="line"><span class="comment"># lvremove /dev/volume-group1/lv1 </span></span><br></pre></td></tr></table></figure><h3 id="5、扩展一个LVM卷"><a href="#5、扩展一个LVM卷" class="headerlink" title="5、扩展一个LVM卷"></a>5、扩展一个LVM卷</h3><blockquote><p>调整逻辑卷大小的功能是LVM最有用的功能。这个部分会讨论怎样扩展一个存在的逻辑卷。下面，扩展先前创建的逻辑卷‘lv1’扩大到200MB。</p></blockquote><p>注意, 调整逻辑卷大小之后, 也需要对文件系统调整大小进行匹配。这个额外的步骤各不相同, 取决于创建文件系统的类型。在本文中, 使用’lv1’创建了ext4类型的文件系统, 所以这里的操作是针对ext4文件系统的。（ext2/3文件系统也类同）。命令的执行顺序是很重要的。</p><p>首先，先卸载掉lv1卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># umount /lvm-mount/ </span></span><br></pre></td></tr></table></figure><p>然后，设置卷的大小为200M</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvresize -L 200M /dev/volume-group1/lv1 </span></span><br></pre></td></tr></table></figure><p>接下来，检查磁盘错误</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># e2fsck -f /dev/volume-group1/lv1 </span></span><br></pre></td></tr></table></figure><p>运行以下命令扩展文件系统以后，ext4信息就更新了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># resize2fs /dev/volume-group1/lv1 </span></span><br></pre></td></tr></table></figure><p>现在，这个逻辑卷应该已经扩展到200MB了。我们检查LV的状态来验证。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvdisplay </span></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Name                /dev/volume-group1/lv1</span><br><span class="line">  VG Name                volume-group1</span><br><span class="line">  LV UUID                9RtmMY-0RIZ-Dq40-ySjU-vmrj-f1es-7rXBwa</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Status              available</span><br><span class="line">  <span class="comment"># open                 0</span></span><br><span class="line">  LV Size                200.00 MiB</span><br><span class="line">  Current LE             50</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently <span class="built_in">set</span> to     256</span><br><span class="line">  Block device           253:2</span><br></pre></td></tr></table></figure><p>现在，这个逻辑卷可以再次挂载，同样这个方法也可用于其他分区。</p><h3 id="6、缩减一个LVM卷"><a href="#6、缩减一个LVM卷" class="headerlink" title="6、缩减一个LVM卷"></a>6、缩减一个LVM卷</h3><blockquote><p>这章节介绍缩减LVM卷大小的方法。命令的顺序同样重要。并且，下列命令对ext2/3/4文件系统同样有效。</p><p>注意减少逻辑卷的大小值若小于储存的数据大小，存储在后面的数据会丢失。</p></blockquote><p>首先，卸载掉卷。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># umount /dev/volume-group1/lv1</span></span><br><span class="line">然后，检测磁盘错误。</span><br><span class="line"><span class="comment"># e2fsck -f /dev/volume-group1/lv1 </span></span><br></pre></td></tr></table></figure><p>接下来缩小文件系统，更新ext4信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># resize2fs /dev/volume-group1/lv1 100M </span></span><br></pre></td></tr></table></figure><p>完成以后，减少逻辑卷大小</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvresize -L 100M /dev/volume-group1/lv1</span></span><br><span class="line"></span><br><span class="line">WARNING: Reducing active logical volume to 100.00 MiB THIS MAY DESTROY YOUR DATA (filesystem etc.) Do you really want to reduce lv1? [y/n]: y Reducing logical volume lv1 to 100.00 MiB Logical volume lv1 successfully resized</span><br></pre></td></tr></table></figure><p>最后，验证调整后的逻辑卷大小。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lvdisplay </span></span><br><span class="line">--- Logical volume ---</span><br><span class="line">  LV Name                /dev/volume-group1/lv1</span><br><span class="line">  VG Name                volume-group1</span><br><span class="line">  LV UUID                9RtmMY-0RIZ-Dq40-ySjU-vmrj-f1es-7rXBwa</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Status              available</span><br><span class="line">  <span class="comment"># open                 0</span></span><br><span class="line">  LV Size                100.00 MiB</span><br><span class="line">  Current LE             25</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently <span class="built_in">set</span> to     256</span><br><span class="line">  Block device           253:2</span><br></pre></td></tr></table></figure><h3 id="7、扩展一个卷组"><a href="#7、扩展一个卷组" class="headerlink" title="7、扩展一个卷组"></a>7、扩展一个卷组</h3><blockquote><p>本节将讨论扩展卷组的方法，将一个物理卷添加到卷组。先假设卷组’volume-group1’已经满了，需要扩大。手上的硬盘（sdb）已经没有其他空闲分区，后面又添加了另外一个硬盘（sdc）。将看到如何把sdc的分区添加到卷组以扩展。</p></blockquote><p>检测现在卷组状态</p><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># vgdisplay volume-group1 </span><br><span class="line"> --- Volume group ---</span><br><span class="line">  VG <span class="keyword">Name</span>               volume-group1</span><br><span class="line">  System ID</span><br><span class="line">  <span class="keyword">Format</span>                lvm2</span><br><span class="line">  Metadata Areas        <span class="number">3</span></span><br><span class="line">  Metadata <span class="keyword">Sequence</span> No  <span class="number">8</span></span><br><span class="line">  VG <span class="keyword">Access</span>             read/<span class="built_in">write</span></span><br><span class="line">  VG <span class="keyword">Status</span>             resizable</span><br><span class="line">  <span class="built_in">MAX</span> LV                <span class="number">0</span></span><br><span class="line">  Cur LV                <span class="number">1</span></span><br><span class="line">  Open LV               <span class="number">0</span></span><br><span class="line">  <span class="built_in">Max</span> PV                <span class="number">0</span></span><br><span class="line">  Cur PV                <span class="number">3</span></span><br><span class="line">  Act PV                <span class="number">3</span></span><br><span class="line">  VG <span class="built_in">Size</span>               <span class="number">3.02</span> GiB</span><br><span class="line">  PE <span class="built_in">Size</span>               <span class="number">4.00</span> MiB</span><br><span class="line">  Total PE              <span class="number">774</span></span><br><span class="line">  Alloc PE / <span class="built_in">Size</span>       <span class="number">25</span> / <span class="number">100.00</span> MiB</span><br><span class="line">  <span class="keyword">Free</span>  PE / <span class="built_in">Size</span>       <span class="number">749</span> / <span class="number">2.93</span> GiB</span><br><span class="line">  VG UUID               bwd2pS-fkAz-lGVZ-qc7C-TaKv-fFUC-IzGNBK</span><br></pre></td></tr></table></figure><p>首先，创建一个2GB分区sdc1，类型为LVM（8e），如教程前所述。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fdisk /dev/sdc </span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">p</span><br><span class="line">Partition number (1-4): 1</span><br><span class="line">First cylinder (1-1044, default 1):</span><br><span class="line">Using default value 1</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-1044, default 1044): +2G</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (<span class="built_in">type</span> L to list codes): 8e</span><br><span class="line">Changed system <span class="built_in">type</span> of partition 1 to 8e (Linux LVM)</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br></pre></td></tr></table></figure><p>然后在创建一个物理卷 /dev/sdc1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvcreate /dev/sdc1 </span></span><br></pre></td></tr></table></figure><p>现在，物理卷已经准备好了，可以简单地将它增加到已存在的卷组’volume-group1’上。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vgextend volume-group1 /dev/sdc1 </span></span><br></pre></td></tr></table></figure><p>使用vgdisplay来验证（可以看到卷组大小已经增大）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vgdisplay </span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               volume-group1</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        4</span><br><span class="line">  Metadata Sequence No  9</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                1</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                4</span><br><span class="line">  Act PV                4</span><br><span class="line">  VG Size               5.03 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              1287</span><br><span class="line">  Alloc PE / Size       25 / 100.00 MiB</span><br><span class="line">  Free  PE / Size       1262 / 4.93 GiB</span><br><span class="line">  VG UUID               bwd2pS-fkAz-lGVZ-qc7C-TaKv-fFUC-IzGNBK</span><br></pre></td></tr></table></figure><p>注意，尽管使用的是一个单独的磁盘做示范，其实只要是‘8e’类型的磁盘分区都可以用来扩展卷组。</p><p>总结一下，LVM是一个非常给力的工具，用来创建和管理可变大小的分区。本文中已经介绍了动态分区如何在LVM中创建和使用。也介绍了扩展/缩小逻辑卷和卷组的方法，和如何增加一个新的磁盘到LVM。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jumpserver</title>
      <link href="/2021/07/26/Jumpserver/"/>
      <url>/2021/07/26/Jumpserver/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Jumpserver堡垒机"><a href="#Jumpserver堡垒机" class="headerlink" title="Jumpserver堡垒机"></a>Jumpserver堡垒机</h1><blockquote><p><a href="https://docs.jumpserver.org/zh/master/"><strong>JumpServer 官方详细文档</strong></a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>跳板机就是一台服务器，开发或运维人员在维护过程中首先要统一登录到这台服务器，然后再登录到目标设备进行维护和操作。</p><p>跳板机缺点：没有实现对运维人员操作行为的控制和审计，使用跳板机的过程中还是会出现误操作、违规操作导致的事故，一旦出现操作事故很难快速定位到原因和责任人。</p><p>堡垒机，即在一个特定的网络环境下，为了保障网络和数据不受来自外部和内部用户的入侵和破坏，而运用各种技术手段实时收集和监控网络环境中每一个组成部分的系统状态、安全事件、网络活动，以便集中报警、及时处理及审计定责。</p><p><strong>堡垒机比跳板机多了实时收集、监控网络环境、集中报警等功能</strong>。</p><h2 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h2><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/008i3skNly1gsug59795yj31j90u0wi2.jpg" alt="!界面展示"></p><h2 id="特色优势"><a href="#特色优势" class="headerlink" title="特色优势"></a>特色优势</h2><ul><li>开源: 零门槛，线上快速获取和安装；</li><li>分布式: 轻松支持大规模并发访问；</li><li>无插件: 仅需浏览器，极致的 Web Terminal 使用体验；</li><li>多云支持: 一套系统，同时管理不同云上面的资产；</li><li>云端存储: 审计录像云端存储，永不丢失；</li><li>多租户: 一套系统，多个子公司和部门同时使用；</li><li>多应用支持: 数据库，Windows远程应用，Kubernetes。</li></ul><h2 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h2><table><thead><tr><th>身份认证 Authentication</th><th>登录认证</th><th>资源统一登录与认证</th></tr></thead><tbody><tr><td>LDAP/AD 认证</td><td></td><td></td></tr><tr><td>RADIUS 认证</td><td></td><td></td></tr><tr><td>OpenID 认证（实现单点登录）</td><td></td><td></td></tr><tr><td>CAS 认证 （实现单点登录）</td><td></td><td></td></tr><tr><td>钉钉认证 （扫码登录）</td><td></td><td></td></tr><tr><td>企业微信认证 （扫码登录）</td><td></td><td></td></tr><tr><td>MFA认证</td><td>MFA 二次认证（Google Authenticator）</td><td></td></tr><tr><td>RADIUS 二次认证</td><td></td><td></td></tr><tr><td>登录复核</td><td>用户登录行为受管理员的监管与控制</td><td></td></tr><tr><td>登录限制</td><td>用户登录来源 IP 受管理员控制（支持黑/白名单）</td><td></td></tr><tr><td>账号管理 Account</td><td>集中账号</td><td>管理用户管理</td></tr><tr><td>系统用户管理</td><td></td><td></td></tr><tr><td>统一密码</td><td>资产密码托管</td><td></td></tr><tr><td>自动生成密码</td><td></td><td></td></tr><tr><td>自动推送密码</td><td></td><td></td></tr><tr><td>密码过期设置</td><td></td><td></td></tr><tr><td>批量改密</td><td>定期批量改密</td><td></td></tr><tr><td>多种密码策略</td><td></td><td></td></tr><tr><td>多云纳管</td><td>对私有云、公有云资产自动统一纳管</td><td></td></tr><tr><td>收集用户</td><td>自定义任务定期收集主机用户</td><td></td></tr><tr><td>密码匣子</td><td>统一对资产主机的用户密码进行查看、更新、测试操作</td><td></td></tr><tr><td>授权控制 Authorization</td><td>多维授权</td><td>对用户、用户组、资产、资产节点、应用以及系统用户进行授权</td></tr><tr><td>资产授权</td><td>资产以树状结构进行展示</td><td></td></tr><tr><td>资产和节点均可灵活授权</td><td></td><td></td></tr><tr><td>节点内资产自动继承授权</td><td></td><td></td></tr><tr><td>子节点自动继承父节点授权</td><td></td><td></td></tr><tr><td>应用授权</td><td>实现更细粒度的应用级授权</td><td></td></tr><tr><td>MySQL 数据库应用、RemoteApp 远程应用</td><td></td><td></td></tr><tr><td>动作授权</td><td>实现对授权资产的文件上传、下载以及连接动作的控制</td><td></td></tr><tr><td>时间授权</td><td>实现对授权资源使用时间段的限制</td><td></td></tr><tr><td>特权指令</td><td>实现对特权指令的使用（支持黑白名单）</td><td></td></tr><tr><td>命令过滤</td><td>实现对授权系统用户所执行的命令进行控制</td><td></td></tr><tr><td>文件传输</td><td>SFTP 文件上传/下载</td><td></td></tr><tr><td>文件管理</td><td>实现 Web SFTP 文件管理</td><td></td></tr><tr><td>工单管理</td><td>支持对用户登录请求行为进行控制</td><td></td></tr><tr><td>访问控制</td><td>登录资产复核（通过 SSH/Telnet 协议登录资产）</td><td></td></tr><tr><td>命令执行复核</td><td></td><td></td></tr><tr><td>组织管理</td><td>实现多租户管理与权限隔离</td><td></td></tr><tr><td>安全审计 Audit</td><td>操作审计</td><td>用户操作行为审计</td></tr><tr><td>会话审计</td><td>在线会话内容监控</td><td></td></tr><tr><td>在线会话内容审计</td><td></td><td></td></tr><tr><td>历史会话内容审计</td><td></td><td></td></tr><tr><td>录像审计</td><td>支持对 Linux、Windows 等资产操作的录像进行回放审计</td><td></td></tr><tr><td>支持对 RemoteApp、MySQL 等应用操作的录像进行回放审计</td><td></td><td></td></tr><tr><td>指令审计</td><td>支持对资产和应用等操作的命令进行审计</td><td></td></tr><tr><td>文件传输</td><td>可对文件的上传、下载记录进行审计</td><td></td></tr><tr><td>数据库审计 Database</td><td>连接方式</td><td>命令方式</td></tr><tr><td>Web UI方式</td><td></td><td></td></tr><tr><td>支持的数据库</td><td>MySQL</td><td></td></tr><tr><td>Oracle</td><td></td><td></td></tr><tr><td>MariaDB</td><td></td><td></td></tr><tr><td>PostgreSQL</td><td></td><td></td></tr><tr><td>功能亮点</td><td>语法高亮</td><td></td></tr><tr><td>SQL格式化</td><td></td><td></td></tr><tr><td>支持快捷键</td><td></td><td></td></tr><tr><td>支持选中执行</td><td></td><td></td></tr><tr><td>SQL历史查询</td><td></td><td></td></tr><tr><td>支持页面创建 DB, TABLE</td><td></td><td></td></tr><tr><td>会话审计</td><td>命令记录</td><td></td></tr><tr><td>录像回放</td><td></td><td></td></tr></tbody></table><h2 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h2><ul><li>Jumpserver 对外需要开放 80 443 和 2222 端口</li><li>JumpServer 所在服务器操作系统应该升级到最新</li><li>JumpServer 依赖的软件升级到最新版本</li><li>服务器、数据库、redis 等依赖组件请勿使用弱口令密码</li><li>不推荐关闭 firewalld 和 selinux</li><li>只开放必要的端口，必要的话请通过 vpn 或者 sslvpn 访问 JumpServer</li><li>如果必须开放到外网使用，你应该部署 web 应用防火墙做安全过滤</li><li>请部署 ssl 证书通过 https 协议来访问 JumpServer</li><li>JumpServer 不要使用弱口令密码，应立即改掉默认的 admin 密码</li><li>推荐开启 MFA 功能，避免因密码泄露导致的安全问题</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><blockquote><p>两种方式：自动部署 和 手动部署 </p></blockquote><h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认会安装到 /opt/jumpserver-installer-v2.12.1 目录</span></span><br><span class="line">curl -sSL https://github.com/jumpserver/jumpserver/releases/download/v2.12.1/quick_start.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line"><span class="comment"># 安装完成后配置文件 /opt/jumpserver/config/config.txt</span></span><br><span class="line"><span class="built_in">cd</span> /opt/jumpserver-installer-v2.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">./jmsctl.sh down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">./jmsctl.sh uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line">./jmsctl.sh -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装</span></span><br><span class="line">./jmsctl.sh uninstall</span><br><span class="line">./jmsctl.sh install</span><br></pre></td></tr></table></figure><h3 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://github.com/jumpserver/installer/releases/download/v2.12.1/jumpserver-installer-v2.12.1.tar.gz</span><br><span class="line">tar -xf jumpserver-installer-v2.12.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> jumpserver-installer-v2.12.1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据需要修改配置文件模板, 如果不清楚用途可以跳过修改</span></span><br><span class="line">cat config-example.txt</span><br><span class="line"><span class="comment"># 以下设置如果为空系统会自动生成随机字符串填入</span></span><br><span class="line"><span class="comment">## 迁移请修改 SECRET_KEY 和 BOOTSTRAP_TOKEN 为原来的设置</span></span><br><span class="line"><span class="comment">## 完整参数文档 https://docs.jumpserver.org/zh/master/admin-guide/env/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装配置, amd64 默认使用华为云加速下载, arm64 请注释掉 DOCKER_IMAGE_PREFIX=swr.cn-south-1.myhuaweicloud.com</span></span><br><span class="line"><span class="comment"># DOCKER_IMAGE_PREFIX=swr.cn-south-1.myhuaweicloud.com</span></span><br><span class="line">VOLUME_DIR=/opt/jumpserver</span><br><span class="line">DOCKER_DIR=/var/lib/docker</span><br><span class="line">SECRET_KEY=</span><br><span class="line">BOOTSTRAP_TOKEN=</span><br><span class="line">LOG_LEVEL=ERROR</span><br><span class="line"></span><br><span class="line"><span class="comment">##  MySQL 配置, USE_EXTERNAL_MYSQL=1 表示使用外置数据库, 请输入正确的 MySQL 信息</span></span><br><span class="line">USE_EXTERNAL_MYSQL=0</span><br><span class="line">DB_HOST=mysql</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASSWORD=</span><br><span class="line">DB_NAME=jumpserver</span><br><span class="line"></span><br><span class="line"><span class="comment">##  Redis 配置, USE_EXTERNAL_REDIS=1 表示使用外置数据库, 请输入正确的 Redis 信息</span></span><br><span class="line">USE_EXTERNAL_REDIS=0</span><br><span class="line">REDIS_HOST=redis</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line">REDIS_PASSWORD=</span><br><span class="line"></span><br><span class="line"><span class="comment">## Compose 项目设置, 如果 192.168.250.0/24 网段与你现有网段冲突, 请修改然后重启 JumpServer</span></span><br><span class="line">COMPOSE_PROJECT_NAME=jms</span><br><span class="line">COMPOSE_HTTP_TIMEOUT=3600</span><br><span class="line">DOCKER_CLIENT_TIMEOUT=3600</span><br><span class="line">DOCKER_SUBNET=192.168.250.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment">## IPV6 设置, 容器是否开启 ipv6 nat, USE_IPV6=1 表示开启, 为 0 的情况下 DOCKER_SUBNET_IPV6 定义不生效</span></span><br><span class="line">USE_IPV6=0</span><br><span class="line">DOCKER_SUBNET_IPV6=2001:db8:10::/64</span><br><span class="line"></span><br><span class="line"><span class="comment">## Nginx 配置, USE_LB=1 表示开启, 为 0 的情况下, HTTPS_PORT 定义不生效</span></span><br><span class="line">HTTP_PORT=80</span><br><span class="line">SSH_PORT=2222</span><br><span class="line">RDP_PORT=3389</span><br><span class="line"></span><br><span class="line">USE_LB=0</span><br><span class="line">HTTPS_PORT=443</span><br><span class="line"></span><br><span class="line"><span class="comment">## Task 配置, 是否启动 jms_celery 容器, 单节点必须开启</span></span><br><span class="line">USE_TASK=1</span><br><span class="line"></span><br><span class="line"><span class="comment">## XPack, USE_XPACK=1 表示开启, 开源版本设置无效</span></span><br><span class="line">USE_XPACK=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Core 配置, Session 定义, SESSION_COOKIE_AGE 表示闲置多少秒后 session 过期, SESSION_EXPIRE_AT_BROWSER_CLOSE=true 表示关闭浏览器即 session 过期</span></span><br><span class="line"><span class="comment"># SESSION_COOKIE_AGE=86400</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Koko Lion XRDP 组件配置</span></span><br><span class="line">CORE_HOST=http://core:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 额外的配置</span></span><br><span class="line">CURRENT_VERSION=</span><br><span class="line"></span><br><span class="line">./jmsctl.sh install</span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用方式</span></span><br><span class="line"><span class="built_in">cd</span> /opt/jumpserver-installer-v2.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">./jmsctl.sh down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">./jmsctl.sh uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line">./jmsctl.sh -h</span><br></pre></td></tr></table></figure><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><blockquote><p><strong>必须要设置的两个地方：基本设置 和 邮件设置</strong></p><p><strong>以下操作均在 Web 页面完成，请使用 admin 用户登陆，默认密码 admin</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装完毕后的相关信息</span></span><br><span class="line">&gt;&gt;&gt; The Installation is Complete</span><br><span class="line">1. You can use the following <span class="built_in">command</span> to start, and <span class="keyword">then</span> visit</span><br><span class="line"><span class="built_in">cd</span> /opt/jumpserver-installer-v2.12.1</span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line">2. Other management commands</span><br><span class="line">./jmsctl.sh stop</span><br><span class="line">./jmsctl.sh restart</span><br><span class="line">./jmsctl.sh backup</span><br><span class="line">./jmsctl.sh upgrade</span><br><span class="line">For more commands, you can enter ./jmsctl.sh --<span class="built_in">help</span> to understand</span><br><span class="line"></span><br><span class="line">3. Web access</span><br><span class="line">http://192.168.245.11:80</span><br><span class="line">Default username: admin  Default password: admin</span><br><span class="line"></span><br><span class="line">4. SSH/SFTP access</span><br><span class="line">ssh -p2222 admin@192.168.245.11</span><br><span class="line">sftp -P2222 admin@192.168.245.11</span><br><span class="line"></span><br><span class="line">5. More information</span><br><span class="line">Offical Website: https://www.jumpserver.org/</span><br><span class="line">Documentation: https://docs.jumpserver.org/</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/008i3skNly1gsugs9ijpsj31dg0hedgj.jpg" alt="image-20210726170450138"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/008i3skNly1gsugs88ucyj31dg0jqdgl.jpg" alt="image-20210726170519423"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/008i3skNly1gsugs5lnklj31nv0u00wa.jpg" alt="image-20210726171158346"></p><h3 id="1-1-基本设置"><a href="#1-1-基本设置" class="headerlink" title="1.1 基本设置"></a>1.1 基本设置</h3><table><thead><tr><th align="left">名称</th><th align="left">示例</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">当前站点URL</td><td align="left"><a href="https://demo.jumpserver.org/">https://demo.jumpserver.org</a></td><td align="left">不设置的话，邮件收到的地址为 <code>http://localhost</code></td></tr><tr><td align="left">用户向导URL</td><td align="left"></td><td align="left">用户首次登陆可以看到此 <code>超链接</code>，可以不设置</td></tr><tr><td align="left">忘记密码URL</td><td align="left"></td><td align="left">使用了 LDAP, OPENID 等外部认证系统，可以自定义</td></tr></tbody></table><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/008i3skNly1gsugu71c79j31nk0ran0d.jpg" alt="image-20210726171355450"></p><h3 id="1-2-邮件设置"><a href="#1-2-邮件设置" class="headerlink" title="1.2 邮件设置"></a>1.2 邮件设置</h3><blockquote><p>必须设置才能使用与邮件相关的功能；不可以同时勾选 <code>使用SSL</code> 和 <code>使用TLS</code> ！</p></blockquote><table><thead><tr><th align="left">名称</th><th align="left">示例</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">SMTP主机</td><td align="left">smtp.qq.com</td><td align="left">服务商提供的 smtp 服务器</td></tr><tr><td align="left">SMTP端口</td><td align="left">25</td><td align="left">通常是 <code>25</code></td></tr><tr><td align="left">SMTP账号</td><td align="left"><a href="mailto:296015668@qq.com">296015668@qq.com</a></td><td align="left">通常是 <code>user@domain.com</code></td></tr><tr><td align="left">SMTP密码</td><td align="left">****************</td><td align="left">每次 <code>测试连接</code> 都需要重新输入密码</td></tr><tr><td align="left">使用SSL</td><td align="left">[ ]</td><td align="left">如果端口使用 <code>465</code>，必须勾选此项</td></tr><tr><td align="left">使用TLS</td><td align="left">[ ]</td><td align="left">如果端口使用 <code>587</code>，必须勾选此项</td></tr><tr><td align="left">发件人</td><td align="left"><a href="mailto:296015668@qq.com">296015668@qq.com</a></td><td align="left"><code>测试连接</code> 必须要输入</td></tr><tr><td align="left">主题前缀</td><td align="left">[JMS]</td><td align="left">邮件的标题，收到的邮件是 <code>[JMS]</code> 开头</td></tr><tr><td align="left">测试收件人</td><td align="left"><a href="mailto:296015668@qq.com">296015668@qq.com</a></td><td align="left">测试连接必填</td></tr></tbody></table><h2 id="资产管理"><a href="#资产管理" class="headerlink" title="资产管理"></a>资产管理</h2><blockquote><p><strong>准备两个测试资产和一个数据库来验证功能</strong></p></blockquote><table><thead><tr><th align="left">IP</th><th align="left">Host name</th><th align="left">Port</th><th align="left">System</th><th align="left">Admin User</th><th align="left">Password</th></tr></thead><tbody><tr><td align="left">172.16.80.11</td><td align="left">test_ssh01</td><td align="left">22</td><td align="left">Centos 7</td><td align="left">root</td><td align="left">Test2020.L</td></tr><tr><td align="left">172.16.80.21</td><td align="left">test_rdp01</td><td align="left">3389</td><td align="left">Windows 10</td><td align="left">administrator</td><td align="left">Test2020.W</td></tr><tr><td align="left">172.16.80.31</td><td align="left">test_mysql01</td><td align="left">3306</td><td align="left">MySQL 5</td><td align="left">root</td><td align="left">Test2020.M</td></tr></tbody></table><ul><li><strong>Windows 资产先进行</strong> <a href="https://docs.jumpserver.org/zh/master/admin-guide/assets/windows_ssh/">Windows SSH 设置</a></li><li><strong>MySQL 应用需要授权 core 和 koko 的远程访问的权限</strong> <a href="https://docs.jumpserver.org/zh/master/admin-guide/app/mysql/">MySQL 应用要求</a></li></ul><h3 id="1-1-编辑资产树"><a href="#1-1-编辑资产树" class="headerlink" title="1.1 编辑资产树"></a>1.1 编辑资产树</h3><blockquote><p><strong>根节点 Default 不能重名, 右击节点可以添加、删除和重命名节点, 以及进行资产相关的操作</strong></p></blockquote><p><strong>说明</strong></p><ul><li>点击页面左侧的 <code>资产管理</code> - <code>资产列表</code></li><li>先在根节点 <code>Default</code> 右键新建 <code>SSH Server</code> 和 <code>RDP Server</code> 两个节点</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Defaule</span><br><span class="line">├─ SSH Server</span><br><span class="line">└─ RDP Server</span><br></pre></td></tr></table></figure><h3 id="1-2-创建特权用户"><a href="#1-2-创建特权用户" class="headerlink" title="1.2 创建特权用户"></a>1.2 创建特权用户</h3><blockquote><p><strong>点击页面左侧的</strong> <code>资产管理</code> <strong>-</strong> <code>系统用户</code> <strong>-</strong> <code>创建特权用户</code> <strong>创建两个特权用户, 特权用户的内容就是上面表单的</strong> <code>Admin User</code> <strong>和</strong> <code>Password</code>。</p><p><strong>名称不能重名, 密码或者密钥二选一即可, 一些资产不允许通过 密码 认证可以改用 私钥 认证</strong></p></blockquote><table><thead><tr><th align="left">表单</th><th align="left">SSH 特权用户示例</th><th align="left">RDP 特权用户示例</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">172.16.80.11_root</td><td align="left">172.16.80.21_administrator</td></tr><tr><td align="left">用户名</td><td align="left">root</td><td align="left">administrator</td></tr><tr><td align="left">密码</td><td align="left">Test2020.L</td><td align="left">Test2020.W</td></tr><tr><td align="left">SSH密钥</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">备注</td><td align="left">SSH 资产特权用户</td><td align="left">RDP 资产特权用户</td></tr></tbody></table><h3 id="1-3-创建资产"><a href="#1-3-创建资产" class="headerlink" title="1.3 创建资产"></a>1.3 创建资产</h3><blockquote><p><strong>点击页面左侧的</strong> <code>资产管理</code> <strong>-</strong> <code>资产列表</code> <strong>-</strong> <code>创建资产</code> <strong>把两个资产导入</strong>。</p><p><strong>主机名不能重名！</strong></p></blockquote><table><thead><tr><th align="left">表单</th><th align="left">SSH 资产示例</th><th align="left">RDP 资产示例</th></tr></thead><tbody><tr><td align="left">主机名</td><td align="left">test_ssh01</td><td align="left">test_rdp01</td></tr><tr><td align="left">IP(域名)</td><td align="left">172.16.80.11</td><td align="left">172.16.80.21</td></tr><tr><td align="left">系统平台</td><td align="left">Linux</td><td align="left">Windows</td></tr><tr><td align="left">公网IP</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">网域</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">协议组</td><td align="left">ssh 22</td><td align="left">rdp 3389 / ssh 22</td></tr><tr><td align="left">特权用户</td><td align="left">172.16.80.11_root</td><td align="left">172.16.80.21_administrator</td></tr><tr><td align="left">节点</td><td align="left">Default / SSH Server</td><td align="left">Default / RDP Server</td></tr></tbody></table><p><strong>创建 Windows 资产, 注意协议组我们需要选择</strong> <code>ssh</code> <strong>和</strong> <code>rdp</code><strong>, 否则无法获取 Windows 资产的状态及硬件信息；</strong></p><p><strong>测试资产连接提示</strong></p><ol><li>资产创建信息填写好保存之后隔几秒钟时间刷新一下网页, <code>ssh</code> 协议资产的可连接图标会显示 <code>绿色</code>, 且 <code>硬件信息</code> 会显示出来</li><li>如果 <code>可连接</code> 的图标是 <code>黄色</code> 或者 <code>红色</code> , 可以点击 <code>资产</code> 的 <code>名称</code>，在右侧 <code>快速修改</code> - <code>测试可连接性</code> 点击 <code>测试</code> 按钮, 根据错误提示处理</li><li>被连接 <code>Linux</code> 资产需要 <code>python</code> 组件, 且版本大于等于 <code>2.6</code>, <code>Ubuntu</code> 等资产默认不允许 <code>root</code> 用户远程 <code>ssh</code> 登录, 请自行处理, <code>Windows</code> 资产需要手动安装 <code>OpenSSH Server</code></li><li>如果资产不能正常连接, 请检查 特权用户 的 <code>用户名</code> 和 <code>密码</code> 是否正确以及该 <code>特权用户</code> 是否能使用 <code>SSH</code> 从 <code>JumpServer</code> 主机正确登录到资产主机上</li></ol><h4 id="1-3-1-创建数据库应用"><a href="#1-3-1-创建数据库应用" class="headerlink" title="1.3.1 创建数据库应用"></a>1.3.1 创建数据库应用</h4><blockquote><p><strong>击页面左侧的</strong> <code>应用管理</code> <strong>-</strong> <code>数据库应用</code> <strong>-</strong> <code>创建数据库应用</code> <strong>创建 mysql 数据库</strong></p></blockquote><table><thead><tr><th align="left">表单</th><th align="left">MySQL 资产示例</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">test_mysql01</td></tr><tr><td align="left">类型</td><td align="left">MySQL</td></tr><tr><td align="left">主机</td><td align="left">172.16.80.31</td></tr><tr><td align="left">端口</td><td align="left">3306</td></tr><tr><td align="left">数据库</td><td align="left"></td></tr><tr><td align="left">备注</td><td align="left">MySQL 资产</td></tr></tbody></table><p><strong>数据库 选项可以留空, 如果是某些特定用户, 只允许访问指定的数据库, 这里指定数据库名称即可。</strong></p><h3 id="1-4-创建系统用户"><a href="#1-4-创建系统用户" class="headerlink" title="1.4 创建系统用户"></a>1.4 创建系统用户</h3><table><thead><tr><th align="left">IP</th><th align="left">System</th><th align="left">System User</th><th align="left">Password</th><th align="left">Group</th><th align="left">Sudo</th><th align="left">Sftp Root</th></tr></thead><tbody><tr><td align="left">172.16.80.11</td><td align="left">Centos 7</td><td align="left">testssh01</td><td align="left">random pass</td><td align="left"></td><td align="left">ALL</td><td align="left">/</td></tr><tr><td align="left">172.16.80.21</td><td align="left">Windows 10</td><td align="left">testrdp01</td><td align="left">random pass</td><td align="left">Users</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">172.16.80.23</td><td align="left">MySQL 5</td><td align="left">root</td><td align="left">Test2020.M</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>系统用户提示</strong></p><ol><li>在理解 <code>系统用户</code> 之前, 你首先得知道系统用户是干嘛用的. 在 <code>Jumpserver</code> 中, 需要对资产不同的用途创建不同的 <code>系统用户</code></li><li>比如一个 <code>资产</code>, 开发要用、测试要用、可能还要其他的部门也要使用, 偷懒的人可能会统一给 <code>root</code> 用户, 但是这样并不安全</li><li>系统用户就是为了解决这个问题, 我们针对不同的用途创建不同的 <code>系统用户</code>, <code>Linux</code> 通过 <code>Sudo</code> 来控制用户的权限, <code>Windows</code> 通过组来控制用户权限</li></ol><p><strong>点击页面左侧的</strong> <code>资产管理</code> <strong>-</strong> <code>系统用户</code> <strong>-</strong> <code>创建普通用户</code> <strong>创建对应协议系统用户</strong></p><table><thead><tr><th align="left">表单</th><th align="left">SSH 系统用户</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">test_ssh01_测试系统用户</td></tr><tr><td align="left">协议</td><td align="left">ssh</td></tr><tr><td align="left">用户名</td><td align="left">testssh01</td></tr><tr><td align="left">动态用户名</td><td align="left"></td></tr><tr><td align="left">登录模式</td><td align="left">自动登陆</td></tr><tr><td align="left">认证方式</td><td align="left">托管密码</td></tr><tr><td align="left">自动生成</td><td align="left">√</td></tr><tr><td align="left">自动推送</td><td align="left">√</td></tr><tr><td align="left">Sudo</td><td align="left">ALL</td></tr><tr><td align="left">Shell</td><td align="left">/bin/bash</td></tr><tr><td align="left">家目录</td><td align="left"></td></tr><tr><td align="left">用户附属组</td><td align="left"></td></tr><tr><td align="left">命令过滤器</td><td align="left"></td></tr><tr><td align="left">SFTP根路径</td><td align="left">/</td></tr></tbody></table><table><thead><tr><th align="left">表单</th><th align="left">RDP 系统用户</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">test_rdp01_测试系统用户</td></tr><tr><td align="left">协议</td><td align="left">rdp</td></tr><tr><td align="left">用户名</td><td align="left">testssh01</td></tr><tr><td align="left">动态用户名</td><td align="left"></td></tr><tr><td align="left">认证方式</td><td align="left">托管密码</td></tr><tr><td align="left">自动生成</td><td align="left">√</td></tr><tr><td align="left">自动推送</td><td align="left">√</td></tr><tr><td align="left">AD域名</td><td align="left"></td></tr><tr><td align="left">自动推送</td><td align="left">√</td></tr><tr><td align="left">用户附属组</td><td align="left">Users</td></tr></tbody></table><table><thead><tr><th align="left">表单</th><th align="left">MySQL 系统用户</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">test_mysql01_测试系统用户</td></tr><tr><td align="left">认证方式</td><td align="left">托管密码</td></tr><tr><td align="left">用户名</td><td align="left">root</td></tr><tr><td align="left">协议</td><td align="left">mysql</td></tr><tr><td align="left">密码</td><td align="left">Test2020.M</td></tr></tbody></table><h2 id="创建授权规则"><a href="#创建授权规则" class="headerlink" title="创建授权规则"></a>创建授权规则</h2><h3 id="1-1-为用户分配资产"><a href="#1-1-为用户分配资产" class="headerlink" title="1.1 为用户分配资产"></a>1.1 为用户分配资产</h3><table><thead><tr><th align="left">IP</th><th align="left">System</th><th align="left">System User</th><th align="left">User</th></tr></thead><tbody><tr><td align="left">172.16.80.11</td><td align="left">Centos 7</td><td align="left">testssh01</td><td align="left">admin</td></tr><tr><td align="left">172.16.80.21</td><td align="left">Windows 10</td><td align="left">testrdp01</td><td align="left">admin</td></tr><tr><td align="left">172.16.80.31</td><td align="left">MySQL 5</td><td align="left">root</td><td align="left">admin</td></tr></tbody></table><p><strong>点击页面左侧的</strong> <code>授权管理</code> <strong>-</strong> <code>资产授权</code> <strong>-</strong> <code>创建授权规则</code> <strong>创建两个授权</strong></p><table><thead><tr><th align="left">表单</th><th align="left">SSH 资产授权</th><th align="left">RDP 资产授权</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">test_ssh01_测试授权</td><td align="left">test_rdp01_测试授权</td></tr><tr><td align="left">用户</td><td align="left">Administrator(admin)</td><td align="left">Administrator(admin)</td></tr><tr><td align="left">用户组</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">资产</td><td align="left">test_ssh01(172.16.80.11)</td><td align="left">test_rdp01(172.16.80.21)</td></tr><tr><td align="left">节点</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">系统用户</td><td align="left">test_ssh01_测试系统用户(testssh01)</td><td align="left">test_rdp01_测试系统用户(testrdp01)</td></tr><tr><td align="left">权限</td><td align="left">√ 全部</td><td align="left">√ 全部</td></tr></tbody></table><p><strong>资产授权提示</strong></p><ol><li>名称, 授权的名称, 不能重复</li><li>用户 和 用户组 二选一, 不推荐即选择 用户 又选择 用户组</li><li>资产 和 节点 二选一, 选择 节点 会包含 节点 下面的所有 资产</li><li>系统用户, 及所选的 用户 或 用户组 下的 用户 能通过该 系统用户 使用所选 节点 或者 节点 下的 资产<br>用户(组), 资产(节点), 系统用户 是一对一的关系, 所以当拥有 Linux、Windows 不同类型资产时, 应该分别给 Linux 资产和 Windows 资产创建 授权规则</li><li>一般情况下, 资产授权给用户, 节点授权给用户组, 一个授权只能选择一个系统用户</li></ol><h3 id="1-2-为用户分配数据库应用"><a href="#1-2-为用户分配数据库应用" class="headerlink" title="1.2 为用户分配数据库应用"></a>1.2 为用户分配数据库应用</h3><p><strong>点击页面左侧的</strong> <code>授权管理</code> <strong>-</strong> <code>数据库应用</code> <strong>-</strong> <code>创建授权规则</code> <strong>创建数据库授权</strong></p><table><thead><tr><th align="left">表单</th><th align="left">MySQL 资产授权</th></tr></thead><tbody><tr><td align="left">名称</td><td align="left">test_mysql01_测试授权</td></tr><tr><td align="left">用户</td><td align="left">Administrator(admin)</td></tr><tr><td align="left">用户组</td><td align="left"></td></tr><tr><td align="left">数据库应用</td><td align="left">test_mysql01</td></tr><tr><td align="left">系统用户</td><td align="left">test_mysql01_测试系统用户(root)</td></tr></tbody></table><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><p><strong>登录 JumpServer</strong></p><p>点击页面左侧的 <code>会话管理</code> - <code>Web终端</code> 用户只能看到自己被管理员授权了的 <code>资产</code> , 如果登录后无资产, 请联系管理员进行确认。</p><p><strong>连接资产</strong></p><ol><li>在我的资产点击资产右边的 <code>连接</code> 快速连接资产</li><li>也可以点击左侧栏的 <code>Web终端</code> 点击 <code>资产</code> 名字, 就连上资产了</li><li>如果显示连接 <code>超时</code>, 请参考 <code>FAQ</code> 文档进行处理</li></ol><p><strong>断开资产</strong></p><ol><li>点击页面顶部的 <code>Server</code> 按钮会弹出选个选项, 第一个断开所选的连接, 第二个断开所有连接</li><li>也可以直接点资产小窗口的 X , <code>SSH</code> 会话也可以输入 <code>exit</code> 来退出</li><li>直接关闭页面也可以, 但是不推荐</li></ol><p><strong>文件管理</strong></p><ol><li>点击 <code>文件管理</code></li><li>先在左边选择<code>资产</code>, 目前只支持自动登录的 <code>SSH</code> 协议 <code>资产</code></li><li>也可以使用 <code>sftp</code> 方式进行 <code>文件管理</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自建ES集群CVM IO问题</title>
      <link href="/2021/07/23/%E8%87%AA%E5%BB%BAES%E9%9B%86%E7%BE%A4CVM-IO%E9%97%AE%E9%A2%98/"/>
      <url>/2021/07/23/%E8%87%AA%E5%BB%BAES%E9%9B%86%E7%BE%A4CVM-IO%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="自建ES集群CVM-IO问题"><a href="#自建ES集群CVM-IO问题" class="headerlink" title="自建ES集群CVM IO问题"></a>自建ES集群CVM IO问题</h1><h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><blockquote><p><strong>永辉自建ES集群CVM 出现IO Hang的情况，子机无法登陆，进程也无法kill掉，需要进行节点重启切换来恢复业务。</strong></p></blockquote><p><strong>问题背景：</strong>2021-05-31日客户侧TKE三台子机的io Await很高，使用的都是本地nvme盘子机，这边登陆了一台机器上面检查发现cpu使用率和io的等待时间都很大，检查进程发现有一个java程序占用了大半（ES的程序），起初步定论就是因为这个ES，把磁盘写死了，cpu负载和io等待时间一直下不去，最终导致磁盘hang死。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/UNjNnK.jpg" alt="UNjNnK"></p><p><strong>问题难点：</strong>客户侧那边已经将其ES容器副本关闭，但事实上该容器依然在node节点上正常运行，并且无法正常删除退出，后续在宿主机上找到对应的容器任务kill -9 杀掉之后，但该进程又自动拉起，且成为了僵尸进程，这边最初给客户的建议是重启node节点，彻底关闭ES的容器进程，在观察该node节点还会不会io hang，但客户还是不同意重启，想要先查清楚原因，到底是客户侧自身pod程序问题，还是我方的母机nvme本地盘问题（形成了我方怀疑客户侧代码程序有问题，客户方怀疑是我方产品或机器硬件问题的形式～～）。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/QQxqjw.jpg" alt="QQxqjw"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/itEmVo.jpg" alt="itEmVo"></p><p>后面又检查了磁盘io的情况发现await也并不高，但就是会直接导致系统hang死，继续进一步的调查。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/pX6yGU.jpg" alt="pX6yGU"></p><p>后面又和腾讯的TKE研发协助进行检查syslog是昨天 2021-05-3 07:48 的时候es落下的数据太大，引起xfs_buf崩掉，导致io hang死，所以这边觉得应该是文件系统的问题，这边是打算推荐让客户用ext4试试的，但后面据了解，客户这个集群有15个节点，配置和这三个节点都是一样的xfs，也都是nvme盘，但实际上却只有这三台节点io出了问题，另外12台机器现在也是正常的，所以客户不认同。而且现在的io 等待时间依然很大，es也停不掉。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/LfVvIO.jpg" alt="LfVvIO"></p><p>由于业务一直受到影响，这边也不好再跟客户继续扯皮，直接更换排查思路：开启kdump，当节点hang 死之后让其重启生成 vmcore 内核事件进行分析。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.安装相应依赖 sudo apt-get install linux-crashdump</span><br><span class="line">2.这个文件里面将 /etc/default/kdump-tools   将USE_KDUMP=1</span><br><span class="line">3. /etc/init.d/kdump-tools start </span><br><span class="line">4.kdump-config load</span><br><span class="line">5.重启节点生效配置 init 6</span><br><span class="line">6.检查是否生效 kdump-config  show</span><br><span class="line">7.sysctl -w kernel.hung_task_panic=1</span><br><span class="line">8.sysctl -p</span><br></pre></td></tr></table></figure><h2 id="2、问题过程及原因分析"><a href="#2、问题过程及原因分析" class="headerlink" title="2、问题过程及原因分析"></a>2、问题过程及原因分析</h2><p>1） 宕机的原因：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; bt</span><br><span class="line">PID: 134 TASK: ffff92baa433da00 CPU: 12 COMMAND: <span class="string">&quot;khungtaskd&quot;</span></span><br><span class="line"><span class="comment">#0 [ffffbbbf06783d00] machine_kexec at ffffffffa2263f53</span></span><br><span class="line"><span class="comment">#1 [ffffbbbf06783d60] __crash_kexec at ffffffffa232bff9</span></span><br><span class="line"><span class="comment">#2 [ffffbbbf06783e28] panic at ffffffffa228e070</span></span><br><span class="line"><span class="comment">#3 [ffffbbbf06783eb0] watchdog at ffffffffa235e4ce</span></span><br><span class="line"><span class="comment">#4 [ffffbbbf06783f08] kthread at ffffffffa22afe81</span></span><br><span class="line"><span class="comment">#5 [ffffbbbf06783f50] ret_from_fork at ffffffffa2c00205</span></span><br><span class="line">进程长时间处于 D 状态</span><br></pre></td></tr></table></figure><p>2）通过分析Kdump日志，系统有大量 hung task，都集中在 xfs 文件系统（其它 hung task 是由 xfs hung task 引起的连锁反应），具体信息如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3911 进程尝试获取 mutex，产生 hungtask</span></span><br><span class="line">PID: 3911 TASK: ffff92ba6ecd0000 CPU: 5 COMMAND: <span class="string">&quot;nginx-ingress-c&quot;</span></span><br><span class="line"><span class="comment">#0 [ffffbbbf08a1b350] __schedule at ffffffffa2b9c201</span></span><br><span class="line"><span class="comment">#1 [ffffbbbf08a1b3e8] schedule at ffffffffa2b9c83c</span></span><br><span class="line"><span class="comment">#2 [ffffbbbf08a1b3f8] schedule_preempt_disabled at ffffffffa2b9cb1e</span></span><br><span class="line"><span class="comment">#3 [ffffbbbf08a1b408] __mutex_lock at ffffffffa2b9e1dc</span></span><br><span class="line"><span class="comment">#4 [ffffbbbf08a1b498] __mutex_lock_slowpath at ffffffffa2b9e533</span></span><br><span class="line"><span class="comment">#5 [ffffbbbf08a1b4b8] mutex_lock at ffffffffa2b9e56f //slab 回收路径上尝试获取 mutex</span></span><br><span class="line"><span class="comment">#6 [ffffbbbf08a1b4d0] xfs_reclaim_inodes_ag at ffffffffc07567ca [xfs]</span></span><br><span class="line"><span class="comment">#7 [ffffbbbf08a1b658] xfs_reclaim_inodes_nr at ffffffffc07578d3 [xfs]</span></span><br><span class="line"><span class="comment">#8 [ffffbbbf08a1b678] xfs_fs_free_cached_objects at ffffffffc076a7b9 [xfs]</span></span><br><span class="line"><span class="comment">#9 [ffffbbbf08a1b688] super_cache_scan at ffffffffa247d005</span></span><br><span class="line"><span class="comment">#10 [ffffbbbf08a1b6e0] shrink_slab at ffffffffa23e9107</span></span><br><span class="line"><span class="comment">#11 [ffffbbbf08a1b7a0] shrink_slab at ffffffffa23e9389</span></span><br><span class="line"><span class="comment">#12 [ffffbbbf08a1b7b0] shrink_node at ffffffffa23ee33e</span></span><br><span class="line"><span class="comment">#13 [ffffbbbf08a1b838] do_try_to_free_pages at ffffffffa23ee5e9</span></span><br><span class="line"><span class="comment">#14 [ffffbbbf08a1b890] try_to_free_mem_cgroup_pages at ffffffffa23eeafa</span></span><br><span class="line"><span class="comment">#15 [ffffbbbf08a1b910] try_charge at ffffffffa2462a51</span></span><br><span class="line"><span class="comment">#16 [ffffbbbf08a1b9a8] mem_cgroup_try_charge at ffffffffa2467883</span></span><br><span class="line"><span class="comment">#17 [ffffbbbf08a1b9e8] __add_to_page_cache_locked at ffffffffa23d0a28</span></span><br><span class="line"><span class="comment">#18 [ffffbbbf08a1ba40] add_to_page_cache_lru at ffffffffa23d0c5e</span></span><br><span class="line"><span class="comment">#19 [ffffbbbf08a1ba78] ext4_mpage_readpages at ffffffffa2549606</span></span><br><span class="line"><span class="comment">#20 [ffffbbbf08a1bb68] ext4_readpages at ffffffffa25282f3</span></span><br><span class="line"><span class="comment">#21 [ffffbbbf08a1bb78] __do_page_cache_readahead at ffffffffa23e2cc9</span></span><br><span class="line"><span class="comment">#22 [ffffbbbf08a1bc48] filemap_fault at ffffffffa23d249d</span></span><br><span class="line"><span class="comment">#23 [ffffbbbf08a1bd10] ext4_filemap_fault at ffffffffa25330e1</span></span><br><span class="line"><span class="comment">#24 [ffffbbbf08a1bd30] __do_fault at ffffffffa240d564</span></span><br><span class="line"><span class="comment">#25 [ffffbbbf08a1bd58] handle_pte_fault at ffffffffa241262a</span></span><br><span class="line"><span class="comment">#26 [ffffbbbf08a1bdb0] __handle_mm_fault at ffffffffa2413178</span></span><br><span class="line"><span class="comment">#27 [ffffbbbf08a1be58] handle_mm_fault at ffffffffa2413371</span></span><br><span class="line"><span class="comment">#28 [ffffbbbf08a1be90] __do_page_fault at ffffffffa2275aa0</span></span><br><span class="line"><span class="comment">#29 [ffffbbbf08a1bf08] do_page_fault at ffffffffa2275d4e</span></span><br><span class="line"><span class="comment">#30 [ffffbbbf08a1bf38] do_async_page_fault at ffffffffa226c4d1</span></span><br><span class="line"><span class="comment">#31 [ffffbbbf08a1bf50] async_page_fault at ffffffffa2c01635</span></span><br><span class="line"><span class="comment">#3911 进程等待的锁，被 13528 持有， 13528 一直未唤醒</span></span><br><span class="line">PID: 13528 TASK: ffff92a6cbb35a00 CPU: 3 COMMAND: <span class="string">&quot;elasticsearch[s&quot;</span></span><br><span class="line"><span class="comment">#0 [ffffbbbf10c07330] __schedule at ffffffffa2b9c201</span></span><br><span class="line"><span class="comment">#1 [ffffbbbf10c073c8] schedule at ffffffffa2b9c83c</span></span><br><span class="line"><span class="comment">#2 [ffffbbbf10c073d8] schedule_timeout at ffffffffa2ba07af</span></span><br><span class="line"><span class="comment">#3 [ffffbbbf10c07458] wait_for_completion at ffffffffa2b9d3aa</span></span><br><span class="line"><span class="comment">#4 [ffffbbbf10c074b0] flush_work at ffffffffa22a9ae6 //提交工作队列， 等待完成</span></span><br><span class="line"><span class="comment">#5 [ffffbbbf10c07530] xlog_cil_force_lsn at ffffffffc077593b [xfs]</span></span><br><span class="line"><span class="comment">#6 [ffffbbbf10c075c8] _xfs_log_force_lsn at ffffffffc0773b64 [xfs]</span></span><br><span class="line"><span class="comment">#7 [ffffbbbf10c07648] xfs_log_force_lsn at ffffffffc0773e54 [xfs]</span></span><br><span class="line"><span class="comment">#8 [ffffbbbf10c07680] __xfs_iunpin_wait at ffffffffc075f7f2 [xfs]</span></span><br><span class="line"><span class="comment">#9 [ffffbbbf10c076f8] xfs_iunpin_wait at ffffffffc07629aa [xfs]</span></span><br><span class="line"><span class="comment">#10 [ffffbbbf10c07708] xfs_reclaim_inode at ffffffffc0756212 [xfs]</span></span><br><span class="line"><span class="comment">#11 [ffffbbbf10c07758] xfs_reclaim_inodes_ag at ffffffffc07566e6 [xfs]</span></span><br><span class="line"><span class="comment">#12 [ffffbbbf10c078e0] xfs_reclaim_inodes_nr at ffffffffc07578d3 [xfs]</span></span><br><span class="line"><span class="comment">#13 [ffffbbbf10c07900] xfs_fs_free_cached_objects at ffffffffc076a7b9 [xfs]</span></span><br><span class="line"><span class="comment">#14 [ffffbbbf10c07910] super_cache_scan at ffffffffa247d005</span></span><br><span class="line"><span class="comment">#15 [ffffbbbf10c07968] shrink_slab at ffffffffa23e9107</span></span><br><span class="line"><span class="comment">#16 [ffffbbbf10c07a28] shrink_slab at ffffffffa23e9389</span></span><br><span class="line"><span class="comment">#17 [ffffbbbf10c07a38] shrink_node at ffffffffa23ee33e</span></span><br><span class="line"><span class="comment">#18 [ffffbbbf10c07ac0] do_try_to_free_pages at ffffffffa23ee5e9</span></span><br><span class="line"><span class="comment">#19 [ffffbbbf10c07b18] try_to_free_mem_cgroup_pages at ffffffffa23eeafa</span></span><br><span class="line"><span class="comment">#20 [ffffbbbf10c07b98] try_charge at ffffffffa2462a51</span></span><br><span class="line"><span class="comment">#21 [ffffbbbf10c07c30] memcg_kmem_charge_memcg at ffffffffa2466fec</span></span><br><span class="line"><span class="comment">#22 [ffffbbbf10c07c70] memcg_kmem_charge at ffffffffa24670de</span></span><br><span class="line"><span class="comment">#23 [ffffbbbf10c07ca8] __alloc_pages_nodemask at ffffffffa23dcd5b</span></span><br><span class="line"><span class="comment">#24 [ffffbbbf10c07d10] alloc_pages_current at ffffffffa243b26a</span></span><br><span class="line"><span class="comment">#25 [ffffbbbf10c07d40] pte_alloc_one at ffffffffa227bc97</span></span><br><span class="line"><span class="comment">#26 [ffffbbbf10c07d58] handle_pte_fault at ffffffffa24129d1</span></span><br><span class="line"><span class="comment">#27 [ffffbbbf10c07db0] __handle_mm_fault at ffffffffa2413178</span></span><br><span class="line"><span class="comment">#28 [ffffbbbf10c07e58] handle_mm_fault at ffffffffa2413371</span></span><br><span class="line"><span class="comment">#29 [ffffbbbf10c07e90] __do_page_fault at ffffffffa2275aa0</span></span><br><span class="line"><span class="comment">#30 [ffffbbbf10c07f08] do_page_fault at ffffffffa2275d4e</span></span><br><span class="line"><span class="comment">#31 [ffffbbbf10c07f38] do_async_page_fault at ffffffffa226c4d1</span></span><br><span class="line"><span class="comment">#32 [ffffbbbf10c07f50] async_page_fault at ffffffffa2c01635</span></span><br><span class="line">PID: 13197 TASK: ffff92ba97878000 CPU: 14 COMMAND: <span class="string">&quot;kworker/14:1&quot;</span></span><br><span class="line"><span class="comment">#0 [ffffbbbf16157900] __schedule at ffffffffa2b9c201</span></span><br><span class="line"><span class="comment">#1 [ffffbbbf16157998] schedule at ffffffffa2b9c83c</span></span><br><span class="line"><span class="comment">#2 [ffffbbbf161579a8] io_schedule at ffffffffa22bd566</span></span><br><span class="line"><span class="comment">#3 [ffffbbbf161579c0] wbt_wait at ffffffffa268c3f7 //IO 卡在 wbt_wait 长时间不完成</span></span><br><span class="line"><span class="comment">#4 [ffffbbbf16157a50] blk_mq_make_request at ffffffffa26644d0</span></span><br><span class="line"><span class="comment">#5 [ffffbbbf16157ad8] generic_make_request at ffffffffa2657714</span></span><br><span class="line"><span class="comment">#6 [ffffbbbf16157b38] submit_bio at ffffffffa2657963</span></span><br><span class="line"><span class="comment">#7 [ffffbbbf16157b88] _xfs_buf_ioapply at ffffffffc0749eee [xfs]</span></span><br><span class="line"><span class="comment">#8 [ffffbbbf16157c48] xfs_buf_submit at ffffffffc074ba85 [xfs]</span></span><br><span class="line"><span class="comment">#9 [ffffbbbf16157c88] xlog_bdstrat at ffffffffc07709bb [xfs]</span></span><br><span class="line"><span class="comment">#10 [ffffbbbf16157ca8] xlog_sync at ffffffffc07726b1 [xfs]</span></span><br><span class="line"><span class="comment">#11 [ffffbbbf16157cf0] xlog_state_release_iclog at ffffffffc077280c [xfs]</span></span><br><span class="line"><span class="comment">#12 [ffffbbbf16157d18] xlog_write at ffffffffc07732f5 [xfs]</span></span><br><span class="line"><span class="comment">#13 [ffffbbbf16157db0] xlog_cil_push at ffffffffc0774f97 [xfs]</span></span><br><span class="line"><span class="comment">#14 [ffffbbbf16157e70] xlog_cil_push_work at ffffffffc0775115 [xfs]</span></span><br><span class="line"><span class="comment">#15 [ffffbbbf16157e80] process_one_work at ffffffffa22a901e</span></span><br><span class="line"><span class="comment">#16 [ffffbbbf16157ec8] worker_thread at ffffffffa22a9282</span></span><br><span class="line"><span class="comment">#17 [ffffbbbf16157f08] kthread at ffffffffa22afe81</span></span><br><span class="line"><span class="comment">#18 [ffffbbbf16157f50] ret_from_fork at ffffffffa2c00205</span></span><br><span class="line">PID: 12130 TASK: ffff92ba96d0bc00 CPU: 13 COMMAND: <span class="string">&quot;kworker/u40:4&quot;</span></span><br><span class="line"><span class="comment">#0 [ffffbbbf0f22b630] __schedule at ffffffffa2b9c201</span></span><br><span class="line"><span class="comment">#1 [ffffbbbf0f22b6c8] schedule at ffffffffa2b9c83c</span></span><br><span class="line"><span class="comment">#2 [ffffbbbf0f22b6d8] io_schedule at ffffffffa22bd566</span></span><br><span class="line"><span class="comment">#3 [ffffbbbf0f22b6f0] wbt_wait at ffffffffa268c3f7</span></span><br><span class="line"><span class="comment">#4 [ffffbbbf0f22b780] blk_mq_make_request at ffffffffa26644d0</span></span><br><span class="line"><span class="comment">#5 [ffffbbbf0f22b808] generic_make_request at ffffffffa2657714</span></span><br><span class="line"><span class="comment">#6 [ffffbbbf0f22b868] submit_bio at ffffffffa2657963</span></span><br><span class="line"><span class="comment">#7 [ffffbbbf0f22b8c0] xfs_add_to_ioend at ffffffffc0743b17 [xfs]</span></span><br><span class="line"><span class="comment">#8 [ffffbbbf0f22b900] xfs_do_writepage at ffffffffc07443e6 [xfs]</span></span><br><span class="line"><span class="comment">#9 [ffffbbbf0f22b9a8] write_cache_pages at ffffffffa23e147c</span></span><br><span class="line"><span class="comment">#10 [ffffbbbf0f22bac0] xfs_vm_writepages at ffffffffc07440be [xfs]</span></span><br><span class="line"><span class="comment">#11 [ffffbbbf0f22bb38] do_writepages at ffffffffa23e22ab</span></span><br><span class="line"><span class="comment">#12 [ffffbbbf0f22bbb8] __writeback_single_inode at ffffffffa24ac315</span></span><br><span class="line"><span class="comment">#13 [ffffbbbf0f22bc18] writeback_sb_inodes at ffffffffa24acaa1</span></span><br><span class="line"><span class="comment">#14 [ffffbbbf0f22bcf0] __writeback_inodes_wb at ffffffffa24ace37</span></span><br><span class="line"><span class="comment">#15 [ffffbbbf0f22bd38] wb_writeback at ffffffffa24ad1d1</span></span><br><span class="line"><span class="comment">#16 [ffffbbbf0f22bdd8] wb_workfn at ffffffffa24ad96b</span></span><br><span class="line"><span class="comment">#17 [ffffbbbf0f22be80] process_one_work at ffffffffa22a901e</span></span><br><span class="line"><span class="comment">#18 [ffffbbbf0f22bec8] worker_thread at ffffffffa22a9282</span></span><br><span class="line"><span class="comment">#19 [ffffbbbf0f22bf08] kthread at ffffffffa22afe81</span></span><br><span class="line">从系统 dump 日志看， Linux 内核内部 bug 导致 IO 无法下发，引起 hung task</span><br></pre></td></tr></table></figure><p>3）同时发现linux社区中也有类似的bug报告：</p><p>Kernel Bug 报告</p><p><a href="https://patchwork.kernel.org/project/linux-block/patch/20180814155749.28912-1-ming.lei@redhat.com/">blk-wbt: fix IO hang in wbt_wait() - Patchwork</a></p><p><a href="https://marc.info/?l=linux-block&amp;m=153221542021033&amp;w=2">https://marc.info/?l=linux-block&amp;m=153221542021033&amp;w=2</a></p><p>Ubuntu 报告</p><p><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1805693">Bug #1805693 “User reports a hang on 18.04 LTS(4.15.18) under a …” : Bugs : linux package : Ubuntu</a></p><p>社区在 4.15 内核后续也修复了多个 wbt 的缺陷， 可通过 git log block/blk-wbt.c 查看。</p><p>4）与永辉团队确认，之前ucloud上面使用的是4.19版本，而当前容器化部署的使用的是4.15内核版本，其中4.19内核修复了wbt的bug：</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/2LCIhM.jpg" alt="2LCIhM"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/G9VaA0.jpg" alt="G9VaA0"></p><h2 id="3、问题原因"><a href="#3、问题原因" class="headerlink" title="3、问题原因"></a>3、问题原因</h2><p>Linux 内核 bug 导致 IO 无法下发，引起 hung task </p><h2 id="4、规避建议"><a href="#4、规避建议" class="headerlink" title="4、规避建议"></a>4、规避建议</h2><blockquote><p><strong>建议使用之前业务已经大量使用的稳定版本内核，或最新的 ubuntu 内核</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一步：检查安装的内核版本</span><br><span class="line">要发现当前系统安装的版本</span><br><span class="line">$ uname -sr</span><br><span class="line"></span><br><span class="line">第二步：升级ubuntu内核</span><br><span class="line">打开 http://kernel.ubuntu.com/~kernel-ppa/mainline/ 并选择列表中需要的版本，根据系统架构下载 .deb 文件：</span><br><span class="line">对于 64 位系统：</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/xxxx</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/xxxx</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/xxxx</span><br><span class="line"></span><br><span class="line">下载完成这些所有内核文件后，如下安装：</span><br><span class="line"></span><br><span class="line">$ sudo dpkg -i *.deb</span><br><span class="line">安装完成后，重启并验证新的内核是否已经被使用：<span class="variable">$uname</span>-sr</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vnstat流量监控器</title>
      <link href="/2021/07/23/Vnstat%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7%E5%99%A8/"/>
      <url>/2021/07/23/Vnstat%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="vnstat-流量监控器"><a href="#vnstat-流量监控器" class="headerlink" title="vnstat 流量监控器"></a>vnstat 流量监控器</h1><blockquote><p>vnstat是一个基于控制台的网络流量监控器。它保存了所选接口的每小时、每天和每月的网络流量日志。然而，它并不是一个数据包嗅探器，而是从proc(5)或sys文件系统中读取流量信息。流量信息是从proc(5)或sys文件系统中读取的，具体取决于是否可用。这样一来，即使没有root权限也可以在大多数系统上使用vnstat。</p></blockquote><h2 id="语法参数"><a href="#语法参数" class="headerlink" title="语法参数"></a>语法参数</h2><p><strong>语法格式：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnstat [参数]</span><br></pre></td></tr></table></figure><p><strong>常用参数：</strong></p><table><thead><tr><th>-q</th><th>查询数据</th></tr></thead><tbody><tr><td>-i</td><td>选择网卡 (默认: eth0)</td></tr><tr><td>-l</td><td>显示实时流量</td></tr><tr><td>-m</td><td>按月份</td></tr><tr><td>-d</td><td>按天</td></tr><tr><td>-u</td><td>更新数据库</td></tr></tbody></table><h2 id="安装-vnstat"><a href="#安装-vnstat" class="headerlink" title="安装 vnstat"></a>安装 vnstat</h2><blockquote><p>centos 需要先安装 epel 源后才能使用 yum 来安装</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install -y vnstat</span><br></pre></td></tr></table></figure><h2 id="创建监控数据库"><a href="#创建监控数据库" class="headerlink" title="创建监控数据库"></a>创建监控数据库</h2><blockquote><p>必须先建立网卡的数据库，才能使用。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vnstat -u -i &lt;网卡设备&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现如下报错：权限的问题导致</span></span><br><span class="line">Error: Unable to <span class="built_in">read</span> database <span class="string">&quot;/var/lib/vnstat/ens34&quot;</span>.</span><br><span class="line">Info: -&gt; A new database has been created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决办法：chmod -R 777 /var/lib/vnstat/&lt;网卡设备&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vnstat</span><br><span class="line">systemctl <span class="built_in">enable</span> vnstat</span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p><strong>预览</strong></p><p>estimated 是预估使用量的意思。最后一列 avg. rate 是平均使用带宽。 rx 是接收流量（ inbound ）， tx 是发送流量（ outbound ）</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/D40kiT.jpg" alt="D40kiT"></p><p><strong>查询eth1网卡流量：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vnstat</span> -u -i eth<span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>查看当前实时流量：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vnstat -l</span></span><br></pre></td></tr></table></figure><p><strong>查看当天流量：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vnstat -d</span></span><br></pre></td></tr></table></figure><p><strong>查看当月流量：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vnstat -m</span></span><br></pre></td></tr></table></figure><p>PS 一些按量计费的云主机商是不提供单台机器流量的使用情况的，可以通过自己安装 vnStat 的方法对比账单上的流量费用了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用网络工具</title>
      <link href="/2021/07/23/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/07/23/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Linux-常用网络工具"><a href="#Linux-常用网络工具" class="headerlink" title="Linux 常用网络工具"></a>Linux 常用网络工具</h1><blockquote><p>网络和监控命令类似于这些： hostname, ping, ifconfig, iwconfig, netstat, nslookup, traceroute, finger, telnet, ethtool 用于查看 linux 服务器 ip 地址，管理服务器网络配置，通过 telnet 和 ethernet 建立与 linux 之间的网络链接，查看 linux 的服务器信息等。下面让我们看看在 Linux 下的网络和监控命令的使用。</p></blockquote><h2 id="一、ping"><a href="#一、ping" class="headerlink" title="一、ping"></a>一、ping</h2><blockquote><p>ping 将数据包发向用户指定地址。当包被接收，目标机器发送返回数据包。</p></blockquote><p><strong>主要有两个作用：</strong></p><ul><li>用来确认网络连接是畅通的。</li><li>用来查看连接的速度信息。</li></ul><p>如果 ping <a href="http://www.baidu.com/">www.baidu.com</a> 它将返回它的 ip 地址 。你可以通过 ctrl+C 来停止命令。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/7wwuJY.jpg" alt="7wwuJY"></p><p>补充：-c 参数可以定义 ping 的次数，脚本中的网络判断用得比较多，比如 ping -c 4 <a href="http://www.baidu.com就是/">www.baidu.com就是</a> ping 百度四次；而在 windows 下，则使用-n 参数来定义 ping 次数，如 ping -n 4 <a href="http://www.baidu.com/">www.baidu.com</a></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/6nYq0G.jpg" alt="6nYq0G"></p><h2 id="二、ifconfig"><a href="#二、ifconfig" class="headerlink" title="二、ifconfig"></a>二、ifconfig</h2><blockquote><p>查看用户网络配置。它显示当前网络设备配置。对于需要接收或者发送数据错误查找，这个工具极为好用。</p></blockquote><p>ifconfig 列出当前节点的所有网络设备</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/vpQfo7.jpg" alt="vpQfo7"></p><p>列出指定的网卡信息</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/vBcj89.jpg" alt="vBcj89"></p><p><strong>Ps 在Windows下 用的 ipconfig</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/PehFAC.jpg" alt="PehFAC"></p><h2 id="三、telnet"><a href="#三、telnet" class="headerlink" title="三、telnet"></a>三、telnet</h2><blockquote><p>通过 telnet 协议连接目标主机，如果 telnet 连接可以在任一端口上完成即代表着两台主机间的连接良好。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet hostname port – 使用指定的端口 telnet 主机名。这通常用来测试主机是否在线或者网络是否正常。</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/fFkXYW.jpg" alt="fFkXYW"></p><p><strong>Ps 此命令在 Windows 下同样适用。</strong></p><h2 id="四、ethtool"><a href="#四、ethtool" class="headerlink" title="四、ethtool"></a>四、ethtool</h2><blockquote><p>ethtool 允许你查看和更改网卡的许多设置（不包括 Wi-Fi 网卡）。你可以管理许多高级设置，包括 tx/rx、校验及网络唤醒功能。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ethtool -i &lt;网卡设备&gt;    <span class="comment"># 显示一个特定网卡的驱动信息，检查软件兼容性时尤其有用</span></span><br><span class="line"></span><br><span class="line">ethtool -p  &lt;网卡设备&gt;   <span class="comment"># 启动一个适配器的指定行为，比如让适配器的 LED 灯闪烁，以帮助你在多个适配器或接口中标识接口名称</span></span><br></pre></td></tr></table></figure><h2 id="五、nslookup"><a href="#五、nslookup" class="headerlink" title="五、nslookup"></a>五、nslookup</h2><blockquote><p>查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。</p></blockquote><p><strong>主要是下面的几个用法：</strong></p><h3 id="1、直接查询域名情况"><a href="#1、直接查询域名情况" class="headerlink" title="1、直接查询域名情况"></a>1、直接查询域名情况</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：nslookup domain [dns-server]  <span class="comment"># 如果没有指定dns服务器，就采用系统默认的dns服务器。</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/tVvU5s.jpg" alt="tVvU5s"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/MbRqco.jpg" alt="MbRqco"></p><h3 id="2、查询其他记录类型"><a href="#2、查询其他记录类型" class="headerlink" title="2、查询其他记录类型"></a>2、查询其他记录类型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">格式：nslookup -qt = type domain [dns-server]</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">    A --&gt;地址记录</span><br><span class="line">    AAAA   --&gt;地址记录</span><br><span class="line">    AFSDB Andrew    --&gt;文件系统数据库服务器记录</span><br><span class="line">    ATMA --&gt;ATM地址记录</span><br><span class="line">    CNAME   --&gt;别名记录</span><br><span class="line">    HINHO  --&gt;硬件配置记录，包括CPU、操作系统信息 </span><br><span class="line">    ISDN   --&gt;域名对应的ISDN号码</span><br><span class="line">    MB   --&gt;存放指定邮箱的服务器</span><br><span class="line">    MG    --&gt;邮件组记录</span><br><span class="line">    MINFO   --&gt;邮件组和邮箱的信息记录</span><br><span class="line">    MR   --&gt;改名的邮箱记录</span><br><span class="line">    MX   --&gt;邮件服务器记录</span><br><span class="line">    NS  --&gt; 名字服务器记录</span><br><span class="line">    PTR    -&gt;反向记录</span><br><span class="line">    RP    --&gt;负责人记录</span><br><span class="line">    RT  --&gt;路由穿透记录</span><br><span class="line">    SRV    --&gt;TCP服务器信息记录</span><br><span class="line">    TXT   --&gt;域名对应的文本信息</span><br><span class="line">    X25  --&gt;域名对应的X.25地址记录</span><br></pre></td></tr></table></figure><h2 id="六、route"><a href="#六、route" class="headerlink" title="六、route"></a>六、route</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><blockquote><p><strong>route命令用于显示和操作IP路由表。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。</strong></p></blockquote><p>在Linux系统中, 设置路由通常是 为了解决以下问题：该Linux系统在一个局域网中, 局域网中有一个网关, 能够让机器访问Internet，那么就需要将这台机器的IP地址设置为 Linux机器的默认路由。</p><p>要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；要想永久保存，可以保存到配置文件。</p><p><strong>linux 默认只支持一条默认路由，当重新启动网口时，会把其他默认路由去掉，只剩下一条该网口生成的默认路由。当然可以通过 route 命令手动添加多条默认路由，如果多条路由一样，则选择最开始找到的路由(排在前面的路由)。</strong></p><h3 id="2、route命令详解"><a href="#2、route命令详解" class="headerlink" title="2、route命令详解"></a>2、route命令详解</h3><h4 id="2-1-命令格式"><a href="#2-1-命令格式" class="headerlink" title="2.1 命令格式"></a>2.1 命令格式</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">route [-CFvnee]</span><br><span class="line"> </span><br><span class="line">route [-v] [-A family] add [-net|-host] target [netmask Nm] [gw Gw] [metric N] </span><br><span class="line">      [mss M] [window W] [irtt I] [reject] [mod] [dyn] [reinstate] [[dev] If]</span><br><span class="line">route [-v] [-A family] del [-net|-host] target [gw Gw] [netmask Nm] [metric N] [[dev] If]</span><br><span class="line">route [-V] [--version] [-h] [--<span class="built_in">help</span>]</span><br></pre></td></tr></table></figure><h4 id="2-2-常用选项参数"><a href="#2-2-常用选项参数" class="headerlink" title="2.2 常用选项参数"></a>2.2 常用选项参数</h4><blockquote><p><strong>选项</strong></p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-C</td><td>显示路由缓存</td></tr><tr><td>-F</td><td>显示发送信息</td></tr><tr><td>-v</td><td>显示详细的处理信息</td></tr><tr><td><strong>-n</strong></td><td>不解析名字</td></tr><tr><td>-ee</td><td>使用更详细的资讯来显示</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td><strong>-net</strong></td><td>到一个网络的路由表</td></tr><tr><td><strong>-host</strong></td><td>到一个主机的路由表</td></tr></tbody></table><blockquote><p><strong>参数</strong></p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><strong>add</strong></td><td>增加路由记录</td></tr><tr><td><strong>del</strong></td><td>删除路由记录</td></tr><tr><td>target</td><td>目的网络或目的主机</td></tr><tr><td>gw</td><td>设置默认网关。gateway 的简写，后续接的是 IP 的数值</td></tr><tr><td>mss</td><td>设置TCP的最大区块长度（MSS），单位MB</td></tr><tr><td>window</td><td>指定通过路由表的TCP连接的TCP窗口大小</td></tr><tr><td>de</td><td>如果只是要指定由那一块网路卡连线出去，则使用这个设定，后面接 eth0 等</td></tr><tr><td><strong>reject</strong></td><td>设置到指定网络为不可达，避免在连接到这个网络的地址时程序过长时间的等待，直接就知道该网络不可达</td></tr></tbody></table><h4 id="2-3-常用命令格式"><a href="#2-3-常用命令格式" class="headerlink" title="2.3 常用命令格式"></a>2.3 常用命令格式</h4><blockquote><p><strong>添加和删除路由</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">route &#123;add | del &#125; [-net|-host] [网域或主机] netmask [mask] [gw|dev]</span><br><span class="line"> </span><br><span class="line">增加 (add) 与删除 (del) 路由的相关参数：</span><br><span class="line">(a) -net ：表示后面接的路由为一个网域。</span><br><span class="line">(b) -host ：表示后面接的为连接到单部主机的路由。</span><br><span class="line">(c) netmask ：与网域有关，可以设定 netmask 决定网域的大小。</span><br><span class="line">(d) gw ：gateway 的简写，后续接的是 IP 的数值，与 dev 不同。</span><br><span class="line">(e) dev ：如果只是要指定由那一块网路卡连线出去，则使用这个设定，后面接 eth0 等。</span><br></pre></td></tr></table></figure><blockquote><p><strong>查询路由信息</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">route -nee</span><br><span class="line"></span><br><span class="line">(a) -n：不要使用通讯协定或主机名称，直接使用 IP 或 port number。</span><br><span class="line">(b) -ee：使用更详细的资讯来显示。</span><br></pre></td></tr></table></figure><blockquote><p><strong>添加/删除默认网关路由</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">route &#123;add | del &#125; default gw &#123;IP-ADDRESS&#125; &#123;INTERFACE-NAME&#125;</span><br><span class="line"></span><br><span class="line">(a) IP-ADDRESS：用于指定路由器（网关）的IP地址。</span><br><span class="line">(b) INTERFACE-NAME：用于指定接口名称，如eth0。</span><br><span class="line"></span><br><span class="line">例1：route add default gw 192.168.1.1 eth0</span><br><span class="line">例2：route del default gw 192.168.1.1 eth0</span><br></pre></td></tr></table></figure><blockquote><p><strong>添加/删除到指定网络的路由规则</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route &#123;add | del &#125; -net &#123;NETWORK-ADDRESS&#125; netmask &#123;NETMASK&#125; dev &#123;INTERFACE-NAME&#125;(a) NETWORK-ADDRESS：用于指定网络地址。(b) NETMASK：用于指定子网掩码。(c) INTERFACE-NAME：用于指定接口名称，如eth0。例1：route add -net 192.168.1.0 netmask 255.255.255.0 dev eth0例2：route del -net 192.168.1.0 netmask 255.255.255.0 dev eth0</span><br></pre></td></tr></table></figure><blockquote><p><strong>添加/删除路由到指定网络为不可达</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置到指定网络为不可达，避免在连接到这个网络的地址时程序过长时间的等待，直接就知道该网络不可达。</span></span><br><span class="line">route &#123;add | del &#125; -net &#123;NETWORK-ADDRESS&#125; netmask &#123;NETMASK&#125; reject</span><br><span class="line"></span><br><span class="line">(a) NETWORK-ADDRESS：用于指定网络地址。</span><br><span class="line">(b) NETMASK：用于指定子网掩码。</span><br><span class="line"></span><br><span class="line">例1：route add -net 10.0.0.0 netmask 255.0.0.0 reject</span><br><span class="line">例2：route del -net 10.0.0.0 netmask 255.0.0.0 reject</span><br></pre></td></tr></table></figure><h4 id="2-4-输出详解"><a href="#2-4-输出详解" class="headerlink" title="2.4 输出详解"></a>2.4 输出详解</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 ens32</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里会发现后两个169.254.0.0的路由，这个地址原来是windows下的机器dhcp获取ip失效的时候,预设的一个ip地址段，可能是linux照搬来了吧.其实那个地址存在也无所谓,不能在互联网上用的，过修改/etc/sysconfig/network,在文件结尾添加</span></span><br><span class="line">NOZEROCONF=yes重启网络服务就行了</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Destination</td><td>目标网络或目标主机。Destination 为 default（0.0.0.0）时，表示这个是默认网关，所有数据都发到这个网关</td></tr><tr><td>Gateway</td><td>网关地址，0.0.0.0 表示当前记录对应的 Destination 跟本机在同一个网段，通信时不需要经过网关。如果没有就显示星号(*)</td></tr><tr><td>Genmask</td><td>Destination字段的网络掩码, Destination 是主机时需要设为 255.255.255.255, 是默认路由时会设置为 0.0.0.0</td></tr><tr><td>Flags</td><td><strong>标记：</strong>【<strong>U</strong> 该路由可以使用】，【<strong>R</strong> 恢复动态路由产生的表项】，【<strong>D</strong> 该路由是由改变路由（redirect）报文创建的】，【<strong>M</strong> 该路由已被改变路由报文修改】，【**!** 这个路由将不会被接受】，【<strong>G</strong> 该路由是到一个网关 (路由器)。如果没有设置该标志，说明目的地 是直接相连的】</td></tr><tr><td>Metric</td><td>路由距离，到达指定网络所需的中转数，是大型局域网和广域网设置所必需的</td></tr><tr><td>Ref</td><td>路由项引用次数</td></tr><tr><td>Use</td><td>此路由项被路由软件查找的次数</td></tr><tr><td>Iface</td><td>网卡名字，例如 ens32</td></tr></tbody></table><h3 id="3、实例分析"><a href="#3、实例分析" class="headerlink" title="3、实例分析"></a>3、实例分析</h3><h4 id="3-1-路由选择分析"><a href="#3-1-路由选择分析" class="headerlink" title="3.1 路由选择分析"></a>3.1 路由选择分析</h4><blockquote><p>当TCP/IP需要向某个IP地址发起通信时，它会对路由表进行评估，以确定如何发送数据包。评估过程如下：</p></blockquote><p>(1) TCP/IP使用需要通信的目的IP地址和<strong>路由表中每一个路由项的网络掩码进行相与计算，如果相与后的结果匹配对应路由项的网络地址，则记录下此路由项。</strong></p><p>(2) 当计算完路由表中所有的路由项后：</p><ul><li>TCP/IP选择记录下的路由项中的<strong>最长匹配路由</strong>（网络掩码中具有最多 “1” 位的路由项）来和此目的IP地址进行通信。</li><li>如果存在多个最长匹配路由，那么选择<strong>具有最低跃点数的路由项。</strong></li><li>如果存在多个具有最低跃点数的最长匹配路由，那么：均根据最长匹配路由所对应的网络接口在<strong>网络连接的高级设置中的绑定优先级来决定(一般有线(eth0) &gt; 无线 (wlan0) &gt; 移动信号(4G))。</strong></li><li><strong>如果优先级一致，则选择最开始找到的最长匹配路由。(排在前面的路由)</strong></li></ul><h4 id="3-2-验证分析"><a href="#3-2-验证分析" class="headerlink" title="3.2 验证分析"></a>3.2 验证分析</h4><p>(1) 验证：traceroute <a href="http://www.baidu.com/">www.baidu.com</a></p><blockquote><p>通过路由表可以知道这个数据包到底是在那个路由网关出去的，我这里显示的是1.1这个路由网关出去的</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.125), 30 hops max, 60 byte packets</span><br><span class="line"> 1  192.168.1.1 (192.168.1.1)  0.886 ms  1.509 ms  1.547 ms</span><br><span class="line"> </span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br></pre></td></tr></table></figure><p>(2) 删除1.1这个路由网关，验证这个数据包还能否出去</p><blockquote><p>重新添加路由后，我们通过路由表可以知道有两条相同默认路由可以选择，由于先找到192.168.1.1 网关路由，所以最后选择了 192.168.1.1 网关。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line">[root@host01 ~]<span class="comment"># </span></span><br><span class="line">[root@host01 ~]<span class="comment"># route del default gw 192.168.1.1</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.121), 30 hops max, 60 byte packets</span><br><span class="line">connect: 网络不可达</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># route add default gw 192.168.1.1</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.121), 30 hops max, 60 byte packets</span><br><span class="line"> 1  192.168.1.1 (192.168.1.1)  0.937 ms  1.955 ms  1.907 ms</span><br></pre></td></tr></table></figure><h4 id="3-3-添加和删除路由"><a href="#3-3-添加和删除路由" class="headerlink" title="3.3 添加和删除路由"></a>3.3 添加和删除路由</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line">[root@host01 ~]<span class="comment"># </span></span><br><span class="line">[root@host01 ~]<span class="comment"># route del default gw 192.168.1.1</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.121), 30 hops max, 60 byte packets</span><br><span class="line">connect: 网络不可达</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># route add default gw 192.168.1.1</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.121), 30 hops max, 60 byte packets</span><br><span class="line"> 1  192.168.1.1 (192.168.1.1)  0.937 ms  1.955 ms  1.907 ms</span><br></pre></td></tr></table></figure><h4 id="3-4-默认路由网关"><a href="#3-4-默认路由网关" class="headerlink" title="3.4 默认路由网关"></a>3.4 默认路由网关</h4><blockquote><p>增加默认路由的方法！而且网关只要有一个就够了！</p><p><strong>注意：添加网关的前提是你必须有这个网段，如果没有，时添加不了的！</strong>示例如下：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为我没有3.0网段，所以添加网关的时候系统会提示网络不可达</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route add default gw 192.168.3.1</span></span><br><span class="line">SIOCADDRT: 网络不可达</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line">[root@host01 ~]<span class="comment"># </span></span><br><span class="line">[root@host01 ~]<span class="comment"># route del default gw 192.168.1.1</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.121), 30 hops max, 60 byte packets</span><br><span class="line">connect: 网络不可达</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># route add default gw 192.168.1.1</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># traceroute www.baidu.com</span></span><br><span class="line">traceroute to www.baidu.com (61.135.169.121), 30 hops max, 60 byte packets</span><br><span class="line"> 1  192.168.1.1 (192.168.1.1)  0.937 ms  1.955 ms  1.907 ms</span><br></pre></td></tr></table></figure><h4 id="3-5-添加带metric的路由"><a href="#3-5-添加带metric的路由" class="headerlink" title="3.5 添加带metric的路由"></a>3.5 添加带metric的路由</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># route add default gw 192.168.2.222 dev ens32 metric 99</span></span><br><span class="line">[root@host01 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 ens34</span><br><span class="line">0.0.0.0         192.168.2.222   0.0.0.0         UG    99     0        0 ens32</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens34</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens32</span><br></pre></td></tr></table></figure><h2 id="七、tcpdump"><a href="#七、tcpdump" class="headerlink" title="七、tcpdump"></a>七、tcpdump</h2><blockquote><p>用简单的话来定义tcpdump，就是：dump the traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p></blockquote><h3 id="1、语法选项"><a href="#1、语法选项" class="headerlink" title="1、语法选项"></a>1、语法选项</h3><p><strong>语法</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump [-adeflnNOpqStvx][-c&lt;数据包数目&gt;][-dd][-ddd][-F&lt;表达文件&gt;][-i&lt;网络界面&gt;][-r&lt;数据包文件&gt;][-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][输出数据栏位]</span><br></pre></td></tr></table></figure><p><strong>选项</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>尝试将网络和广播地址转换成名称。</td></tr><tr><td>-A</td><td>以ASCII格式打印出所有分组，并将链路层的头最小化。</td></tr><tr><td>-c &lt;数据包数目&gt;</td><td>收到指定的数据包数目后，就停止进行倾倒操作。</td></tr><tr><td>-d</td><td>把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。</td></tr><tr><td>-dd</td><td>把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。</td></tr><tr><td>-ddd</td><td>把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。</td></tr><tr><td>-e</td><td>在输出行打印出数据链路层的头部信息，包括源mac和目的mac，以及网络层的协议；</td></tr><tr><td>-f</td><td>用数字显示网际网络地址。</td></tr><tr><td>-F &lt;表达文件&gt;</td><td>指定内含表达方式的文件。</td></tr><tr><td>-i  &lt;网络界面&gt;</td><td>使用指定的网络截面送出数据包。</td></tr><tr><td>-l</td><td>使用标准输出列的缓冲区。</td></tr><tr><td>-nn</td><td>将每个监听到的数据包中的域名转换成IP、端口从应用名称转换成端口号后显示。(-n 不把网络地址转换成名字)</td></tr><tr><td>-N</td><td>不列出域名。</td></tr><tr><td>-O</td><td>不将数据包编码最佳化。</td></tr><tr><td>-p</td><td>不让网络界面进入混杂模式。</td></tr><tr><td>-q</td><td>快速输出，仅列出少数的传输协议信息。</td></tr><tr><td>-r &lt;数据包文件&gt;</td><td>从指定的文件读取数据包数据。</td></tr><tr><td>-s &lt;数据包大小&gt;</td><td>设置每个数据包的大小, 0表示包不截断, 抓完整的数据包。默认的话 tcpdump 只显示部分数据包, 默认68字节。</td></tr><tr><td>-S</td><td>用绝对而非相对数值列出TCP关联数。</td></tr><tr><td>-t</td><td>在每列倾倒资料上不显示时间戳记。</td></tr><tr><td>-tt</td><td>在每列倾倒资料上显示未经格式化的时间戳记。</td></tr><tr><td>-T &lt;数据包类型&gt;</td><td>强制将表达方式所指定的数据包转译成设置的数据包类型。</td></tr><tr><td>-v</td><td>详细显示指令执行过程。（一般使用 -vv 更详细显示指令执行过程。）</td></tr><tr><td>-X</td><td>把协议头和包内容都原原本本的显示出来（tcpdump会以16进制和ASCII的形式显示）。</td></tr><tr><td>-w &lt;数据包文件&gt;</td><td>直接将包写入文件中，并不分析和打印出来。</td></tr></tbody></table><h3 id="2、条件表达式"><a href="#2、条件表达式" class="headerlink" title="2、条件表达式"></a>2、条件表达式</h3><blockquote><p>该表达式用于决定哪些数据包将被打印。如果不给定条件表达式，网络上所有被捕获的包都会被打印。否则，只有满足条件表达式的数据包被打印.(nt: all packets, 可理解为，所有被指定接口捕获的数据包)。</p><p>表达式由一个或多个表达元组成(nt：primitive，表达元，可理解为组成表达式的基本元素)。一个表达元通常由一个或多个修饰符(qualifiers)后跟一个名字或数字表示的id组成(nt：即 qualifiers id )。有三种不同类型的修饰符：type、dir以及 proto。</p></blockquote><p><strong>type   修饰符指定id 所代表的对象类型, id可以是名字也可以是数字.</strong> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可选的对象类型有: host, net, port 以及portrange(nt: host 表明id是主机, net 表明id是网络, port 表明id是端口，而portrange 表明id 是一个端口范围);</span><br><span class="line"></span><br><span class="line">如, <span class="string">&#x27;host foo&#x27;</span>, <span class="string">&#x27;net 128.3&#x27;</span>, <span class="string">&#x27;port 20&#x27;</span>, <span class="string">&#x27;portrange 6000-6008&#x27;</span>(nt: 分别表示主机 foo,网络 128.3, 端口 20, 端口范围 6000-6008).;</span><br><span class="line"></span><br><span class="line">如果不指定<span class="built_in">type</span> 修饰符, id默认的修饰符为host;</span><br></pre></td></tr></table></figure><p><strong>dir   修饰符描述id 所对应的传输方向, 即发往id 还是从id 接收（nt: 而id 到底指什么需要看其前面的type 修饰符）。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可取的方向为: src, dst, src or dst, src and dst.(nt:分别表示, id是传输源, id是传输目的, id是传输源或者传输目的, id是传输源并且是传输目的);</span><br><span class="line"></span><br><span class="line">例如, <span class="string">&#x27;src foo&#x27;</span>,<span class="string">&#x27;dst net 128.3&#x27;</span>, <span class="string">&#x27;src or dst port ftp-data&#x27;</span>.(nt: 分别表示符合条件的数据包中, 源主机是foo, 目的网络是128.3, 源或目的端口为 ftp-data);</span><br><span class="line"></span><br><span class="line">如果不指定dir修饰符, id 默认的修饰符为src or dst;</span><br></pre></td></tr></table></figure><p><strong>proto   修饰符描述id 所属的协议. 可选的协议有: ether, fddi, tr, wlan, ip, ip6, arp, rarp, decnet, tcp以及 upd.</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(nt | rt: ether, fddi, tr, 具体含义未知, 需补充. 可理解为物理以太网传输协议, 光纤分布数据网传输协议,以及用于路由跟踪的协议;</span><br><span class="line"></span><br><span class="line">wlan, 无线局域网协议; ip,ip6 即通常的TCP/IP协议栈中所使用的ipv4以及ipv6网络层协议;</span><br><span class="line"></span><br><span class="line">arp, rarp 即地址解析协议,反向地址解析协议; </span><br><span class="line"></span><br><span class="line">decnet, Digital Equipment Corporation开发的, 最早用于PDP-11 机器互联的网络协议; </span><br><span class="line"></span><br><span class="line">tcp and udp, 即通常TCP/IP协议栈中的两个传输层协议);</span><br></pre></td></tr></table></figure><p><strong>表达式顺序：proto  &gt; dir &gt; type</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对于修饰符后跟id 的格式，可理解为 <span class="built_in">type</span> id 是对包最基本的过滤条件：即对包相关的主机，网络，端口的限制；dir 表示对包的传送方向的限制；proto表示对包相关的协议限制</span><br><span class="line"></span><br><span class="line">表达元之间还可以通过关键字and，or 以及 not 进行连接，从而可组成比较复杂的条件表达式。比如，host foo and not port ftp and not port ftp-data (nt：其过滤条件可理解为，数据包的主机为foo，并且端口不是ftp(端口21) 和ftp-data(端口20，常用端口和名字的对应可在linux 系统中的/etc/service 文件中找到))。</span><br><span class="line"></span><br><span class="line">为了表示方便, 同样的修饰符可以被省略, 如 tcp dst port ftp or ftp-data or domain 与以下的表达式含义相同 tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain。(nt：其过滤条件可理解为：包的协议为tcp，目的端口为ftp 或 ftp-data 或 domain(端口53) )。</span><br></pre></td></tr></table></figure><h3 id="3、常用示例"><a href="#3、常用示例" class="headerlink" title="3、常用示例"></a>3、常用示例</h3><p><strong>查看当前机器有哪些网络接口</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-192 ~]<span class="comment"># tcpdump -D</span></span><br><span class="line">1.eth0</span><br><span class="line">2.docker0</span><br><span class="line">3.cni0</span><br><span class="line">4.nflog (Linux netfilter <span class="built_in">log</span> (NFLOG) interface)</span><br><span class="line">5.nfqueue (Linux netfilter queue (NFQUEUE) interface)</span><br><span class="line">6.flannel.1</span><br><span class="line">7.usbmon1 (USB bus number 1)</span><br><span class="line">8.veth65a0cd7a</span><br><span class="line">9.any (Pseudo-device that captures on all interfaces)</span><br><span class="line">10.lo [Loopback]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面所有测试中都有 -i any的选项，表示抓取所有网络接口上的包，为了让测试方便</span></span><br></pre></td></tr></table></figure><p><strong>针对指定主机抓包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn host 192.168.1.10 -w ./$(date +%Y%m%d%H%M%S).pcap</span><br></pre></td></tr></table></figure><p><strong>针对指定端口抓包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn port 80 -w ./$(date +%Y%m%d%H%M%S).pcap</span><br></pre></td></tr></table></figure><p><strong>针对主机和端口抓包，两者关系 and</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn host 192.168.1.10 and port 80 -w ./$(date +%Y%m%d%H%M%S).pcap</span><br></pre></td></tr></table></figure><p><strong>针对多个端口抓包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn port 111 or port 443</span><br></pre></td></tr></table></figure><p><strong>针对多个主机抓包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn host www.baidu.com or www.360.com</span><br></pre></td></tr></table></figure><p><strong>抓取访问destination 443端口的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n dst port 443         <span class="comment"># 然后做一个curl https://www.baidu.com的操作</span></span><br><span class="line">…………</span><br><span class="line">15:11:43.007067 IP 10.244.0.4.46484 &gt; 10.96.0.1.https: Flags [.], ack 507, win 1393,length 0</span><br><span class="line">…………</span><br></pre></td></tr></table></figure><p><strong>抓取源端口是80的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -nn src port 80</span><br></pre></td></tr></table></figure><p><strong>抓取源或者目标端口都是80的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn port 80</span><br></pre></td></tr></table></figure><p><strong>抓取源的端口是20-80的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n src portrange 20-80</span><br></pre></td></tr></table></figure><p><strong>抓取端口是20-80的包，不考虑源或目标</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n portrange 20-80</span><br></pre></td></tr></table></figure><p><strong>抓取destination为 <a href="http://www.baidu.com/">www.baidu.com</a> 的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any dst www.baidu.com        <span class="comment"># 然后ping www.baidu.com ,以及 curl www.baidu.com</span></span><br></pre></td></tr></table></figure><p><strong>抓取destination为192.168.1.[0-255]的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn dst 192.168.1     <span class="comment"># 可以指定范围  ★★★★★ 注意用法  不是一个完整的IP地址</span></span><br></pre></td></tr></table></figure><p><strong>抓取source为192.168.<em>.</em> 的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn src host 192.168  <span class="comment"># 等价于 tcpdump -i any -n -nn src 192.168</span></span><br></pre></td></tr></table></figure><p><strong>抓取192.168的包(不管是source还是destination )</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn host 192.168 </span><br></pre></td></tr></table></figure><p><strong>抓取包长度小于800的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn less 800</span><br></pre></td></tr></table></figure><p><strong>抓取包长度大于800的包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n -nn greater 800</span><br></pre></td></tr></table></figure><p><strong>只抓取tcp包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n tcp</span><br></pre></td></tr></table></figure><p><strong>只抓取udp包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n udp</span><br></pre></td></tr></table></figure><p><strong>只抓取icmp的包，internet控制包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -n icmp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rsync+inotify 实时同步</title>
      <link href="/2021/07/23/Rsync-inotify-%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
      <url>/2021/07/23/Rsync-inotify-%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Rsync实时同步工具"><a href="#Rsync实时同步工具" class="headerlink" title="Rsync实时同步工具"></a>Rsync实时同步工具</h1><h2 id="一、rsync是什么"><a href="#一、rsync是什么" class="headerlink" title="一、rsync是什么"></a>一、rsync是什么</h2><ul><li><p>rsync（remote synchronize）是Liunx/Unix下的一个远程数据同步工具。它可通过LAN/WAN快速同步多台主机间的文件和目录，并适当利用rsync算法（差分编码）以减少数据的传输。</p></li><li><p>rsync算法并不是每一次都整份传输，而是只传输两个文件的不同部分，因此其传输速度相当快。</p></li><li><p>除此之外，rsync可拷贝、显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。</p></li></ul><h2 id="二、rsync的工作原理"><a href="#二、rsync的工作原理" class="headerlink" title="二、rsync的工作原理"></a>二、rsync的工作原理</h2><ol><li><p>客户端构造FileList，FileList包含了需要与服务器同步的所有文件信息对name-&gt;id（id用来唯一表示文件例如MD5）。</p></li><li><p>客户端将FileList发送到服务器。</p></li><li><p>服务器上rsync处理客户端发过来的FileList，构建新的NewFileList。其中根据MD5值比较，删除服务器上已经存在的文件信息对，只保留服务器上不存在或变化的文件。</p></li><li><p>客户端得到服务器发送过来的NewFileList，然后把NewFileList中的文件重新传输到服务器。</p></li></ol><h2 id="三、rsync优点"><a href="#三、rsync优点" class="headerlink" title="三、rsync优点"></a>三、rsync优点</h2><p>1）可以镜像保存整个目录树和文件系统。</p><p>2）可以很容易做到保持原来文件的权限、时间、软硬连接等。</p><p>3）无需特殊权限即可安装。</p><p>4）拥有优化的流程和比较高的文件传输效率。</p><p>5）可以使用shell（rsh、ssh）方式来传输文件。</p><p>6）支持匿名运行。</p><p>7）与scp相比，rsync传输速度绝对远远超过scp的传输速度。</p><ul><li>在局域网中经常用rsync和scp传输大量mysql数据库文件，发现rsync传输文件速度至少要比scp快20倍以上。</li><li>所以如果需要在Liunx/Unix服务器之间互传海量数据时，建议选择rsync进行传输。</li></ul><h2 id="四、rsync两种认证方式"><a href="#四、rsync两种认证方式" class="headerlink" title="四、rsync两种认证方式"></a>四、rsync两种认证方式</h2><blockquote><p><strong>rsync有两种常用的认证方式，一种是rsync-daemon方式，另外一种是ssh方式。在平时使用过程，我们使用最多的是rsync-daemon方式。      注意：在使用rsync时，服务器和客户端都必须安装rsync程序。</strong></p></blockquote><h3 id="4-1-rsync-daemon认证"><a href="#4-1-rsync-daemon认证" class="headerlink" title="4.1 rsync-daemon认证"></a>4.1 rsync-daemon认证</h3><ul><li><p><strong>rsync在rsync-daemon认证方式下，默认监听TCP的873端口。</strong></p></li><li><p><strong>rsync-daemon认证方式是rsync的主要认证方式，这个也是我们经常使用的认证方式。并且也只有在此种模式下，rsync才可以把密码写入到一个文件中。</strong></p></li><li><p><strong>注意：rsync-daemon认证方式，需要服务器和客户端都安装rsync服务，并且只需要rsync服务器端启动rsync，同时配置rsync配置文件。客户端启不启动rsync服务，都不影响同步的正常进行。</strong></p></li></ul><h3 id="4-2-ssh认证"><a href="#4-2-ssh认证" class="headerlink" title="4.2 ssh认证"></a>4.2 ssh认证</h3><ul><li><p><strong>rsync在ssh认证方式下，可通过系统用户进行认证，即在rsync上通过ssh隧道进行传输，类似于scp工具。此时同步操作不在局限于rsync中定义的同步文件夹。</strong></p></li><li><p><strong>ssh认证方式，不需要服务器和客户端配置rsync配置文件，只需双方都安装rsync服务，并且也不需要双方启动rsync。</strong></p></li></ul><h2 id="五、rsync-常用选项"><a href="#五、rsync-常用选项" class="headerlink" title="五、rsync 常用选项"></a>五、rsync 常用选项</h2><ul><li>若使用普通用户身份运行 rsync 命令，同步后的文件的属主将改变为这个普通用户身份。</li><li>若使用超级用户身份运行 rsync 命令，同步后的文件的属主将保持原来的用户身份。</li></ul><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a, ––archive</td><td>#归档模式，表示以递归方式传输文件，并保持所有文件属性，等价于 -rlptgoD (注意不包括 -H)</td></tr><tr><td>-v, ––verbose</td><td>#详细输出模式</td></tr><tr><td>-z, ––compress</td><td>#在传输文件时进行压缩处理</td></tr><tr><td>-r, ––recursive</td><td>#对子目录以递归模式处理</td></tr><tr><td>-H, ––hard-links</td><td>#保持硬链接文件</td></tr><tr><td>-p, ––perms</td><td>#保持文件权限</td></tr><tr><td>-t, ––times</td><td>#保持文件时间信息</td></tr><tr><td>-g, ––group</td><td>#保持文件属组信息</td></tr><tr><td>-o, ––owner</td><td>#保持文件属主信息 (super-user only)</td></tr><tr><td>-D</td><td>#保持设备文件和特殊文件 (super-user only)</td></tr><tr><td>––exclude=PATTERN</td><td>#指定排除一个不需要传输的文件匹配模式</td></tr><tr><td>––exclude-from=FILE</td><td>#从 FILE 中读取排除规则</td></tr><tr><td>––include=PATTERN</td><td>#指定需要传输的文件匹配模式</td></tr><tr><td>––include-from=FILE</td><td>#从 FILE 中读取包含规则</td></tr><tr><td>––copy-unsafe-links</td><td>#拷贝指向SRC路径目录树以外的链接文件</td></tr><tr><td>––safe-links</td><td>#忽略指向SRC路径目录树以外的链接文件（默认）</td></tr><tr><td>––existing</td><td>#仅仅更新那些已经存在于接收端的文件，而不备份那些新创建的文件</td></tr><tr><td>––ignore-existing</td><td>#忽略那些已经存在于接收端的文件，仅备份那些新创建的文件</td></tr><tr><td>-b, ––backup</td><td>#当有变化时，对目标目录中的旧版文件进行备份</td></tr><tr><td>––backup-dir=DIR</td><td>#与 -b 结合使用，将备份的文件存到 DIR 目录中</td></tr><tr><td>––link-dest=DIR</td><td>#当文件未改变时基于 DIR 创建硬链接文件</td></tr><tr><td>––delete</td><td>#删除那些接收端还有而发送端已经不存在的文件，让目标目录和源目录数据保持一致</td></tr><tr><td>––delete-before</td><td>#接收者在传输之前进行删除操作 (默认)</td></tr><tr><td>––delete-during</td><td>#接收者在传输过程中进行删除操作</td></tr><tr><td>––delete-after</td><td>#接收者在传输之后进行删除操作</td></tr><tr><td>––delete-excluded</td><td>#在接收方同时删除被排除的文件</td></tr><tr><td>-e, ––rsh=COMMAND</td><td>#指定替代 rsh 的 shell 程序</td></tr><tr><td>––ignore-errors</td><td>#即使出现 I/O 错误也进行删除</td></tr><tr><td>––partial</td><td>#保留那些因故没有完全传输的文件，以是加快随后的再次传输</td></tr><tr><td>––progress</td><td>#在传输时显示传输过程</td></tr><tr><td>-P</td><td>#等价于 ––partial ––progress</td></tr><tr><td>––delay-updates</td><td>#将正在更新的文件先保存到一个临时目录（默认为 “.<del>tmp</del>”），待传输完毕再更新目标文件</td></tr><tr><td>-l, ––links</td><td>#保持符号链接文件</td></tr><tr><td>-q, ––quiet</td><td>#精简输出模式</td></tr><tr><td>-h, ––human-readable</td><td>#输出文件大小使用易读的单位（如，K，M等）</td></tr><tr><td>-n, ––dry-run</td><td>#仅测试哪些文件将被传输</td></tr><tr><td>––list-only</td><td>#仅仅列出文件而不进行复制</td></tr><tr><td>––rsyncpath=PROGRAM</td><td>#指定远程服务器上的 rsync 命令所在路径</td></tr><tr><td>––password-file=FILE</td><td>#从 FILE 中读取口令，以避免在终端上输入口令，通常在 cron 中连接 rsync 服务器时使用</td></tr><tr><td>-4, ––ipv4</td><td>#使用 IPv4</td></tr><tr><td>-6, ––ipv6</td><td>#使用 IPv6</td></tr><tr><td>––version</td><td>#打印版本信息</td></tr><tr><td>––help</td><td>#显示帮助信息</td></tr></tbody></table><h2 id="六、rsync三种工作模式"><a href="#六、rsync三种工作模式" class="headerlink" title="六、rsync三种工作模式"></a>六、rsync三种工作模式</h2><p>rsync 是一个功能非常强大的工具，其命令也有很多功能选项。rsync 的命令格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1）本地使用：</span><br><span class="line">rsync [OPTION...] SRC... [DEST]</span><br><span class="line"></span><br><span class="line">2）通过远程 Shell 使用：</span><br><span class="line">拉: rsync [OPTION...] [USER@]HOST:SRC... [DEST]</span><br><span class="line">推: rsync [OPTION...] SRC... [USER@]HOST:DEST</span><br><span class="line"></span><br><span class="line">3）访问 rsync 服务器:</span><br><span class="line">拉: rsync [OPTION...] [USER@]HOST::SRC... [DEST]</span><br><span class="line">推: rsync [OPTION...] SRC... [USER@]HOST::DEST</span><br><span class="line">拉: rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]</span><br><span class="line">推: rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST</span><br></pre></td></tr></table></figure><ul><li>SRC: 是要复制的源位置</li><li>DEST: 是复制目标位置</li><li>若本地登录用户与远程主机上的用户一致，可以省略 USER@</li><li>使用远程 shell 同步时，主机名与资源之间使用单个冒号“:”作为分隔符</li><li>使用 rsync 服务器同步时，主机名与资源之间使用两个冒号“::”作为分隔符</li><li>当访问 rsync 服务器时也可以使用 rsync:// URL</li><li>‘拉’ 复制是指从远程主机复制文件到本地主机</li><li>‘推’ 复制是指从本地主机复制文件到远程主机</li><li>当进行“拉”复制时，若指定一个 SRC 且省略 DEST，则只列出资源而不进行复制</li><li><strong>注意：无论是推送和拉取，rsync命令都是在客户端执行，只是命令的格式不同而已。</strong></li></ul><h2 id="七、配置rsync"><a href="#七、配置rsync" class="headerlink" title="七、配置rsync"></a>七、配置rsync</h2><h3 id="7-1-rsync服务端配置"><a href="#7-1-rsync服务端配置" class="headerlink" title="7.1 rsync服务端配置"></a>7.1 rsync服务端配置</h3><ul><li><p>sync服务器端需要两个配置文件：rsyncd.conf、rsyncd.password。</p></li><li><p>其中rsyncd.conf默认存放在/etc/目录下，同时它也是rsync服务器的主配置文件。该文件配置了rsync服务器的控制认证、访问、日志记录等等。而rsyncd.password主要用于存储rsync用户名和密码。</p></li><li><p>但是在rsync安装完毕后后是不会生成以上这两个配置文件的，需要我们手工进行创建。</p></li><li><p>rsyncd.conf配置文件内容如下：</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@service ~]<span class="comment"># vi /etc/rsyncd.conf</span></span><br><span class="line">uid = nobody                                  <span class="comment">#进行备份的用户，nobody 为任何用户</span></span><br><span class="line">gid = nobody                                  <span class="comment">#进行备份的组，nobody为任意组</span></span><br><span class="line">user chroot = no                              <span class="comment">#如果&quot;use chroot&quot;指定为true，那么rsync在传输文件以前首先chroot到path参数所指定的目录下。这样做的原因是实现额外的安全防护，但是缺点是需要以root权限，并且不能备份指向外部的符号连接所指向的目录文件。默认情况下chroot值为true，但是这个一般不需要，我选择no或false</span></span><br><span class="line">max connections = 200                         <span class="comment">#最大连接数200</span></span><br><span class="line">timeout = 600      <span class="comment">#覆盖客户指定的IP超时时间，也就是说rsync服务器不会永远等待一个崩溃的客户端。</span></span><br><span class="line">pid file = /var/run/rsyncd.pid                <span class="comment">#pid文件的存放位置</span></span><br><span class="line">lock file = /var/run/rsyncd.lock              <span class="comment">#锁文件的存放位置</span></span><br><span class="line"><span class="built_in">log</span> file = /var/run/rsyncd.log                <span class="comment">#日志文件的存放位置</span></span><br><span class="line"></span><br><span class="line">[backup]                              <span class="comment">#这里是认证模块名，即跟samba语法一样，是对外公布的名字</span></span><br><span class="line">path = /backup/                               <span class="comment">#这里是参与同步的目录</span></span><br><span class="line">ignore errors                                 <span class="comment">#可以忽略一些无关的IO错误</span></span><br><span class="line"><span class="built_in">read</span> only = no                                <span class="comment">#默认允许可读可写</span></span><br><span class="line">list = no                                     <span class="comment">#不允许列清单</span></span><br><span class="line">hosts allow = 192.168.2.0/255.255.255.0  <span class="comment">#这里跟samba的语法是一样的，只允许192.168.1.0/24的网段进行同步，拒绝其它一切</span></span><br><span class="line">auth users = <span class="built_in">test</span>                             <span class="comment">#认证的用户名</span></span><br><span class="line">secrets file = /etc/rsyncd.password           <span class="comment">#密码文件存放地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意： 一个rsync配置文件中可以包含多个认证模块，同时一个密码文件中也可以存放多个用户和其对应的密码。其中每一个认证模块可以对应不同的客户端。</span></span><br></pre></td></tr></table></figure><ul><li>配置文件创建完毕后，我们来创建密码文件。如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@service ~]<span class="comment"># echo &quot;test:123123&quot;&gt;&gt;/etc/rsyncd.password</span></span><br><span class="line">[root@service ~]<span class="comment"># cat /etc/rsyncd.password </span></span><br><span class="line"><span class="built_in">test</span>:123123</span><br><span class="line"><span class="comment">#注意：该密码文件中的用户和密码可以进行自定义，同时该用户不一定要在服务器中的系统用户存在。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密码文件创建完毕后，要把其权限要设置为600，否则会在以后同步时提示验证出错。</span></span><br><span class="line">[root@service ~]<span class="comment"># chmod 600 /etc/rsyncd.password</span></span><br></pre></td></tr></table></figure><ul><li>以上两个文件创建完毕后，我们来创建其对应的目录并授权，如下：权限必须是777</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@service ~]<span class="comment"># mkdir /backup</span></span><br><span class="line">[root@service ~]<span class="comment"># chmod -R 777 /backup</span></span><br></pre></td></tr></table></figure><ul><li>启动Rsync服务</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@service ~]<span class="comment"># systemctl start rsyncd ; systemctl enable rsyncd</span></span><br><span class="line">[root@service ~]<span class="comment"># netstat -tunlp |grep 873</span></span><br><span class="line">tcp        0      0 0.0.0.0:873             0.0.0.0:*               LISTEN      16099/rsync     </span><br><span class="line">tcp6       0      0 :::873                  :::*                    LISTEN      16099/rsync</span><br></pre></td></tr></table></figure><p><strong>以上就是rsync服务端的配置。</strong></p><h3 id="7-2-rsync客户端配置"><a href="#7-2-rsync客户端配置" class="headerlink" title="7.2 rsync客户端配置"></a>7.2 rsync客户端配置</h3><ul><li><p>rsync客户端配置与服务器端相比差别还是比较大的。</p></li><li><p>在客户端安装完毕rsync服务后，是不需要启动rsync服务的。我们只需要在客户端创建连接rsync服务器时，验证码用户所需要的密码文件即可。</p></li><li><p><strong>该密码文件中的密码要与rsync服务器上的密码文件中的密码对应，并且也要与rsync服务器rsyncd.conf配置文件中的认证模块中的用户匹配。</strong></p></li><li><p>当然该密码文件不创建也是可以的，不创建的话。我们在执行rsync操作时，就需要输入rsync的对应用户的密码。如下：</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># echo &quot;123123&quot;&gt;&gt;/etc/rsyncd.password</span></span><br><span class="line">[root@client ~]<span class="comment"># chmod 600 /etc/rsyncd.password</span></span><br><span class="line">[root@client ~]<span class="comment"># ll /etc/rsyncd.password</span></span><br><span class="line">-rw------- 1 root root 7 5月  12 09:39 /etc/rsyncd.password</span><br><span class="line">[root@client ~]<span class="comment"># cat /etc/rsyncd.password</span></span><br><span class="line">123123</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：该密码文件中只能存放一个用户的密码，并且该文件与rsync服务器端的密码文件一样也需要把其权限设置为600。</span></span><br></pre></td></tr></table></figure><p><strong>以上就是rsync客户端的配置。</strong></p><h2 id="八、rsync的启动与关闭"><a href="#八、rsync的启动与关闭" class="headerlink" title="八、rsync的启动与关闭"></a>八、rsync的启动与关闭</h2><ul><li><p>在前面我们讲过rsync-daemon认证方式，需要服务器和客户端都安装rsync服务，并且只需要rsync服务器端启动rsync，同时配置rsync配置文件，客户端启动不启动rsync服务。</p></li><li><p>rsync-daemon认证方式的启动，如果是源码方式安装的rsync，我们可以使用rsync –daemon来启动rsync。如下：</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/&gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">rsync --daemon</span><br><span class="line"></span><br><span class="line">ps aux |grep rsync</span><br><span class="line"></span><br><span class="line">netstat -tunlp |grep 873</span><br><span class="line">tcp        0      0 0.0.0.0:873             0.0.0.0:*               LISTEN      16099/rsync</span><br><span class="line">tcp6       0      0 :::873                  :::*                    LISTEN      16099/rsync</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：上述命令中，只有rsync --daemon才是启动rsync的命令。并且该命令启动时，会默认加载/etc/rsyncd.conf文件。所以如果rsync的配置文件不在/etc目录下或者rsync配置文件名不为rsyncd.conf，那么我们在启动rsync服务时，就要手工加上该配置文件的完整路径。方法如下：rsync --daemon --config=/etc/rsyncd.conf</span></span><br></pre></td></tr></table></figure><h2 id="九、rsync同步示例"><a href="#九、rsync同步示例" class="headerlink" title="九、rsync同步示例"></a>九、rsync同步示例</h2><h3 id="9-1-ssh认证用法"><a href="#9-1-ssh认证用法" class="headerlink" title="9.1 ssh认证用法"></a>9.1 ssh认证用法</h3><ul><li>这种用法最好配置免登，不然每次都要输入密码</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全量，跟scp意思一致</span></span><br><span class="line">rsync -avz anaconda-ks.cfg root@192.168.2.1:/root/        <span class="comment">#推送</span></span><br><span class="line">rsync -avz root@192.168.2.1:/root/anaconda-ks.cfg /root   <span class="comment">#拉取</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增量示例1</span></span><br><span class="line">rsync -avz --delete /opt/ root@192.168.1.1:/opt/      <span class="comment">#让服务端与客户端保持一致性</span></span><br></pre></td></tr></table></figure><ul><li>图示：服务的1.1   客户端1.2 </li></ul><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/pjTByU.jpg" alt="pjTByU"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/7R9XtS.jpg" alt="7R9XtS"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增量示例2    【--exclude-from=：排除单个或多个文件】</span></span><br><span class="line"><span class="comment">#让服务端除了lemon.bak 和 lm.bak这两个文件；其他文件都与客户端保持一致</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;lemon.bak\nlm.bak&quot;</span>&gt;&gt;/root/file.txt</span><br><span class="line">rsync -avz --delete --exclude-from=/root/file.txt /opt/ root@192.168.2.1:/opt/   <span class="comment">#多个文件排除</span></span><br></pre></td></tr></table></figure><ul><li>图示：服务的1.1       客户端1.2 </li></ul><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/HwdEFu.jpg" alt="HwdEFu"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/cBCrGO.jpg" alt="cBCrGO"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增量示例3   【--exclude=：只能排除单个文件】</span></span><br><span class="line"><span class="comment">#让服务端除了lemon.bak这个文件；其他文件都与客户端保持一致</span></span><br><span class="line">rsync -avz --delete --exclude=lemon.bak /opt/ root@192.168.2.1:/opt/      <span class="comment">#单个文件排除</span></span><br></pre></td></tr></table></figure><ul><li>图示：服务的1.1       客户端1.2 </li></ul><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/ByBbYE.jpg" alt="ByBbYE"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/teOqQh.jpg" alt="teOqQh"></p><h3 id="9-2-daemon认证用法-常用"><a href="#9-2-daemon认证用法-常用" class="headerlink" title="9.2 daemon认证用法 (常用)"></a>9.2 daemon认证用法 (常用)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从服务器上下载文件（拉取）</span></span><br><span class="line">rsync -avz --password-file=/etc/rsyncd.password <span class="built_in">test</span>@192.168.2.1::backup /home/</span><br><span class="line"></span><br><span class="line"><span class="comment">#从本地上传到服务器上去（推送）</span></span><br><span class="line">rsync -avz --password-file=/etc/rsyncd.password /home <span class="built_in">test</span>@192.168.2.1::backup</span><br><span class="line">       </span><br><span class="line"><span class="comment">#上传并让客户端和服务端的数据文件保持一致性</span></span><br><span class="line">rsync -avz --delete --password-file=/etc/rsyncd.password /home <span class="built_in">test</span>@192.168.2.1::backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#除了lemon.txt文件；其他的数据文件客户端和服务端都保持一致性【单个文件】</span></span><br><span class="line">rsync -avz --delete --exclude=lemon.txt --password-file=/etc/rsyncd.password /home <span class="built_in">test</span>@192.168.2.1::backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#除了lemon.txt和lm.txt文件其他的数据文件客户端和服务端都保持一致性,【多个文件】</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;lemon.txt\nlm.txt&quot;</span>&gt;&gt;/file.txt</span><br><span class="line">rsync -avz --delete --exclude=/file.txt --password-file=/etc/rsyncd.password /home <span class="built_in">test</span>@192.168.2.1::backup</span><br></pre></td></tr></table></figure><h2 id="十、rsync-inotify实时同步"><a href="#十、rsync-inotify实时同步" class="headerlink" title="十、rsync + inotify实时同步"></a>十、rsync + inotify实时同步</h2><h3 id="10-1-Inotify是什么？"><a href="#10-1-Inotify是什么？" class="headerlink" title="10.1 Inotify是什么？"></a>10.1 Inotify是什么？</h3><p>Inotify 是一种强大的、细粒度的、异步的文件系统事件监控机制，linux内核从2.6.13起，加入了Inotify支持，通过Inotify可以监控文件系统 中添加、删除，修改、移动等各种细微事件，利用这个内核接口，第三方软件就可以监控文件系统下文件的各种变化情况，而inotify-tools就是这样 的一个第三方软件。inotify可以监控文件系统的各种变化，当文件有任何变动时，就触发rsync同步，这样刚好解决了同步数据的实时性问题。</p><h3 id="10-2-案例实操"><a href="#10-2-案例实操" class="headerlink" title="10.2 案例实操"></a>10.2 案例实操</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">安装inotify：</span><br><span class="line">tar xf inotify-tools-3.13.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/inotify-tools-3.13/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/inotify &amp;&amp; make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/inotify/bin/ &amp;&amp; ll</span><br><span class="line">总用量 108</span><br><span class="line">-rwxr-xr-x 1 root root 52552 5月  12 01:13 inotifywait</span><br><span class="line">-rwxr-xr-x 1 root root 54648 5月  12 01:13 inotifywatch</span><br><span class="line"></span><br><span class="line"><span class="comment">#inotifywait选项：</span></span><br><span class="line">    -m               <span class="comment">#始终保持事件监听状态</span></span><br><span class="line">    -q               <span class="comment">#打印监控事件的信息 </span></span><br><span class="line">    -r               <span class="comment">#递归查询目录</span></span><br><span class="line">    --excludei       <span class="comment">#排除文件或目录时，不区分大小写。</span></span><br><span class="line">    --timefmt        <span class="comment">#指定时间输出的格式</span></span><br><span class="line">    --format         <span class="comment">#打印使用指定的输出类似格式字符串</span></span><br><span class="line">    -e               <span class="comment">#通过此参数可以指定需要监控的事件；</span></span><br><span class="line">      Events：</span><br><span class="line">          modify          <span class="comment">#文件或目录内容被修改。</span></span><br><span class="line">         create          <span class="comment">#文件或目录被创建在当前目录</span></span><br><span class="line">          attrib          <span class="comment">#文件或目录属性被改变。</span></span><br><span class="line">         move            <span class="comment">#文件或目录被移动另一个目录或从另一个目录移动至当前目录。</span></span><br><span class="line">         delete          <span class="comment">#文件或目录被删除</span></span><br><span class="line">         access          <span class="comment">#文件或目录被读取。</span></span><br><span class="line">          close           <span class="comment">#文件或目录封闭，无论读/写模式。</span></span><br><span class="line">         open            <span class="comment">#文件或目录被打开。</span></span><br><span class="line">         moved_to        <span class="comment">#文件或目录被移动至另外一个目录。</span></span><br><span class="line">             unmount         <span class="comment">#文件系统被卸载</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、通过rsync协议加inotify实现实时同步</span><br><span class="line">服务端：192.168.2.1</span><br><span class="line">客户端：192.168.2.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改配置文件如下</span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">fs.inotify.max_queued_events = 16384      <span class="comment">#监控队列大小</span></span><br><span class="line">fs.inotify.max_user_instances = 1024      <span class="comment">#最多监控实例数</span></span><br><span class="line">fs.inotify.max_user_watches = 1048576     <span class="comment">#每个实例最多监控文件数</span></span><br><span class="line">wq!保存退出</span><br><span class="line"></span><br><span class="line">sysctl -p    <span class="comment">#查看</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、在2.2上新建源地址</span><br><span class="line">mkdir /backup</span><br><span class="line">chown -R nobody:nobody /backup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、创建一个排除的文件</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;lemon.txt\nroot.txt&quot;</span>&gt;&gt;/root/file.bak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、在2.2上建一个脚本如下：</span><br><span class="line">vi rsync_inotify.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#注释：服务端除了lemon.txt和root.txt文件其他的都与客户端保持一致</span></span><br><span class="line"><span class="comment">#注意：这种ssh认证方式需要在客户端要先完成免登，如果不想做免登的话就是用daemon认证方式</span></span><br><span class="line">inotifywait=<span class="string">&quot;/usr/local/inotify/bin/inotifywait -mrq -e modify,create,attrib,move,delete /backup/&quot;</span></span><br><span class="line">rsync=<span class="string">&quot;rsync -azH --delete --exclude-from=/root/file.bak /backup/ root@192.168.2.1:/opt/&quot;</span></span><br><span class="line"><span class="variable">$inotifywait</span> | <span class="keyword">while</span> <span class="built_in">read</span> files</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="variable">$rsync</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">6、配置免登</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id root@192.168.2.1</span><br><span class="line">ssh root@192.168.2.1</span><br><span class="line">Last login: Tue May 12 09:24:06 2020 from 192.168.2.254</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">登出</span><br><span class="line">Connection to 192.168.2.1 closed.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、在客户端将脚本放置后台运行，然后测试</span><br><span class="line">setsid bash /root/rsync_inotify.sh</span><br><span class="line">ps -aux|grep rsync_inotify.sh</span><br><span class="line">root       7128  0.0  0.1 113132  1212 ?        Ss   09:54   0:00 bash /root/rsync_inotify.sh</span><br><span class="line">root       7130  0.0  0.0 113132   388 ?        S    09:54   0:00 bash /root/rsync_inotify.sh</span><br><span class="line"><span class="built_in">cd</span> /backup </span><br><span class="line">touch &#123;1..5&#125;.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8、去服务端查看是否同步过去</span><br><span class="line">ls</span><br><span class="line">1.txt  2.txt  3.txt  4.txt  5.txt  lemon.txt  root.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、设置开机自动脚本运行</span><br><span class="line">chmod -R 700 /etc/rc.d/rc.local</span><br><span class="line">vi /etc/rc.local</span><br><span class="line">setsid bash /root/rsync_inotify.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vsftpd 文件传输服务</title>
      <link href="/2021/07/21/Vsftpd-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/07/21/Vsftpd-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Vsftpd-文件传输服务"><a href="#Vsftpd-文件传输服务" class="headerlink" title="Vsftpd 文件传输服务"></a>Vsftpd 文件传输服务</h1><blockquote><p>ftp是典型的C/S结构，由服务端跟客户端两个部分共同实现文件传输功能</p></blockquote><h2 id="一、Ftp工作原理"><a href="#一、Ftp工作原理" class="headerlink" title="一、Ftp工作原理"></a>一、Ftp工作原理</h2><blockquote><p>ftp采用TCP协议的20、21端口与客户端进行通信</p></blockquote><ul><li><p>20端口：用于建立数据连接并传输文件数据</p></li><li><p>21端口：用于建立控制连接，并传输ftp控制命令</p></li></ul><h2 id="二、ftp的传输模式"><a href="#二、ftp的传输模式" class="headerlink" title="二、ftp的传输模式"></a>二、ftp的传输模式</h2><h3 id="1、主动模式"><a href="#1、主动模式" class="headerlink" title="1、主动模式"></a>1、主动模式</h3><blockquote><p>首先由客户端向服务端的21端口建立ftp控制连接，当需要传送数据时，服务端从 20 端口主动向客户端发起连接。</p></blockquote><p>在主动模式下, FTP客户端从任意端口5150（端口号&gt;1023）发起一个FTP请求, 并携带自己监听的端口号5151（发送的端口号+1=监听端口号）；随后服务器返回确认, 然后从服务器本地的20端口主动发起连接请求到客户端的监听端口5151, 最后客户端返回确认。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/gdkJ5l.jpg" alt="gdkJ5l"></p><h3 id="2、被动模式"><a href="#2、被动模式" class="headerlink" title="2、被动模式"></a>2、被动模式</h3><blockquote><p>首先由客户端向服务端的21端口建立ftp控制连接，当需要传送数据时，客户端向服务端的非20端口发送请求并建立连接数据</p></blockquote><p>在被动模式中，命令连接和数据连接都由客户端来发起，如上图所示，客户端用随机命令端口5150向服务器的21命令端口发送一个PASV请求，然后服务器返回数据端口3267，告诉客户端我在哪个端口监听数据连接。然后客户端向服务器的监听端口3268发起数据连接，最后服务器回复确认。</p><p><strong>vsftpd默认是被动模式。</strong>所以客户端要设置被动模式连接，如果到现在还没连接成功的看客户端有没有设置被动传输模式。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/f1T6VZ.jpg" alt="f1T6VZ"></p><h2 id="三、FTP-常见的服务端及客户端"><a href="#三、FTP-常见的服务端及客户端" class="headerlink" title="三、FTP 常见的服务端及客户端"></a>三、FTP 常见的服务端及客户端</h2><h3 id="1、常见的服务端程序"><a href="#1、常见的服务端程序" class="headerlink" title="1、常见的服务端程序"></a>1、常见的服务端程序</h3><ul><li>IIS、Serv-U</li><li>wu-ftpd、Proftpd</li><li>vsftpd（Very Secure FTP Daemon）</li></ul><h3 id="2、常见的-FTP-客户端程序"><a href="#2、常见的-FTP-客户端程序" class="headerlink" title="2、常见的 FTP 客户端程序"></a>2、常见的 FTP 客户端程序</h3><ul><li>ftp 命令</li><li>CuteFTP、FlashFXP、LeapFTP、Filezilla</li><li>gftp、kuftp</li></ul><h2 id="四、部署-FTP-服务"><a href="#四、部署-FTP-服务" class="headerlink" title="四、部署 FTP 服务"></a>四、部署 FTP 服务</h2><h3 id="1、把光盘挂载到-mnt下"><a href="#1、把光盘挂载到-mnt下" class="headerlink" title="1、把光盘挂载到/mnt下"></a>1、把光盘挂载到/mnt下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/cdrom /mnt</span><br></pre></td></tr></table></figure><h3 id="2、添加本地yum源"><a href="#2、添加本地yum源" class="headerlink" title="2、添加本地yum源"></a>2、添加本地yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d &amp;&amp; mkdir repo.bak</span><br><span class="line">mv * repo.bak</span><br><span class="line">vim  vsftp.repo</span><br><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">name=<span class="built_in">local</span></span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><h3 id="3、安装FTP-服务"><a href="#3、安装FTP-服务" class="headerlink" title="3、安装FTP 服务"></a>3、安装FTP 服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftpd</span><br></pre></td></tr></table></figure><h2 id="五、匿名用户访问"><a href="#五、匿名用户访问" class="headerlink" title="五、匿名用户访问"></a>五、匿名用户访问</h2><h3 id="1、备份原-ftp-配置文件"><a href="#1、备份原-ftp-配置文件" class="headerlink" title="1、备份原 ftp 配置文件"></a>1、备份原 ftp 配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/vsftpd/</span><br><span class="line">mv vsftpd.conf vsftpd.conf.bak</span><br><span class="line">cat vsftpd.conf.bak |grep -v <span class="string">&quot;^#&quot;</span>|grep -v <span class="string">&quot;^$&quot;</span> &gt; vsftpd.conf</span><br></pre></td></tr></table></figure><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/IfE64D.jpg" alt="IfE64D"></p><h3 id="3、给予数据根目录写权限"><a href="#3、给予数据根目录写权限" class="headerlink" title="3、给予数据根目录写权限"></a>3、给予数据根目录写权限</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/ftp</span><br><span class="line">chmod o+w pub</span><br></pre></td></tr></table></figure><p>4、启动服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure><p>5、<a href="ftp://ip可匿名登录访问/">ftp://IP可匿名登录访问</a></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/aD0iMx.jpg" alt="aD0iMx"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/onHgAV.jpg" alt="onHgAV"></p><h2 id="六、user-list文件限制用户登录"><a href="#六、user-list文件限制用户登录" class="headerlink" title="六、user_list文件限制用户登录"></a>六、user_list文件限制用户登录</h2><p>1、编辑/etc/vsdtpd/user_list文件，把允许登录服务的用户添加进文件</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/zMviWE.jpg" alt="zMviWE"></p><p>Ps 此 ftpusers 文件中的所有用户都将禁止登陆，不管 user_list 文件中是否出现。</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/wJOZyN.jpg" alt="wJOZyN"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/mfKtGv.jpg" alt="mfKtGv"></p><p>2、添加用户赋予密码</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/ed9mFt.jpg" alt="ed9mFt"></p><p>3、编辑配置文件追加以下内容（记得把 <code>anonymous_enable</code> 配置改为 NO）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim vsftpd.conf</span><br><span class="line">userlist_enable=YES        <span class="comment"># 启用 user_list 用户列表文件</span></span><br><span class="line">userlist_deny=NO           <span class="comment"># 不禁用 user_list 列表中用户登陆</span></span><br></pre></td></tr></table></figure><p>4、重启vsftpd服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftpd</span><br></pre></td></tr></table></figure><p>5、测试 nlemon 用户不可以登陆访问</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/fZ2VVY.jpg" alt="fZ2VVY"></p><p>6、验证 ylemon 用户可以登陆访问</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/zHYpcX.jpg" alt="zHYpcX"></p><h2 id="七、虚拟用户登录（常用）"><a href="#七、虚拟用户登录（常用）" class="headerlink" title="七、虚拟用户登录（常用）"></a>七、虚拟用户登录（常用）</h2><blockquote><p>vsftpd提供了三种认证方式，分别是：匿名用户认证、本地用户认证和虚拟用户认证。从安全的角度来说，虚拟用户最安全也是最常用的认证方式，下面开始配置虚拟用户。</p></blockquote><h3 id="1、创建vusers-list文件"><a href="#1、创建vusers-list文件" class="headerlink" title="1、创建vusers.list文件"></a>1、创建vusers.list文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vusers.list</span><br><span class="line">tom</span><br><span class="line">123123</span><br><span class="line">jerry</span><br><span class="line">456456</span><br></pre></td></tr></table></figure><h3 id="2、db-load-创建用户的数据库文件"><a href="#2、db-load-创建用户的数据库文件" class="headerlink" title="2、db_load 创建用户的数据库文件"></a>2、db_load 创建用户的数据库文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/vsftpd/</span><br><span class="line">db_load -T -t <span class="built_in">hash</span> -f vusers.list vusers.db</span><br><span class="line">chmod 600 /etc/vsftpd/vusers.*</span><br></pre></td></tr></table></figure><h3 id="3、添加映射的本地用户"><a href="#3、添加映射的本地用户" class="headerlink" title="3、添加映射的本地用户"></a>3、添加映射的本地用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /var/ftproot -s /sbin/nologin virtual</span><br><span class="line">chmod 755 /var/ftproot/</span><br></pre></td></tr></table></figure><h3 id="4、添加编辑文件vsftpd-vu"><a href="#4、添加编辑文件vsftpd-vu" class="headerlink" title="4、添加编辑文件vsftpd.vu"></a>4、添加编辑文件vsftpd.vu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/vsftpd.vu</span><br><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line"><span class="comment"># 此句用于检查用户密码，数据库文件不要写后缀.db</span></span><br><span class="line">auth     required  /lib64/security/pam_userdb.so  db=/etc/vsftpd/vusers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此句用于检查用户是否在有效期内，数据库支持虚拟用户的PAM认证文件。</span></span><br><span class="line">account  required  /lib64/security/pam_userdb.so  db=/etc/vsftpd/vusers</span><br></pre></td></tr></table></figure><h3 id="5、编辑配置文件"><a href="#5、编辑配置文件" class="headerlink" title="5、编辑配置文件"></a>5、编辑配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">allow_writeable_chroot=YES               <span class="comment"># 必须，如果不加入此配置则无法登陆</span></span><br><span class="line">local_enable=YES                         <span class="comment"># 必须，本地系统用户访问</span></span><br><span class="line">write_enable=YES                         <span class="comment"># 必须，任何形式的写入方式</span></span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">anon_umask=022                           <span class="comment"># 必须，虚拟用户上传的默认权限掩码值</span></span><br><span class="line">local_umask=022                          <span class="comment"># 必须，本地用户上传的默认权限掩码值</span></span><br><span class="line">guest_enable=YES                         <span class="comment"># 必须，开启虚拟用户模式</span></span><br><span class="line">guest_username=virtual                   <span class="comment"># 必须，指定虚拟用户账号</span></span><br><span class="line">pam_service_name=vsftpd.vu               <span class="comment"># 必须，指定pam文件</span></span><br><span class="line">user_config_dir=/etc/vsftpd/vusers_dir   <span class="comment"># 必须，指定虚拟用户的权限配置目录</span></span><br></pre></td></tr></table></figure><h3 id="6、创建vusers-dir目录下的虚拟用户"><a href="#6、创建vusers-dir目录下的虚拟用户" class="headerlink" title="6、创建vusers_dir目录下的虚拟用户"></a>6、创建vusers_dir目录下的虚拟用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/vsftpd/vusers_dir</span><br><span class="line">touch /etc/vsftpd/vusers_dir/tom</span><br><span class="line">touch /etc/vsftpd/vusers_dir/jerry</span><br></pre></td></tr></table></figure><h3 id="7、为虚拟用户设置不同的权限"><a href="#7、为虚拟用户设置不同的权限" class="headerlink" title="7、为虚拟用户设置不同的权限"></a>7、为虚拟用户设置不同的权限</h3><p>tom 权限设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vusers_dir/tom</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br></pre></td></tr></table></figure><p>jerry 权限设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不进行权限设置的话，默认该用户只有 登录、浏览、下载 的权限。</span></span><br></pre></td></tr></table></figure><h3 id="8、验证虚拟用户权限"><a href="#8、验证虚拟用户权限" class="headerlink" title="8、验证虚拟用户权限"></a>8、验证虚拟用户权限</h3><ul><li>使用Tom虚拟用户登录服务,Tom可以登录、浏览、下载、上传、创建、删除</li><li>Jerry用户只能登录、浏览、下载、但无法上传</li></ul><h2 id="八、Vsftpd的常用配置项"><a href="#八、Vsftpd的常用配置项" class="headerlink" title="八、Vsftpd的常用配置项"></a>八、Vsftpd的常用配置项</h2><h3 id="1、修改-vsftpd-服务的监听地址、端口"><a href="#1、修改-vsftpd-服务的监听地址、端口" class="headerlink" title="1、修改 vsftpd 服务的监听地址、端口"></a>1、修改 vsftpd 服务的监听地址、端口</h3><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/F8Aw12.jpg" alt="F8Aw12"></p><h3 id="2、允许使用-FTP-服务器的被动模式"><a href="#2、允许使用-FTP-服务器的被动模式" class="headerlink" title="2、允许使用 FTP 服务器的被动模式"></a>2、允许使用 FTP 服务器的被动模式</h3><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/YzTc2T.jpg" alt="YzTc2T"></p><h3 id="3、限制-FTP-连接的并发数、传输速率"><a href="#3、限制-FTP-连接的并发数、传输速率" class="headerlink" title="3、限制 FTP 连接的并发数、传输速率"></a>3、限制 FTP 连接的并发数、传输速率</h3><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/sR7zBW.jpg" alt="sR7zBW"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 网卡聚合链路</title>
      <link href="/2021/07/21/CentOS7-%E7%BD%91%E5%8D%A1%E8%81%9A%E5%90%88%E9%93%BE%E8%B7%AF/"/>
      <url>/2021/07/21/CentOS7-%E7%BD%91%E5%8D%A1%E8%81%9A%E5%90%88%E9%93%BE%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h2 id="CentOS7-网卡聚合链路"><a href="#CentOS7-网卡聚合链路" class="headerlink" title="CentOS7 网卡聚合链路"></a>CentOS7 网卡聚合链路</h2><blockquote><p><strong>作用：</strong>将主机的多块网卡通过逻辑的方式聚合在一起，目的是加大带宽、冗余备份；</p></blockquote><h3 id="1-实验环境"><a href="#1-实验环境" class="headerlink" title="1. 实验环境"></a>1. 实验环境</h3><blockquote><p><strong>准备一台虚拟机，添加两块网卡(在同一通道)</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看网卡名称及MAC地址</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/LjU5Zo.jpg" alt="LjU5Zo"></p><h3 id="2-保证-NetworkManager-服务正常运行"><a href="#2-保证-NetworkManager-服务正常运行" class="headerlink" title="2. 保证 NetworkManager 服务正常运行"></a>2. 保证 NetworkManager 服务正常运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># systemctl status NetworkManager | grep running</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/pt1kUj.jpg" alt="pt1kUj"></p><h3 id="3-移走原有的网卡配置文件并重启网卡服务"><a href="#3-移走原有的网卡配置文件并重启网卡服务" class="headerlink" title="3. 移走原有的网卡配置文件并重启网卡服务"></a>3. 移走原有的网卡配置文件并重启网卡服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># mkdir /opt/network_bak</span></span><br><span class="line">[root@lemon ~]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@lemon network-scripts]<span class="comment"># mv ifcfg-ens* /opt/network_bak/</span></span><br><span class="line">[root@lemon network-scripts]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure><p>注：此时 <code>xhell</code> 应该已经断开了，所以后面的操作就得在虚拟机 或 服务器上面操作</p><h3 id="4-创建-team-公共逻辑网卡设备，并且将物理网卡添加到网卡中"><a href="#4-创建-team-公共逻辑网卡设备，并且将物理网卡添加到网卡中" class="headerlink" title="4. 创建 team 公共逻辑网卡设备，并且将物理网卡添加到网卡中"></a>4. 创建 team 公共逻辑网卡设备，并且将物理网卡添加到网卡中</h3><blockquote><p>提示：这里的 <code>c</code> 选项可以用 <code>connection</code> 来代替</p></blockquote><ul><li>创建公共网卡设备 <code>team0</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli c add con-name team0 type team ifname team0 config &#x27;&#123;&quot;runner&quot;:&#123;&quot;name&quot;:&quot;activebackup&quot;&#125;&#125;&#x27;</span></span><br><span class="line">连接“team0”(4980fa49-c5e6-4070-9553-686a8df23fb8) 已成功添加。</span><br><span class="line">[root@lemon ~]<span class="comment"># nmcli d       #查看网卡列表</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/hv5WiP.jpg" alt="hv5WiP"></p><ul><li>将物理网卡 <code>ens32</code> 添加到 <code>team0</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli c add con-name team0-1 type team-slave ifname ens32 master team0</span></span><br><span class="line">连接“team0-1”(f52c2b7a-1322-4cf1-a361-82dee280c68a) 已成功添加。</span><br></pre></td></tr></table></figure><ul><li>将物理网卡 <code>ens34</code> 添加到 <code>team0</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli c add con-name team0-2 type team-slave ifname ens34 master team0</span></span><br><span class="line">连接“team0-2”(032b8040-5906-4c57-adef-d620b8d3b3e1) 已成功添加。</span><br></pre></td></tr></table></figure><h3 id="5-模式介绍"><a href="#5-模式介绍" class="headerlink" title="5. 模式介绍"></a>5. 模式介绍</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其实除了activebackup模式，其余三种模式都属于负载均衡模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># activebackup 高可用模式的特点：一个端口处于主状态 ，一个处于从状态，所有流量都在主链路上处理，从不会有任何流量。当主端口down掉时，从端口接手主状态。【主down掉，从就会顶上来】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># loadbalance  模式其中又分为：主动和被动模式。主动模式，是team会智能判断进行负载均衡。被动模式是进行随机的负载均衡。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roundrobin   模式以轮循的方式传输所有端口的包。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random模式　　随机分配</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般在现实环境中都是用负载均衡模式</span></span><br></pre></td></tr></table></figure><h3 id="6-开启添加到-team0-逻辑网卡里的两个物理网卡"><a href="#6-开启添加到-team0-逻辑网卡里的两个物理网卡" class="headerlink" title="6. 开启添加到 team0 逻辑网卡里的两个物理网卡"></a>6. 开启添加到 team0 逻辑网卡里的两个物理网卡</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli connection up team0-1</span></span><br><span class="line">[root@lemon ~]<span class="comment"># nmcli connection up team0-2</span></span><br><span class="line">[root@lemon ~]<span class="comment"># nmcli d       #查看网卡列表</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/pilJG8.jpg" alt="pilJG8"></p><h3 id="7-查看链路聚合状态是冗余备份的状态，并且当前活跃网卡为-ens32"><a href="#7-查看链路聚合状态是冗余备份的状态，并且当前活跃网卡为-ens32" class="headerlink" title="7. 查看链路聚合状态是冗余备份的状态，并且当前活跃网卡为 ens32"></a>7. 查看链路聚合状态是冗余备份的状态，并且当前活跃网卡为 ens32</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># teamdctl team0 state</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/wcrBCv.jpg" alt="wcrBCv"></p><h3 id="8-检查物理网卡的MAC地址是否统一"><a href="#8-检查物理网卡的MAC地址是否统一" class="headerlink" title="8. 检查物理网卡的MAC地址是否统一"></a>8. 检查物理网卡的MAC地址是否统一</h3><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/DQHgd2.jpg" alt="DQHgd2"></p><h3 id="9-设置-team0-网卡的临时-ip-地址并且启动该网卡"><a href="#9-设置-team0-网卡的临时-ip-地址并且启动该网卡" class="headerlink" title="9. 设置 team0 网卡的临时 ip 地址并且启动该网卡"></a>9. 设置 team0 网卡的临时 ip 地址并且启动该网卡</h3><blockquote><p>注：会自动生成 team0 网卡的配置文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli c modify team0 ipv4.addresses 192.168.1.1/24 ipv4.method manual</span></span><br><span class="line">[root@lemon ~]<span class="comment"># nmcli c up team0 &amp;&amp; echo $?</span></span><br></pre></td></tr></table></figure><ul><li># ifconfig 查看一下 team0 网卡的 IP地址，mac地址是否一样</li></ul><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/u0VA1h.jpg" alt="u0VA1h"></p><h3 id="10-使用-xshell-连接测试"><a href="#10-使用-xshell-连接测试" class="headerlink" title="10. 使用 xshell 连接测试"></a>10. 使用 xshell 连接测试</h3><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/UVzlC4.jpg" alt="UVzlC4"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/ZKmmaU.jpg" alt="ZKmmaU"></p><h3 id="11-查看并修改自动生成的-team0-网卡的配置文件"><a href="#11-查看并修改自动生成的-team0-网卡的配置文件" class="headerlink" title="11. 查看并修改自动生成的 team0 网卡的配置文件"></a>11. 查看并修改自动生成的 team0 网卡的配置文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-team0</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/q8HG6N.jpg" alt="q8HG6N"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-team0-1</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/tYZdhs.jpg" alt="tYZdhs"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-team0-2</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/1wev9a.jpg" alt="1wev9a"></p><blockquote><p><em><strong>修改并重启网络</strong></em></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-team0</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/THXM5u.jpg" alt="THXM5u"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>查看网络状态</strong></em></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli c show</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ifconfig</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/BFKbId.jpg" alt="BFKbId"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/7t0fDS.jpg" alt="7t0fDS"></p><h3 id="12-测试网卡高可用"><a href="#12-测试网卡高可用" class="headerlink" title="12. 测试网卡高可用"></a>12. 测试网卡高可用</h3><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/fKTZll.jpg" alt="fKTZll"></p><blockquote><p>注：断开连接后，记得到虚拟机中重启一下网络，不然 <code>xsell</code> 是远程不上这台服务器的；至于这个步骤在真实环境中，你可以写个监控触发脚本来完成这步操作。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><blockquote><p>查看 <code>team0</code> 公共网卡的状态信息，发现活跃网卡从 <code>ens32</code> 切换到 <code>ens34</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># teamdctl team0 state</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/oYVrTG.jpg" alt="oYVrTG"></p><blockquote><p>使用 ping 命令测试一下网络是否是到影响</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/qNE4Wd.jpg" alt="qNE4Wd"></p><h3 id="13-扩展1"><a href="#13-扩展1" class="headerlink" title="13. 扩展1"></a>13. 扩展1</h3><blockquote><p><strong>如若出现重启主机后，发现 ens32  ens34  team0 网卡的MAC地址不一致，处理方法如下</strong></p><p><strong>重新启动一下 <code>team0</code>  <code>team0-1</code>  <code>team0-2</code> 网卡</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli connection down team0 &amp;&amp; nmcli connection up team0</span></span><br><span class="line">[root@lemon ~]<span class="comment"># nmcli connection up team0-1 &amp;&amp; nmcli connection up team0-2</span></span><br></pre></td></tr></table></figure><h3 id="14-扩展2"><a href="#14-扩展2" class="headerlink" title="14. 扩展2"></a>14. 扩展2</h3><blockquote><p><strong>更改为负载均衡的方式</strong></p></blockquote><ul><li>修改 team0 配置文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-team0</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/lsUuib.jpg" alt="lsUuib"></p><ul><li>然后再重启一下<code>team0  team0-1  team0-2</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># nmcli connection down team0 &amp;&amp; nmcli connection up team0</span></span><br><span class="line">[root@lemon ~]<span class="comment"># nmcli connection up team0-1 &amp;&amp; nmcli connection up team0-2</span></span><br><span class="line">[root@lemon ~]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure><ul><li>查看是否更改成功</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># teamdctl team0 state</span></span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/tsKFlL.jpg" alt="tsKFlL"></p><h3 id="15-扩展3"><a href="#15-扩展3" class="headerlink" title="15. 扩展3"></a>15. 扩展3</h3><blockquote><p>将上面关掉的网络设备打开，验证链路聚合的网卡状态是否会自动恢复</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/GkZ5JE.jpg" alt="GkZ5JE"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/nPODSz.jpg" alt="nPODSz"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层协议</title>
      <link href="/2021/07/15/OSI%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/07/15/OSI%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/0Wt2vB.jpg" alt="0Wt2vB"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议</title>
      <link href="/2021/07/14/TCP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/07/14/TCP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><blockquote><p>TCP协议全称: 传输控制协议, 顾名思义, 就是要对数据的传输进行一定的控制。先来看看它的报头</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8ddq4glj318g0seap4.jpg" alt="image-20210714094254707"></p><p>来分析分析每部分的含义和作用:</p><ul><li><p>源端口号/目的端口号: 表示数据从哪个进程来, 到哪个进程去.</p></li><li><p>32位序号: </p><ul><li>4位首部长度: 表示该tcp报头有多少个4字节(32个bit)</li><li>6位保留: 顾名思义, 先保留着, 以防万一</li><li>6位标志位：<ul><li>URG: 标识紧急指针是否有效</li><li>ACK: 标识确认序号是否有效</li><li>PSH: 用来提示接收端应用程序立刻将数据从tcp缓冲区读走</li><li>RST: 要求重新建立连接. 我们把含有RST标识的报文称为复位报文段</li><li>SYN: 请求建立连接. 我们把含有SYN标识的报文称为同步报文段</li><li>FIN: 通知对端, 本端即将关闭. 我们把含有FIN标识的报文称为结束报文段</li></ul></li></ul></li><li><p>16位窗口大小</p><ul><li>16位检验和: 由发送端填充, 检验形式有CRC校验等. 如果接收端校验不通过, 则认为数据有问题. 此处的校验和不光包含TCP首部, 也包含TCP数据部分。</li></ul></li><li><p>16位紧急指针: 用来标识哪部分数据是紧急数据。</p></li><li><p>选项和数据暂时忽略……</p></li></ul><h2 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h2><blockquote><p>正常情况下, tcp需要经过三次握手建立连接, 四次挥手断开连接; 那么什么是三次握手? 什么又是四次挥手?</p></blockquote><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>第一次:</p><p>客户端 - - &gt; 服务器 此时服务器知道了客户端要建立连接了</p><p>第二次:</p><p>客户端 &lt; - - 服务器 此时客户端知道服务器收到连接请求了</p><p>第三次:</p><p>客户端 - - &gt; 服务器 此时服务器知道客户端收到了自己的回应</p><p>到这里, 就可以认为客户端与服务器已经建立了连接。</p><p><strong>再来看个图：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8i04j9sg311w0lcju4.gif" alt="三次握手"></p><p><strong>解释：</strong></p><p>刚开始, 客户端和服务器都处于 CLOSE 状态.</p><p>此时, 客户端向服务器主动发出连接请求, 服务器被动接受连接请求.</p><p>1, TCP服务器进程先创建传输控制块TCB, 时刻准备接受客户端进程的连接请求, 此时服务器就进入了 LISTEN（监听）状态</p><p>2, TCP客户端进程也是先创建传输控制块TCB, 然后向服务器发出连接请求报文，此时报文首部中的同步标志位SYN=1, 同时选择一个初始序列号 seq = x, 此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定, SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。</p><p>3, TCP服务器收到请求报文后, 如果同意连接, 则发出确认报文。确认报文中的 ACK=1, SYN=1, 确认序号是 x+1, 同时也要为自己初始化一个序列号 seq = y, 此时, TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据, 但是同样要消耗一个序号。</p><p>4, TCP客户端进程收到确认后还, 要向服务器给出确认。确认报文的ACK=1，确认序号是 y+1，自己的序列号是 x+1.</p><p>5, 此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</p><p><strong>为什么不用两次?</strong></p><p>主要是为了防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送的第一个请求连接并且没有丢失，只是因为在网络中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时之前滞留的那一次请求连接，因为网络通畅了, 到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的费。</p><p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p><p><strong>为什么不用四次?</strong></p><p>因为三次已经可以满足需要了, 四次就多余了.</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>数据传输完毕后，双方都可以释放连接.</p><p>此时客户端和服务器都是处于ESTABLISHED状态，然后客户端主动断开连接，服务器被动断开连接.</p><p>1, 客户端进程发出连接释放报文，并且停止发送数据。</p><p>释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</p><p>2, 服务器收到连接释放报文，发出确认报文，ACK=1，确认序号为 u+1，并且带上自己的序列号seq=v，此时服务端就进入了CLOSE-WAIT（关闭等待）状态。</p><p>TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p><p>3, 客户端收到服务器的确认请求后，此时客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最终数据）</p><p>4, 服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，确认序号为v+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p><p>5, 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，确认序号为w+1，而自己的序列号是u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p><p>6, 服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p><p><strong>再来看一张图：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8nio9fzg30iy0aoq5k.gif" alt="四次断开"></p><p><strong>为什么最后客户端还要等待 2*MSL的时间呢?</strong></p><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p><p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p><p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p><p><strong>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</strong></p><p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。</p><p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p><p><strong>如果已经建立了连接, 但是客户端突发故障了怎么办?</strong></p><p>TCP设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h2 id="理解TIME-WAIT状态"><a href="#理解TIME-WAIT状态" class="headerlink" title="理解TIME_WAIT状态"></a>理解TIME_WAIT状态</h2><p>可以做一个实验：</p><p>安装httpd服务并启动服务；我这里已经安装并启动了apache服务</p><p><code>[root@localhost ~]# netstat -anptu|grep 80</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8v8da5yj318o02sdhp.jpg" alt="image-20210714100004441"></p><p>测试访问我自身服务器的apache服务:</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8vrxltmj318o02kwfa.jpg" alt="image-20210714100036039"></p><p>然后马上回到服务器上查看端口号，此时就会出现TIME_WAIT这个状态</p><p><code>[root@localhost ~]# netstat -anptu|grep 80</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8w6gu09j318m03w0vn.jpg" alt="image-20210714100058942"></p><p>绑定的时候出了问题。</p><p>这是因为,虽然server应用程序终止了,但TCP协议层的连接并没有完全断开,因此不能再次监听绑定同样的server端口。</p><p> TCP协议规定,主动关闭连接的一方要处于TIME_ WAIT状态,等待2*MSL(maximum segment lifetime)的时间后才能回到CLOSED状态。</p><p>我们使用Ctrl-C终止了server, 所以server是主动关闭连接的一方, 在TIME_WAIT期间仍然不能再次监听同样的server端口。</p><p>MSL在RFC1122中规定为两分钟,但是各操作系统的实现不同, 在Centos7上默认配置的值是60s;</p><p>可以通过 cat /proc/sys/net/ipv4/tcp_fin_timeout 查看MSL的值：</p><p><code>[root@localhost ~]# cat /proc/sys/net/ipv4/tcp_fin_timeout</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg8xay9mhj318k03sn09.jpg" alt="image-20210714100204512"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell</title>
      <link href="/2021/07/13/Shell/"/>
      <url>/2021/07/13/Shell/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="shell-介绍"><a href="#shell-介绍" class="headerlink" title="shell 介绍"></a>shell 介绍</h1><ul><li>什么shell</li><li>shell功能</li></ul><h2 id="一、什么是shell"><a href="#一、什么是shell" class="headerlink" title="一、什么是shell"></a>一、什么是shell</h2><blockquote><p>shell是一个程序，采用C语言编写，是用户和linux内核沟通的桥梁。它既是一种命令语言，又是一种解释性的编程语言。通过一个图表来查看一下shell的作用。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricvz2ha1j30g70get9v.jpg" alt="image-20200605095946883"></p><blockquote><p><em><strong>作用：</strong></em></p><p><strong>kernel：为软件服务，接收用户或软件指令驱动硬件，完成工作</strong></p><p><strong>shell：命令解释器</strong></p><p><strong>user：用户接口，对接用户。</strong></p></blockquote><h2 id="二、shell-功能"><a href="#二、shell-功能" class="headerlink" title="二、shell 功能"></a>二、shell 功能</h2><ul><li>命令行解释功能</li><li>启动程序</li><li>输入输出重定向</li><li>管道连接</li><li>文件名置换 (echo /*)</li><li>变量维护</li><li>环境控制</li><li>shell编程</li></ul><h1 id="shell-语法"><a href="#shell-语法" class="headerlink" title="shell 语法"></a>shell 语法</h1><ul><li>如何抒写一个shell脚本</li><li>shell脚本运行</li><li>shell中的特殊符号</li><li>重定向</li><li>shell中数学运算</li></ul><p><strong>shell脚本就是一组命令的集合，按照先后顺序执行；自上而下写入到一个文本文件中，然后给予执行权限。</strong></p><h2 id="一、如何抒写一个shell脚本"><a href="#一、如何抒写一个shell脚本" class="headerlink" title="一、如何抒写一个shell脚本"></a>一、如何抒写一个shell脚本</h2><ul><li><p><em><strong>shell脚本的命名</strong></em></p><ul><li>名字要有意义，最好不要用a、b、c、d、1、2、3、4这种方式命名；虽然linux系统中，文件没有扩展名的概念，依然建议你用.sh结尾；名字不要太长，最好能在30个字节以内解决。例如：check_memory.sh</li></ul></li><li><p><em><strong>shell脚本格式</strong></em></p><ul><li>shell脚本开头必须指定脚本运行环境 以 #！这个特殊符号组合来组成。如： #!/bin/bash 指定该脚本是运行解析由/bin/bash来完成的；</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shell脚本中，最好加入脚本说明字段</span><br><span class="line"> <span class="comment">#!/bin/bash</span></span><br><span class="line"> <span class="comment">#Author: lemon</span></span><br><span class="line"> <span class="comment">#Created Time: 2018/08/2712:27</span></span><br><span class="line"> <span class="comment">#Script Description: first shell study script</span></span><br><span class="line"> <span class="comment">#下面写执行的命令语句</span></span><br><span class="line"> 。。。</span><br><span class="line"> 。。。</span><br><span class="line"> 。。。</span><br></pre></td></tr></table></figure><h2 id="二、如何运行一个shell脚本"><a href="#二、如何运行一个shell脚本" class="headerlink" title="二、如何运行一个shell脚本"></a>二、如何运行一个shell脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># cat /etc/shells      #查看当前系统的所有shell环境</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line"></span><br><span class="line">脚本运行需要执行权限，当我们给一个文件赋予执行权限后，该脚本就可以运行。</span><br><span class="line">[root@lemon ~]<span class="comment"># chmod u+x filename</span></span><br><span class="line"></span><br><span class="line">如果不希望赋予脚本执行权限，那么可以使用bash命令来运行未给予执行权限的脚本bash fiename</span><br><span class="line">[root@lemon ~]<span class="comment"># bash filename</span></span><br></pre></td></tr></table></figure><h2 id="三、shell中的特殊符号"><a href="#三、shell中的特殊符号" class="headerlink" title="三、shell中的特殊符号"></a>三、shell中的特殊符号</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~          家目录，<span class="built_in">cd</span> ~ 代表进入用户家目录</span><br><span class="line">!          执行历史命令，!! 执行上一条命令</span><br><span class="line">$          变量中取内容符</span><br><span class="line">+ - * / %  对应数学运算  加 减 乘 除 取余 </span><br><span class="line">*          星号是shell中的通配符  匹配所有</span><br><span class="line">?          问号是shell中的通配符  匹配除回车以外的一个字符</span><br><span class="line">\          转义字符</span><br><span class="line">``         反引号,命令中执行命令</span><br><span class="line"><span class="string">&#x27; &#x27;</span>        强转义,禁止引用其他变量值，$视为普通字符；意思就是<span class="string">&#x27; &#x27;</span>号里面写的是什么，显示的就是什么</span><br><span class="line"><span class="string">&quot; &quot;</span>        弱转义,允许通过$符号引用其他变量值；意思就是将<span class="string">&quot; &quot;</span>号里面变量名的变量值显示出来</span><br><span class="line">|          管道符,把前边命令的输出结果，作为后边命令的处理对象</span><br><span class="line">||         逻辑或,前边的命令执行成功，后面的不执行；前边的命令执行失败，后面的命令将会被执行</span><br><span class="line">&amp;          后台执行,仅在当前终端生效，断开终端后放在后台运行的进程也会随着退出</span><br><span class="line">&amp;&amp;         逻辑与,只有前边的命令执行成功，才会执行后面的命令</span><br><span class="line">;          和 &amp;&amp; 符号不同的一点就是 他不管前面命令的结果是否成功，它都会执行后面命令</span><br></pre></td></tr></table></figure><h2 id="四、shell重定向"><a href="#四、shell重定向" class="headerlink" title="四、shell重定向"></a>四、shell重定向</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认是正确重定向 </span></span><br><span class="line">        1&gt;        重定向正确覆盖；把屏幕上的正确内容输出到文件 </span><br><span class="line">1&gt;&gt;       重定向正确追加；把屏幕上的正确内容以追加的形式输出到文件</span><br><span class="line">2&gt;        重定向错误覆盖；把屏幕上的错误内容输出到文件</span><br><span class="line">2&gt;&gt;       重定向错误追加；把屏幕上的错误内容以追加的形式输出到文件</span><br><span class="line">&amp;&gt;        重定向混合覆盖；把屏幕上无论是正确还是错误的都输出到文件</span><br><span class="line">&amp;&gt;&gt;       重定向混合追加；把屏幕上无论是正确还是错误以追加的形式都输出到文件</span><br></pre></td></tr></table></figure><h2 id="五、shell数学运算"><a href="#五、shell数学运算" class="headerlink" title="五、shell数学运算"></a>五、shell数学运算</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#$双小圆括号运算，在shell中$(( ))也可以用来做数学运算（推荐）</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $((100 + 3))</span></span><br><span class="line">103</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $((100 - 3)) </span></span><br><span class="line">97</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $((100 * 3)) </span></span><br><span class="line">300</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $((100 / 3)) </span></span><br><span class="line">33</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $((100 % 3)) </span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $((100 ** 3)) </span></span><br><span class="line">1000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#expr 命令：只能做整数运算，格式比较古板，注意空格</span></span><br><span class="line">[root@lemon ~]<span class="comment"># expr 1 + 1</span></span><br><span class="line">2</span><br><span class="line">[root@lemon ~]<span class="comment"># expr 5 - 2</span></span><br><span class="line">3</span><br><span class="line">[root@lemon ~]<span class="comment"># expr 5 \* 2  #注意*出现应该转义，否则认为是通配符</span></span><br><span class="line">10</span><br><span class="line">[root@lemon ~]<span class="comment"># expr 5 / 2</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用bc计算器处理浮点运算，scale=2代表小数点保留两位</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo &quot;scale=2; 100 + 3&quot; | bc</span></span><br><span class="line">103</span><br><span class="line">[root@lemon ~]<span class="comment"># echo &quot;scale=2; 100 - 3&quot; | bc</span></span><br><span class="line">97</span><br><span class="line">[root@lemon ~]<span class="comment"># echo &quot;scale=2; 100 * 3&quot; | bc</span></span><br><span class="line">300</span><br><span class="line">[root@lemon ~]<span class="comment"># echo &quot;scale=2; 100 / 3&quot; | bc</span></span><br><span class="line">33.33</span><br></pre></td></tr></table></figure><h1 id="shell格式化输出"><a href="#shell格式化输出" class="headerlink" title="shell格式化输出"></a>shell格式化输出</h1><ul><li>echo 命令</li><li>颜色输出</li></ul><p><strong>一个程序需要有0个或以上输入，一个或更多输出</strong></p><h2 id="一、echo-命令介绍"><a href="#一、echo-命令介绍" class="headerlink" title="一、echo 命令介绍"></a>一、echo 命令介绍</h2><ul><li><p><em><strong>功能：将内容输出到默认显示设备</strong></em></p><ul><li>echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。 功能说明:显示文字。</li><li>补充说明:echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开,并在 最后加上换行号。</li></ul></li><li><p><em><strong>命令选项：</strong></em></p><ul><li><p>–help 显示帮助–version显示版本信息</p></li><li><p>-n 不要在最后自动换行</p></li><li><p>-e 若字符串中出现以下特殊字符，则特别加以处理，而不会将它当成一般文字输出:</p><ul><li>\t 插入tab;</li><li>\n 换行且光标移至行首;</li><li>\a 发出警告声;</li><li>\c 忽略掉这个参数之后的任何字符信息；<ul><li>\r 输出回车后的内容信息;</li></ul></li><li>\v 换行但光标仍旧停留在原来的位置;与\f相同;</li></ul></li></ul></li><li><p><em><strong>举例说明：</strong></em></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \n</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo -e &quot;lemon\nhandsome&quot;</span></span><br><span class="line">lemon</span><br><span class="line">handsome</span><br><span class="line"></span><br><span class="line"><span class="comment"># \t</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo -e &quot;lemon\thandsome&quot;</span></span><br><span class="line">lemonhandsome</span><br><span class="line"></span><br><span class="line"><span class="comment"># \c</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo -e &quot;lemon\chandsome&quot;</span></span><br><span class="line">lemon[root@lemon-min ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \r</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo -e &quot;lemo\rnhandsome&quot;</span></span><br><span class="line">nhandsome</span><br><span class="line"></span><br><span class="line"><span class="comment"># \v</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo -e &quot;lemon\vhandsome&quot;</span></span><br><span class="line">lemon</span><br><span class="line">     handsome</span><br></pre></td></tr></table></figure><h2 id="二、颜色代码"><a href="#二、颜色代码" class="headerlink" title="二、颜色代码"></a>二、颜色代码</h2><blockquote><p>脚本中echo显示内容带颜色显示,echo显示带颜色，需要使用参数  <code>-e</code></p><p><em><strong>示例如下：</strong></em></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">下面是相应的字和背景颜色，可以自己来尝试找出不同颜色搭配</span><br><span class="line">　　echo -e &quot;\033[31m 红色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[34m 黄色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[41;33m 红底黄字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[41;37m 红底白字 \033[0m&quot;</span><br><span class="line">　　</span><br><span class="line">字颜色：30—–37</span><br><span class="line">　　echo -e &quot;\033[30m 黑色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[31m 红色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[32m 绿色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[33m 黄色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[34m 蓝色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[35m 紫色字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[36m 天蓝字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[37m 白色字 \033[0m&quot;</span><br><span class="line">　　</span><br><span class="line">字背景颜色范围：40—–47</span><br><span class="line">　　echo -e &quot;\033[40;37m 黑底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[41;37m 红底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[42;37m 绿底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[43;37m 黄底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[44;37m 蓝底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[45;37m 紫底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[46;37m 天蓝底白字 \033[0m&quot;</span><br><span class="line">　　echo -e &quot;\033[47;30m 白底黑字 \033[0m&quot;</span><br><span class="line">　　</span><br><span class="line">最后面控制选项说明</span><br><span class="line">　　\033[0m 关闭所有属性</span><br><span class="line">　　\033[1m 设置高亮度</span><br><span class="line">　　\033[4m 下划线</span><br><span class="line">　　\033[5m 闪烁</span><br><span class="line">　　\033[7m 反显</span><br><span class="line">　　\033[8m 消隐</span><br><span class="line"></span><br><span class="line">设置前景色</span><br><span class="line">　　\033[40m — \33[47m 设置背景色</span><br><span class="line">　　\033[nA 光标上移n行</span><br><span class="line">　　\033[nB 光标下移n行</span><br><span class="line">　　\033[nC 光标右移n行</span><br><span class="line">　　\033[nD 光标左移n行</span><br><span class="line">　　\033[y;xH设置光标位置</span><br><span class="line">　　\033[2J 清屏</span><br><span class="line">　　\033[K 清除从光标到行尾的内容</span><br><span class="line">　　\33[s 保存光标位置</span><br><span class="line">　　\033[u 恢复光标位置</span><br><span class="line">　　\033[?25l 隐藏光标</span><br><span class="line">　　\033[?25h 显示光标</span><br></pre></td></tr></table></figure><h1 id="shell交互输入定义变量"><a href="#shell交互输入定义变量" class="headerlink" title="shell交互输入定义变量"></a>shell交互输入定义变量</h1><h2 id="一、read基本命令"><a href="#一、read基本命令" class="headerlink" title="一、read基本命令"></a>一、read基本命令</h2><ul><li><p><em><strong>默认接受键盘的输入，回车符代表输入结束</strong></em></p></li><li><p><em><strong>read 命令选项：</strong></em></p><ul><li>-p 打印信息</li><li>-t  交互停留的时间</li><li>-s 隐藏在外面输入值的信息</li><li>-n 限制输入字符个数</li></ul></li></ul><h2 id="二、read-基本示例"><a href="#二、read-基本示例" class="headerlink" title="二、read 基本示例"></a>二、read 基本示例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim read.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Centos linux 7 (Core)&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Kernel `uname -r` an `uname -m`&quot;</span></span><br><span class="line"><span class="built_in">read</span> -n 6 -p <span class="string">&quot;login:&quot;</span> user</span><br><span class="line"><span class="built_in">read</span> -n 6 -t 10 -s -p <span class="string">&quot;Passd:&quot;</span> passwd</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;login:<span class="variable">$user</span>\nPassd:<span class="variable">$passwd</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行此脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># bash read.sh</span></span><br><span class="line">Centos linux 7 (Core)</span><br><span class="line">Kernel 3.10.0-693.el7.x86_64 an x86_64</span><br><span class="line">login:lemon</span><br><span class="line">Passd:</span><br><span class="line">login:lemon</span><br><span class="line">Passd:123123</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>变量介绍</li><li>变量分类</li><li>变量管理</li></ul><h2 id="一、变量介绍"><a href="#一、变量介绍" class="headerlink" title="一、变量介绍"></a>一、变量介绍</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在编程中，我们总有一些数据需要临时存放在内存，以待后续使用时快速读出。内存在系统启动的时候被按照<span class="number">1</span>B一个单位划分为若干个块，然后统一编号<span class="comment">(16进制编号)</span>，并对内存的使用情况做记录，保存在内存跟踪表中。</span><br></pre></td></tr></table></figure><ul><li><em><strong>那么问题来了，1G内存有多少个1B的单位呢？</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">计算机的单位:</span><br><span class="line">1B=8bit</span><br><span class="line">1KB=1024B</span><br><span class="line">1MB=1024KB</span><br><span class="line">1GB=1024MB</span><br><span class="line">1TB=1024GB</span><br><span class="line">1PB=1024TB</span><br><span class="line">1EB=1024PB</span><br><span class="line">1ZB=1024EB</span><br><span class="line">...</span><br><span class="line">好了，已经够大了！当然还有YB、BB更大的单位，同样进制也是1024.</span><br><span class="line"></span><br><span class="line">1G=1024*1024*1024=1073741824B</span><br></pre></td></tr></table></figure><blockquote><p>假如你将一个1B的字符存入内存，如何读出呢？有没有一种大海捞针的感觉啊！我们讨论一下计算机是如何通过让我们快速将数据存在内存，如何从内存中读出数据的。我们研究过变量后就明白了。</p></blockquote><ul><li><p><em><strong>变量：变量是编程中最常用的一种临时在内存中存取数据的一种方式。</strong></em></p></li><li><p><em><strong>变量存取原理</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricw9vbxzj315l0ksgm8.jpg" alt="image-20200605145747872"></p></li><li><p><strong>从图片可以看出，当我们在脚本中定义变量存值的时候，可以从以下方面看到变化：</strong></p><ul><li><p>内存占用：如果存的是一个字符则占用1个字节，如果存的是字符串则是字符串的长度加1个字节长度(\0是一个特殊字符，代表字符串结束)。</p></li><li><p>变量名与内存空间关系：计算机中会将对应的内存空间和变量名称绑定在一起，此时代表这段内存空间已经被程序占用，其他程序不可复用；然后将变量名对应的值存在对应内存地址的空间里。</p></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 理解变量存储：STRING1=&quot;ABC&quot;</span></span><br><span class="line">1）0X5...0X8(物理地址) &lt;===&gt; STRING1(逻辑地址) &lt;===&gt; 存取数据(ABC)</span><br><span class="line">         0x5...0x8是内存物理地址，是计算机寻址的依据；</span><br><span class="line">         STRING1是给人看的，方便人记忆；</span><br><span class="line"></span><br><span class="line">2）对于人来说STRING1上存的数据是ABC，对于计算机来说数据是存在物理地址上的；</span><br><span class="line"></span><br><span class="line">3）在建立变量的时候计算机自动将逻辑地址(变量名)和物理地址做了对应。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#变量读出</span></span><br><span class="line">1）当调用STRING1的时候，计算机会根据对应关系，找到物理地址</span><br><span class="line"></span><br><span class="line">2）定位内存地址，读出数据并返回</span><br></pre></td></tr></table></figure><h2 id="二、变量分类"><a href="#二、变量分类" class="headerlink" title="二、变量分类"></a>二、变量分类</h2><blockquote><p><strong>注意事项：一定要按顺序写位置变量名！比如：$1 $2 $3 $4 $5 $6，如果位置变量用到两位数或多位数的话就用{}括上；比如：echo ‘$10 是’ ${10}；如果不加就会出现问题！</strong></p></blockquote><ol><li><em><strong>本地变量：</strong></em>用户私有变量，只有本用户可以使用，保存在家目录下的.bash_profile、.bashrc文件中</li><li><em><strong>全局变量：</strong></em>所有用户都可以使用，保存在/etc/profile、/etc/bashrc文件，可使用 <code>export</code> 命令查看系统变量</li><li><em><strong>用户自定义变量：</strong></em>用户自定义，比如脚本中的变量</li><li><em><strong>位置变量：</strong></em>可以放在任何位置的变量，$1、$2、$3……</li></ol><p><strong>案例解释</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># vim envd.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$1:&#x27;</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$2:&#x27;</span> <span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$3:&#x27;</span> <span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$4:&#x27;</span> <span class="variable">$4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$5:&#x27;</span> <span class="variable">$5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$6:&#x27;</span> <span class="variable">$6</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$7:&#x27;</span> <span class="variable">$7</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$8:&#x27;</span> <span class="variable">$8</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$9:&#x27;</span> <span class="variable">$9</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;我是$10:&#x27;</span> <span class="variable">$&#123;10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行此脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># bash envd.sh q w e r t y u i o p</span></span><br><span class="line">我是<span class="variable">$1</span>: q</span><br><span class="line">我是<span class="variable">$2</span>: w</span><br><span class="line">我是<span class="variable">$3</span>: e</span><br><span class="line">我是<span class="variable">$4</span>: r</span><br><span class="line">我是<span class="variable">$5</span>: t</span><br><span class="line">我是<span class="variable">$6</span>: y</span><br><span class="line">我是<span class="variable">$7</span>: u</span><br><span class="line">我是<span class="variable">$8</span>: i</span><br><span class="line">我是<span class="variable">$9</span>: o</span><br><span class="line">我是<span class="variable">$10</span>: p</span><br></pre></td></tr></table></figure><ol start="5"><li><p><em><strong>预定义变量：</strong></em>$0、$#、$*、$?</p><ul><li><p>$?：上一条命令执行后返回的状态，当返回状态值为0时表示执行正常，非0值表示执行异常或出错</p></li><li><p>$#：命令行中位置变量的个数</p></li><li><p>$0：当前执行的进程/程序名</p></li><li><p>$*：所有位置变量的内容，$@ 和 $*差不多。但是注意，他俩是有区别的！！！</p><ul><li><em>使用如下的脚本查看 $@ 和  $* 的区别</em></li></ul></li></ul></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># vim envd.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;我是--&gt;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;我是--&gt;<span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;我是--&gt;<span class="variable">$3</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==================================&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==================================&#x27;</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>;<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$y</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==================================&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># sh envd.sh a1 a2 a3</span></span><br><span class="line">我是--&gt;a1</span><br><span class="line">我是--&gt;a2</span><br><span class="line">我是--&gt;a3</span><br><span class="line">==================================</span><br><span class="line">a1 a2 a3</span><br><span class="line">==================================</span><br><span class="line">a1</span><br><span class="line">a2</span><br><span class="line">a3</span><br><span class="line">==================================</span><br></pre></td></tr></table></figure><p><strong>案例解释：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># vim envd.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;我是--&gt;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;我是--&gt;<span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;我是--&gt;<span class="variable">$3</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$?&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># bash envd.sh a1 a2 a3</span></span><br><span class="line">我是--&gt;a1</span><br><span class="line">我是--&gt;a2</span><br><span class="line">我是--&gt;a3</span><br><span class="line">0</span><br><span class="line">3</span><br><span class="line">a1 a2 a3</span><br><span class="line">envd.sh</span><br></pre></td></tr></table></figure><h2 id="三、使用变量"><a href="#三、使用变量" class="headerlink" title="三、使用变量"></a>三、使用变量</h2><h3 id="1-定义变量"><a href="#1-定义变量" class="headerlink" title="1. 定义变量"></a>1. 定义变量</h3><ul><li><p><em><strong>变量格式： 变量名=值</strong></em></p></li><li><p><em><strong>在shell编程中的变量名和等号之间不能有空格。</strong></em></p></li><li><p><em><strong>变量名命名规则：</strong></em></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</span></span><br><span class="line"><span class="comment"># 中间不能有空格，可以使用下划线（_）。</span></span><br><span class="line"><span class="comment"># 不能使用标点符号。</span></span><br><span class="line"><span class="comment"># 不能使用bash里的关键字（可用help命令查看保留关键字）。</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>定义变量演示：</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量赋值，此种方法设置为本地变量</span></span><br><span class="line">[root@lemon ~]<span class="comment"># name=&#x27;lemon&#x27;</span></span><br><span class="line">[root@lemon ~]<span class="comment"># pass=&#x27;12345&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-读取变量内容"><a href="#2-读取变量内容" class="headerlink" title="2. 读取变量内容"></a>2. 读取变量内容</h3><ul><li><em><strong>读取方法：$变量名</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量内容读出</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $name</span></span><br><span class="line">lemon</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $age</span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h3 id="3-取消变量-unset"><a href="#3-取消变量-unset" class="headerlink" title="3. 取消变量  unset"></a>3. 取消变量  unset</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># unset name</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $name</span></span><br></pre></td></tr></table></figure><h3 id="4-定义全局变量-export"><a href="#4-定义全局变量-export" class="headerlink" title="4. 定义全局变量 export"></a>4. 定义全局变量 export</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># export name=&#x27;lemon&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><em>上述设置的变量其实都是一次性的变量，系统重启就会丢失。</em></li><li><em>如果希望本地变量或者全局变量可以永久使用，可以将需要设置的变量写入变量文件中即可。</em></li></ul><h3 id="5-定义永久变量"><a href="#5-定义永久变量" class="headerlink" title="5. 定义永久变量"></a>5. 定义永久变量</h3><ul><li><p><em><strong>本地变量：</strong></em>用户私有变量，只有本用户可以使用，保存在家目录下的.bash_profile、.bashrc文件中</p></li><li><p><em><strong>全局变量：</strong></em>所有用户都可以使用，保存在/etc/profile、/etc/bashrc文件中</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地变量</span></span><br><span class="line">[root@lemon ~]<span class="comment"># tail -1 .bash_profile</span></span><br><span class="line"><span class="built_in">export</span> name=<span class="string">&#x27;lemon&#x27;</span></span><br><span class="line">[root@lemon ~]<span class="comment"># source .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">[root@lemon ~]<span class="comment"># tail -1 /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> age=18</span><br><span class="line">[root@lemon ~]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组介绍</li><li>基本数组</li><li>关联数组</li><li>案列分享</li></ul><h2 id="一、数组介绍"><a href="#一、数组介绍" class="headerlink" title="一、数组介绍"></a>一、数组介绍</h2><ul><li><p>概述：数组就是一组数据类型相同集合</p></li><li><p><em>一个变量只能存一个值，但是现实中又很多值需要存储，那么变量就有些拘谨了。比如做一个学员信息表，一个班50个人，每个人6条信息，我们需要定义300个变量才能完成。恐怖恐怖，这只是一个班的学生，一个学校呢？一个市呢？……我想静静了！</em></p></li><li><p><em>仔细想想上述的案例，一个学生六个信息：ID、姓名、性别、年龄、成绩、班级。可不可以定义六个变量就能存储这六类信息呢？答案是当然可以的！但变量不行，我们可以用数组。</em></p></li></ul><h2 id="二、基本数组"><a href="#二、基本数组" class="headerlink" title="二、基本数组"></a>二、基本数组</h2><blockquote><p><strong>数组可以让用户一次赋予多个值，需要读取数据时只需通过索引调用就可以方便读出了。</strong></p></blockquote><h3 id="1-数组语法"><a href="#1-数组语法" class="headerlink" title="1. 数组语法"></a>1. 数组语法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组名称=()                             <span class="comment">#定义空元素的数组</span></span><br><span class="line">数组名称=(元素1 元素2 元素3 ...)         <span class="comment">#定义有元素的数组</span></span><br></pre></td></tr></table></figure><h3 id="2-数组读出"><a href="#2-数组读出" class="headerlink" title="2. 数组读出"></a>2. 数组读出</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;数组名称[索引]&#125;</span></span><br><span class="line">索引默认是元素在数组中的排队编号，默认第一个从<span class="number">0</span>开始</span><br></pre></td></tr></table></figure><h3 id="3-数组赋值"><a href="#3-数组赋值" class="headerlink" title="3. 数组赋值"></a>3. 数组赋值</h3><ul><li><em>数组赋值格式：数组名[下标]=值，下标不存在，则新增数组元素; 下标已有，则覆盖值。</em></li></ul><h4 id="方法1：一次赋一个值"><a href="#方法1：一次赋一个值" class="headerlink" title="方法1：一次赋一个值"></a>方法1：一次赋一个值</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># array1[0]=&#x27;tom&#x27;</span></span><br><span class="line">[root@lemon ~]<span class="comment"># array1[1]=&#x27;jarry&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="方法2：一次赋多个值"><a href="#方法2：一次赋多个值" class="headerlink" title="方法2：一次赋多个值"></a>方法2：一次赋多个值</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># array2=(tom jack alice &quot;bash shell&quot;)     #linux默认都是字符串类型数据</span></span><br><span class="line">[root@lemon ~]<span class="comment"># array3=(`cat /etc/passwd`)               #希望是将该文件中的每一个行作为一                                                          个元素赋值给数组array3</span></span><br></pre></td></tr></table></figure><h3 id="4-查看基本数组-a"><a href="#4-查看基本数组-a" class="headerlink" title="4. 查看基本数组-a"></a>4. 查看基本数组<code>-a</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数组</span></span><br><span class="line">[root@lemon ~]<span class="comment"># declare -a</span></span><br></pre></td></tr></table></figure><h3 id="5-访问数组元素"><a href="#5-访问数组元素" class="headerlink" title="5. 访问数组元素"></a>5. 访问数组元素</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;array1[0]&#125;        #访问数组中的第一个元素</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;array1[*]&#125;        #访问数组中所有元素  等同于 echo $&#123;array1[@]&#125;</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;#array1[*]&#125;       #统计数组元素的个数</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;!array2[*]&#125;       #获取数组元素中的所有索引</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;array1[*]:1&#125;      #从数组下标1开始</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;array1[*]:1:2&#125;    #从数组下标1开始，访问两个元素</span></span><br></pre></td></tr></table></figure><h3 id="6-遍历数组"><a href="#6-遍历数组" class="headerlink" title="6. 遍历数组"></a>6. 遍历数组</h3><ul><li><em>默认数组通过数组元素的个数进行遍历</em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># for i in `echo $&#123;array1[*]&#125;`;do echo $i; done</span></span><br><span class="line">pear</span><br><span class="line">apple</span><br><span class="line">orange</span><br><span class="line">peach</span><br></pre></td></tr></table></figure><h2 id="三、关联数组"><a href="#三、关联数组" class="headerlink" title="三、关联数组"></a>三、关联数组</h2><h3 id="1-定义关联数组"><a href="#1-定义关联数组" class="headerlink" title="1. 定义关联数组"></a>1. 定义关联数组</h3><ul><li><em>申明关联数组变量</em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># declare -A ass_array1</span></span><br><span class="line">[root@lemon ~]<span class="comment"># declare -A ass_array2</span></span><br></pre></td></tr></table></figure><h3 id="2-关联数组赋值"><a href="#2-关联数组赋值" class="headerlink" title="2. 关联数组赋值"></a>2. 关联数组赋值</h3><h4 id="方法1：一次赋一个值-1"><a href="#方法1：一次赋一个值-1" class="headerlink" title="方法1：一次赋一个值"></a>方法1：一次赋一个值</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># ass_array1[index1]=pear</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ass_array1[index2]=apple</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ass_array1[index3]=orange</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ass_array1[index4]=peach</span></span><br></pre></td></tr></table></figure><h4 id="方法2：一次赋多个值-1"><a href="#方法2：一次赋多个值-1" class="headerlink" title="方法2：一次赋多个值"></a>方法2：一次赋多个值</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># ass_array2=([index1]=tom [index2]=jack [index3]=alice [index4]=&#x27;tool&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="3-查看关联数组-A"><a href="#3-查看关联数组-A" class="headerlink" title="3. 查看关联数组-A"></a>3. 查看关联数组<code>-A</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># declare -A</span></span><br></pre></td></tr></table></figure><h3 id="4-访问数组元素"><a href="#4-访问数组元素" class="headerlink" title="4. 访问数组元素"></a>4. 访问数组元素</h3><blockquote><p>@ 等同于 *</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;ass_array2[index2]&#125;   #访问数组中的第二个元数 </span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;ass_array2[*]&#125;        #访问数组中所有元数  等同于 echo $&#123;array1[@]&#125;</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;#ass_array2[*]&#125;       #获得数组元素的个数</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo $&#123;!ass_array2[*]&#125;       #获得数组元素的全部索引</span></span><br></pre></td></tr></table></figure><h3 id="5-遍历数组"><a href="#5-遍历数组" class="headerlink" title="5. 遍历数组"></a>5. 遍历数组</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]# <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">`echo $&#123;ass_array2[*]&#125;`</span>;<span class="keyword">do</span> echo $i; done</span><br><span class="line">tool</span><br><span class="line">tom</span><br><span class="line">jack</span><br><span class="line">alice</span><br></pre></td></tr></table></figure><h3 id="6-简单的学员信息系统"><a href="#6-简单的学员信息系统" class="headerlink" title="6. 简单的学员信息系统"></a>6. 简单的学员信息系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;3;i++));<span class="keyword">do</span></span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;输入第<span class="subst">$((i + 1)</span>)个人名: &quot;</span> name[<span class="variable">$i</span>]</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;输入第$[<span class="variable">$i</span> + 1]个年龄: &quot;</span> age[<span class="variable">$i</span>]</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;输入第`expr <span class="variable">$i</span> + 1`个性别: &quot;</span> gender[<span class="variable">$i</span>]</span><br><span class="line">      <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\t\t\t\t\t\t学员查询系统&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">      cp=0</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;输入要查询的姓名: &quot;</span> xm</span><br><span class="line">      [ <span class="variable">$xm</span> == <span class="string">&quot;q&quot;</span> ] &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">      <span class="keyword">for</span> ((i=0;i&lt;3;i++));<span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$xm</span>&quot;</span> == <span class="string">&quot;<span class="variable">$&#123;name[$i]&#125;</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">              <span class="built_in">echo</span> -e <span class="string">&quot;name: <span class="variable">$&#123;name[$i]&#125;</span>\nage: <span class="variable">$&#123;age[$i]&#125;</span>\ngender: <span class="variable">$&#123;gender[$i]&#125;</span>&quot;</span></span><br><span class="line">              cp=1</span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">      [ <span class="variable">$cp</span> -eq 0 ]&amp;&amp;<span class="built_in">echo</span> <span class="string">&quot;not found student&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="shell流程控制-if判断语句"><a href="#shell流程控制-if判断语句" class="headerlink" title="shell流程控制-if判断语句"></a>shell流程控制-if判断语句</h1><ul><li>shell中的四大运算</li><li>if语法</li><li>在写程序的时候，时常会对上一步执行是否成功如何判断苦恼，当我们今天学习了if就可以解决你的苦恼。</li><li>if语句在我们程序中就是用来做判断的，不管学习的是什么语言，以后只要涉及到判断的部分，都可以直接拿if来使用，不同的语言之间的if只是语法不同，原理是相同的。</li></ul><h2 id="一、shell中的运算"><a href="#一、shell中的运算" class="headerlink" title="一、shell中的运算"></a>一、shell中的运算</h2><h3 id="1-数学比较运算"><a href="#1-数学比较运算" class="headerlink" title="1. 数学比较运算"></a>1. 数学比较运算</h3><ul><li><em><strong>示例：</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-eq    <span class="comment">#等于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 9 -eq 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -eq 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">-gt    <span class="comment">#大于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -gt 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 11 -gt 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">-lt    <span class="comment">#小于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 9 -lt 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -lt 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-ge    <span class="comment">#大于或等于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 9 -ge 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 11 -ge 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -ge 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">-le    <span class="comment">#小于或等于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 9 -le 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -le 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 11 -le 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-ne    <span class="comment">#不等于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 9 -ne 10 ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -ne 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 11 -ne 10 ] ; echo $?</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="2-字符串比较运算"><a href="#2-字符串比较运算" class="headerlink" title="2. 字符串比较运算"></a>2. 字符串比较运算</h3><ul><li><p><em><strong>注意字符串，一定别忘了使用引号引起来</strong></em></p></li><li><p><em><strong>示例：</strong></em></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">==    <span class="comment">#等于，也可以指写一个 = 号</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ &#x27;lemon&#x27; == &#x27;lemon&#x27; ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ &#x27;lemon&#x27; == &#x27;tom&#x27; ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">!=    <span class="comment">#不等于</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ &#x27;lemon&#x27; != &#x27;lemon&#x27; ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ &#x27;lemon&#x27; != &#x27;tom&#x27; ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">-z    <span class="comment">#检查字符串的长度是否为空，加上!号就是取反 ! -z</span></span><br><span class="line">[root@lemon ~]<span class="comment"># echo &quot;$name&quot;</span></span><br><span class="line">lemon</span><br><span class="line">[root@lemon ~]<span class="comment"># echo &quot;$named&quot;</span></span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># [ -z $name ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -z $named ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ ! -z $name ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ ! -z $named ] ; echo $?</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="3-文件比较与检查"><a href="#3-文件比较与检查" class="headerlink" title="3. 文件比较与检查"></a>3. 文件比较与检查</h3><ul><li><em><strong>示例：</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">-e     <span class="comment">#检查目录及文件是否存在</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ -e /etc ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -e /etc/passwd ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -e /etcc ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -e /etcc/passwd ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-d    <span class="comment">#检查文件是否存在且为目录</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ -d /etc ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -d /tom ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-f    <span class="comment">#检查文件是否存在且为文件</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ -f /etc/passwd ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -f /etc/file ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-nt    <span class="comment">#检查file1是否比file2新，按照时间比对的</span></span><br><span class="line">[root@lemon opt]<span class="comment"># ll -h *</span></span><br><span class="line">-rw-r--r-- 1 root root 0 6月   5 21:21 lemon.txt</span><br><span class="line">-rw-r--r-- 1 root root 0 6月   5 21:28 tools.txt</span><br><span class="line">[root@lemon opt]<span class="comment"># [ lemon.txt -nt tools.txt ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon opt]<span class="comment"># [ tools.txt -nt lemon.txt ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">-ot    <span class="comment">#检查file1是否比file2旧，按照时间比对的</span></span><br><span class="line">[root@lemon opt]<span class="comment"># ll -h *</span></span><br><span class="line">-rw-r--r-- 1 root root 0 6月   5 21:21 lemon.txt</span><br><span class="line">-rw-r--r-- 1 root root 0 6月   5 21:28 tools.txt</span><br><span class="line">[root@lemon opt]<span class="comment"># [ lemon.txt -ot tools.txt ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon opt]<span class="comment"># [ tools.txt -ot lemon.txt ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-s    <span class="comment">#检查目录及文件是否存在且不为空</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ -s /etc/passwd ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -s /etc ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -s /etcc/passwd ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ -s /etcc ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-O    <span class="comment">#检查文件是否存在并且被当前用户拥有</span></span><br><span class="line">测试省略……</span><br><span class="line"></span><br><span class="line">-G    <span class="comment">#检查文件是否存在并且默认组为当前用户组</span></span><br><span class="line">测试省略……</span><br><span class="line"></span><br><span class="line">-r    <span class="comment">#检查文件是否存在且可读</span></span><br><span class="line">测试省略……</span><br><span class="line"></span><br><span class="line">-w    <span class="comment">#检查文件是否存在且可写</span></span><br><span class="line">测试省略……</span><br><span class="line"></span><br><span class="line">-x    <span class="comment">#检查文件是否存在且可执行</span></span><br><span class="line">测试省略……</span><br></pre></td></tr></table></figure><h3 id="4-逻辑运算"><a href="#4-逻辑运算" class="headerlink" title="4. 逻辑运算"></a>4. 逻辑运算</h3><ul><li><em><strong>逻辑运算注意事项：</strong></em><ul><li><em>逻辑与 或 运算都需要两个或以上条件，逻辑非运算只能一个条件。</em></li><li><em>口诀:</em><ul><li>逻辑与运算       &lt;==&gt;        真真为真   真假为假   假假为假</li><li>逻辑或运算       &lt;==&gt;        真真为真   真假为真   假假为假</li><li>逻辑非运算       &lt;==&gt;        真为假   假为真</li></ul></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;    <span class="comment">#逻辑与运算</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -eq 10 ] &amp;&amp; [ &#x27;lemon&#x27; == &#x27;lemon&#x27; ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -eq 20 ] &amp;&amp; [ &#x27;lemon&#x27; == &#x27;lemon&#x27; ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">||    <span class="comment">#逻辑或运算</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -eq 10 ] || [ &#x27;lemon&#x27; == &#x27;lemon&#x27; ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -eq 20 ] || [ &#x27;lemon&#x27; == &#x27;lemon&#x27; ] ; echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@lemon ~]<span class="comment"># [ 10 -eq 20 ] || [ &#x27;lemon&#x27; == &#x27;tomcc&#x27; ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">!     <span class="comment">#逻辑非运算</span></span><br><span class="line">[root@lemon ~]<span class="comment"># [ ! 10 -eq 10 ] ; echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@lemon ~]<span class="comment"># [ ! 10 -eq 11 ] ; echo $?</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="二、if-语法"><a href="#二、if-语法" class="headerlink" title="二、if 语法"></a>二、if 语法</h2><h3 id="1-语法一：-单if语句"><a href="#1-语法一：-单if语句" class="headerlink" title="1. 语法一： 单if语句"></a>1. 语法一： 单if语句</h3><ul><li><p>适用范围：只需要一步判断，条件返回真干什么或者条件返回假干什么。</p></li><li><p>语句格式：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ <span class="keyword">condition</span> ];<span class="keyword">then</span>           #<span class="keyword">condition</span> 值为<span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line">   commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>该语句翻译成汉语大意如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果条件为真</span><br><span class="line">那么</span><br><span class="line">    执行commands代码块</span><br><span class="line">结束</span><br></pre></td></tr></table></figure><ul><li>通过一段代码来演示一下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim if.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ 10 -eq 10 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash if.sh </span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="2-语法二：-if-else语句"><a href="#2-语法二：-if-else语句" class="headerlink" title="2. 语法二： if-else语句"></a>2. 语法二： if-else语句</h3><ul><li>适用范围:两步判断，条件为真干什么，条件为假干什么。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ];<span class="keyword">then</span></span><br><span class="line">   commands1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   commands2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>该语句翻译成汉语大意如下：</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果条件为真</span><br><span class="line">那么</span><br><span class="line">    执行comma<span class="symbol">nds1</span>代码块</span><br><span class="line">否则</span><br><span class="line">    执行comma<span class="symbol">nds2</span>代码块</span><br><span class="line">结束</span><br></pre></td></tr></table></figure><ul><li>通过一段代码演示一下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim if.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入数字:&quot;</span> number</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> -eq 10 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;条件为真&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;条件为假&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@lemon</span> ~]<span class="meta"># bash if.sh </span></span><br><span class="line">请输入数字:<span class="number">10</span></span><br><span class="line">条件为真</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@lemon</span> ~]<span class="meta"># bash if.sh </span></span><br><span class="line">请输入数字:<span class="number">20</span></span><br><span class="line">条件为假</span><br></pre></td></tr></table></figure><h3 id="3-语法三-if-elif-else语句"><a href="#3-语法三-if-elif-else语句" class="headerlink" title="3. 语法三: if-elif-else语句"></a>3. 语法三: if-elif-else语句</h3><ul><li>适用范围:多于两个以上的判断结果，也就是多于一个以上的判断条件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition 1 ];<span class="keyword">then</span></span><br><span class="line">   commands1</span><br><span class="line"><span class="keyword">elif</span> [ condition 2 ];<span class="keyword">then</span></span><br><span class="line">   commands2</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   commandsX</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>该语句翻译成汉语大意如下：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果 条件1 为真</span><br><span class="line"><span class="code">      那么</span></span><br><span class="line"><span class="code">         执行代码块1</span></span><br><span class="line"><span class="code">如果 条件2 为真</span></span><br><span class="line"><span class="code">      那么</span></span><br><span class="line"><span class="code">         执行代码块2</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">以此类推的N个条件及对应的执行代码块</span><br><span class="line"></span><br><span class="line">否则 【以上所有条件中没有一个满足的】</span><br><span class="line"><span class="code">         执行代码块X</span></span><br><span class="line"><span class="code">结束</span></span><br></pre></td></tr></table></figure><ul><li>通过一段代码演示一下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim if.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入数字:&quot;</span> number</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> -eq 10 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;条件 1 为真&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$number</span> -gt 10 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;条件 2 为真&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;以上条件都为假&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash if.sh </span></span><br><span class="line">请输入数字:9</span><br><span class="line">以上条件都为假</span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># bash if.sh </span></span><br><span class="line">请输入数字:10</span><br><span class="line">条件 1 为真</span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># bash if.sh </span></span><br><span class="line">请输入数字:11</span><br><span class="line">条件 2 为真</span><br></pre></td></tr></table></figure><h2 id="三、if-高级应用"><a href="#三、if-高级应用" class="headerlink" title="三、if 高级应用"></a>三、if 高级应用</h2><blockquote><p><em><strong><a href="https://recomm.cnblogs.com/blogpost/4848736">if 命令, 双圆括号, 双中括号 条件测试</a></strong></em></p></blockquote><h1 id="循环脚本控制语句"><a href="#循环脚本控制语句" class="headerlink" title="循环脚本控制语句"></a>循环脚本控制语句</h1><h2 id="特殊条件表达式"><a href="#特殊条件表达式" class="headerlink" title="特殊条件表达式"></a>特殊条件表达式</h2><blockquote><ul><li><p><em><strong>true</strong></em>      #当条件表达式为true时，那么代表条件表达式永远成立，为真； 【条件成立】</p></li><li><p><em><strong>false</strong></em>     #当条件表达式为false时，那么代表条件表达式永远不成立，为假；【条件不成立】</p></li></ul></blockquote><h2 id="测试-continue、break、exit-语句的不同点"><a href="#测试-continue、break、exit-语句的不同点" class="headerlink" title="测试 continue、break、exit 语句的不同点"></a>测试 continue、break、exit 语句的不同点</h2><blockquote><p>通俗点讲：break是立马跳出循环；continue是跳出当前条件循环，继续下一轮条件循环；exit是直接退出整个脚本</p></blockquote><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim test.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 3 ];<span class="keyword">then</span></span><br><span class="line">       <span class="variable">$1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;循环体外命令&quot;</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue</span></span><br><span class="line">[root@lemon ~]<span class="comment"># bash test.sh continue</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">循环体外命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># break</span></span><br><span class="line">[root@lemon ~]<span class="comment"># bash test.sh break</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">循环体外命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">[root@lemon ~]<span class="comment"># bash test.sh exit</span></span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="1-sleep-N-脚本执行到该步休眠N秒"><a href="#1-sleep-N-脚本执行到该步休眠N秒" class="headerlink" title="1. sleep   N   脚本执行到该步休眠N秒"></a>1. sleep   N   脚本执行到该步休眠N秒</h2><ul><li><p><em><strong>作用：执行完上一条命令要停留的时间</strong></em></p></li><li><p>段代如下</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 9 -1 1`;<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n -e <span class="string">&quot;倒计时: <span class="variable">$i</span>\r&quot;</span></span><br><span class="line">    sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsda74t8rpg30kq050q2v.gif" alt="img"></p><h2 id="2-continue-跳过循环中的某次循环"><a href="#2-continue-跳过循环中的某次循环" class="headerlink" title="2. continue 跳过循环中的某次循环"></a>2. continue 跳过循环中的某次循环</h2><ul><li><p><em><strong>作用：终止本次循环，继续执行下一次的循环</strong></em></p></li><li><p>代码如下，默认循环输出1-9，但是使用continue跳过输出5</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh #!/bin/bashfor i in &#123;1..9&#125;;do    if [ $i -eq 5 ];then       continue    else       echo &quot;$i&quot;    fidone</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh 12346789</span></span><br></pre></td></tr></table></figure><h2 id="3-break-跳出循环继续执行后续代码"><a href="#3-break-跳出循环继续执行后续代码" class="headerlink" title="3. break 跳出循环继续执行后续代码"></a>3. break 跳出循环继续执行后续代码</h2><ul><li><p><em><strong>作用：退出脚本中当前的循环体，继续执行循环体外的命令</strong></em></p></li><li><p>代码如下，默认循环输出1-9，当输出到5的时候跳出循环</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 6 ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><ul><li>break N 跳出某个循环，用在嵌套循环环境，从内循环到外循环依次编号为1-N</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#脚本分三步执行</span></span><br><span class="line"><span class="comment">#1.没有break  那么脚本i=1的时候  内循环将无限循环，满屏幕haha</span></span><br><span class="line"><span class="comment">#2.内循环加break  终止内循环 内循环只执行一次 输出就会loop 1   haha   loop2  haha   ....</span></span><br><span class="line"><span class="comment">#3.内循环加break 2 终止外循环 输出loop 1  haha  脚本运行结束</span></span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;5; i++ ));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#loop <span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ((;;)); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;haha&quot;</span></span><br><span class="line">        <span class="built_in">break</span> 2</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    sleep 3</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh </span></span><br><span class="line"><span class="comment">#loop 1</span></span><br><span class="line">haha</span><br></pre></td></tr></table></figure><h2 id="4-exit-退出当前脚本"><a href="#4-exit-退出当前脚本" class="headerlink" title="4. exit  退出当前脚本"></a>4. exit  退出当前脚本</h2><ul><li><p><em><strong>作用：直接退出脚本，循环体外的命令不会执行</strong></em></p></li><li><p>代码如下</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> == 5 ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">exit</span> 2    <span class="comment">#后面的数字就是一个返回值，可用echo $?查看</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">[root@lemon ~]<span class="comment"># echo $?</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><h1 id="shell流程控制-for循环语句"><a href="#shell流程控制-for循环语句" class="headerlink" title="shell流程控制-for循环语句"></a>shell流程控制-for循环语句</h1><ul><li>for循环介绍</li><li>for语法</li><li>循环控制</li></ul><blockquote><p><strong>脚本在执行任务的时候，总会遇到需要循环执行的时候，比如说我们需要脚本每隔五分钟执行一次ping的操作，除了计划任务，我们还可以使用脚本来完成，那么我们就用到了循环语句。</strong></p></blockquote><p><em><strong>循环的优点：</strong></em></p><ul><li>节省内存   10M脚本   1M脚本 哪个更剩内存   完成同一个任务</li><li>结构更清晰</li><li>节省开发时间成本</li></ul><h2 id="一、for-循环介绍"><a href="#一、for-循环介绍" class="headerlink" title="一、for 循环介绍"></a>一、for 循环介绍</h2><ul><li>for的工作原理</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很多人把for循环叫做条件循环，或者for <span class="selector-tag">i</span> in 。其实前者说的就是for的特性，for循环的次数和给予的条件是成正比的，也就是你给<span class="number">5</span>个条件，那么他就循环<span class="number">5</span>次；后者说的是for的语法。</span><br></pre></td></tr></table></figure><h2 id="二、for语法"><a href="#二、for语法" class="headerlink" title="二、for语法"></a>二、for语法</h2><h3 id="1-for-语法一"><a href="#1-for-语法一" class="headerlink" title="1. for 语法一"></a>1. for 语法一</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i <span class="keyword">in</span> value1 value2 <span class="params">...</span><span class="params">...</span>;<span class="keyword">do</span></span><br><span class="line">     commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>接下来看段代码吧，循环输出1-9数字</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 9`;<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;number &lt;==&gt; <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>代码执行结果:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh</span></span><br><span class="line">number &lt;==&gt; 1</span><br><span class="line">number &lt;==&gt; 2</span><br><span class="line">number &lt;==&gt; 3</span><br><span class="line">number &lt;==&gt; 4</span><br><span class="line">number &lt;==&gt; 5</span><br><span class="line">number &lt;==&gt; 6</span><br><span class="line">number &lt;==&gt; 7</span><br><span class="line">number &lt;==&gt; 8</span><br><span class="line">number &lt;==&gt; 9</span><br></pre></td></tr></table></figure><h3 id="2-for语法二"><a href="#2-for语法二" class="headerlink" title="2. for语法二"></a>2. for语法二</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for <span class="comment">((变量;条件;自增减运算)</span>);<span class="keyword">do</span></span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">do</span><span class="symbol">ne</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>来段代码理解一下，看下还是输出1-9</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;<span class="variable">$i</span>&lt;10;i++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;number &lt;==&gt; <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>代码执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh</span></span><br><span class="line">number &lt;==&gt; 1</span><br><span class="line">number &lt;==&gt; 2</span><br><span class="line">number &lt;==&gt; 3</span><br><span class="line">number &lt;==&gt; 4</span><br><span class="line">number &lt;==&gt; 5</span><br><span class="line">number &lt;==&gt; 6</span><br><span class="line">number &lt;==&gt; 7</span><br><span class="line">number &lt;==&gt; 8</span><br><span class="line">number &lt;==&gt; 9</span><br></pre></td></tr></table></figure><blockquote><p><strong>for循环使用多个变量</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((a=0,b=9;<span class="variable">$a</span>&lt;10;a++,b--));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;number &lt;==&gt; <span class="variable">$a</span>  <span class="variable">$b</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>代码执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh</span></span><br><span class="line">number &lt;==&gt; 0  9</span><br><span class="line">number &lt;==&gt; 1  8</span><br><span class="line">number &lt;==&gt; 2  7</span><br><span class="line">number &lt;==&gt; 3  6</span><br><span class="line">number &lt;==&gt; 4  5</span><br><span class="line">number &lt;==&gt; 5  4</span><br><span class="line">number &lt;==&gt; 6  3</span><br><span class="line">number &lt;==&gt; 7  2</span><br><span class="line">number &lt;==&gt; 8  1</span><br><span class="line">number &lt;==&gt; 9  0</span><br></pre></td></tr></table></figure><blockquote><p><strong>for 无限循环 使用((;;)) 条件可以实现无线循环</strong></p></blockquote><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim for.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((;;));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash for.sh</span></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">……………………………</span><br></pre></td></tr></table></figure><h1 id="shell流程控制-while循环语句"><a href="#shell流程控制-while循环语句" class="headerlink" title="shell流程控制-while循环语句"></a>shell流程控制-while循环语句</h1><ul><li>while循环介绍</li><li>while循环语法</li><li>while实战</li></ul><h2 id="一、while循环介绍"><a href="#一、while循环介绍" class="headerlink" title="一、while循环介绍"></a>一、while循环介绍</h2><ul><li><em><strong>while的工作原理</strong></em></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当程序执行到<span class="keyword">while</span>语句时，首先会计算<span class="keyword">condition</span>的值，如果<span class="keyword">condition</span>的值为假，结束整个<span class="keyword">while</span>语句，如果表达式的值为真，则执行语句，执行完语句再去计算表达式的值，如果表达式的值还为真，则在执行语句.....直到表达式的值为假才会停止，否则一直循环。</span><br></pre></td></tr></table></figure><h2 id="二、while循环语法"><a href="#二、while循环语法" class="headerlink" title="二、while循环语法"></a>二、while循环语法</h2><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ condition ];<span class="keyword">do</span>      #注意，条件为真<span class="keyword">while</span>才会循环，条件为假，<span class="keyword">while</span>停止循环</span><br><span class="line">      commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="三、while实战"><a href="#三、while实战" class="headerlink" title="三、while实战"></a>三、while实战</h2><h3 id="1-跳板机脚本"><a href="#1-跳板机脚本" class="headerlink" title="1. 跳板机脚本"></a>1. 跳板机脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">lemon</span></span>()&#123;</span><br><span class="line">        contiue=$(pgrep -l -u jump|grep <span class="string">&quot;bash&quot;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$contiue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;&quot;</span> HUP INT QUIT TSTP</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">read</span> -p <span class="string">&quot;andmin:</span></span><br><span class="line"><span class="string">       1).input is sshd server:192.168.1.1;</span></span><br><span class="line"><span class="string">       2).input is sshd server:192.168.1.2;</span></span><br><span class="line"><span class="string">       3).Input to user exit&#x27;s 192.168.1.3;</span></span><br><span class="line"><span class="string">what is to name&#x27;s server:&quot;</span> num</span><br><span class="line">   <span class="keyword">if</span> [[ <span class="variable">$num</span> -eq 1 ]];<span class="keyword">then</span></span><br><span class="line">    ssh root@192.168.1.1</span><br><span class="line"> <span class="keyword">elif</span> [[ <span class="variable">$num</span> -eq 2 ]];<span class="keyword">then</span></span><br><span class="line">    ssh root@192.168.1.2</span><br><span class="line"> <span class="keyword">elif</span> [[ <span class="variable">$num</span> -eq 3 ]];<span class="keyword">then</span></span><br><span class="line">    lemon</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>语法|1|2|3&quot;</span></span><br><span class="line">    sleep 2</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2-遍历文件内容"><a href="#2-遍历文件内容" class="headerlink" title="2. 遍历文件内容"></a>2. 遍历文件内容</h3><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim while.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> i;<span class="keyword">do</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$1</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash while.sh /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:997:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br></pre></td></tr></table></figure><h3 id="3-读出文件中的列，IFS指定默认的列分隔符"><a href="#3-读出文件中的列，IFS指定默认的列分隔符" class="headerlink" title="3. 读出文件中的列，IFS指定默认的列分隔符"></a>3. 读出文件中的列，IFS指定默认的列分隔符</h3><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim while.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">IFS=$<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> f1 f2 f3 f4 f5 f6 f7;<span class="keyword">do</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f1</span> <span class="variable">$f2</span> <span class="variable">$f3</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash while.sh</span></span><br><span class="line">root x 0</span><br><span class="line">bin x 1</span><br><span class="line">daemon x 2</span><br><span class="line">adm x 3</span><br><span class="line">lp x 4</span><br><span class="line">sync x 5</span><br><span class="line">shutdown x 6</span><br><span class="line">halt x 7</span><br><span class="line">mail x 8</span><br><span class="line">operator x 11</span><br><span class="line">games x 12</span><br><span class="line">ftp x 14</span><br><span class="line">nobody x 99</span><br><span class="line">systemd-network x 192</span><br><span class="line">dbus x 81</span><br><span class="line">polkitd x 999</span><br><span class="line">postfix x 89</span><br><span class="line">chrony x 998</span><br><span class="line">sshd x 74</span><br></pre></td></tr></table></figure><h3 id="4-批量创建用户-及-设置密码"><a href="#4-批量创建用户-及-设置密码" class="headerlink" title="4. 批量创建用户 及 设置密码"></a>4. 批量创建用户 及 设置密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">password=$(<span class="built_in">echo</span> <span class="variable">$RANDOM</span>|md5sum|cut -c 1-6)</span><br><span class="line">number=100</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> lemon&#123;1..100&#125;;<span class="keyword">do</span></span><br><span class="line">    useradd <span class="variable">$user</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="variable">$number</span> -ge 1 ];<span class="keyword">do</span></span><br><span class="line">          <span class="built_in">echo</span>  <span class="variable">$password</span>|passwd --stdin  <span class="variable">$user</span> &amp;&gt;/dev/null</span><br><span class="line">          <span class="built_in">let</span> number--</span><br><span class="line">          <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">              tail -100 /etc/passwd</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;error&quot;</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h1><ul><li>until介绍</li><li>until语法</li><li>案例分享</li></ul><h2 id="一、until介绍"><a href="#一、until介绍" class="headerlink" title="一、until介绍"></a>一、until介绍</h2><blockquote><p><em><strong>和 while正好相反，until是条件为假开始执行，条件为真停止执行。</strong></em></p></blockquote><h2 id="二、until语法"><a href="#二、until语法" class="headerlink" title="二、until语法"></a>二、until语法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until [ condition ];<span class="keyword">do</span>      <span class="comment">#注意，条件为假until才会循环，条件为真，until停止循环</span></span><br><span class="line">      commands代码块</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim until1.sh </span></span><br><span class="line"><span class="comment">#打印10-20数字</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">init_num=10</span><br><span class="line">until [ <span class="variable">$init_num</span> -gt 20 ]</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$init_num</span></span><br><span class="line">       init_num=$((init_num + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># sh until1.sh </span></span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h1 id="case多条件分支语句"><a href="#case多条件分支语句" class="headerlink" title="case多条件分支语句"></a>case多条件分支语句</h1><ul><li>case介绍</li><li>case语法</li><li>shell特殊变量</li></ul><h2 id="一、case介绍"><a href="#一、case介绍" class="headerlink" title="一、case介绍"></a>一、case介绍</h2><blockquote><ul><li><em><strong>概述：根据变量的值，顺序匹配模式，匹配后执行命令并结束，如果没有匹配的模式，则执行默认命令，执行成功后退出，返回1，然后退出case</strong></em></li><li><em><strong>意思就是：下面的模式就是变量名的值，模式里面的命令都会执行；从第一个开始，直到最后一个结束；如果没有模式则默认执行exit退出脚本命令</strong></em></li></ul></blockquote><h2 id="二、case语法"><a href="#二、case语法" class="headerlink" title="二、case语法"></a>二、case语法</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">case 变量  <span class="keyword">in</span> </span><br><span class="line"></span><br><span class="line">模式<span class="number">1</span>）</span><br><span class="line">           执行代码块<span class="number">1</span></span><br><span class="line">;;</span><br><span class="line">模式<span class="number">2</span>）</span><br><span class="line">           执行代码块<span class="number">2</span></span><br><span class="line">;;</span><br><span class="line">......</span><br><span class="line">*)         代表不是以上模式的值就执行 *)</span><br><span class="line">           执行的默认代码块；默认是<span class="keyword">exit</span>。</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">注意：每个代码块执行完毕要以;;结尾代表结束，case结尾要以倒过来写的esac来结束。</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim case.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">1)</span><br><span class="line">   <span class="built_in">echo</span> haha</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">   <span class="built_in">echo</span> hehe</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">   <span class="built_in">echo</span> heihei</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;usage:|1|2|3|&#x27;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash case.sh 1</span></span><br><span class="line">haha</span><br><span class="line">[root@lemon ~]<span class="comment"># bash case.sh 2</span></span><br><span class="line">hehe</span><br><span class="line">[root@lemon ~]<span class="comment"># bash case.sh 3</span></span><br><span class="line">heihei</span><br><span class="line">[root@lemon ~]<span class="comment"># bash case.sh 4</span></span><br><span class="line">usage:|1|2|3|</span><br><span class="line">[root@lemon ~]<span class="comment"># bash case.sh 4asd</span></span><br><span class="line">usage:|1|2|3|</span><br></pre></td></tr></table></figure><h2 id="三、shell特殊变量"><a href="#三、shell特殊变量" class="headerlink" title="三、shell特殊变量"></a>三、shell特殊变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$*       <span class="comment">#代表所有参数，其间隔为IFS内定参数的第一个字元</span></span><br><span class="line"><span class="variable">$@</span>       <span class="comment">#与*星号类同。不同之处在於不参照IFS</span></span><br><span class="line"><span class="variable">$#</span>       <span class="comment">#代表参数数量</span></span><br><span class="line">$        <span class="comment">#执行上一个指令的返回值</span></span><br><span class="line">$-       <span class="comment">#最近执行的foreground pipeline的选项参数</span></span><br><span class="line">$$       <span class="comment">#本身的Process ID</span></span><br><span class="line">$        <span class="comment">#执行上一个背景指令的PID</span></span><br><span class="line"><span class="variable">$_</span>       <span class="comment">#显示出最後一个执行的命令</span></span><br><span class="line"><span class="variable">$N</span>       <span class="comment">#shell的第几个外传参数</span></span><br></pre></td></tr></table></figure><h1 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h1><ul><li>函数介绍</li><li>函数语法</li><li>函数应用</li></ul><h2 id="一、函数介绍"><a href="#一、函数介绍" class="headerlink" title="一、函数介绍"></a>一、函数介绍</h2><blockquote><ul><li><p>Shell函数类似于Shell脚本里面存放了一系列的指令，不过Shell的函数存在于内存，而不是硬盘文件，所以速度很快，另外，Shell还能对函数进行预处理，所以函数的启动比脚本更快。</p></li><li><p>shell允许将一组命令集 或 语句形成一个可用块，这些块称为shell函数。</p></li><li><p>说白了，函数就是将某一组shell命令封装成一个模块，想用的时候就用，不用就放在原地</p></li><li><p><strong>函数的优点：</strong></p><ul><li>代码模块化，调用方便，节省内存</li><li>代码模块化，代码量少，排错简单</li><li>代码模块化，可以改变代码的执行顺序</li></ul></li></ul></blockquote><h2 id="二、函数的语法"><a href="#二、函数的语法" class="headerlink" title="二、函数的语法"></a>二、函数的语法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法一:</span><br><span class="line">函数名 () &#123;</span><br><span class="line">    代码块</span><br><span class="line">    [<span class="built_in">return</span> N]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">语法二：</span><br><span class="line"><span class="keyword">function</span> 函数名 &#123;</span><br><span class="line">    代码块</span><br><span class="line">    [<span class="built_in">return</span> N]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>解析：</strong>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。函数中的关键字“return”可以放到函数体的任意位置，通常用于返回某些值，Shell在执行到return之后，就停止往下执行，返回到主程序的调用行，return的返回值只能是0~256之间的一个整数，返回值将保存到变量“$?”中。</p></blockquote><h2 id="三、Shell函数的退出及删除"><a href="#三、Shell函数的退出及删除" class="headerlink" title="三、Shell函数的退出及删除"></a>三、Shell函数的退出及删除</h2><ul><li><p>函数结束之后会返回调用函数的部分继续执行</p></li><li><p>退出函数体：exit 退出整个脚本、break跳出当前函数体</p></li><li><p>shell中查询函数及删除：</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> 或 . 脚本       <span class="comment">#将函数载入到内存</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -f            <span class="comment">#可以显示定义的函数内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -F            <span class="comment">#可以只显示定义的函数名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> -f 函数名        <span class="comment">#可以从Shell内存中删除函数</span></span><br></pre></td></tr></table></figure><h2 id="四、函数的变量概念"><a href="#四、函数的变量概念" class="headerlink" title="四、函数的变量概念"></a>四、函数的变量概念</h2><ul><li>全局变量：默认情况下，脚本中定义的任何变量都是全局变量，在函数外定义的变量可在函数内正常访问。</li><li>局部变量：函数内部使用全局变量可以用 ‘local 变量名=值’ 声明成局部变量，局部变量只能在函数体内生效。</li></ul><h2 id="五、函数的应用"><a href="#五、函数的应用" class="headerlink" title="五、函数的应用"></a>五、函数的应用</h2><ul><li>定义一个函数</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span></span> () &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;lemon&quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> hello &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>print   和  hello就是函数的名字，函数名字命名参考变量一节中的变量命名规则</p><p>定义好函数后，如果想调用该函数，只需通过函数名调用即可</p></blockquote><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim function.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">N1</span></span> () &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">N2</span></span> () &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">N3</span></span> () &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;lemon is a very good&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方便调整代码执行顺序</span></span><br><span class="line">N2</span><br><span class="line">N1</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以重复调用摸个函数</span></span><br><span class="line">N3</span><br><span class="line">N3</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># bash function.sh</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">lemon is a very good</span><br><span class="line">lemon is a very good</span><br></pre></td></tr></table></figure><h1 id="自动化交互-expect-详解"><a href="#自动化交互-expect-详解" class="headerlink" title="自动化交互 expect 详解"></a>自动化交互 expect 详解</h1><h2 id="一、expect介绍"><a href="#一、expect介绍" class="headerlink" title="一、expect介绍"></a>一、expect介绍</h2><blockquote><ul><li>expect是一个自动化交互套件，主要应用于执行命令和程序时，系统以交互形式要求输入指定字符串，实现交互通信。</li><li><strong>expect自动交互流程：</strong>spawn启动指定进程 &lt;—&gt; expect获取指定关键字 &lt;—&gt; send向指定程序发送指定字符 &lt;—&gt; 执行完成退出</li><li><strong>使用场景：</strong>在管理系统的多种情况下，会出现管理员手动输入字符，称为交互式，如下：</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricwwzwroj60v00imac302.jpg" alt="image-20200606130643207"></p><h2 id="二、安装-expect-工具"><a href="#二、安装-expect-工具" class="headerlink" title="二、安装 expect 工具"></a>二、安装 expect 工具</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 expect 工具</span></span><br><span class="line">[root@lemon ~]<span class="comment"># yum -y install expect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 expect 版本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># expect -v</span></span><br><span class="line">expect version 5.45</span><br></pre></td></tr></table></figure><h2 id="三、expect常用命令"><a href="#三、expect常用命令" class="headerlink" title="三、expect常用命令"></a>三、expect常用命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spawn               <span class="comment">#交互程序开始后面跟命令或者指定程序</span></span><br><span class="line">expect              <span class="comment">#获取匹配信息匹配成功则执行expect后面的程序动作; expect eof 代表正常结束</span></span><br><span class="line">send exp_send       <span class="comment">#用于发送指定的字符串信息</span></span><br><span class="line">exp_continue        <span class="comment">#在expect中多次匹配就需要用到</span></span><br><span class="line">send_user           <span class="comment">#用来打印输出 相当于shell中的echo</span></span><br><span class="line"><span class="built_in">exit</span>                <span class="comment">#退出expect脚本</span></span><br><span class="line">eof                 <span class="comment">#expect执行结束 退出</span></span><br><span class="line"><span class="built_in">set</span>                 <span class="comment">#定义变量</span></span><br><span class="line">puts                <span class="comment">#输出变量</span></span><br><span class="line"><span class="built_in">set</span> timeout         <span class="comment">#设置超时时间        </span></span><br><span class="line">interact 　　　　　　 <span class="comment">#允许用户交互; 停留在远程终端</span></span><br></pre></td></tr></table></figure><h2 id="四、expect-基本语法"><a href="#四、expect-基本语法" class="headerlink" title="四、expect 基本语法"></a>四、expect 基本语法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spawn   linux命令</span><br><span class="line">expect  <span class="string">&quot;关键字&quot;</span></span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line"> <span class="string">&quot;*yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue&#125;</span><br><span class="line"> <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><h2 id="五、expect-应用案例"><a href="#五、expect-应用案例" class="headerlink" title="五、expect 应用案例"></a>五、expect 应用案例</h2><h3 id="案例1：expect自动交互ssh远程登录"><a href="#案例1：expect自动交互ssh远程登录" class="headerlink" title="案例1：expect自动交互ssh远程登录"></a>案例1：expect自动交互ssh远程登录</h3><ul><li><p>需要两台虚拟机</p><ul><li>主机一 ：IP — 192.168.2.1        主机名 — lemon</li><li>主机二 ：IP — 192.168.2.2        主机名 — docker</li></ul></li><li><p>代码如下</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># which expect           #查看expect程序位置</span></span><br><span class="line">/usr/bin/expect</span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># vim ssh.exp            #后缀名是什么都行</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set设置变量，将第一个位置变量交给变量ip</span></span><br><span class="line"><span class="built_in">set</span> ip [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># set设置变量，将第二个位置变量交给变量password</span></span><br><span class="line"><span class="built_in">set</span> password [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># spawn指定命令</span></span><br><span class="line">spawn ssh root@<span class="variable">$ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expect指定匹配字段</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="comment"># exp_continue表示继续匹配字段, send自动输入指定交互式内容</span></span><br><span class="line"> <span class="string">&quot;*(yes/no)?&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line"> <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Interact开启交互式模式，不然导致远程后无法敲命令</span></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># chmod u+x ssh.exp                #给予执行权限</span></span><br><span class="line">[root@lemon ~]<span class="comment"># rm -rf .ssh/known_hosts          #删除之前的key验证文件,不删也可以</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ./ssh.exp 192.168.2.2 123123     #执行脚本</span></span><br><span class="line">spawn ssh root@192.168.2.2</span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.2.2 (192.168.2.2)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:dSDdVALO14Vgdmr49RwTkRDyXrZHmCz1CUVlSf0fZrM.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8e:75:d7:bc:9c:61:45:fc:0c:67:3b:3a:f6:db:fe:3c.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.2.2<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.2.2&#x27;</span>s password: </span><br><span class="line">Last login: Sat Jun  6 13:15:44 2020 from 192.168.2.1</span><br><span class="line">[root@docker ~]<span class="comment"># </span></span><br><span class="line">[root@docker ~]<span class="comment"># ifconfig ens32</span></span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.2.2  netmask 255.255.255.0  broadcast 192.168.2.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe16:9fdd  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:16:9f:dd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 349  bytes 46800 (45.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262  bytes 43941 (42.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@docker ~]<span class="comment"># exit</span></span><br><span class="line">登出</span><br><span class="line">Connection to 192.168.2.2 closed.</span><br><span class="line">[root@lemon ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="案例2：expect自动交互式管理执行命令"><a href="#案例2：expect自动交互式管理执行命令" class="headerlink" title="案例2：expect自动交互式管理执行命令"></a>案例2：expect自动交互式管理执行命令</h3><ul><li><p>需要两台虚拟机</p><ul><li>主机一 ：IP — 192.168.2.1        主机名 — lemon</li><li>主机二 ：IP — 192.168.2.2        主机名 — docker</li></ul></li><li><p>代码如下</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim admin.exp</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> user [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> password [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> order [lindex <span class="variable">$argv</span> 3]</span><br><span class="line"><span class="built_in">set</span> timeout 10</span><br><span class="line"></span><br><span class="line">spawn ssh <span class="variable">$user</span>@<span class="variable">$ip</span> <span class="variable">$order</span></span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line"> <span class="string">&quot;*(yes/no)?&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line"> <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># chmod u+x admin.exp</span></span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># ./admin.exp 192.168.2.2 root 123123 &quot;free -m&quot;</span></span><br><span class="line">spawn ssh root@192.168.2.2 free -m</span><br><span class="line">root@192.168.2.2<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">              total        used        free      shared  buff/cache   available</span></span><br><span class="line"><span class="string">Mem:            976         145         572           6         258         643</span></span><br><span class="line"><span class="string">Swap:          1023           0        1023</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@lemon ~]# ./admin.exp 192.168.2.2 root 123123 &quot;df -hT&quot;</span></span><br><span class="line"><span class="string">spawn ssh root@192.168.2.2 df -hT</span></span><br><span class="line"><span class="string">root@192.168.2.2&#x27;</span>s password: </span><br><span class="line">文件系统                类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root xfs        18G  3.2G   15G   18% /</span><br><span class="line">devtmpfs                devtmpfs  478M     0  478M    0% /dev</span><br><span class="line">tmpfs                   tmpfs     489M     0  489M    0% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     489M  6.7M  482M    2% /run</span><br><span class="line">tmpfs                   tmpfs     489M     0  489M    0% /sys/fs/cgroup</span><br><span class="line">/dev/sr0                iso9660   4.3G  4.3G     0  100% /mnt</span><br><span class="line">/dev/sdb1               xfs        80G   33M   80G    1% /sdb1</span><br><span class="line">/dev/sda1               xfs      1014M  125M  890M   13% /boot</span><br><span class="line">tmpfs                   tmpfs      98M     0   98M    0% /run/user/0</span><br></pre></td></tr></table></figure><h3 id="案例3：expect自动化下发脚本，执行脚本（结合案例2）"><a href="#案例3：expect自动化下发脚本，执行脚本（结合案例2）" class="headerlink" title="案例3：expect自动化下发脚本，执行脚本（结合案例2）"></a>案例3：expect自动化下发脚本，执行脚本（结合案例2）</h3><ul><li><p>需要两台虚拟机</p><ul><li>主机一 ：IP — 192.168.2.1        主机名 — lemon</li><li>主机二 ：IP — 192.168.2.2        主机名 — docker</li></ul></li><li><p>代码如下</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备要下发的脚本文件</span></span><br><span class="line">[root@lemon ~]<span class="comment"># vim ping.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">ping -c 3 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备远程下发脚本文件的脚本</span></span><br><span class="line">[root@lemon ~]<span class="comment"># vim remote_copy.exp</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> ip [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> user [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> password [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> sfile [lindex <span class="variable">$argv</span> 3]</span><br><span class="line"><span class="built_in">set</span> ddir [lindex <span class="variable">$argv</span> 4]</span><br><span class="line"><span class="built_in">set</span> timeout 10</span><br><span class="line">spawn scp <span class="variable">$sfile</span> <span class="variable">$user</span>@<span class="variable">$ip</span>:<span class="variable">$ddir</span></span><br><span class="line">expect &#123;</span><br><span class="line"> <span class="string">&quot;*yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue&#125;</span><br><span class="line"> <span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># chmod a+x ping.sh</span></span><br><span class="line">[root@lemon ~]<span class="comment"># chmod u+x remote_copy.exp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下发脚本文件</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ./remote_copy.exp 192.168.2.2 root 123123 /root/ping.sh /tmp/</span></span><br><span class="line">spawn scp /root/ping.sh root@192.168.2.2:/tmp/</span><br><span class="line">root@192.168.2.2<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">ping.sh                            100%   34    13.8KB/s   00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使用刚刚写好的admin.exp运行刚才remote_copy.exp下发给2.2主机上的shell脚本ping.sh</span></span><br><span class="line"><span class="string">[root@lemon ~]# ./admin.exp 192.168.2.2 root 123123 &quot;/tmp/ping.sh&quot;</span></span><br><span class="line"><span class="string">spawn ssh root@192.168.2.2 /tmp/ping.sh</span></span><br><span class="line"><span class="string">root@192.168.2.2&#x27;</span>s password: </span><br><span class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.020 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.037 ms</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.027 ms</span><br><span class="line"></span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2005ms</span><br><span class="line">rtt min/avg/max/mdev = 0.020/0.028/0.037/0.007 ms</span><br></pre></td></tr></table></figure><h3 id="案例4：expect-变量的练习"><a href="#案例4：expect-变量的练习" class="headerlink" title="案例4：expect 变量的练习"></a>案例4：expect 变量的练习</h3><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim env.exp</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="comment"># A=$1</span></span><br><span class="line"><span class="built_in">set</span> A [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># B=$2</span></span><br><span class="line"><span class="built_in">set</span> B [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># C=$3</span></span><br><span class="line"><span class="built_in">set</span> C [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># D=lemon</span></span><br><span class="line"><span class="built_in">set</span> D lemon</span><br><span class="line"></span><br><span class="line">send <span class="string">&quot;\$A=<span class="variable">$A</span>\n&quot;</span></span><br><span class="line">send <span class="string">&quot;\$B=<span class="variable">$B</span>\n&quot;</span></span><br><span class="line">send <span class="string">&quot;\$C=<span class="variable">$C</span>\n&quot;</span></span><br><span class="line">send <span class="string">&quot;\$D=<span class="variable">$D</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当$*</span></span><br><span class="line">send <span class="string">&quot;\$argv=<span class="variable">$argv</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当$#</span></span><br><span class="line">send <span class="string">&quot;\$argc=<span class="variable">$argc</span>\n&quot;</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># chmod u+x env.exp</span></span><br><span class="line">[root@lemon ~]<span class="comment"># ./env.exp a b c d</span></span><br><span class="line"><span class="variable">$A</span>=a</span><br><span class="line"><span class="variable">$B</span>=b</span><br><span class="line"><span class="variable">$C</span>=c</span><br><span class="line"><span class="variable">$D</span>=lemon</span><br><span class="line"><span class="variable">$argv</span>=a b c d</span><br><span class="line"><span class="variable">$argc</span>=4</span><br></pre></td></tr></table></figure><h3 id="案例5：expect-结合-if-的练习，"><a href="#案例5：expect-结合-if-的练习，" class="headerlink" title="案例5：expect 结合 if 的练习，"></a>案例5：expect 结合 if 的练习，</h3><blockquote><p><strong>注意：</strong>括号的空格，严格要求</p></blockquote><ul><li>代码如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># vim if.exp</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="keyword">if</span> &#123;<span class="variable">$argc</span> != 3&#125;  &#123;</span><br><span class="line">  <span class="comment"># send:相当于echo</span></span><br><span class="line">  <span class="comment"># send_user:相当于echo -e</span></span><br><span class="line">  send_user <span class="string">&quot;usage: == <span class="variable">$argc</span> 不等于3!\n&quot;</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">set</span> FILE [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> HOST [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> DIR [lindex <span class="variable">$argv</span> 2]</span><br><span class="line">send_user <span class="string">&quot;<span class="variable">$FILE</span>\t<span class="variable">$HOST</span>\t<span class="variable">$DIR</span>\n&quot;</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon ~]<span class="comment"># chmod u+x if.exp </span></span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># ./if.exp a b</span></span><br><span class="line">usage: == 2 不等于3!</span><br><span class="line"></span><br><span class="line">[root@lemon ~]<span class="comment"># ./if.exp a b c</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h1 id="Linux-信号控制"><a href="#Linux-信号控制" class="headerlink" title="Linux 信号控制"></a>Linux 信号控制</h1><h1 id="shell案例"><a href="#shell案例" class="headerlink" title="shell案例"></a>shell案例</h1><h2 id="一、监控主机及联网状态"><a href="#一、监控主机及联网状态" class="headerlink" title="一、监控主机及联网状态"></a>一、监控主机及联网状态</h2><h3 id="1-监控目的"><a href="#1-监控目的" class="headerlink" title="1. 监控目的"></a>1. 监控目的</h3><ul><li><em><strong>掌握在线业务机器及联网的状态。</strong></em></li></ul><h3 id="2-监控方法"><a href="#2-监控方法" class="headerlink" title="2. 监控方法"></a>2. 监控方法</h3><ul><li><em><strong>通过采用 ICMP协议的 ping命令对计算机进行 ping测试,通则表示主机为开启并联网，不通则代表主机宕机或断网。</strong></em></li></ul><h3 id="3-监控思路"><a href="#3-监控思路" class="headerlink" title="3. 监控思路"></a>3. 监控思路</h3><ul><li><em><strong>通过分析多次 ping结果判断主机状态</strong></em></li></ul><h3 id="4-监控实现"><a href="#4-监控实现" class="headerlink" title="4. 监控实现"></a>4. 监控实现</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"><span class="comment">#监控目标主机状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控方法 ping   ICMP协议</span></span><br><span class="line"><span class="comment">#ping 通  host up</span></span><br><span class="line"><span class="comment">#ping 不通  host down</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#问题</span></span><br><span class="line"><span class="comment">#1、关于禁ping   防止DDOS</span></span><br><span class="line"><span class="comment">#   禁的是陌生人 禁止所有 允许你的IP </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#满足条件 </span></span><br><span class="line"><span class="comment">#网络有延迟  what&#x27;s up    假报警问题</span></span><br><span class="line"><span class="comment">#        ping 的取值  报警阈值 3次全部失败  报警机器down</span></span><br><span class="line"><span class="comment">#ping 的频率 秒级  5秒 or  1秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#main</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;4;i++));<span class="keyword">do</span></span><br><span class="line"><span class="comment">#测试代码</span></span><br><span class="line">   <span class="keyword">if</span> ping -c1 <span class="variable">$1</span> &amp;&gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">export</span> ping_count<span class="string">&quot;<span class="variable">$i</span>&quot;</span>=1</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> ping_count<span class="string">&quot;<span class="variable">$i</span>&quot;</span>=0</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间间隔</span></span><br><span class="line">   sleep 0.3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3次ping失败报警</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$ping_count1</span> -eq <span class="variable">$ping_count2</span> ] &amp;&amp; [ <span class="variable">$ping_count2</span> -eq <span class="variable">$ping_count3</span> ]&amp;&amp;[ <span class="variable">$ping_count1</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is down&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is up&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> ping_count1 </span><br><span class="line"><span class="built_in">unset</span> ping_count2  </span><br><span class="line"><span class="built_in">unset</span> ping_count3</span><br></pre></td></tr></table></figure><h2 id="二、监控主机服务状态"><a href="#二、监控主机服务状态" class="headerlink" title="二、监控主机服务状态"></a>二、监控主机服务状态</h2><h3 id="1-监控目的-1"><a href="#1-监控目的-1" class="headerlink" title="1. 监控目的"></a>1. 监控目的</h3><blockquote><p><em><strong>实时掌握线上机器服务状态，保证服务正常运行</strong></em></p></blockquote><h3 id="2-监控方法-1"><a href="#2-监控方法-1" class="headerlink" title="2. 监控方法"></a>2. 监控方法</h3><blockquote><p><em><strong>采用telnet访问端口，通过返回数据分析判定结果</strong></em></p></blockquote><h3 id="3-监控实现"><a href="#3-监控实现" class="headerlink" title="3. 监控实现"></a>3. 监控实现</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"><span class="comment">#监控一个服务端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控方法</span></span><br><span class="line"><span class="comment">#1）通过systemctl  service   服务启动状态  </span></span><br><span class="line"><span class="comment">#2）lsof 查看端口是否存在</span></span><br><span class="line"><span class="comment">#3）查看进程是否存在</span></span><br><span class="line"><span class="comment">######压力过大 无法响应 |  服务down了  上述东西还在  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4）测试端口是否有响应    推荐</span></span><br><span class="line">    <span class="comment">#telnet 协议 </span></span><br><span class="line"><span class="comment">#main</span></span><br><span class="line"><span class="function"><span class="title">port_status</span></span> () &#123;</span><br><span class="line">temp_file=`mktemp port_status.XXX`</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、判断依赖命令telnet是否存在</span></span><br><span class="line">[ ! -x /usr/bin/telnet ]&amp;&amp;<span class="built_in">echo</span> <span class="string">&quot;telnet: not found command&quot;</span>&amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、测试端口 $1 IP    $2 port</span></span><br><span class="line">( telnet <span class="variable">$1</span> <span class="variable">$2</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">quit</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">) &amp;&gt;<span class="variable">$temp_file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、分析文件中的内容，判断结果</span></span><br><span class="line"><span class="keyword">if</span> egrep <span class="string">&quot;\^]&quot;</span> <span class="variable">$temp_file</span> &amp;&gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> <span class="variable">$2</span> is open&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> <span class="variable">$2</span> is close&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">rm -f <span class="variable">$temp_file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数带参的问题</span></span><br><span class="line">port_status <span class="variable">$1</span> <span class="variable">$2</span></span><br></pre></td></tr></table></figure><h2 id="三、监控内存使用率"><a href="#三、监控内存使用率" class="headerlink" title="三、监控内存使用率"></a>三、监控内存使用率</h2><h3 id="1-监控目的-2"><a href="#1-监控目的-2" class="headerlink" title="1. 监控目的"></a>1. 监控目的</h3><p>通过监控内存使用率判定机器内存资源消耗情况，及时处理并优化资源配比</p><h3 id="2-监控方法-2"><a href="#2-监控方法-2" class="headerlink" title="2. 监控方法"></a>2. 监控方法</h3><h4 id="2-1）监控命令"><a href="#2-1）监控命令" class="headerlink" title="2.1）监控命令"></a>2.1）监控命令</h4><ul><li>free  </li><li>cat /proc/meminfo</li><li>等等……</li></ul><h4 id="2-2）监控指标"><a href="#2-2）监控指标" class="headerlink" title="2.2）监控指标"></a>2.2）监控指标</h4><ul><li>内存使用率</li><li>buffer &amp; cache</li></ul><h4 id="2-3）监控方法"><a href="#2-3）监控方法" class="headerlink" title="2.3）监控方法"></a>2.3）监控方法</h4><blockquote><p><em><strong>通过上述命令对内存总量、使用量进行截取，取得内存使用率，并根据阈值进行判断。</strong></em></p></blockquote><h3 id="3-监控实现-1"><a href="#3-监控实现-1" class="headerlink" title="3. 监控实现"></a>3. 监控实现</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"><span class="comment">#内存使用率统计脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#/proc/meminfo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内存申请顺序  free-cache-buffer-swap</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">memory_use</span></span>() &#123;</span><br><span class="line">memory_used=`head -2 /proc/meminfo |awk <span class="string">&#x27;NR==1&#123;t=$2&#125;NR==2&#123;f=$2;print(t-f)*100/t&quot;%&quot;&#125;&#x27;</span>`</span><br><span class="line">memory_cache=`head -5 /proc/meminfo |awk <span class="string">&#x27;NR==1&#123;t=$2&#125;NR==5&#123;c=$2;print c*100/t&quot;%&quot;&#125;&#x27;</span>`</span><br><span class="line">memory_buffer=`head -4 /proc/meminfo |awk <span class="string">&#x27;NR==1&#123;t=$2&#125;NR==4&#123;b=$2;print b*100/t&quot;%&quot;&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;memory_used:<span class="variable">$memory_used</span>\tbuffer:<span class="variable">$memory_buffer</span>\tcached:<span class="variable">$memory_cache</span>&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memory_use</span><br></pre></td></tr></table></figure><h2 id="四、监控使用CPU或内存前十名进程"><a href="#四、监控使用CPU或内存前十名进程" class="headerlink" title="四、监控使用CPU或内存前十名进程"></a>四、监控使用CPU或内存前十名进程</h2><hr><h3 id="1-监控目的-3"><a href="#1-监控目的-3" class="headerlink" title="1. 监控目的"></a>1. 监控目的</h3><ul><li>掌握系统进程对系统资源的使用情况，掌握机器的动态。</li></ul><h3 id="2-监控方法-3"><a href="#2-监控方法-3" class="headerlink" title="2. 监控方法"></a>2. 监控方法</h3><h4 id="2-1）监控命令-1"><a href="#2-1）监控命令-1" class="headerlink" title="2.1）监控命令"></a>2.1）监控命令</h4><ul><li><p>ps</p></li><li><p>top</p></li><li><p>等等……</p></li></ul><h4 id="2-2）监控方法"><a href="#2-2）监控方法" class="headerlink" title="2.2）监控方法"></a>2.2）监控方法</h4><ul><li>通过对任务管理器中的进程对内存或CPU的使用情况进行整合、排序得出结论</li></ul><h3 id="3-监控实现-2"><a href="#3-监控实现-2" class="headerlink" title="3. 监控实现"></a>3. 监控实现</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"><span class="comment">#统计使用内存和CPU前十名进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计系统中前十名使用内存最多的进程</span></span><br><span class="line"><span class="function"><span class="title">memory</span></span>() &#123;</span><br><span class="line">  <span class="comment">#1、收集任务管理器进程信息</span></span><br><span class="line">  temp_file=`mktemp memory.XXX`</span><br><span class="line">  top -b -n 1 &gt; <span class="variable">$temp_file</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#2、按进程统计内存使用大小</span></span><br><span class="line">  tail -n +8 <span class="variable">$temp_file</span> | awk <span class="string">&#x27;&#123;array[$NF]+=$6&#125;END&#123;for (i in array) print array[i],i&#125;&#x27;</span>  |sort -k 1 -n -r|head -10</span><br><span class="line"></span><br><span class="line">rm -f <span class="variable">$temp_file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#统计系统中前十名使用CPU最多的进程</span></span><br><span class="line"><span class="function"><span class="title">cpu</span></span>() &#123;</span><br><span class="line">  <span class="comment">#1、收集任务管理器进程信息</span></span><br><span class="line">  temp_file=`mktemp memory.XXX`</span><br><span class="line">  top -b -n 1 &gt; <span class="variable">$temp_file</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#2、按进程统计内存使用大小</span></span><br><span class="line">  tail -n +8 <span class="variable">$temp_file</span> | awk <span class="string">&#x27;&#123;array[$NF]+=$9&#125;END&#123;for (i in array) print array[i],i&#125;&#x27;</span>  |sort -k 1 -n -r|head -10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm -f <span class="variable">$temp_file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> memory</span><br><span class="line">memory</span><br><span class="line"><span class="built_in">echo</span> cpu </span><br><span class="line">cpu</span><br></pre></td></tr></table></figure><h2 id="五、监控IO使用情况"><a href="#五、监控IO使用情况" class="headerlink" title="五、监控IO使用情况"></a>五、监控IO使用情况</h2><h3 id="1-磁盘说明"><a href="#1-磁盘说明" class="headerlink" title="1. 磁盘说明"></a>1. 磁盘说明</h3><blockquote><p><em><strong>磁盘在系统中负责存储和读取任务，磁盘的处理速度直接影响了计算机的速度，目前常用的磁盘有两种：固态和机械磁盘。</strong></em></p></blockquote><ul><li><strong>固态磁盘：</strong>没有IO瓶颈，读写快，存储颗粒有擦写限制，价格高，容量小。</li><li><strong>机械磁盘：</strong>靠电机带动磁盘转动，通过磁头读取或存储数据，读写速度和磁盘转速有关，容量大、价格低，大量读写容易造成IO瓶颈。</li></ul><h3 id="2-监控目的"><a href="#2-监控目的" class="headerlink" title="2. 监控目的"></a>2. 监控目的</h3><blockquote><p><em><strong>随时掌握IO的使用情况，防止IO性能瓶颈</strong></em></p></blockquote><h3 id="3-监控指标"><a href="#3-监控指标" class="headerlink" title="3. 监控指标"></a>3. 监控指标</h3><ul><li>IO队列长度</li><li>IOPS</li><li>磁盘吞吐量</li></ul><h3 id="4-监控命令"><a href="#4-监控命令" class="headerlink" title="4. 监控命令"></a>4. 监控命令</h3><ul><li><p><strong>iostat（sysstat包提供），本节重点讲解</strong></p></li><li><p>iostat（sysstat包提供）重点讲解</p></li><li><p>iozone（三方提供）</p></li></ul><h3 id="5-iostat语法-及-输出说明"><a href="#5-iostat语法-及-输出说明" class="headerlink" title="5. iostat语法 及 输出说明"></a>5. iostat语法 及 输出说明</h3><ul><li><p><strong>用法：</strong></p><ul><li>iostat [ 选项 ] [ &lt;时间间隔&gt; [ &lt;次数&gt; ]]</li></ul></li><li><p><strong>常用选项：</strong></p><ul><li>-c：只显示系统CPU统计信息，即单独输出avg-cpu结果，不包括device结果</li><li>-d：单独输出Device结果，不包括cpu结果</li><li>-k/-m：输出结果以kB/mB为单位，而不是以扇区数为单位</li><li>-x:输出更详细的io设备统计信息</li><li>interval/count：每次输出间隔时间，count表示输出次数，不带count表示循环输出</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grid0pw1s9j30ve0aggm4.jpg" alt="image-20200606143516702"></p><ul><li><strong>输出含义：</strong><ul><li>avg-cpu: 总体cpu使用情况统计信息，对于多核cpu，这里为所有cpu的平均值。重点关注iowait值，表示CPU用于等待io请求的完成时间。</li><li>%user：CPU处在用户模式下的时间百分比。</li><li>%nice：CPU处在带NICE值的用户模式下的时间百分比。</li><li>%system：CPU处在系统模式下的时间百分比。</li><li>%iowait：CPU等待输入输出完成时间的百分比。</li><li>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</li><li>%idle：CPU空闲时间百分比。</li><li>Device: 各磁盘设备的IO统计信息。各列含义如下：</li><li>Device: 以sdX形式显示的设备名称</li><li>tps: 每秒进程下发的IO读、写请求数量</li><li>KB_read/s: 每秒从驱动器读入的数据量，单位为K。</li><li>KB_wrtn/s: 每秒从驱动器写入的数据量，单位为K。</li><li>KB_read: 读入数据总量，单位为K。</li><li>KB_wrtn: 写入数据总量，单位为K。</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grid0mckvyj31bu0acjs3.jpg" alt="image-20200606143802196"></p><ul><li><strong>输出含义：</strong><ul><li>rrqm/s: 每秒对该设备的读请求被合并次数，文件系统会对读取同块(block)的请求进行合并</li><li>wrqm/s: 每秒对该设备的写请求被合并次数</li><li>r/s: 每秒完成的读次数</li><li>w/s: 每秒完成的写次数</li><li>rkB/s: 每秒读数据量(kB为单位)</li><li>wkB/s: 每秒写数据量(kB为单位)</li><li>avgrq-sz:平均每次IO操作的数据量(扇区数为单位)</li><li>avgqu-sz: 平均等待处理的IO请求队列长度</li><li>await: 平均每次IO请求等待时间(包括等待时间和处理时间，毫秒为单位)</li><li>svctm: 平均每次IO请求的处理时间(毫秒为单位)</li><li>%util: 采用周期内用于IO操作的时间比率，即IO队列非空的时间比率</li></ul></li><li><strong>重点关注参数：</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、iowait% 表示CPU等待IO时间占整个CPU周期的百分比，如果iowait值超过50%，或者明显大于%system、%user以及%idle，表示IO可能存在问题。</span><br><span class="line"></span><br><span class="line">2、avgqu-sz 表示磁盘IO队列长度，即IO等待个数。</span><br><span class="line"></span><br><span class="line">3、await 表示每次IO请求等待时间，包括等待时间和处理时间</span><br><span class="line"></span><br><span class="line">4、svctm 表示每次IO请求处理的时间</span><br><span class="line"></span><br><span class="line">5、%util 表示磁盘忙碌情况，一般该值超过80%表示该磁盘可能处于繁忙状态。</span><br><span class="line">如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；如果 await 远大于 svctm，说明I/O 队列太长，io响应太慢，则需要进行必要优化。如果avgqu-sz比较大，也表示有当量io在等待。</span><br><span class="line"></span><br><span class="line">6、dm-0、dm-1、dm-2的主设备号是253（是linux内核留给本地使用的设备号），次设备号分别是0、1、2，这类设备在/dev/mapper中</span><br></pre></td></tr></table></figure><h3 id="6-监控实现"><a href="#6-监控实现" class="headerlink" title="6. 监控实现"></a>6. 监控实现</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#磁盘io监控 明确知晓HD的使用情况</span></span><br><span class="line"><span class="comment">#监控指标 IO队列长度  IOPS   吞吐量</span></span><br><span class="line"><span class="comment">#          iostat         iozone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#iostat 队列长度   明确反馈IO是否忙</span></span><br><span class="line"><span class="comment">#iostat  由sysstat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#iostat 命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">io</span></span>() &#123;</span><br><span class="line">  device_num=`iostat -x |egrep <span class="string">&quot;^sd[a-z]&quot;</span>|wc -l`</span><br><span class="line">  iostat -x 1 3|egrep <span class="string">&quot;^sd[a-z]&quot;</span>|tail -n +$((device_num+<span class="number">1</span>))|awk <span class="string">&#x27;&#123;io_long[$1]+=$9&#125;END&#123;for (i in io_long)print io_long[i],i&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#阈值如何判断    2-3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#while true</span></span><br><span class="line"><span class="comment">#do</span></span><br><span class="line">   io</span><br><span class="line"><span class="comment">#   sleep 5</span></span><br><span class="line"><span class="comment">#done</span></span><br></pre></td></tr></table></figure><h2 id="六、mysql-binlog日志备份"><a href="#六、mysql-binlog日志备份" class="headerlink" title="六、mysql binlog日志备份"></a>六、mysql binlog日志备份</h2><h3 id="1-脚本思路"><a href="#1-脚本思路" class="headerlink" title="1. 脚本思路"></a>1. 脚本思路</h3><p>mysql binlog日志备份脚本 备份到备份服务器</p><p>#1) 确定binlog的位置及备份时间间隔 每天</p><p>#当前要备份的binlog是谁</p><p>#刷新binlog日志，生成新的binlog用于存储备份节点后的数据</p><p>#2）打包binlog日志 以年-月-日_binlog.tar.gz格式</p><p>#3）生成校验码  md5sum</p><p>#4）将校验码和压缩包存入到文件夹 文件夹命名 年-月-日 再次打包</p><p>#5）使用scp拷贝到备份机器</p><p>#6）备份机器解压收到的目录压缩包  通过校验码 教研binlog压缩包是否完整</p><p>#完整  完成备份  —–发邮件给管理员，明确备份成功</p><p>#不完整 报错——发邮件给管理员，要求手动备份</p><h3 id="2-代码如下"><a href="#2-代码如下" class="headerlink" title="2. 代码如下"></a>2. 代码如下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"><span class="comment">#将mysql的binlog日志备份到备份服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#思考</span></span><br><span class="line"><span class="comment">#1) 确定binlog的位置及备份时间间隔  每天</span></span><br><span class="line">    <span class="comment">#当前要备份的binlog是谁</span></span><br><span class="line">    <span class="comment">#刷新binlog日志，生成新的binlog用于存储备份节点后的数据</span></span><br><span class="line"><span class="comment">#2）打包binlog日志  以年-月-日_binlog.tar.gz格式</span></span><br><span class="line"><span class="comment">#3）生成校验码   md5sum</span></span><br><span class="line"><span class="comment">#4）将校验码和压缩包存入到文件夹  文件夹命名 年-月-日  再次打包</span></span><br><span class="line"><span class="comment">#5）使用scp拷贝到备份机器</span></span><br><span class="line"><span class="comment">#6）备份机器解压收到的目录压缩包   通过校验码 教研binlog压缩包是否完整</span></span><br><span class="line">    <span class="comment">#完整   完成备份   -----发邮件给管理员，明确备份成功</span></span><br><span class="line">    <span class="comment">#不完整 报错------发邮件给管理员，要求手动备份</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########</span></span><br><span class="line">db_user=<span class="string">&#x27;root&#x27;</span></span><br><span class="line">db_password=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">log</span>=<span class="string">&#x27;/var/log/mysql_backup.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backup</span></span>() &#123;</span><br><span class="line"><span class="comment">#获得信息</span></span><br><span class="line">binlog_dir=<span class="string">&#x27;/var/lib/mysql&#x27;</span></span><br><span class="line">current_binlog=`mysql -u <span class="variable">$db_user</span> -e <span class="string">&quot;show master status&quot;</span>|egrep <span class="string">&quot;binlog.[[:digit:]]*&quot;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">date &gt;&gt; <span class="variable">$log</span></span><br><span class="line"><span class="comment">#准备备份</span></span><br><span class="line"><span class="comment">#1 刷新binlog    </span></span><br><span class="line">mysql -u <span class="variable">$db_user</span> -e <span class="string">&quot;flush logs&quot;</span></span><br><span class="line"><span class="comment">#2 打包要备份的binlog</span></span><br><span class="line">tar czf `date +%F`_binlog.tar.gz <span class="variable">$binlog_dir</span>/<span class="variable">$current_binlog</span> &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line"><span class="comment">#3 生成校验码</span></span><br><span class="line">md5sum `date +%F`_binlog.tar.gz &gt; <span class="string">&quot;`date +%F`_md5sum.txt&quot;</span></span><br><span class="line"><span class="comment">#4 存入文件夹</span></span><br><span class="line">[ ! -d `date +%F` ]&amp;&amp;mkdir `date +%F`</span><br><span class="line">mv  `date +%F`_binlog.tar.gz `date +%F`</span><br><span class="line">mv `date +%F`_md5sum.txt `date +%F`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包目录</span></span><br><span class="line">tar czf `date +%F`.tar.gz `date +%F` &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 拷贝</span></span><br><span class="line"><span class="comment">#要求提前做证书信任</span></span><br><span class="line">scp `date +%F`.tar.gz root@192.168.11.241:/opt/backup &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR:scp `date +%F`.tar.gz fail&quot;</span> &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6 校验</span></span><br><span class="line">ssh root@192.168.11.241 <span class="string">&quot;tar xf /opt/backup/`date +%F`.tar.gz -C /opt&quot;</span></span><br><span class="line"><span class="comment">#ssh root@192.168.11.241 &quot;cd /opt/backup`date +%F`&quot;</span></span><br><span class="line">ssh root@192.168.11.241 <span class="string">&quot;cd /opt/`date +%F`;md5sum -c `date +%F`_md5sum.txt&quot;</span> &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;success&quot;</span> &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line">   ssh root@192.168.11.241 <span class="string">&quot;rm -rf /opt/`date +%F`&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;fail&quot;</span> &amp;&gt;&gt;<span class="variable">$log</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backup</span><br></pre></td></tr></table></figure><h2 id="七、新建用户脚本"><a href="#七、新建用户脚本" class="headerlink" title="七、新建用户脚本"></a>七、新建用户脚本</h2><blockquote><p><em><strong>需求：新建 user01 - user20用户，要求密码是随机6位数 密码取值范围 a-zA-Z0-9，要求密码不能只是单一的数字或小写或大写字母</strong></em></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description:</span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Created Time:</span></span><br><span class="line"><span class="comment">#创建user01-user20 随机六位数密码 a-zA-Z0-9 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1)创建user01-user20</span></span><br><span class="line"><span class="comment">#2)生成20组随机密码</span></span><br><span class="line"><span class="comment">#3)设置密码</span></span><br><span class="line"><span class="comment">#4)输出清单</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">adduser</span></span> () &#123;</span><br><span class="line">pw_txt=`mktemp pw.XXXXX`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;account\t\tpassword&quot;</span> &gt; user_add_result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1)创建用户</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq -s <span class="string">&#x27; &#x27;</span> -w 1 20`</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">      useradd user<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#2)随机密码</span></span><br><span class="line">  cat /dev/urandom |strings -6|egrep <span class="string">&quot;^[a-zA-Z0-9]&#123;6&#125;$&quot;</span>|head -n 20 &gt; <span class="variable">$pw_txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3)设置密码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq -s <span class="string">&#x27; &#x27;</span> -w 1 20`;<span class="keyword">do</span></span><br><span class="line">    pw=`head -n <span class="variable">$i</span> <span class="variable">$pw_txt</span>|tail -1`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pw</span>|passwd --stdin user<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;user<span class="variable">$i</span>\t\t<span class="variable">$pw</span>&quot;</span> &gt;&gt; user_add_result.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4)输出</span></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;用户创建成功，密码文件是:user_add_result.txt&quot;</span></span><br><span class="line">cat user_add_result.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$pw_txt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">adduser</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2021/07/11/Python/"/>
      <url>/2021/07/11/Python/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="初识-Python"><a href="#初识-Python" class="headerlink" title="初识 Python"></a>初识 Python</h1><h2 id="一、Python-起源"><a href="#一、Python-起源" class="headerlink" title="一、Python 起源"></a>一、Python 起源</h2><blockquote><p>一般代码量的对比下 <code>Python</code> 是 <code>Java</code> 的 <strong>1/5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd830zhtdj30ty0ec484.jpg"></p><p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p><p>说来Python的诞生也是很奇葩，1989年圣诞节🎅，阿姆斯特丹，为了打发无聊的圣诞时间，年青人Guido决定开发一个新的编程语言。之所以取名为Python（大蟒蛇），是因为他是Monty Python喜剧团体的爱好者。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd835l28kj30dc0if7fz.jpg" alt="image-20200606162535819"></p><ol><li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承<strong>（感觉下什么叫牛人）</strong></li><li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li><li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li><li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li></ol><h2 id="二、Python-的优缺点"><a href="#二、Python-的优缺点" class="headerlink" title="二、Python 的优缺点"></a>二、Python 的优缺点</h2><p><strong>优点</strong></p><ol><li>Python的语法非常接近英语，风格统一，非常优美，而且内置了很多高效的工具。打个比方，同样一项工作，C语言要1000行，Java要100行，Python可能只要10行。</li><li>开发效率高，Python 有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python 官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。</li></ol><p><strong>缺点：</strong></p><ol><li>速度慢，因为是解释型语言，Python  的运行速度相比C语言确实慢很多，跟JAVA相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因。</li><li>线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是<a href="http://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80">计算机程序设计语言</a><a href="http://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8A%E5%99%A8">解释器</a>用于<a href="http://zh.wikipedia.org/wiki/%E5%90%8C%E6%AD%A5">同步</a><a href="http://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B">线程</a>的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。</li></ol><h2 id="三、Python-能干什么"><a href="#三、Python-能干什么" class="headerlink" title="三、Python 能干什么"></a>三、Python 能干什么</h2><p>1）网站后端程序员：使用它单间网站，后台服务比较容易维护。</p><p>2）自动化运维：自动化处理大量的运维任务</p><p>3）数据分析师：快速开发快速验证，分析数据得到结果</p><p>4）游戏开发者：一般是作为游戏脚本内嵌在游戏中</p><p>5）自动化测试：编写为简单的实现脚本，运用在Selenium/lr中，实现自动化。</p><p>6）网站开发：借助django，flask框架自己搭建网站。</p><p>7）爬虫获取或处理大量信息：批量下载美剧、运行投资策略、爬合适房源、系统管理员的脚本任务等。</p><h2 id="四、Python-解释器"><a href="#四、Python-解释器" class="headerlink" title="四、Python 解释器"></a>四、Python 解释器</h2><h3 id="1-解释器（科普）"><a href="#1-解释器（科普）" class="headerlink" title="1. 解释器（科普）"></a>1. 解释器（科普）</h3><blockquote><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p><p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于翻译时间点的不同。当编译器以解释方式运行的时候，也称之为解释器</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd83tmresj30e00fq0t9.jpg" alt="image-20200606171429470"></p><ul><li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li><li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li></ul><h4 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h4><ul><li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li><li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li></ul><h3 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h3><ul><li><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以 .py 为扩展名的文本文件。要运行代码，就需要Python解释器去执行 .py 文件。</p></li><li><p>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p></li></ul><h4 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h4><p>当我们从<a href="https://www.python.org/">Python官方网站</a>下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。</p><p>CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。</p><h4 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h4><p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。</p><p>CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。</p><h4 id="PyPy"><a href="#PyPy" class="headerlink" title="PyPy"></a>PyPy</h4><p>PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用<a href="http://en.wikipedia.org/wiki/Just-in-time_compilation">JIT技术</a>，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。</p><p>绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。</p><h4 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h4><p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p><h4 id="IronPython"><a href="#IronPython" class="headerlink" title="IronPython"></a>IronPython</h4><p>IronPython和Jython类似, 只不过IronPython是运行在微软.Net平台上的Python解释器,可以直接把Python代码编译成.Net的字节码。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或Net平台交互，最好的办法不是用Jython 或 IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</p><h3 id="3-Python解释器的安装"><a href="#3-Python解释器的安装" class="headerlink" title="3. Python解释器的安装"></a>3. Python解释器的安装</h3><ul><li><em>打开官网 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> 下载中心</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd84kkagjj30xc0o0wj3.jpg" alt="image-20200606165924810"></p><ul><li><em>下载完毕后打开进行安装，勾选（all users），然后点击（customize installation）自定义安装</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd84opupvj30ig0bc431.jpg" alt="image-20200606170020627"></p><ul><li><em>之后进入该界面，这是一些可选的项，全部默认勾选进行下一步</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd84s2cbvj30ih0bagpv.jpg" alt="image-20200606170054545"></p><ul><li><em>该界面是选择安装路径，最好是自己创建一个新的路径方便查找，勾选项默认</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd84w8omhj30il0bfdkd.jpg" alt="image-20200606170128921"></p><ul><li><em>完成以上步骤之后，就开始进行安装了</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8504fiaj30if0n2agx.jpg" alt="image-20200606170217874"></p><ul><li>安装完成之后，进行环境变量的设置，控制面板 — 系统和安全 — 系统 — 高级系统设置 — 环境变量 — 在系统变量中找到 path 双击 — 新建路径 Python解释器和 script</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8597oduj30m00lkgmd.jpg" alt="image-20200606170333708"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd85d3p3ij30ek0figql.jpg" alt="image-20200606170349612"></p><ul><li><em>好了以上就是安装python解释器的步骤，恭喜入坑，使用win键 + r 命令行输入python 验证是否安装成功</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd85h7kqtj30bf071aa5.jpg" alt="image-20200606171843963"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd85kde4qj30wq0e9q35.jpg" alt="image-20200606171954209"></p><h2 id="五、第一个-Python-程序"><a href="#五、第一个-Python-程序" class="headerlink" title="五、第一个 Python 程序"></a>五、第一个 Python 程序</h2><h3 id="1-第一个-Python-程序"><a href="#1-第一个-Python-程序" class="headerlink" title="1. 第一个 Python 程序"></a>1. 第一个 Python 程序</h3><h4 id="1-1-Python-源程序的基本概念"><a href="#1-1-Python-源程序的基本概念" class="headerlink" title="1.1 Python 源程序的基本概念"></a>1.1 Python 源程序的基本概念</h4><ul><li><p>Python 源程序就是<strong>一个特殊格式的文本文件</strong>，可以<strong>使用任意文本编辑软件</strong>做 Python 的开发</p></li><li><p>Python 程序的 <strong>文件扩展名</strong> 通常都是 .py</p></li></ul><h4 id="1-2-交互式运行-Python-程序"><a href="#1-2-交互式运行-Python-程序" class="headerlink" title="1.2 交互式运行 Python 程序"></a>1.2 交互式运行 Python 程序</h4><ul><li>使用 win键 + r 进入 python 环境</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h2 id="六、执行-python-程序的方式"><a href="#六、执行-python-程序的方式" class="headerlink" title="六、执行 python 程序的方式"></a>六、执行 python 程序的方式</h2><h4 id="1-解释器-——-python-python3"><a href="#1-解释器-——-python-python3" class="headerlink" title="1. 解释器 —— python / python3"></a>1. 解释器 —— python / python3</h4><ul><li>使用 python 2.x 解释器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python xxx.py</span><br></pre></td></tr></table></figure><ul><li>使用 python 3.x 解释器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 xxx.py</span><br></pre></td></tr></table></figure><h4 id="2-交互式-——-ipython"><a href="#2-交互式-——-ipython" class="headerlink" title="2. 交互式 —— ipython"></a>2. 交互式 —— ipython</h4><ul><li>IPython 中 的 I 代表 <strong>交互 interactive</strong></li></ul><p><strong>特点</strong></p><ul><li>IPython 是一个 python 的 交互式 shell，比默认的 python shell  好用得多<ul><li>支持自动补全</li><li>自动缩进</li><li>支持 bash shell 命令</li><li>内置了许多很有用的功能和函数</li></ul></li></ul><p><strong>版本</strong></p><ul><li><p>Python 2.x 使用的解释器是 <strong>ipython</strong></p></li><li><p>Python 3.x 使用的解释器是 <strong>ipython3</strong></p></li><li><p>要退出解释器可以有以下两种方式：</p><ul><li>直接输入 exit</li><li>按热键 ctrl + d</li></ul></li><li><p>IPython 的安装</p></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>$ sudo apt <span class="keyword">install </span>ipython</span><br></pre></td></tr></table></figure><h4 id="3-集成开发环境-——-PyCharm"><a href="#3-集成开发环境-——-PyCharm" class="headerlink" title="3 集成开发环境 —— PyCharm"></a>3 集成开发环境 —— PyCharm</h4><h5 id="3-1-集成开发环境（IDE）"><a href="#3-1-集成开发环境（IDE）" class="headerlink" title="3.1 集成开发环境（IDE）"></a>3.1 集成开发环境（IDE）</h5><p>集成开发环境（IDE，Integrated Development Environment）—— <strong>集成了开发软件需要的所有工具</strong>，一般包括以下工具：</p><ul><li>图形用户界面</li><li>代码编辑器（支持 <strong>代码补全</strong>／<strong>自动缩进</strong>）</li><li>编译器／解释器</li><li>调试器（<strong>断点</strong>／<strong>单步执行</strong>）</li><li>……</li></ul><h5 id="3-2-PyCharm-介绍"><a href="#3-2-PyCharm-介绍" class="headerlink" title="3.2 PyCharm 介绍"></a>3.2 PyCharm 介绍</h5><ul><li>PyCharm 是 Python 的一款非常优秀的集成开发环境</li><li>PyCharm 除了具有一般 IDE 所必备功能外，还可以在 Windows、Linux、macOS 下使用 PyCharm</li><li>适合开发大型项目<ul><li>一个项目通常会包含 <strong>很多源文件</strong></li><li>每个 <strong>源文件</strong> 的代码行数是有限的，通常在几百行之内</li><li>每个 <strong>源文件</strong> 各司其职，共同完成复杂的业务功能</li></ul></li></ul><h5 id="3-3-PyCharm-快速体验"><a href="#3-3-PyCharm-快速体验" class="headerlink" title="3.3 PyCharm 快速体验"></a>3.3 PyCharm 快速体验</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd863f1msj30qo0f9whd.jpg" alt="image-20200606174222533"></p><ul><li><strong>文件导航区域</strong> 能够 浏览／定位／打开 项目文件</li><li><strong>文件编辑区域</strong> 能够 编辑 当前打开的文件</li><li><strong>控制台区域</strong> 能够 输出程序执行内容 / 跟踪调试代码的执行 /</li><li><strong>右上角的 工具栏</strong> 能够 执行(SHIFT + F10) / 调试(SHIFT + F9) 代码</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd869pq3ej30io07e74g.jpg" alt="image-20200606174506423"></p><p>通过控制台上方的单步执行按钮(F8)，可以单步执行代码</p><h1 id="Python-代码规范"><a href="#Python-代码规范" class="headerlink" title="Python 代码规范"></a>Python 代码规范</h1><h2 id="一、注释的作用"><a href="#一、注释的作用" class="headerlink" title="一、注释的作用"></a>一、注释的作用</h2><blockquote><p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd883kv48j30qf0c4gow.jpg" alt="image-20200606180312731"></p><h2 id="二、单行注释（行注释）"><a href="#二、单行注释（行注释）" class="headerlink" title="二、单行注释（行注释）"></a>二、单行注释（行注释）</h2><ul><li><p>以 <code>#</code> 开头，<code>#</code> 右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用</p></li><li><p>示例代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(&quot;hello world&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="三、多行注释（块注释）"><a href="#三、多行注释（块注释）" class="headerlink" title="三、多行注释（块注释）"></a>三、多行注释（块注释）</h2><ul><li>如果希望编写的 <strong>注释信息很多，一行无法显示</strong>，就可以使用多行注释</li><li>要在 Python 程序中使用多行注释，可以用 <strong>一对 连续的 三个 引号</strong> （ 单引号和双引号都可以 ）</li><li>示例代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;hello world_01&quot;)</span></span><br><span class="line"><span class="string">print(&quot;hello world_02&quot;)</span></span><br><span class="line"><span class="string">print(&quot;hello world_03&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="四、什么时候需要使用注释？"><a href="#四、什么时候需要使用注释？" class="headerlink" title="四、什么时候需要使用注释？"></a>四、什么时候需要使用注释？</h2><blockquote><p><em><strong>在一些正规的开发团队，通常会有 代码审核 的惯例，就是一个团队中彼此阅读对方的代码</strong></em></p></blockquote><ol><li><strong>注释不是越多越好</strong>，对于一目了然的代码，不需要添加注释</li><li>对于 <strong>复杂的操作</strong>，应该在操作开始前写上若干行注释</li><li>对于 <strong>不是一目了然的代码</strong>，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）</li><li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li></ol><h2 id="五、关于代码规范"><a href="#五、关于代码规范" class="headerlink" title="五、关于代码规范"></a>五、关于代码规范</h2><blockquote><p><em><strong>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步</strong></em></p></blockquote><ul><li><p><code>Python</code> 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</p></li><li><p>其中第 8 篇文档专门针对 <strong>Python 的代码格式</strong> 给出了建议，也就是俗称的 <strong>PEP 8</strong></p></li><li><p><a href="https://www.python.org/dev/peps/pep-0008/"><code>Python</code> 文档地址</a></p></li><li><p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/">谷歌有对应的中文文档</a></p><h1 id="进制-amp-内存"><a href="#进制-amp-内存" class="headerlink" title="进制 &amp; 内存"></a>进制 &amp; 内存</h1><h2 id="一、进制概念"><a href="#一、进制概念" class="headerlink" title="一、进制概念"></a>一、进制概念</h2></li><li><p>常见的进制数</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">二进制</span><br><span class="line">口诀      逢2进1</span><br><span class="line">数字      0  1</span><br><span class="line">例如      1 + 1 = 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">八进制</span><br><span class="line">口诀      逢8进1</span><br><span class="line">数字      0 1 2 3 4 5 6 7</span><br><span class="line">例如      1 + 7 = 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">十进制</span><br><span class="line">口诀      逢10进1</span><br><span class="line">数字      0 1 2 3 4 5 6 7 8 9</span><br><span class="line">例如      1 + 9 = 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">十六进制</span><br><span class="line">口诀      逢16进1</span><br><span class="line">数字      0 1 2 3 4 5 6 7 8 9 a=11 b=12 c=13 d=14 e=15 f=16</span><br><span class="line">例如      1 + f = 10 </span><br></pre></td></tr></table></figure><h2 id="二、进制转换"><a href="#二、进制转换" class="headerlink" title="二、进制转换"></a>二、进制转换</h2><h3 id="十进制-转-二进制"><a href="#十进制-转-二进制" class="headerlink" title="十进制 转 二进制"></a><em>十进制 转 二进制</em></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转换10这个十进制数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换口诀      倒除法，余数逆序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换过程：</span></span><br><span class="line">        <span class="number">10</span>除于<span class="number">2</span>等于<span class="number">5</span>   余<span class="number">0</span></span><br><span class="line">        <span class="number">5</span>除于<span class="number">2</span>等于<span class="number">2</span>    余<span class="number">1</span></span><br><span class="line">        <span class="number">2</span>除于<span class="number">2</span>等于<span class="number">1</span>    余<span class="number">0</span></span><br><span class="line">        将最后的结果<span class="number">1</span>开始向上的余数补到一起的就是这个十进制数的二进制数</span><br><span class="line">        <span class="number">1010</span></span><br></pre></td></tr></table></figure><h3 id="二进制-转-十进制"><a href="#二进制-转-十进制" class="headerlink" title="二进制 转 十进制"></a><em>二进制 转 十进制</em></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转换101101这个二进制数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换口诀      当前的数字乘于2的位数次方，最后相加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换过程：任何非零数的0次方都等于1</span></span><br><span class="line">  1x2^0=1 + 0x2^1=0 + 1x2^2=4 + 1x2^3=8 + 0x2^4=0 + 1x2^5=32  =  45</span><br></pre></td></tr></table></figure><h3 id="八进制-转-二进制"><a href="#八进制-转-二进制" class="headerlink" title="八进制 转 二进制"></a><em>八进制 转 二进制</em></h3><ul><li>八进制的一位相当于二进制的三位，转换时按照十进制转换   注释：将八进制数的每位当作十进制数转换成三位二进制数，最后合在一起</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转换65这个八进制数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换口诀      一转三位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换过程：</span></span><br><span class="line">6转换二进制是110  +  5转换二进制是101  =  110101</span><br></pre></td></tr></table></figure><h3 id="二进制-转-八进制"><a href="#二进制-转-八进制" class="headerlink" title="二进制 转 八进制"></a><em>二进制 转 八进制</em></h3><ul><li>从低位开始取，高位不够三位补0；二进制的三位相当于八进制的一位，转换时按照十进制转换</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转换10100110这个八进制数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换口诀      三位一取</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">## 转换过程：</span></span><br><span class="line">  110转换十进制是6  +  100转换十进制是4  +  010转换十进制是2  = 642</span><br></pre></td></tr></table></figure><h3 id="十六进制-转-二进制"><a href="#十六进制-转-二进制" class="headerlink" title="十六进制 转 二进制"></a><em>十六进制 转 二进制</em></h3><ul><li>十六进制的一位相当于二进制的四位，转换时按照十进制转换  将十六进制数的每位当作十进制数转换成四位二进制数，最后合在一起</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转换a4这个八进制数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换口诀      一转四位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换过程：</span></span><br><span class="line">  a相当于10转换二进制是1010  +  4转换二进制是0100  =  10100100</span><br></pre></td></tr></table></figure><h3 id="二进制-转-十六进制"><a href="#二进制-转-十六进制" class="headerlink" title="二进制 转 十六进制"></a><em>二进制 转 十六进制</em></h3><ul><li>从低位开始取，高位不够四位补0</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转换1001100这个八进制数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换口诀      四位一取</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">## 转换过程：</span></span><br><span class="line">  1100转换十进制是12  +  0100转换十进制是4  =  4c  </span><br></pre></td></tr></table></figure><h2 id="三、数据存储"><a href="#三、数据存储" class="headerlink" title="三、数据存储"></a>三、数据存储</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">思考：内存是怎么储存数据的？</span><br><span class="line"></span><br><span class="line">首先弄清楚怎么储存数字</span><br><span class="line"></span><br><span class="line">内存：是计算机存储数的介质</span><br><span class="line"></span><br><span class="line">抽象内存：一个开关，有两种状态，开启和关闭，一种对相应1，一种对应0。把八个开关放到一个房间里，可以称这间房子为“一个字节”，一个开关代表的是一位。每个房间都有门牌号，看作“地址”。把无数个房间罗列起来组成摩天大厦，可以把摩天大厦堪称内存。</span><br><span class="line"></span><br><span class="line">单位：</span><br><span class="line">     1bit       ==      1位</span><br><span class="line">     8bit       ==      1byte</span><br><span class="line">     1024byte   ==      1k</span><br><span class="line">     1024k      ==      1M</span><br><span class="line">     1024M      ==      1G</span><br><span class="line">     1024G      ==      1T</span><br><span class="line"></span><br><span class="line">数据存储：计算机存储数据，先开辟内存空间，在储存数据。计算机开辟内存的最小单位是字节。在储存数据时，用最高位标识符号，1表示负数，0表示正数</span><br><span class="line"></span><br><span class="line">10(10)-&gt;1010(2)</span><br><span class="line">00000000000000000000000000000001      四个字节，32位的空间；    正数1</span><br><span class="line"></span><br><span class="line">10000000000000000000000000000001      四个字节，32位的空间；    负数1</span><br></pre></td></tr></table></figure><h1 id="变量-amp-常量"><a href="#变量-amp-常量" class="headerlink" title="变量 &amp; 常量"></a>变量 &amp; 常量</h1><h2 id="一、常量概述"><a href="#一、常量概述" class="headerlink" title="一、常量概述"></a>一、常量概述</h2><p>1、常量的定义：常量即指不变的量，如 P 3.141592653…, 或在程序运行过程中不会改变的量</p><p>2、在Python中没有一个专门的语法代表常量，程序员约定俗成用变量名全部大写代表常量，比如：NAME = ‘cc’ </p><h2 id="二、变量概述"><a href="#二、变量概述" class="headerlink" title="二、变量概述"></a>二、变量概述</h2><blockquote><p><strong>作用：</strong>将不同类型的数据存储到内存</p></blockquote><ol><li><p>程序可操作的储存空间的名称</p></li><li><p>程序运行期间能改变数据</p></li><li><p>每个变量都有特定的数据类型</p></li></ol><ul><li><p>定义变量格式</p><ul><li>变量名 = 初始值    </li><li>可以使用 <code>print</code> 函数来打印输出变量的初始值</li></ul></li><li><p>初始值是什么？</p><ul><li>为了确定变量的类型</li><li>在 <code>Python</code> 中定义变量是不需要指定类型的<ul><li><code>Python</code> 可以根据 <code>=</code> 等号右侧的值，自动推导出变量中存储数据的类型</li><li>可以使用 <code>type</code> 函数可以查看一个变量的数据类型</li></ul></li></ul></li><li><p>例如：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a1),a1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt; <span class="title">lemon</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">a2</span>,<span class="title">a3</span> = &quot;<span class="title">very</span>&quot;,&quot;<span class="title">good</span>&quot;</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">type</span>(<span class="params">a2</span>),<span class="built_in">type</span>(<span class="params">a3</span>),a2, a3</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; <span class="title">very</span> <span class="title">good</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">a4</span> = <span class="title">a1</span> + <span class="title">a2</span> + <span class="title">a3</span></span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">type</span>(<span class="params">a4</span>),a4</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; <span class="title">lemonverygood</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">a5</span> = <span class="title">input</span>(<span class="params"><span class="string">&#x27;输入:&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">type</span>(<span class="params">a5</span>),a5</span>)</span></span><br><span class="line"><span class="class">输入:</span>hello world</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt; <span class="title">hello</span> <span class="title">world</span></span></span><br></pre></td></tr></table></figure><h2 id="三、变量的作用域（重点）"><a href="#三、变量的作用域（重点）" class="headerlink" title="三、变量的作用域（重点）"></a>三、变量的作用域（重点）</h2><ul><li><p><strong>作用域的概念：</strong></p><ul><li>变量可以使用的范围，程序的变量并不是在所有位置都能使用的，访问的权限决定于变量在哪里定义的</li></ul></li><li><p><strong>作用域的分类：</strong></p><ul><li>局部变量</li><li>全局变量</li></ul></li></ul><h3 id="1-局部变量概念"><a href="#1-局部变量概念" class="headerlink" title="1. 局部变量概念"></a>1. 局部变量概念</h3><ul><li><strong>概述：</strong><ul><li>是在函数内部定义的变量，只能在函数内部使用；不同的函数可以定义相同名字的局部变量，各用各的，彼此不会产生影响。</li></ul></li><li><strong>局部变量的作用：</strong><ul><li>在函数内部使用，临时保存函数内部需要使用的数据</li></ul></li><li><strong>局部变量的生命周期如下四点：</strong>局部变量的生命周期就是从定义开始到函数执行结束<ul><li>所谓生命周期就是变量从创建到被系统回收的过程；出生—&gt;死亡</li><li>局部变量在函数执行是才会被创建</li><li>函数执行结束后，局部变量被系统回收</li><li>局部变量只能在生命周期内来存储函数内部临时使用到的数据</li></ul></li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个变量</span></span><br><span class="line">    <span class="comment"># 1&gt;出生：执行了下方&#123;num = 10&#125;代码之后，才会被创建</span></span><br><span class="line">    <span class="comment"># 2&gt;死亡：函数执行完成之后这个变量就死亡了</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个局部变量%d&quot;</span> % (num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(num)   # 不是自身函数内部定义的变量，不能为己使用</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(num)       # 在函数内部定义的变量，不能在其他位置使用</span></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br></pre></td></tr></table></figure><h3 id="2-全局变量概念"><a href="#2-全局变量概念" class="headerlink" title="2. 全局变量概念"></a>2. 全局变量概念</h3><ul><li><p><strong>全局变量：</strong></p><ul><li>是在函数外部定义的变量(而不是定义在某一个函数内)，所有函数内部都可以使用这个变量</li></ul></li><li><p><strong>python全局变量引用的要求：</strong></p><ul><li>在函数内部可以通过全局变量的引用获取对应的数据值，但是，不允许直接修改全局变量的数据值。</li></ul></li><li><p><strong>全局变量的位置：</strong></p><ul><li>注意–&gt; 在开发时，应该把所有的全局变量定义到函数上方，这样就可以保证所有函数都能够正常的访问到每一个全局变量</li></ul></li><li><p><strong>全局变量命名建议：</strong></p><ul><li>为了避免局部变量和全局变量出现混淆，在定义全局变量时，全局变量名前应该增加<code>g_</code> 或 <code>gl_</code> 的前缀</li></ul></li><li><p><strong>示例</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line">    <span class="comment"># &#123;num = 100&#125;希望修改全局变量的值</span></span><br><span class="line">    <span class="comment"># 但是，在python中是不允许在函数内部直接修改全局变量值的</span></span><br><span class="line">    <span class="comment"># 如果直接使用赋值语句，仅会在函数内部定义一个和全局变量相同名字的局部变量</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo1 == %d&quot;</span> % (num), <span class="built_in">id</span>(num))</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;num = <span class="subst">&#123;num&#125;</span>&quot;</span>, <span class="built_in">id</span>(num))</span><br></pre></td></tr></table></figure><ul><li><strong>那怎么才能在函数内部修改全局变量的值呢？</strong></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line">    <span class="comment">#&#123;num = 100&#125;希望修改全局变量的值 -&gt; 使用global声明一下变量即可</span></span><br><span class="line">    <span class="comment">#global关键字会告诉解释器后面的变量是一个全局变量，随后再使用赋值语句是，就不会创建局部变量，而是修改全局变量的值</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo2 == %d&quot;</span> % (num),<span class="built_in">id</span>(num))</span><br><span class="line"></span><br><span class="line">demo2()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;num = <span class="subst">&#123;num&#125;</span>&quot;</span>, <span class="built_in">id</span>(num))</span><br></pre></td></tr></table></figure><h1 id="数据类型-amp-标识符"><a href="#数据类型-amp-标识符" class="headerlink" title="数据类型 &amp; 标识符"></a>数据类型 &amp; 标识符</h1><h2 id="Python-的数据类型"><a href="#Python-的数据类型" class="headerlink" title="Python 的数据类型"></a>Python 的数据类型</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8ead1yoj30tc0kjwfr.jpg" alt="image-20200606190916872"></p><h2 id="Python-的标识符"><a href="#Python-的标识符" class="headerlink" title="Python 的标识符"></a>Python 的标识符</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8eecjavj30m808wq45.jpg" alt="image-20200606191747602"></p><ul><li><strong>如下</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8ekgqccj30x50hu798.jpg" alt="image-20200606191210148"></p><ul><li><strong>下面所列举的标识符是合法的：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserID</span><br><span class="line">name</span><br><span class="line">mode12</span><br><span class="line">user_age</span><br></pre></td></tr></table></figure><ul><li><strong>以下命名的标识符不合法：</strong></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span><span class="built_in">word</span>     <span class="comment">#不能以数字开头</span></span><br><span class="line"><span class="keyword">try</span>       <span class="comment">#try是保留字，不能作为标识符</span></span><br><span class="line">$money    <span class="comment">#不能包含特殊字符</span></span><br></pre></td></tr></table></figure><h1 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python 运算符"></a>Python 运算符</h1><h2 id="一、算术运算符（常用）"><a href="#一、算术运算符（常用）" class="headerlink" title="一、算术运算符（常用）"></a>一、算术运算符（常用）</h2><ul><li><em><strong>功能：进行相关符号的运算，不会改变变量的值</strong></em></li><li><em><strong>值：相关的数学运算结果；(2 + 1 = 3)</strong></em></li></ul><h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h3><ul><li>+(加)</li><li>-(减)</li><li>*(乘)</li><li>/(除)</li><li>%(取余)</li><li>//(取整)</li><li>**(求幂[次方])</li></ul><h3 id="2-语法格式"><a href="#2-语法格式" class="headerlink" title="2. 语法格式"></a>2. 语法格式</h3><ul><li>2 + 1</li><li>2 - 1</li><li>2 * 1</li><li>2 / 1     </li><li>2 % 1</li><li>2 // 1</li><li>2 ** 1</li></ul><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h3><blockquote><p><strong>注意：</strong>在进行相关符号运算的时候，是不会修改变量值的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">5</span></span><br><span class="line">num2 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(num1 + num2 )    <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(num1 - num2 )    <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(num1 * num2 )    <span class="comment"># 15</span></span><br><span class="line"><span class="built_in">print</span>(num1 / num2 )    <span class="comment"># 1.6666666666666667</span></span><br><span class="line"><span class="built_in">print</span>(num1 % num2 )    <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(num1 ** num2 )   <span class="comment"># 125</span></span><br><span class="line"><span class="built_in">print</span>(num1 // num2 )   <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num1, num2)      <span class="comment"># 5 3 不会改变变量的值</span></span><br></pre></td></tr></table></figure><h2 id="二、赋值运算符（常用）"><a href="#二、赋值运算符（常用）" class="headerlink" title="二、赋值运算符（常用）"></a>二、赋值运算符（常用）</h2><ul><li><em><strong>功能：计算了等号右侧 “表达式”的值，并赋值给等号左侧的变量</strong></em></li><li><em><strong>值：赋值结束后变量的值</strong></em></li></ul><h3 id="1-运算符-1"><a href="#1-运算符-1" class="headerlink" title="1. 运算符"></a>1. 运算符</h3><ul><li> =</li><li> +=</li><li> -= </li><li> *= </li><li> **=</li><li> /=</li><li> %= </li><li> //=</li></ul><h3 id="2-语法格式-1"><a href="#2-语法格式-1" class="headerlink" title="2. 语法格式"></a>2. 语法格式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8fysg8jj30s40f4q8m.jpg" alt="image-20200607083654461"></p><h3 id="3-示例-1"><a href="#3-示例-1" class="headerlink" title="3. 示例"></a>3. 示例</h3><ul><li>+=</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num = %d&quot;</span> % num)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>-=</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num = %d&quot;</span> % num)</span><br><span class="line">    num -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="三、比较运算符（常用）"><a href="#三、比较运算符（常用）" class="headerlink" title="三、比较运算符（常用）"></a>三、比较运算符（常用）</h2><ul><li><em><strong>功能：计算 “表达式1” 和 “表达式2”的值</strong></em></li><li><em><strong>值：如果关系成立，整个关系运算表达式的值为真，否则为假</strong></em></li></ul><h3 id="1-运算符-2"><a href="#1-运算符-2" class="headerlink" title="1. 运算符"></a>1. 运算符</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8g9elibj30ip08s76d.jpg" alt="image-20200607085131221"></p><h3 id="2-语法格式-2"><a href="#2-语法格式-2" class="headerlink" title="2. 语法格式"></a>2. 语法格式</h3><ul><li>表达式1      比较运算符      表达式2</li></ul><h3 id="3-示例-2"><a href="#3-示例-2" class="headerlink" title="3. 示例"></a>3. 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 成立的表达式</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">10</span> == <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 不成立的表达式</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">10</span> == <span class="number">11</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、逻辑运算符（常用）"><a href="#四、逻辑运算符（常用）" class="headerlink" title="四、逻辑运算符（常用）"></a>四、逻辑运算符（常用）</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd8gl8gptj30l208bwg5.jpg" alt="image-20200607084912452"></p><h3 id="1-逻辑与-and-运算符"><a href="#1-逻辑与-and-运算符" class="headerlink" title="1. 逻辑与 and 运算符"></a>1. 逻辑与 and 运算符</h3><h4 id="1-1-格式-amp-原理"><a href="#1-1-格式-amp-原理" class="headerlink" title="1.1 格式 &amp; 原理"></a>1.1 格式 &amp; 原理</h4><ul><li><strong>格式：表达式1    and     表达式2</strong></li><li><strong>原理：两个表达式有一个是假 就为假；两个表达式都是真 才为真</strong><ul><li>如果表达式1的值为真，表达式2的值为真，整体逻辑与运算表达式的值为真</li><li>如果表达式1的值为真，表达式2的值为假，整体逻辑与运算表达式的值为假</li><li>如果表达式1的值为假，表达式2的值为真，整体逻辑与运算表达式的值为假</li><li>如果表达式1的值为假，表达式2的值为假，整体逻辑与运算表达式的值为假</li></ul></li></ul><h4 id="1-2-短路原则"><a href="#1-2-短路原则" class="headerlink" title="1.2 短路原则"></a>1.2 短路原则</h4><blockquote><p>表达式1  and  表达式2  and  表达式3  and  表达式4  and  …….</p><p>原理一样，无论有多少个表达式，必须要所有的表达式为真才为真，否则为假！！！</p></blockquote><h4 id="1-3-示例"><a href="#1-3-示例" class="headerlink" title="1.3 示例"></a>1.3 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 都为真</span></span><br><span class="line">num1 = <span class="number">1</span> &lt; <span class="number">2</span></span><br><span class="line">num2 = <span class="number">2</span> == <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> num1 <span class="keyword">and</span> num2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*******&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个真，一个假</span></span><br><span class="line">num1 = <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">num2 = <span class="number">2</span> == <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> num1 <span class="keyword">and</span> num2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*******&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-逻辑或-or-运算符"><a href="#2-逻辑或-or-运算符" class="headerlink" title="2.逻辑或 or 运算符"></a>2.逻辑或 or 运算符</h3><h4 id="2-1-格式-amp-原理"><a href="#2-1-格式-amp-原理" class="headerlink" title="2.1 格式 &amp; 原理"></a>2.1 格式 &amp; 原理</h4><ul><li><strong>格式：表达式1    or    表达式2</strong></li><li><strong>原理：两个表达式有一个是真 就为真；两个表达式都是假 才为假</strong><ul><li>如果表达式1的值为真，表达式2的值为真，整体逻辑与运算表达式的值为真</li><li>如果表达式1的值为真，表达式2的值为假，整体逻辑与运算表达式的值为真</li><li>如果表达式1的值为假，表达式2的值为真，整体逻辑与运算表达式的值为真</li><li>如果表达式1的值为假，表达式2的值为假，整体逻辑与运算表达式的值为假</li></ul></li></ul><h4 id="2-2-短路原则"><a href="#2-2-短路原则" class="headerlink" title="2.2 短路原则"></a>2.2 短路原则</h4><blockquote><p>表达式1  or  表达式2  or  表达式3  or  表达式4  or  …….</p><p>原理一样，无论有多少个表达式，只要有一个表达式是真 就为真，表达式都是假 才为假！！！</p></blockquote><h4 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3 示例"></a>2.3 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">num2 = <span class="number">2</span> == <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> num3 <span class="keyword">or</span> num4:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-逻辑非-not-运算符"><a href="#3-逻辑非-not-运算符" class="headerlink" title="3.逻辑非 not 运算符"></a>3.逻辑非 not 运算符</h3><h4 id="3-1-格式-amp-原理"><a href="#3-1-格式-amp-原理" class="headerlink" title="3.1 格式 &amp; 原理"></a>3.1 格式 &amp; 原理</h4><ul><li><strong>格式：not  表达式</strong></li><li><strong>原理：颠倒黑白</strong><ul><li>如果表达式的值为真。整体逻辑非运算表达式的值为假</li><li>如果表达式的值为假。整体逻辑非运算表达式的值为真</li></ul></li></ul><h4 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;@@@@@@@@@&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="五、成员运算符（常用）"><a href="#五、成员运算符（常用）" class="headerlink" title="五、成员运算符（常用）"></a>五、成员运算符（常用）</h2><h3 id="1-in-和-not-in-的作用"><a href="#1-in-和-not-in-的作用" class="headerlink" title="1. in 和 not in 的作用"></a>1. in 和 not in 的作用</h3><ul><li>用来测试实例中包含了一系列的成员，包括字符串，列表或元组。</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h3><ul><li>string</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;lemon is a good man!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> <span class="keyword">in</span> str1)          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> str1)      <span class="comment"># False</span></span><br></pre></td></tr></table></figure><ul><li>list</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&quot;lemon&quot;</span>, <span class="number">18</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">18</span> <span class="keyword">in</span> list1)             <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">18</span> <span class="keyword">not</span> <span class="keyword">in</span> list1)         <span class="comment"># False</span></span><br></pre></td></tr></table></figure><ul><li>tuple</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&quot;lemon&quot;</span>, 18)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon&quot;</span> <span class="keyword">in</span> tuple1)       <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon&quot;</span> not <span class="keyword">in</span> tuple1)   <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="六、身份运算符（常用）"><a href="#六、身份运算符（常用）" class="headerlink" title="六、身份运算符（常用）"></a>六、身份运算符（常用）</h2><h3 id="1-is-和-is-not-的作用"><a href="#1-is-和-is-not-的作用" class="headerlink" title="1. is 和 is not 的作用"></a>1. is 和 is not 的作用</h3><ul><li>身份运算符用于比较两个对象的存储单元<ul><li><strong>说白了就是判断两个标识符的内存地址是否相同</strong></li></ul></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自同一个对象</td><td><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> 。如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong> 。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h3 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="2. 示例"></a>2. 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">100</span></span><br><span class="line">num2 = num1</span><br><span class="line"><span class="built_in">print</span>(num1 <span class="keyword">is</span> num2)             <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(num1 <span class="keyword">is</span> <span class="keyword">not</span> num2)         <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num1_id = &quot;</span>, <span class="built_in">id</span>(num1))   <span class="comment">#num1_id =  1853852880</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num2_id = &quot;</span>, <span class="built_in">id</span>(num2))   <span class="comment">#num2_id =  1853852880</span></span><br></pre></td></tr></table></figure><h2 id="七、三目运算符（不太常用）"><a href="#七、三目运算符（不太常用）" class="headerlink" title="七、三目运算符（不太常用）"></a>七、三目运算符（不太常用）</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><ul><li><strong>简化版的 if-else语句</strong></li><li><strong>格式：</strong><ul><li>条件成立要执行的语句 if 条件 else 条件不成立要执行的语句</li></ul></li></ul><h4 id="2-示例-2"><a href="#2-示例-2" class="headerlink" title="2. 示例"></a>2. 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">c = (a * <span class="number">2</span> <span class="keyword">if</span>  a &gt; b <span class="keyword">else</span> b * a) <span class="comment">#条件成立则执行if语句:(a * b)，否则就执行else语句:(b * a)</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><ul><li>需求：有两个变量，比较大小，如果变量1大于变量2就执行变量1 - 变量2；否则变量2 - 变量1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="number">19</span></span><br><span class="line">a2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a1 - a2) <span class="keyword">if</span> a1 &gt; a2 <span class="keyword">else</span> <span class="built_in">print</span>(a2 - a1)</span><br></pre></td></tr></table></figure><h2 id="八、位-操作符（不太常用）"><a href="#八、位-操作符（不太常用）" class="headerlink" title="八、位 操作符（不太常用）"></a>八、位 操作符（不太常用）</h2><blockquote><p><strong>该运算符按二进制位对值进行操作</strong></p></blockquote><p><strong>&amp;   按位与：</strong>参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0</p><p><strong>|    按位或：</strong>只要对应的两个二进位有一个为1时，结果位就为1</p><p><strong>^    按位异或：</strong>当两对应的二进位相异时，结果为1</p><p><strong>~    按位取反：</strong>对数据的每个二进制位取反，即把1变为0，把0变为1</p><p><strong>&lt;&lt;  右移动：</strong>运算数的各二进位全部左移若干位，由&lt;&lt;右边的数字指定了移动的位数，高位丢弃，低位补0</p><p><strong>&gt;&gt;  右移动：</strong>左边的运算数的各二进制位全部右移若干位，&gt;&gt;右边的数字指定了移动的位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0b110</span> &amp; <span class="number">0b010</span>)  <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>|<span class="number">2</span>)            <span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>^<span class="number">2</span>)            <span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">2</span>)             <span class="comment">#-3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)           <span class="comment">#4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>&gt;&gt;<span class="number">2</span>)           <span class="comment">#1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、&amp; 按位与 运算符</span><br><span class="line"><span class="comment"># 位运算符：按位运算符是把数字看作二进制来进行计算</span></span><br><span class="line"><span class="comment"># 相应的位数都为1，则该位的结果为1，否则为0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &amp; <span class="number">7</span>)    <span class="comment"># 5</span></span><br><span class="line"><span class="number">5</span>: <span class="number">101</span></span><br><span class="line"><span class="number">7</span>: <span class="number">111</span></span><br><span class="line">------</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、| 按位或 运算符</span><br><span class="line"><span class="comment"># 两个二进制位有一个位为1，结果为1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> | <span class="number">7</span>)   <span class="comment"># 7</span></span><br><span class="line"><span class="number">5</span>: <span class="number">101</span></span><br><span class="line"><span class="number">7</span>: <span class="number">111</span></span><br><span class="line">------</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、 ^ 按位异或 运算符</span><br><span class="line"><span class="comment"># 二进制的两位相异时，结果为1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> ^ <span class="number">7</span>)    <span class="comment"># 2</span></span><br><span class="line"><span class="number">5</span>: <span class="number">101</span></span><br><span class="line"><span class="number">7</span>: <span class="number">111</span></span><br><span class="line">------</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、 ~ 按位取反 运算符</span><br><span class="line"><span class="comment"># 每个二进制数据位取反，在进行转码</span></span><br><span class="line"><span class="built_in">print</span>(~ <span class="number">5</span>)  <span class="comment"># 6</span></span><br><span class="line">00000101</span><br><span class="line"><span class="number">11111010</span></span><br><span class="line"><span class="number">10000110</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、 &lt;&lt; 左移动运算符</span><br><span class="line"><span class="comment"># 各二进制位全部左移动若干位，由&lt;&lt;右侧的数字决定，低位补0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">131</span> &lt;&lt; <span class="number">2</span>)   <span class="comment"># 524</span></span><br><span class="line">---------------</span><br><span class="line"><span class="comment"># 131：10000011</span></span><br><span class="line"><span class="comment"># 10000011   向左移动两位   #1000001100</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、&gt;&gt; 右移动运算符</span><br><span class="line"><span class="comment"># 各二进制位全部右移动若干位，由&gt;&gt;右侧的数字决定，低位丢弃，高位补0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">131</span> &gt;&gt; <span class="number">2</span>)    <span class="comment"># 32</span></span><br><span class="line"><span class="comment"># 131：10000011</span></span><br><span class="line"><span class="comment"># 10000011  向右移动两位  # 00100000</span></span><br></pre></td></tr></table></figure><h2 id="九、运算符的优先级（重点）"><a href="#九、运算符的优先级（重点）" class="headerlink" title="九、运算符的优先级（重点）"></a>九、运算符的优先级（重点）</h2><ul><li><em><strong>以下表格列出了从最高到最低优先级的所有运算符</strong></em></li></ul><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><h1 id="Python-常用方法"><a href="#Python-常用方法" class="headerlink" title="Python 常用方法"></a>Python 常用方法</h1><h2 id="一、输出-print-和-阻塞-input"><a href="#一、输出-print-和-阻塞-input" class="headerlink" title="一、输出 print 和 阻塞 input"></a>一、输出 print 和 阻塞 input</h2><ul><li>print     将一些内容输出到屏幕</li><li>input    从外部给予变量的值</li><li>示例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;what is you name?&quot;</span>, <span class="string">&quot;lemon&quot;</span>)   <span class="comment"># (,)相当于一个空格</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的姓名:&quot;</span>)</span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;请输入您的年龄：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name =&quot;</span> ,name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age =&quot;</span> ,age)</span><br></pre></td></tr></table></figure><h2 id="二、查看变量类型-type"><a href="#二、查看变量类型-type" class="headerlink" title="二、查看变量类型 type"></a>二、查看变量类型 type</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = (<span class="string">&quot;lemon&quot;</span>)</span><br><span class="line">score = <span class="number">18</span></span><br><span class="line">age = <span class="number">28.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(score))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(age))</span><br></pre></td></tr></table></figure><h2 id="三、查看变量的地址-id"><a href="#三、查看变量的地址-id" class="headerlink" title="三、查看变量的地址 id"></a>三、查看变量的地址 id</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = (<span class="string">&quot;lemon&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(name))</span><br></pre></td></tr></table></figure><h2 id="四、数字类型转换-float-amp-int"><a href="#四、数字类型转换-float-amp-int" class="headerlink" title="四、数字类型转换 float  &amp;  int"></a>四、数字类型转换 float  &amp;  int</h2><ul><li>float     小数转换</li><li>int        整数转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">1</span>))       <span class="comment"># 1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">1.9</span>))       <span class="comment"># 去除小数部分，保留整数部分；结果为1</span></span><br></pre></td></tr></table></figure><h2 id="五、返回数字的绝对值-abs"><a href="#五、返回数字的绝对值-abs" class="headerlink" title="五、返回数字的绝对值 abs"></a>五、返回数字的绝对值 abs</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1 = -<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(num1))    <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line">num2 = -<span class="number">20</span></span><br><span class="line">to = <span class="built_in">abs</span>(num2)</span><br><span class="line"><span class="built_in">print</span>(to)           <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><h2 id="六、返回给定参数的-最大、最小-值-max-min"><a href="#六、返回给定参数的-最大、最小-值-max-min" class="headerlink" title="六、返回给定参数的(最大、最小)值 max  min"></a>六、返回给定参数的(最大、最小)值 max  min</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例1：最大值</span></span><br><span class="line">a1 = <span class="number">10</span></span><br><span class="line">a2 = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(a1, a2))     <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例2：最小值</span></span><br><span class="line">a3 = <span class="number">2</span></span><br><span class="line">a4 = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(a3, a4))     <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))    <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h2 id="七、求x的y次方-pow"><a href="#七、求x的y次方-pow" class="headerlink" title="七、求x的y次方 pow"></a>七、求x的y次方 pow</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">5</span></span><br><span class="line">num2 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(num1, num2))   <span class="comment"># 5 x 5 x 5 = 125</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>))         <span class="comment"># 2 x 2 x 2 = 8</span></span><br></pre></td></tr></table></figure><h2 id="八、round"><a href="#八、round" class="headerlink" title="八、round"></a>八、round</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># round (x,n)返回浮点数x四舍五入的值，如果给出n值，则代表舍入到小数点后n位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.345</span>))      <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.543</span>))      <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留后面小数的位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.457</span>, <span class="number">2</span>))    <span class="comment"># 2.46</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.449</span>, <span class="number">1</span>))    <span class="comment"># 2.4</span></span><br></pre></td></tr></table></figure><h1 id="Python-常用模块"><a href="#Python-常用模块" class="headerlink" title="Python 常用模块"></a>Python 常用模块</h1><h2 id="一、keyword-关键字模块"><a href="#一、keyword-关键字模块" class="headerlink" title="一、keyword 关键字模块"></a>一、keyword 关键字模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span> (keyword.kwlist)      <span class="comment"># 查看python的关键字</span></span><br></pre></td></tr></table></figure><h2 id="二、math-数学模块"><a href="#二、math-数学模块" class="headerlink" title="二、math 数学模块"></a>二、math 数学模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、math.ceil向大数取整</span><br><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">18.1</span>))</span><br><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">18.9</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、math.floor向小数取整</span><br><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">18.1</span>))</span><br><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">18.9</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、math.modf 以元组的形式返回整数部分和小数部分</span><br><span class="line"><span class="built_in">print</span>(math.modf(<span class="number">22.3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、math.sqrt 开方</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))</span><br></pre></td></tr></table></figure><h2 id="三、random-随机数模块"><a href="#三、random-随机数模块" class="headerlink" title="三、random 随机数模块"></a>三、random 随机数模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、random.choice 列表</span></span><br><span class="line"><span class="comment"># random.choice:既可以是数字也可以是字符串</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>,<span class="string">&#x27;ks&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="built_in">range</span>(<span class="number">5</span>)))</span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="string">&quot;Lemon-li&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 例如：怎么产生一个0~100之间的随机值</span></span><br><span class="line">a1 = random.choice(<span class="built_in">range</span>(<span class="number">101</span>))</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 例如：怎么产生一个1~100之间的随机值</span></span><br><span class="line">a2 = random.choice(<span class="built_in">range</span>(<span class="number">100</span>)) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、random.randrange    【start,   stop,    step】</span></span><br><span class="line"><span class="comment">#start--指定范围的开始值，包括本身数值</span></span><br><span class="line"><span class="comment">#stop--指定范围的结束值，不包括本身数值</span></span><br><span class="line"><span class="comment">#step--指令开始值的步数</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">100</span>))         <span class="comment">#从0~99选取一个随机值</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">100</span>) + <span class="number">1</span>)     <span class="comment">#从1~100选取一个随机值</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))    <span class="comment">#他的结果（1, 3, 5, 7, 9）都是奇数</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>))    <span class="comment">#他的结果（ 2, 4, 6, 8）都是偶数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、random.randint       【start,  stop】</span></span><br><span class="line"><span class="comment">#start--指定范围的开始值，包括本身数值</span></span><br><span class="line"><span class="comment">#stop--指定范围的结束值， 包括本身数值</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">5</span>))          <span class="comment">#他的结果（ 1, 2, 3, 4, 5） </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、random.random 随机生产[0，1]之间的数；也就是浮点数</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、random.shuffle 将列表的所有元素随机排序</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">random.shuffle(list1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、random.uniform 随机生成一个实数，他在【3，9】范围</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">3</span>,<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h2 id="四、time-时间模块"><a href="#四、time-时间模块" class="headerlink" title="四、time 时间模块"></a>四、time 时间模块</h2><ul><li><p><strong><code>UTC</code> (世界协调时间)：</strong>格林尼治天文时间，世界标准时间，对中国来说是 <code>UTC+8(东八区)</code></p></li><li><p><strong><code>DST</code> (夏令时)：</strong>是一种节约能源二人为规定的时间制度，在夏季时调快一个小时</p></li><li><p><strong>时间的表示形式：</strong></p><ul><li><em>时间戳</em><ul><li>以整型或浮点型表示时间的一个以秒为单位的时间间隔，这个时间间隔的基础值是从1970年1月1日零点开始算起</li></ul></li><li><em>元组一种 python的数据结构表示，这个元组有9个整形内容</em><ul><li>year</li><li>month</li><li>day</li><li>hours</li><li>minutes</li><li>seconds</li><li>weekday</li><li>Julia day</li><li>fiag  (1 或 -1 或 0)</li></ul></li><li><em>格式化字符串：</em><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul></li></ul></li><li><p><strong>示例</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 返回当前时间的时间戳，浮点型，不需要参数</span></span><br><span class="line">a = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>&quot;</span>, <span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 根据时间戳，返回对应的格林尼治时间元组</span></span><br><span class="line">b = time.gmtime(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;b = <span class="subst">&#123;b&#125;</span>&quot;</span>, <span class="built_in">type</span>(b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 将时间戳转为当地时间元组</span></span><br><span class="line">c = time.localtime(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>, <span class="built_in">type</span>(c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 将时间元组转为时间戳</span></span><br><span class="line">d = time.mktime(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d = <span class="subst">&#123;d&#125;</span>&quot;</span>, <span class="built_in">type</span>(d))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 将时间元组转为时间字符串</span></span><br><span class="line">e = time.asctime(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>, <span class="built_in">type</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 将时间戳转为时间字符串</span></span><br><span class="line">f = time.ctime(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f = <span class="subst">&#123;f&#125;</span>&quot;</span>, <span class="built_in">type</span>(f))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7 将时间元组转为指定格式的字符串，参数2为时间元组，默认转为当地时间</span></span><br><span class="line">g = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;g = <span class="subst">&#123;g&#125;</span>&quot;</span>, <span class="built_in">type</span>(g))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 将时间字符串转为时间元组，需要指定格式，参数2用于指定格式</span></span><br><span class="line">h = time.strptime(g, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h = <span class="subst">&#123;h&#125;</span>&quot;</span>, <span class="built_in">type</span>(h))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9 延迟一个时间，值可以为整形或者浮点型，单位秒</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间过了两秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10 返回当前程序的CPU执行时间:</span></span><br><span class="line"><span class="comment"># 1、Unix系统始终返回全部的运行时间</span></span><br><span class="line"><span class="comment"># 2、Windows从第二次开始，都是以第一次调用此函数的开始时间戳作为基数</span></span><br><span class="line"><span class="comment"># 以第一个clock作为基数，共有三个的时候，会计算出第1~3个clock之间的代码运行时间</span></span><br><span class="line">i = time.clock()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i = %d&quot;</span> % i, <span class="built_in">type</span>(i))</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">i1 = time.clock()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i1 = %d&quot;</span> % i1, <span class="built_in">type</span>(i1))</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">i2 = time.clock()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i2 = %d&quot;</span> % i2, <span class="built_in">type</span>(i2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试CPU、内存性能</span></span><br><span class="line">time.clock()</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.clock())</span><br></pre></td></tr></table></figure><h2 id="五、datetime-高级时间模块"><a href="#五、datetime-高级时间模块" class="headerlink" title="五、datetime 高级时间模块"></a>五、datetime 高级时间模块</h2><ul><li><strong>作用</strong><ul><li>比time高级了不少，可以理解为 <code>datetime</code> 基于time进行了封装，提供了更为实用的函数，<code>datetime</code>模块的接口更直观、更容易调用。</li></ul></li><li><strong>模块中的类</strong><ul><li><code>datetime</code>             同时有日期和时间</li><li><code>timedelta</code>           主要用于计算时间的跨度</li><li><code>tzinfo</code>                 时区相关</li><li><code>time</code>                     只关注时间</li><li><code>date</code>                     只关注日期</li></ul></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 获取当前时间</span></span><br><span class="line">d1 = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d1 = <span class="subst">&#123;d1&#125;</span>&quot;</span>, <span class="built_in">type</span>(d1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 获取指定的时间</span></span><br><span class="line">d2 = datetime.datetime(<span class="number">1999</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">25</span>, <span class="number">12345</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d2 = <span class="subst">&#123;d2&#125;</span>&quot;</span>, <span class="built_in">type</span>(d2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 将时间转为字符串</span></span><br><span class="line">d3 = d1.strftime(<span class="string">&quot;%y-%m-%d %X&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d3 = <span class="subst">&#123;d3&#125;</span>&quot;</span>, <span class="built_in">type</span>(d3))</span><br><span class="line"></span><br><span class="line"><span class="comment">#4 将格式化字符串转为datetime对象；注意：转换的格式必须要与字符串一致</span></span><br><span class="line">d4 = datetime.datetime.strptime(d3, <span class="string">&quot;%y-%m-%d %X&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d4 = <span class="subst">&#123;d4&#125;</span>&quot;</span>, <span class="built_in">type</span>(d4))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 进行加减乘除；在此直列出常用的减法</span></span><br><span class="line">d5 = datetime.datetime(<span class="number">1999</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">25</span>, <span class="number">12345</span>)</span><br><span class="line">d6 = datetime.datetime.now()</span><br><span class="line">d7 = d6 - d5</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d7 = <span class="subst">&#123;d7&#125;</span>&quot;</span>, <span class="built_in">type</span>(d7))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d7.days = <span class="subst">&#123;d7.days&#125;</span>&quot;</span>)           <span class="comment"># 提取间隔的天数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d7.seconds = <span class="subst">&#123;d7.seconds&#125;</span>&quot;</span>)     <span class="comment"># 提取间隔天数除外的秒数</span></span><br></pre></td></tr></table></figure><h2 id="六、calendar-日历模块"><a href="#六、calendar-日历模块" class="headerlink" title="六、calendar 日历模块"></a>六、calendar 日历模块</h2><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 返回指定某年某月的日历</span></span><br><span class="line"><span class="built_in">print</span>(calendar.month(<span class="number">2019</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 返回指定年的所有日历</span></span><br><span class="line"><span class="built_in">print</span>( calendar.calendar(<span class="number">2019</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 判断；闰年返回True，否则返回Fales</span></span><br><span class="line"><span class="built_in">print</span>(calendar.isleap(<span class="number">2000</span>))</span><br><span class="line"><span class="built_in">print</span>(calendar.isleap(<span class="number">2001</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#4 返回某个月的weekady的第一天和这个月所有的天数</span></span><br><span class="line"><span class="built_in">print</span>(calendar.monthrange(<span class="number">2019</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 返回某个月以每一周为元素的列表</span></span><br><span class="line"><span class="built_in">print</span>(calendar.monthcalendar(<span class="number">2019</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="七、os-操作系统接口模块"><a href="#七、os-操作系统接口模块" class="headerlink" title="七、os 操作系统接口模块"></a>七、os 操作系统接口模块</h2><ul><li><strong>作用</strong>: 包括了普遍的操作系统功能，有些方法存在与 OS 模块里，还有些方法存在于 os.path 里</li><li><strong>os 模块示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 os.name 获取操作系统类型 &gt; &#123;nt --&gt; windown    posin --&gt; Linux、Unix 或 Mac OS X&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k1 ==&quot;</span>, os.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 os.uname() 打印操作系统详细信息；(windown不支持)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k2 == &quot;</span>, os.uname())</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 os.environ 获取操作系统中所有的环境变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k3 == &quot;</span>, os.environ)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4 os.environ.get(self, k)获取指定环境变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k4 == &quot;</span>, os.environ.get(<span class="string">&quot;ALLUSERSPROFILE&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 os.curdir 获取当前目录&#123;.&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k5 ==&quot;</span>, os.curdir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6 os.getcwd() 获取当前工作目录，也就是当前python脚本的目录位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k6 ==&quot;</span>, os.getcwd())</span><br><span class="line"></span><br><span class="line"><span class="comment">#7 os.listdir(path) 以list列表的形式返回指定目录下的所有目录及文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k7 ==&quot;</span>, os.listdir(<span class="string">r&quot;D:\文件处理\&quot;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#8 os.mkdir(&quot;</span>name<span class="string">&quot;) 在当前目录或绝对路径下创建新目录; 注意：不要重复创建！</span></span><br><span class="line"><span class="string">os.mkdir(&quot;</span>etc<span class="string">&quot;)                         # 相对路径:当前python脚本的目录下</span></span><br><span class="line"><span class="string">os.mkdir(r&quot;</span>D:\文件处理\opt<span class="string">&quot;)             # 绝对路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#9 os.rmdir() 删除目录</span></span><br><span class="line"><span class="string">os.rmdir(r&quot;</span>D:\文件处理\opt<span class="string">&quot;)             # 绝对路径</span></span><br><span class="line"><span class="string">os.rmdir(&quot;</span>etc<span class="string">&quot;)                         # 相对路径:当前python脚本的目录下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#10 os.remove() 删除文件</span></span><br><span class="line"><span class="string">os.remove(&quot;</span>file.txt<span class="string">&quot;)                   # 相对路径:当前python脚本的目录下</span></span><br><span class="line"><span class="string">os.remove(r&quot;</span>D:\文件处理\<span class="number">4.</span>txt<span class="string">&quot;)          # 绝对路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#11 os.stat() 获取目录或文件的属性</span></span><br><span class="line"><span class="string">print(&quot;</span>k8 ==<span class="string">&quot;, os.stat(&quot;</span>good.txt<span class="string">&quot;))    # 相对路径&#123;文件&#125;:当前python脚本的目录下</span></span><br><span class="line"><span class="string">print(&quot;</span>k9 ==<span class="string">&quot;, os.stat(r&quot;</span>D:\文件处理))  <span class="comment"># 绝对路径&#123;目录&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#12 os.rename() 重命名目录或文件</span></span><br><span class="line">os.rename(<span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;handsome&quot;</span>)        <span class="comment"># 相对路径:当前python脚本的目录下</span></span><br><span class="line">os.rename(<span class="string">r&quot;D:\文件处理\file.txt&quot;</span>, <span class="string">r&quot;D:\文件处理\verygood.txt&quot;</span>)      <span class="comment"># 绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#13 os.system() 运行shell命令</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># os.system(&quot;mstsc&quot;)                        # 打开远程桌面</span></span><br><span class="line"><span class="comment"># os.system(&quot;notepad&quot;)                      # 打开记事本</span></span><br><span class="line"><span class="comment"># os.system(&quot;mspaint&quot;)                      # 打开画板</span></span><br><span class="line"><span class="comment"># os.system(&quot;msconfig&quot;)                     # 系统设置 </span></span><br><span class="line"><span class="comment"># os.system(&quot;shutdown -s -t 500&quot;)           # 系统将在500秒内自动关机</span></span><br><span class="line"><span class="comment"># os.system(&quot;shutdown -a&quot;)                  # 取消系统自动注销</span></span><br><span class="line"><span class="comment"># os.system(&quot;taskkill /f /im notepad.exe&quot;)  # 关闭记事本的程序；想关什么程序就写什么程序名</span></span><br></pre></td></tr></table></figure><ul><li><strong>os.path 示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 os.path.abspath(&quot;.&quot;) 查看当前python脚本文件的绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&quot;.&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 os.path.join() 拼接路径; 注意：必须由长到短，否则拼接不上！</span></span><br><span class="line">f1 = <span class="string">r&quot;D:\pycharm\.idea\文件处理&quot;</span></span><br><span class="line">f2 = <span class="string">&quot;handsome.txt&quot;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.join(f1, f2))     <span class="comment">#返回值：D:\pycharm\.idea\文件处理\handsome.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 os.path.split() 以元组的形式拆分路径、 splitext()获取后缀名，如果没有后缀名则为空元素</span></span><br><span class="line">f3 = <span class="string">r&quot;D:\pycharm\.idea\文件处理\handsome.txt&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;split ==&quot;</span>, os.path.split(f3), <span class="string">&quot;splitext ==&quot;</span>, os.path.splitext(f3))</span><br><span class="line"></span><br><span class="line"><span class="comment">#4 os.path.isdir() 判断是否为目录,是就返回True，不是则返回False</span></span><br><span class="line">f4 = <span class="string">r&quot;G:\Bandizip\data&quot;</span></span><br><span class="line">f5 = <span class="string">r&quot;G:\Bandizip\不存在哦&quot;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(f4), os.path.isdir(f5))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 os.path.exists() 判断目录是否存在，存在就返回True，不存在则返回False</span></span><br><span class="line">f6 = <span class="string">r&quot;G:\Bandizip\data&quot;</span></span><br><span class="line">f7 = <span class="string">r&quot;G:\Bandizip\不存在哦&quot;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(f6), os.path.exists(f7))</span><br><span class="line"></span><br><span class="line"><span class="comment">#6 os.path.isfile() 判断文件是否存在，存在就返回True，不存在则返回False</span></span><br><span class="line">f8 = <span class="string">r&quot;G:\Bandizip\data\local.html&quot;</span></span><br><span class="line">f9 = <span class="string">r&quot;G:\Bandizip\data\local.htms&quot;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(f8), os.path.isfile(f9))</span><br><span class="line"></span><br><span class="line"><span class="comment">#7 os.path.getsize() 获得文件大小(字节)</span></span><br><span class="line">f10 = <span class="string">r&quot;G:\Bandizip\data\local.html&quot;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.getsize(f10))</span><br><span class="line"></span><br><span class="line"><span class="comment">#8 os.path.dirname()获得文件的目录、os.path.basename()获得文件名</span></span><br><span class="line">f11 = <span class="string">r&quot;G:\Bandizip\data\local.html&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dirname ==&quot;</span>, os.path.dirname(f11), <span class="string">&quot;basename ==&quot;</span>, os.path.basename(f11))</span><br><span class="line"><span class="comment"># 返回值：dirname == G:\Bandizip\data basename == local.html</span></span><br></pre></td></tr></table></figure><h1 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h1><h2 id="一、String-概念"><a href="#一、String-概念" class="headerlink" title="一、String 概念"></a>一、String 概念</h2><h3 id="1-什么是字符串？"><a href="#1-什么是字符串？" class="headerlink" title="1. 什么是字符串？"></a>1. 什么是字符串？</h3><ul><li>字符串是以单引号或双引号括起来的文本</li><li>例如：<ul><li><code>&#39;abc&#39;</code></li><li><code>&quot;abc123&quot;</code></li></ul></li></ul><h3 id="2-如何创建字符串？"><a href="#2-如何创建字符串？" class="headerlink" title="2. 如何创建字符串？"></a>2. 如何创建字符串？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;lemon is a good man!&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;sunck is a nice man!&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：字符串不可变！！！举例说明：</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str3 = <span class="string">&quot;*lemon*&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip(<span class="string">&quot;*&quot;</span>))      <span class="comment">#lemon；这仅仅是strip返回的输出结果，而实际上并没有改变字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str3 = %s&quot;</span> % (str3)) <span class="comment">#str3 = *lemon*；因为，字符串类型不可变！！！</span></span><br></pre></td></tr></table></figure><h2 id="二、string-方法"><a href="#二、string-方法" class="headerlink" title="二、string 方法"></a>二、string 方法</h2><h3 id="1-字符串运算"><a href="#1-字符串运算" class="headerlink" title="1. 字符串运算"></a>1. 字符串运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)字符串连接</span><br><span class="line">str4 = <span class="string">&quot;what &quot;</span></span><br><span class="line">str5 = <span class="string">&quot;is &quot;</span></span><br><span class="line">str6 = <span class="string">&quot;name?&quot;</span></span><br><span class="line">str7 = str4 + str5 + str6</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;str7 = <span class="subst">&#123;str7&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)输出重复字符串</span><br><span class="line">str7 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line">str8 = str7 * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;str8 = <span class="subst">&#123;str8&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-字符串的截取"><a href="#2-字符串的截取" class="headerlink" title="2. 字符串的截取"></a>2. 字符串的截取</h3><ul><li><p>访问字符串中的某一个字符，通过索引下标查找字符，索引从0开始</p></li><li><p>从开始下标之后开始截取，截取到结束下标之前</p></li><li><p>格式：<code>str</code> 变量名[开始下标:结束下标]</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只截取下标为 1 的字符串</span></span><br><span class="line">str9 = <span class="string">&quot;sunck is a good man!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str9[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取字符串中的一部分；从给定下标处开始截取给定下标之前</span></span><br><span class="line">str10 = <span class="string">&quot;sunck is a good man!&quot;</span></span><br><span class="line">str11 = str10[<span class="number">11</span>:<span class="number">15</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;str11 = <span class="subst">&#123;str11&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从开头截取到给定下标之前</span></span><br><span class="line">str12 = <span class="string">&quot;sunck is a good man!&quot;</span></span><br><span class="line">str13 = str12[:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str13 = &quot;</span>, str13)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从给定下标处开始截取到结尾</span></span><br><span class="line">str14 = <span class="string">&quot;sunck is a good man!&quot;</span></span><br><span class="line">str15 = str14[<span class="number">16</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str15 = &quot;</span>, str15)</span><br></pre></td></tr></table></figure><h3 id="3-判断数据元素是否存在"><a href="#3-判断数据元素是否存在" class="headerlink" title="3. 判断数据元素是否存在"></a>3. 判断数据元素是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 身份运算符:</span></span><br><span class="line">str16 = <span class="string">&quot;sunck is a good man!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> <span class="keyword">in</span> str16)          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;good&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> str16)      <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 成员运算符:</span></span><br><span class="line">gl_str = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon&quot;</span> <span class="keyword">is</span> gl_str)        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon&quot;</span> <span class="keyword">is</span> <span class="keyword">not</span> gl_str)    <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="4-判断系列方法"><a href="#4-判断系列方法" class="headerlink" title="4. 判断系列方法"></a>4. 判断系列方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 startswith(&quot;str&quot;)</span></span><br><span class="line"><span class="comment"># 功能：判断指定的字符串是否为开头；是返回True，否则返回False</span></span><br><span class="line">str4 = <span class="string">&quot;lemon is a very good&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str4.startswith(<span class="string">&quot;lemo&quot;</span>), str4.startswith(<span class="string">&quot;lemon&quot;</span>), str4.startswith(<span class="string">&quot;lemons&quot;</span>), str4.startswith(<span class="string">&quot;good&quot;</span>))        <span class="comment"># 返回值：True True False False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 endswith(&quot;str&quot;)</span></span><br><span class="line"><span class="comment"># 功能：判断指定的字符串是否为结尾；是返回True，否则返回False</span></span><br><span class="line">str5 = <span class="string">&quot;lemon is a very good&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str5.endswith(<span class="string">&quot;od&quot;</span>), str5.endswith(<span class="string">&quot;good&quot;</span>), str5.endswith(<span class="string">&quot;goods&quot;</span>), str5.endswith(<span class="string">&quot;lemon&quot;</span>))         <span class="comment"># 返回值：True True False False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 isalpha()</span></span><br><span class="line"><span class="comment"># 功能：判断标识符里的str是否都为字母；是返回True，否则返回False</span></span><br><span class="line">str1 = <span class="string">&quot;lemon is a very good&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;abcdefgklkiyjbmyzbxc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1 = %s&quot;</span> % str1.isalpha())      <span class="comment"># 返回值：str1 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2 = %s&quot;</span> % str2.isalpha())      <span class="comment"># 返回值：str2 = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 isdigit()</span></span><br><span class="line"><span class="comment"># 功能：判断标识符里的str是否都为数字；是返回True，否则返回False</span></span><br><span class="line">str1 = <span class="string">&quot;12345678@&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;123456789&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1 = %s&quot;</span> % str1.isdigit())     <span class="comment"># 返回值：str1 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2 = %s&quot;</span> % str2.isdigit())     <span class="comment"># 返回值：str2 = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 isalnum()</span></span><br><span class="line"><span class="comment"># 功能：判断标识符里的str是否都为字母、数字、字母数字；是返回True，否则False</span></span><br><span class="line">str1,str2,str3,str4,str5 = <span class="string">&quot;lemon is very good&quot;</span>, <span class="string">&quot;lemon is 123123&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;abcdefg&quot;</span>, <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1 = %s&quot;</span> % str1.isalnum())     <span class="comment"># 返回值：str1 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2 = %s&quot;</span> % str2.isalnum())     <span class="comment"># 返回值：str2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str3 = %s&quot;</span> % str3.isalnum())     <span class="comment"># 返回值：str3 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str4 = %s&quot;</span> % str4.isalnum())     <span class="comment"># 返回值：str4 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str5 = %s&quot;</span> % str5.isalnum())     <span class="comment"># 返回值：str5 = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6 isspace()</span></span><br><span class="line"><span class="comment"># 功能：判断标识符里的str是否都为空格；是返回True，否则False</span></span><br><span class="line">str1 = <span class="string">&quot; &quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line">str3 = <span class="string">&quot;bbb 222 @@@&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1 = %s&quot;</span> % str1.isspace())    <span class="comment"># 返回值：str1 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2 = %s&quot;</span> % str2.isspace())    <span class="comment"># 返回值：str2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str3 = %s&quot;</span> % str3.isspace())    <span class="comment"># 返回值：str3 = False</span></span><br></pre></td></tr></table></figure><h3 id="5-格式化输出-与-转义字符"><a href="#5-格式化输出-与-转义字符" class="headerlink" title="5. 格式化输出 与 转义字符"></a>5. 格式化输出 与 转义字符</h3><ul><li><strong>格式化输出功能</strong><ul><li>简化代码</li></ul></li><li><strong>常用的格式化输出符</strong><ul><li>%d(整数)</li><li>%f(浮点数)</li><li>%s(字符串)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">f1 = <span class="number">10.123456789</span>         <span class="comment"># 小数部分默认为六位，并且默认就会四舍五入</span></span><br><span class="line">str1 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num1 = %d, f1 = %f, str1 = %s&quot;</span> % (num1, f1, str1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num1 = %.3d, f1 = %.3f, str1 = %.3s&quot;</span> % (num1, f1, str1))</span><br><span class="line"><span class="comment">#【%.3d】：让这个整数值保留三位数，位数不够向前补0，如果够就保持原样</span></span><br><span class="line"><span class="comment">#【%.3f】：只保留小数的前三位，会四舍五入</span></span><br><span class="line"><span class="comment">#【%.3s】：只保留这个字符串的前三位</span></span><br></pre></td></tr></table></figure><ul><li><strong>转义字符功能</strong>:   \   将一些字符转换成有特殊含义的的字符；常见的有\n   \t 等等……</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)：\n  <span class="comment">#换行符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon\n18&quot;</span>)</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">202</span></span><br><span class="line">str1 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num1 = %d\nstr1 = %s&quot;</span> % (num1,str1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;num1 = <span class="subst">&#123;num1&#125;</span>\nstr1 = <span class="subst">&#123;str1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 思考：如果字符串内有很多\n符，写在一行不好阅读怎么办？比如print(&#x27;aaa\nbbb\nccc......\n&#x27;)</span></span><br><span class="line"><span class="comment"># 解决方法1：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">good</span></span><br><span class="line"><span class="string">nice</span></span><br><span class="line"><span class="string">hostname</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法2：</span></span><br><span class="line">num1 = <span class="number">303</span></span><br><span class="line">str1 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num1 = %d</span></span><br><span class="line"><span class="string">str1 = %s</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % (num1,str1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>): \t   <span class="comment">#制表符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;101\tlemon&quot;</span>)</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">202</span></span><br><span class="line">str1 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num1 = %d\tstr1 = %s&quot;</span> % (num1,str1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 思考：如果字符串中有好多字符串都需要转义，就需要加入好多\，为了简化，python允许用r表示内部的字符串默认不转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如：我就想打印“C:\Windows\tystem32\nppraiser”这个字符串内容，但是windown的路径正好有很多开头是n或t等等一些特殊字符怎么办？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法1：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;C:\Windows\tystem32\nppraiser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法2：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C:\\Windows\\tystem32\\nppraiser&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>): \\</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;101 \\ lemon&quot;</span>)</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">202</span></span><br><span class="line">str1 = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num1 = %d \\ str1 = %s&quot;</span> % (num1,str1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>): \<span class="string">&#x27;      \&quot;</span></span><br><span class="line"><span class="string">print(&#x27;</span>what <span class="keyword">is</span> you \<span class="string">&#x27;s name?&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;what is you \&quot;s name?&quot;</span>)</span><br><span class="line"><span class="comment"># print(&#x27;what is you &#x27;s name?&#x27;)</span></span><br><span class="line"><span class="comment"># print(&quot;what is you &quot;s name?&quot;)</span></span><br><span class="line"><span class="comment"># 如果不加\转义符就会报错</span></span><br></pre></td></tr></table></figure><h3 id="6-eavl-“str”"><a href="#6-eavl-“str”" class="headerlink" title="6. eavl(“str”)"></a>6. eavl(“str”)</h3><p><strong>功能：</strong>将里面的字符串当成有效的表达式来求值并返回结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="built_in">eval</span>(<span class="string">&quot;110&quot;</span>)</span><br><span class="line">num2 = <span class="built_in">eval</span>(<span class="string">&quot;110.1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num1),<span class="built_in">type</span>(num2),num1,num2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;+101&quot;</span>))          <span class="comment"># 101</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;-101&quot;</span>))          <span class="comment"># -101</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 + 1&quot;</span>))        <span class="comment"># 11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 - 1&quot;</span>))        <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 * 3&quot;</span>))        <span class="comment"># 30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 / 3&quot;</span>))        <span class="comment"># 3.3333333333333335</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 % 3&quot;</span>))        <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 ** 3&quot;</span>))       <span class="comment"># 1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 // 3&quot;</span>))       <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 &gt; 3&quot;</span>))        <span class="comment"># 如果10大于3就True，否则就False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 &lt; 3&quot;</span>))        <span class="comment"># 如果10小于3就True，否则就False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 == 3&quot;</span>))       <span class="comment"># 如果10等于3就True，否则就False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 &gt;= 3&quot;</span>))       <span class="comment"># 如果10大于等于3就True，否则就False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;10 &lt;= 3&quot;</span>))       <span class="comment"># 如果10小于等于3就True，否则就False</span></span><br></pre></td></tr></table></figure><h3 id="7-len-“str”"><a href="#7-len-“str”" class="headerlink" title="7. len(“str”)"></a>7. len(“str”)</h3><ul><li><strong>功能：</strong>返回字符串的长度【字符个数】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;my name is &#x27;a lemon&quot;</span>))         <span class="comment"># 19</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;my name is &#x27;a lemon李&quot;</span>))       <span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(name))                          <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h3 id="8-count-str-name-start-and"><a href="#8-count-str-name-start-and" class="headerlink" title="8. count(str_name,[start],[and])"></a>8. count(str_name,[start],[and])</h3><ul><li><strong>功能：</strong>返回字符串中 <code>str</code> 出现的次数，可以指定一个范围，默认是从头到尾</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name is the lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.count(<span class="string">&quot;is&quot;</span>))                   <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(name.count(<span class="string">&quot;is&quot;</span>,<span class="number">8</span>,<span class="built_in">len</span>(name)))       <span class="comment"># 1；从字符串的第八个下标开始到结尾</span></span><br></pre></td></tr></table></figure><h3 id="9-lower"><a href="#9-lower" class="headerlink" title="9. lower()"></a>9. lower()</h3><ul><li><strong>功能：</strong>转换字符串中大写字母为小写字母</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;WHAT is YOU NAME LEMON-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())                       <span class="comment"># what is you name lemon-民!</span></span><br></pre></td></tr></table></figure><h3 id="10-upper"><a href="#10-upper" class="headerlink" title="10. upper()"></a>10. upper()</h3><ul><li><strong>功能：</strong>转换字符串中小写字母为大写字母</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what IS you name lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())                       <span class="comment"># WHAT IS YOU NAME LEMON-民!</span></span><br></pre></td></tr></table></figure><h3 id="11-swapcase"><a href="#11-swapcase" class="headerlink" title="11. swapcase()"></a>11. swapcase()</h3><ul><li><strong>功能：</strong>转换字符串中小写字母为大写字母，大写字母为小写字母</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what IS you NAME lemon-Min!民&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.swapcase())                   <span class="comment"># WHAT is YOU name LEMON-mIN!民</span></span><br></pre></td></tr></table></figure><h3 id="12-capitalize"><a href="#12-capitalize" class="headerlink" title="12. capitalize()"></a>12. capitalize()</h3><ul><li><strong>功能：</strong>首字母大写，其他都为小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;THEN is YOU name LEMON-mIN!民&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.capitalize())                <span class="comment"># Then is you name lemon-min!民</span></span><br></pre></td></tr></table></figure><h3 id="13-title"><a href="#13-title" class="headerlink" title="13. title()"></a>13. title()</h3><ul><li><strong>功能：</strong>每个单词的首字母大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.title())                     <span class="comment"># What Is You Name Lemon-民!</span></span><br></pre></td></tr></table></figure><h3 id="14-center-width-fillchar"><a href="#14-center-width-fillchar" class="headerlink" title="14. center(width, fillchar)"></a>14. center(width, fillchar)</h3><ul><li><strong>功能：</strong>返回一个指定宽度的居中字符串，fillchar 为填充的字符串，默认空格填充</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.center(<span class="number">40</span>))               <span class="comment">#        what is you name lemon-民!        </span></span><br><span class="line"><span class="built_in">print</span>(name.center(<span class="number">40</span>, <span class="string">&quot;*&quot;</span>))          <span class="comment"># *******what is you name lemon-民!********</span></span><br><span class="line"><span class="built_in">print</span>(name.center(<span class="number">40</span>, <span class="string">&quot;*&quot;</span>), <span class="string">&quot;#&quot;</span>)     <span class="comment"># *******what is you name lemon-民!******** #</span></span><br></pre></td></tr></table></figure><h3 id="15-ljust-width-fillchar"><a href="#15-ljust-width-fillchar" class="headerlink" title="15. ljust(width, fillchar)"></a>15. ljust(width, fillchar)</h3><ul><li><strong>功能：</strong>返回一个指定宽度的左对齐字符串，<code>fillchar</code> 为填充字符，默认空格填充</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.ljust(<span class="number">40</span>))               <span class="comment"># what is you name lemon-民!               </span></span><br><span class="line"><span class="built_in">print</span>(name.ljust(<span class="number">40</span>, <span class="string">&quot;&amp;&quot;</span>))          <span class="comment"># what is you name lemon-民!&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span></span><br><span class="line"><span class="built_in">print</span>(name.ljust(<span class="number">40</span>, <span class="string">&quot;%&quot;</span>), <span class="string">&quot;*&quot;</span>)     <span class="comment"># what is you name lemon-民!%%%%%%%%%%%%%%% *</span></span><br></pre></td></tr></table></figure><h3 id="16-rjust-width-fillchar"><a href="#16-rjust-width-fillchar" class="headerlink" title="16. rjust(width, fillchar)"></a>16. rjust(width, fillchar)</h3><ul><li><strong>功能：</strong>返回一个指定宽度的右对齐字符串，fillchar 为填充字符，默认空格填充</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.rjust(<span class="number">40</span>))                  <span class="comment">#                what is you name lemon-民!</span></span><br><span class="line"><span class="built_in">print</span>(name.rjust(<span class="number">40</span>, <span class="string">&quot;&amp;&quot;</span>))             <span class="comment"># &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;what is you name lemon-民!</span></span><br><span class="line"><span class="built_in">print</span>(name.rjust(<span class="number">40</span>, <span class="string">&quot;%&quot;</span>), <span class="string">&quot;*&quot;</span>)        <span class="comment"># %%%%%%%%%%%%%%%what is you name lemon-民! *</span></span><br></pre></td></tr></table></figure><h3 id="17-zfill-width"><a href="#17-zfill-width" class="headerlink" title="17. zfill(width)"></a>17. zfill(width)</h3><ul><li><strong>功能：</strong>返回一个长度为width的字符串，原字符串右对齐，前面补0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.zfill(<span class="number">40</span>))                  <span class="comment"># 000000000000000what is you name lemon-民!</span></span><br></pre></td></tr></table></figure><h3 id="18-find-name-start-and"><a href="#18-find-name-start-and" class="headerlink" title="18. find(name,[start],[and])"></a>18. find(name,[start],[and])</h3><ul><li><strong>功能：</strong>从左向右检测name字符串是否包含在字符串中，可以指定一个范围，默认是从头到尾；得到的是第一次出现的开始下标，没有则返回-1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name is the lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&quot;is&quot;</span>))                        <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&quot;man&quot;</span>))                       <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&quot;is&quot;</span>, <span class="number">8</span>, <span class="built_in">len</span>(name)))          <span class="comment"># 17；从字符串的第八个下标开始到结尾</span></span><br></pre></td></tr></table></figure><h3 id="19-rfind-name-start-end"><a href="#19-rfind-name-start-end" class="headerlink" title="19. rfind(name,[start],[end])"></a>19. rfind(name,[start],[end])</h3><ul><li><strong>功能：</strong>从右向左检测name字符串是否包含在字符串中，可以指定一个范围，默认是从头到尾；得到的是第一次出现的开始下标，没有则返回-1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name is the lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.rfind(<span class="string">&quot;is&quot;</span>))                      <span class="comment"># 17</span></span><br><span class="line"><span class="built_in">print</span>(name.rfind(<span class="string">&quot;man&quot;</span>))                     <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(name.rfind(<span class="string">&quot;is&quot;</span>, <span class="number">0</span>, <span class="number">15</span>))               <span class="comment"># 5；从0开始，截止到第15个下标结束</span></span><br></pre></td></tr></table></figure><h3 id="20-index-“str”-start-0-end-len-str"><a href="#20-index-“str”-start-0-end-len-str" class="headerlink" title="20. index(“str”, start=0, end=len(str))"></a>20. index(“str”, start=0, end=len(str))</h3><ul><li><strong>功能：</strong>和 <code>find()</code> 一样,只不过如果 <code>str</code> 不存在的时候会报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name is the lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&quot;man&quot;</span>))     <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(name.index(<span class="string">&quot;man&quot;</span>))    <span class="comment"># 报错；ValueError: substring not found</span></span><br></pre></td></tr></table></figure><h3 id="21-rindex-str-start-0-end-len-str"><a href="#21-rindex-str-start-0-end-len-str" class="headerlink" title="21. rindex(str, start=0, end=len(str))"></a>21. rindex(str, start=0, end=len(str))</h3><ul><li><strong>功能：</strong>和 <code>rfind()</code> 一样,只不过如果 <code>str</code> 不存在的时候会报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;what is you name is the lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.rfind(<span class="string">&quot;man&quot;</span>))      <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(name.rindex(<span class="string">&quot;man&quot;</span>))     <span class="comment"># 报错；ValueError: substring not found</span></span><br></pre></td></tr></table></figure><h3 id="22-lstrip"><a href="#22-lstrip" class="headerlink" title="22. lstrip()"></a>22. lstrip()</h3><ul><li><strong>功能：</strong>截掉字符串左侧指定的字符，默认为空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">&quot;               what is you name the lemon-民!&quot;</span></span><br><span class="line">name2 = <span class="string">&quot;***************what is you name the lemon-民!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name1.lstrip())            <span class="comment"># what is you name the lemon-民!</span></span><br><span class="line"><span class="built_in">print</span>(name2.lstrip(<span class="string">&quot;*&quot;</span>))         <span class="comment"># what is you name the lemon-民!</span></span><br></pre></td></tr></table></figure><h3 id="23-rstrip"><a href="#23-rstrip" class="headerlink" title="23. rstrip()"></a>23. rstrip()</h3><ul><li><strong>功能：</strong>截掉字符串右侧指定的字符，默认为空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">&quot;what is you name the lemon-民!               &quot;</span></span><br><span class="line">name2 = <span class="string">&quot;what is you name the lemon-民!***************&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name1.rstrip())            <span class="comment"># what is you name the lemon-民!</span></span><br><span class="line"><span class="built_in">print</span>(name2.rstrip(<span class="string">&quot;*&quot;</span>), <span class="string">&quot;@&quot;</span>)    <span class="comment"># what is you name the lemon-民! @</span></span><br></pre></td></tr></table></figure><h3 id="24-strip"><a href="#24-strip" class="headerlink" title="24. strip()"></a>24. strip()</h3><ul><li><strong>功能：</strong>截掉字符串左侧和右侧指定的字符，默认为空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;**********my name is lemon************&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.strip(<span class="string">&quot;*&quot;</span>))       <span class="comment"># my name is lemon</span></span><br></pre></td></tr></table></figure><h3 id="25-split-str-””-num"><a href="#25-split-str-””-num" class="headerlink" title="25. split(str=””,num)"></a>25. split(str=””,num)</h3><ul><li><strong>功能：</strong>将字符串切割成列表，以 <code>str</code> 为分隔符截取字符串，指定 <code>num</code>，则仅截取第 <code>num</code> 个字符串</li><li>示例1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;my*name*is*a*lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.split(<span class="string">&quot;*&quot;</span>))        <span class="comment"># [&#x27;my&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;lemon&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(str1.split(<span class="string">&quot;*&quot;</span>,<span class="number">3</span>))      <span class="comment"># [&#x27;my&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;a*lemon&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>示例2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = str1.split(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(i) &gt; <span class="number">0</span>:  <span class="comment"># 统计list1列表的长度</span></span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(c)            <span class="comment"># 5；打印list1列表的元素数量</span></span><br></pre></td></tr></table></figure><h3 id="26-splitlines-keepends"><a href="#26-splitlines-keepends" class="headerlink" title="26. splitlines([keepends])"></a>26. splitlines([keepends])</h3><ul><li><strong>功能：</strong>按行将字符串切割成列表，如果 <code>keepends</code>  ==  <code>True</code> ,会保留换行符，默认False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">&quot;&quot;&quot;lemon is a good man!</span></span><br><span class="line"><span class="string">lemon is a nice man!</span></span><br><span class="line"><span class="string">lemon is handsome man!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str2.splitlines())</span><br><span class="line"><span class="comment"># 结果 [&#x27;lemon is a good man!&#x27;, &#x27;lemon is a nice man!&#x27;, &#x27;lemon is handsome man!&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(str2.splitlines(<span class="literal">True</span>))     </span><br><span class="line"><span class="comment"># 结果 [&#x27;lemon is a good man!\n&#x27;, &#x27;lemon is a nice man!\n&#x27;, &#x27;lemon is handsome man!\n&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="27-join"><a href="#27-join" class="headerlink" title="27. join()"></a>27. join()</h3><ul><li><strong>功能：</strong>以指定的字符串为分隔符，将列表中的所有元素组成一个字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;good&quot;</span>, <span class="string">&quot;man&quot;</span>]</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot; *_* &quot;</span>.join(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>, <span class="built_in">type</span>(<span class="built_in">str</span>))         <span class="comment"># lemon *_* is *_* a *_* good *_* man  &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="28-max-min"><a href="#28-max-min" class="headerlink" title="28. max()    min()"></a>28. max()    min()</h3><ul><li><strong>功能：</strong><code>max</code> 找出最大的一位字符串（z）最大；<code>min</code> 找出最小的一位字符串（A）最小。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">str</span>))        <span class="comment"># z</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="built_in">str</span>))        <span class="comment"># A；如果有空格，空格就是最小的</span></span><br></pre></td></tr></table></figure><h3 id="29-replace-oldstr-newstr-count"><a href="#29-replace-oldstr-newstr-count" class="headerlink" title="29. replace(oldstr, newstr, count)"></a>29. replace(oldstr, newstr, count)</h3><ul><li><strong>功能：</strong>用 <code>newstr</code> 替换 <code>oldstr</code> ，默认是全部替换。如果指定了 <code>count</code> ，那么则指替换前 <code>count</code> 个</li><li>示例：【字符串不可变】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;my name is a lemon lemon lemon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;red&quot;</span>))        <span class="comment"># my name is a red red red</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="number">2</span>))     <span class="comment"># my name is a red red lemon</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1 = %s&quot;</span> % (str1))                <span class="comment"># 字符串不可变!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str2、str3只不过是利用str1对他们自身赋值，其实并没有改变str1，因为，字符串不可变！</span></span><br><span class="line">str2 = str1.replace(<span class="string">&quot;lemon&quot;</span>,<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2 = %s&quot;</span> % (str2))                <span class="comment"># str2 = my name is a blue blue blue</span></span><br><span class="line"></span><br><span class="line">str3 = str1.replace(<span class="string">&quot;lemon&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str3 = %s&quot;</span> % (str3))                <span class="comment"># str3 = my name is a blue blue lemon</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1 = %s&quot;</span> % (str1))                <span class="comment"># str1 = my name is a lemon lemon lemon</span></span><br></pre></td></tr></table></figure><h3 id="30-maketrans-“str1”-“str2”-translate-identifier"><a href="#30-maketrans-“str1”-“str2”-translate-identifier" class="headerlink" title="30. maketrans(“str1”, “str2”)    translate(identifier)"></a>30. maketrans(“str1”, “str2”)    translate(identifier)</h3><ul><li><strong>功能：</strong>将字符串1转换成字符串2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">str</span>.maketrans(<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;65&quot;</span>)   <span class="comment"># 要转换的字符串   目标字符串   a--6   i--5</span></span><br><span class="line">str2 = <span class="string">&quot;my name is a lemon&quot;</span></span><br><span class="line">str3 = str2.translate(str1)</span><br><span class="line"><span class="built_in">print</span>(str3)                        <span class="comment"># my n6me 5s 6 lemon</span></span><br></pre></td></tr></table></figure><h1 id="List-列表"><a href="#List-列表" class="headerlink" title="List 列表"></a>List 列表</h1><h2 id="一、List概念"><a href="#一、List概念" class="headerlink" title="一、List概念"></a>一、List概念</h2><h3 id="1-什么是列表？"><a href="#1-什么是列表？" class="headerlink" title="1. 什么是列表？"></a>1. 什么是列表？</h3><ul><li><strong>列表本质</strong><ul><li>是一种有序的集合，并且列表是可变的</li><li>而且列表中的元素可以是不同类型的</li></ul></li><li><strong>列表就是用 中括号 将 一个或多个元素 括起来的数据列表</strong><ul><li>例如：<ul><li>[1]</li><li>[“lemon”]</li><li>[1, “lemon”]</li></ul></li></ul></li></ul><h3 id="2-如何创建列表？"><a href="#2-如何创建列表？" class="headerlink" title="2. 如何创建列表？"></a>2. 如何创建列表？</h3><ul><li><p><strong>格式：</strong></p><ul><li>列表名 = [列表选项1, 列表选项2, 列表选项3,……列表选项n]</li></ul></li><li><p><strong>示例：</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空列表</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个带有元素的列表</span></span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中的数据可以是不同类型</span></span><br><span class="line">list3 = [<span class="number">10</span>, <span class="number">10.1</span>, <span class="string">&quot;nice&quot;</span>, <span class="literal">True</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure><ul><li>思考：要存储5个人的年龄并求出平均值</li><li>解决方法：使用列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list4 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="comment"># [index]是list列表的下标</span></span><br><span class="line">    <span class="built_in">sum</span> += list4[index]</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;总和年龄：%d&quot;</span> % (<span class="built_in">sum</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平均年龄：%d&quot;</span> % (<span class="built_in">sum</span> / index))</span><br></pre></td></tr></table></figure><h2 id="二、列表元素的访问"><a href="#二、列表元素的访问" class="headerlink" title="二、列表元素的访问"></a>二、列表元素的访问</h2><h3 id="1-取值"><a href="#1-取值" class="headerlink" title="1. 取值"></a>1. 取值</h3><ul><li><strong>功能：</strong>指定取出列表中的元素值，默认取出所有元素值</li><li><strong>格式：</strong>列表名[下标]</li><li><strong>注意：</strong>不要越界（下标不能超出可表示的范围，否则会报错）</li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(list5[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="2-替换"><a href="#2-替换" class="headerlink" title="2. 替换"></a>2. 替换</h3><ul><li><strong>功能：</strong>替换掉列表中的元素</li><li><strong>格式：</strong>列表名[下标] = value</li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list6 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list6[<span class="number">2</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(list6)</span><br></pre></td></tr></table></figure><h2 id="三、列表操作"><a href="#三、列表操作" class="headerlink" title="三、列表操作"></a>三、列表操作</h2><h3 id="1-列表组合"><a href="#1-列表组合" class="headerlink" title="1. 列表组合"></a>1. 列表组合</h3><ul><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list7 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list8 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list9 = list7 + list8</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list7 = %s, list8 = %s, list9 = %s&quot;</span> % (list1, list2, list3))</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> <code>list7</code> 和 <code>list8</code> 列表的元素不会变，我们不过是用了这两个列表定义了一个新的 <code>list9</code> 列表</p></blockquote><h3 id="2-列表重复"><a href="#2-列表重复" class="headerlink" title="2. 列表重复"></a>2. 列表重复</h3><ul><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list10 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(list10 * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="3-判断元素是否在列表中"><a href="#3-判断元素是否在列表中" class="headerlink" title="3.判断元素是否在列表中"></a>3.判断元素是否在列表中</h3><ul><li><strong>示例：</strong><ul><li>判断 <code>list11</code> 列表里有没有 {5  6} 这两个元素，如果有返回 True，没有返回 False</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list11 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> <span class="keyword">in</span> list11)        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> <span class="keyword">in</span> list11)        <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="4-列表截取"><a href="#4-列表截取" class="headerlink" title="4. 列表截取"></a>4. 列表截取</h3><ul><li><strong>功能：</strong>从开始下标之后开始截取，截取到结束下标之前</li><li><strong>格式：</strong>列表名[开始下标:结束下标]</li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list12 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(list12[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(list12[:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(list12[<span class="number">2</span>:<span class="number">6</span>])</span><br></pre></td></tr></table></figure><h3 id="5-二维列表"><a href="#5-二维列表" class="headerlink" title="5. 二维列表"></a>5. 二维列表</h3><ul><li><strong>逻辑：</strong>这个 list 列表中的元素从某种意义上也是一个列表；  无限制嵌套元素列表</li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list13 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(list13)          <span class="comment"># [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="built_in">print</span>(list13[<span class="number">1</span>])       <span class="comment"># [4, 5, 6]</span></span><br><span class="line"><span class="built_in">print</span>(list13[<span class="number">1</span>][<span class="number">1</span>])    <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h2 id="四、列表方法"><a href="#四、列表方法" class="headerlink" title="四、列表方法"></a>四、列表方法</h2><blockquote><p><strong>大部分和前面字符串的方法一样</strong></p></blockquote><h3 id="1-append"><a href="#1-append" class="headerlink" title="1. append()"></a>1. append()</h3><ul><li>在 list 列表末尾追加一个新的元素值；但是一次只能追加一个新元素！</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.append([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="2-extend"><a href="#2-extend" class="headerlink" title="2. extend()"></a>2. extend()</h3><ul><li>在 list 列表的末尾一次性追加另一个列表中的多个元素值； 这个方法可以追加多个元素</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">list</span>.extend([<span class="number">6</span>, <span class="number">7.1</span>, <span class="string">&quot;lemon&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="3-insert"><a href="#3-insert" class="headerlink" title="3. insert()"></a>3. insert()</h3><ul><li><p>在下标处插入一个元素，也就是在下标处的前面插入一个元素，并且原下标向后顺延；但一次只能插入一个！</p></li><li><p>格式：列表名.insert(下标, 值)</p></li><li><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">0</span>, [<span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="4-pop"><a href="#4-pop" class="headerlink" title="4. pop()"></a>4. pop()</h3><ul><li>移除列表中指定下标处的元素，默认移除最后一个元素，并可以返回被删除的数据</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">list</span>.pop()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)                  <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.pop(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)                  <span class="comment"># [1, 2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.pop(<span class="number">1</span>), <span class="built_in">list</span>)     <span class="comment"># 2 [1, 4]；返回被删除的元素值</span></span><br></pre></td></tr></table></figure><h3 id="5-remove"><a href="#5-remove" class="headerlink" title="5. remove()"></a>5. remove()</h3><ul><li>只删除列表中指定元素的第一个匹配的结果，后面如果再出现相同元素，一律忽略；{不是以下标筛选元素}</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)          <span class="comment"># [1, 2, 3, 5, 4, 7, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)          <span class="comment"># [1, 2, 3, 5, 7, 4]</span></span><br></pre></td></tr></table></figure><h3 id="6-clear"><a href="#6-clear" class="headerlink" title="6. clear()"></a>6. clear()</h3><ul><li>清除列表中所有的元素</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">list</span>.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)               <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h3 id="7-index"><a href="#7-index" class="headerlink" title="7. index()"></a>7. index()</h3><ul><li>从列表中找出某个元素值的第一个匹配的索引值</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">index1 = <span class="built_in">list</span>.index(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">index2 = <span class="built_in">list</span>.index(<span class="string">&quot;d&quot;</span>, <span class="number">8</span>)                            <span class="comment"># 从第八个下标开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;index1 = <span class="subst">&#123;index1&#125;</span>\nindex2 = <span class="subst">&#123;index2&#125;</span>&quot;</span>)         <span class="comment"># index1 = 3, index2 = 9</span></span><br></pre></td></tr></table></figure><h3 id="8-count"><a href="#8-count" class="headerlink" title="8. count()"></a>8. count()</h3><ul><li>查看列表中的元素值出现过多少次</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="number">3</span>))                <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><ul><li>案例<ul><li>如何将下面的 list 列表中的 {3} 全部一次性删除</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gc_list = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># print(gc_list.count(3))             # 5</span></span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line"><span class="built_in">all</span> = gc_list.count(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">while</span> num1 &lt; <span class="built_in">all</span>:</span><br><span class="line">    gc_list.remove(<span class="number">3</span>)</span><br><span class="line">    num1 += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(gc_list)                        <span class="comment"># [2, 4, 5, 5]</span></span><br></pre></td></tr></table></figure><h3 id="9-len"><a href="#9-len" class="headerlink" title="9. len()"></a>9. len()</h3><ul><li><p>统计列表中的元素总数</p></li><li><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><h3 id="10-max-min"><a href="#10-max-min" class="headerlink" title="10. max()  min()"></a>10. max()  min()</h3><ul><li>获取列表中的（最大、最小）值</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">list</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><h3 id="11-reverse-倒序"><a href="#11-reverse-倒序" class="headerlink" title="11. reverse()  倒序"></a>11. reverse()  倒序</h3><ul><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="12-sort-排序-升序"><a href="#12-sort-排序-升序" class="headerlink" title="12. sort  排序  升序"></a>12. sort  排序  升序</h3><ul><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)       <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="13-拷贝"><a href="#13-拷贝" class="headerlink" title="13. 拷贝"></a>13. 拷贝</h3><ul><li>有两种：<ul><li>浅拷贝（引用拷贝）</li><li>深拷贝（内存的拷贝）</li></ul></li><li>浅拷贝示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2 = list1</span><br><span class="line">list2[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(list1)              <span class="comment"># [1, 200, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(list2)              <span class="comment"># [1, 200, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))          <span class="comment"># 2970263183944</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list2))          <span class="comment"># 2970263183944</span></span><br></pre></td></tr></table></figure><ul><li>深拷贝示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2 = list1.copy()</span><br><span class="line">list2[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(list1)               <span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(list2)               <span class="comment"># [1, 200, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))           <span class="comment"># 1849288122952</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list2))           <span class="comment"># 1849288123016</span></span><br></pre></td></tr></table></figure><h3 id="14-list-去重复"><a href="#14-list-去重复" class="headerlink" title="14. list 去重复"></a>14. list 去重复</h3><ul><li>因为set本身是无序和无重复元素的集合，所以默认会把重复的元素清理掉，从而在将set转换成list列表</li><li>示例1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;lemon&quot;</span>]</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list = %s &quot;</span> % <span class="built_in">list</span>, <span class="built_in">type</span>(<span class="built_in">list</span>))    <span class="comment"># list = [1, 2, 3, &#x27;lemon&#x27;]  &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>示例2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="string">&quot;nice&quot;</span>, <span class="string">&quot;nice&quot;</span>]</span><br><span class="line">set1 = <span class="built_in">set</span>(<span class="built_in">list</span>)                          <span class="comment"># &#123;8, 9, &#x27;nice&#x27;, 7&#125;</span></span><br><span class="line">list33 = <span class="built_in">list</span>(set1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list = %s &quot;</span> % <span class="built_in">list</span>, <span class="built_in">type</span>(<span class="built_in">list</span>))    <span class="comment"># list33 = [8, 9, &#x27;nice&#x27;, 7]  &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="15-将元组转成列表"><a href="#15-将元组转成列表" class="headerlink" title="15. 将元组转成列表"></a>15. 将元组转成列表</h3><ul><li>示例1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(list1)                <span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><ul><li>示例2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">list1 = <span class="built_in">list</span>(tuple1)</span><br><span class="line"><span class="built_in">print</span>(list1)                <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="五、列表的遍历"><a href="#五、列表的遍历" class="headerlink" title="五、列表的遍历"></a>五、列表的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;遍历列表方法1：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;序号：%s   值：%s&quot;</span> % (<span class="built_in">list</span>.index(i) + <span class="number">1</span>, i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n遍历列表方法2：&#x27;</span>)</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;序号：%s   值：%s&quot;</span> % (i + <span class="number">1</span>, <span class="built_in">list</span>[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n遍历列表方法3：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">list</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;序号：%s   值：%s&quot;</span> % (i + <span class="number">1</span>, val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">遍历列表方法<span class="number">1</span>：</span><br><span class="line">序号：<span class="number">1</span>   值：html</span><br><span class="line">序号：<span class="number">2</span>   值：js</span><br><span class="line">序号：<span class="number">3</span>   值：css</span><br><span class="line">序号：<span class="number">4</span>   值：python</span><br><span class="line"></span><br><span class="line">遍历列表方法<span class="number">2</span>：</span><br><span class="line">序号：<span class="number">1</span>   值：html</span><br><span class="line">序号：<span class="number">2</span>   值：js</span><br><span class="line">序号：<span class="number">3</span>   值：css</span><br><span class="line">序号：<span class="number">4</span>   值：python</span><br><span class="line"></span><br><span class="line">遍历列表方法<span class="number">3</span>：</span><br><span class="line">序号：<span class="number">1</span>   值：html</span><br><span class="line">序号：<span class="number">2</span>   值：js</span><br><span class="line">序号：<span class="number">3</span>   值：css</span><br><span class="line">序号：<span class="number">4</span>   值：python</span><br></pre></td></tr></table></figure><h1 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h1><h2 id="一、Tuple概念"><a href="#一、Tuple概念" class="headerlink" title="一、Tuple概念"></a>一、Tuple概念</h2><h3 id="1-什么是元组"><a href="#1-什么是元组" class="headerlink" title="1. 什么是元组"></a>1. 什么是元组</h3><ul><li><p><strong>元组本质</strong></p><ul><li>是一种有序集合</li><li>而且元组中的元素可以是不同类型的</li></ul></li><li><p><strong>元组特点</strong></p><ul><li>与列表非常相似</li><li>一旦初始化就不能修改。{元组不可变}</li></ul></li><li><p><strong>元组就是用 大括号 将 一个或多个元素 括起来的数据列表</strong></p><ul><li>例如：<ul><li>(1)</li><li>(“lemon”)</li><li>(1, “lemon”)</li></ul></li></ul></li></ul><h3 id="2-如何创建元组？"><a href="#2-如何创建元组？" class="headerlink" title="2. 如何创建元组？"></a>2. 如何创建元组？</h3><ul><li><strong>格式：</strong><ul><li>元组名 = (元组元素1， 元组元素2， 元组元素3, ……, 元组元素n)</li></ul></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空的元组</span></span><br><span class="line">tuple1 = ()</span><br><span class="line"><span class="built_in">print</span>(tuple1)    <span class="comment"># ()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有元素的元组</span></span><br><span class="line">tuple2 = (<span class="number">1</span>, <span class="number">1.2</span>, <span class="string">&quot;lemon&quot;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple2)      <span class="comment"># (1, 1.2, &#x27;lemon&#x27;, True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义只有一个元素的元组, 注意必须加上逗号，如果不加，他的本质就不是元素而是数字</span></span><br><span class="line">tuple3 = (<span class="number">1</span>, )</span><br><span class="line"><span class="built_in">print</span>(tuple3, <span class="built_in">type</span>(tuple3))     <span class="comment"># (1,) &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、元组的操作"><a href="#二、元组的操作" class="headerlink" title="二、元组的操作"></a>二、元组的操作</h2><h3 id="1-取值-1"><a href="#1-取值-1" class="headerlink" title="1. 取值"></a>1. 取值</h3><ul><li><strong>格式：</strong><ul><li>元组名[下标]           #下标从0开始</li></ul></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tuple4 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">0</span>:])    <span class="comment"># (1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[:<span class="number">3</span>])    <span class="comment"># (1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">0</span>])     <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">1</span>])     <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[<span class="number">2</span>])     <span class="comment"># 3</span></span><br><span class="line"><span class="comment"># print(tuple4[3])   # 下标超过范围(越界)，会报错！</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[-<span class="number">1</span>])    <span class="comment"># 3；获取元组中倒数第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(tuple4[-<span class="number">2</span>])    <span class="comment"># 2；获取元组中倒数第二个元素</span></span><br><span class="line"><span class="comment"># print(tuple4[-4])  # 同理，下标超过范围(越界)，会报错！</span></span><br></pre></td></tr></table></figure><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2. 修改"></a>2. 修改</h3><ul><li><strong>元组不可变，但它可以修改它里面元素的值，比如（list、dict）</strong></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tuple5 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># tuple5[0] = 100      # 报错，元组中的元素不能变，但是可以修改元组中元素列表中的值</span></span><br><span class="line">tuple5[-<span class="number">1</span>][<span class="number">0</span>] = <span class="number">400</span></span><br><span class="line">tuple5[-<span class="number">1</span>][-<span class="number">2</span>] = <span class="number">500</span></span><br><span class="line">tuple5[-<span class="number">1</span>][-<span class="number">1</span>] = <span class="number">600</span></span><br><span class="line"><span class="comment"># tuple5[-1] = [400, 500, 600]   # 报错，只能修改元组中元素列表中的值</span></span><br><span class="line"><span class="built_in">print</span>(tuple5)          <span class="comment"># (1, 2, 3, [400, 5, 600])</span></span><br></pre></td></tr></table></figure><h3 id="3-删除元组"><a href="#3-删除元组" class="headerlink" title="3. 删除元组"></a>3. 删除元组</h3><ul><li><strong>del</strong></li><li><strong>格式：</strong><ul><li>del  元组名</li></ul></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple6 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">del</span> tuple6</span><br><span class="line"><span class="built_in">print</span>(tuple6)       <span class="comment"># 报错：NameError: name &#x27;tuple6&#x27; is not defined；找不到这个元组</span></span><br></pre></td></tr></table></figure><h3 id="4-元组相加"><a href="#4-元组相加" class="headerlink" title="4. 元组相加"></a>4. 元组相加</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">t2 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(t1 + t2)     <span class="comment"># (1, 2, 3, 4, 5, 6) </span></span><br><span class="line"></span><br><span class="line">t3 = t1 + t2</span><br><span class="line"><span class="built_in">print</span>(t3)          <span class="comment"># (1, 2, 3, 4, 5, 6)</span></span><br></pre></td></tr></table></figure><h3 id="5-元组重复"><a href="#5-元组重复" class="headerlink" title="5. 元组重复"></a>5. 元组重复</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t4 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(t4 * <span class="number">2</span>)      <span class="comment"># (1, 2, 3, 1, 2, 3)</span></span><br></pre></td></tr></table></figure><h3 id="6-判断元组里的某个元素是否存在"><a href="#6-判断元组里的某个元素是否存在" class="headerlink" title="6. 判断元组里的某个元素是否存在"></a>6. 判断元组里的某个元素是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t5 = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;lemon&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon&quot;</span> <span class="keyword">in</span> t5)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> t5)          <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="7-元组的截取"><a href="#7-元组的截取" class="headerlink" title="7. 元组的截取"></a>7. 元组的截取</h3><ul><li><p>从开始下标之后开始截取，截取到结束下标之前</p></li><li><p>格式：元组名[开始下标:结束下标]</p></li><li><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t6 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t6[<span class="number">1</span>:<span class="number">6</span>])    <span class="comment"># (2, 3, 4, 5, 6)</span></span><br><span class="line"><span class="built_in">print</span>(t6[<span class="number">1</span>:])     <span class="comment"># (2, 3, 4, 5, 6, 7, 8)</span></span><br><span class="line"><span class="built_in">print</span>(t6[:<span class="number">5</span>])     <span class="comment"># (1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure><h3 id="8-二维元组"><a href="#8-二维元组" class="headerlink" title="8. 二维元组"></a>8. 二维元组</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t7 = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t7)                 <span class="comment"># ((1, 2, 3), (4, 5, 6), (7, 8, 9))</span></span><br><span class="line"><span class="built_in">print</span>(t7[<span class="number">1</span>], t7[<span class="number">1</span>][<span class="number">1</span>])    <span class="comment"># (4, 5, 6) 5</span></span><br></pre></td></tr></table></figure><h3 id="9-将列表转成元组"><a href="#9-将列表转成元组" class="headerlink" title="9. 将列表转成元组"></a>9. 将列表转成元组</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">t4 = <span class="built_in">tuple</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(t4)               <span class="comment"># (1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure><h2 id="三、元组的方法"><a href="#三、元组的方法" class="headerlink" title="三、元组的方法"></a>三、元组的方法</h2><h3 id="1-len"><a href="#1-len" class="headerlink" title="1. len()"></a>1. len()</h3><ul><li>返回元组中元素的个数</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t1))             <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h3 id="2-max-min"><a href="#2-max-min" class="headerlink" title="2. max()  min()"></a>2. max()  min()</h3><ul><li><code>max</code>   返回元组中元素的最大值</li><li><code>min</code>   返回元组中元素的最小值</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># max()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(t2))         <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>((<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)))     <span class="comment"># 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3)min()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(t2))         <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>((<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)))     <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h3 id="3-元组的遍历"><a href="#3-元组的遍历" class="headerlink" title="3. 元组的遍历"></a>3. 元组的遍历</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="Dict（字典）"><a href="#Dict（字典）" class="headerlink" title="Dict（字典）"></a>Dict（字典）</h1><h2 id="一、Dict-概念"><a href="#一、Dict-概念" class="headerlink" title="一、Dict 概念"></a>一、Dict 概念</h2><h3 id="1-什么是字典？"><a href="#1-什么是字典？" class="headerlink" title="1. 什么是字典？"></a>1. 什么是字典？</h3><ul><li><p><strong>字典本质</strong></p><ul><li>键-值(key-value)存储 单位</li><li>字典 具有极快的查找速度</li><li>一个字典里可以存储多个键-值 {字典是可变的}</li><li>字典是无序的！</li></ul></li><li><p><strong>key的特性</strong></p><ul><li>字典中的key必须唯一</li><li>key必须是不可变对象（字符串、整数等都是不可变的，可作为key）（list列表是可变的，不能作为key）</li></ul></li><li><p><strong>字典就是用 花括号 将 一个或多个 <code>key-value</code>  括起来的 存储单位</strong></p></li><li><p>左侧是key，右侧是value</p></li><li><p>例如</p><ul><li>{1:”lemon”}</li><li>{2:”tools”, “lemon”:3}</li></ul></li><li><p><strong><code>dict</code>  和 <code>list</code> 比较</strong></p></li><li><p><strong>dict</strong></p><ul><li><p>优点：查找和插入的速度极快，不会随着key-value的增加而变慢</p></li><li><p>缺点：需要占用大量的内存，内存浪费多</p></li><li><p><strong>list</strong></p></li><li><p>优点：占用空间小，浪费的内存小</p><ul><li>缺点：查找和插入的速度会随着数据量的增多而减慢</li></ul></li></ul></li></ul><h3 id="2-如何创建字典？"><a href="#2-如何创建字典？" class="headerlink" title="2. 如何创建字典？"></a>2. 如何创建字典？</h3><ul><li><strong>格式</strong><ul><li>字典名 = {键值对1, 键值对2, 键值对3, 键值对n……}</li></ul></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;tom&quot;</span>:<span class="number">99</span>,<span class="string">&quot;lemon&quot;</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)                     <span class="comment"># &#123;&#x27;tom&#x27;: 99, &#x27;lemon&#x27;: 100&#125;</span></span><br></pre></td></tr></table></figure><h2 id="二、字典操作"><a href="#二、字典操作" class="headerlink" title="二、字典操作"></a>二、字典操作</h2><h3 id="1-增删改查"><a href="#1-增删改查" class="headerlink" title="1. 增删改查"></a>1. 增删改查</h3><h4 id="1-1-查看"><a href="#1-1-查看" class="headerlink" title="1.1 查看"></a>1.1 查看</h4><ul><li><strong>格式：</strong>字典名[key]</li><li><strong>注意：</strong>如果要查看的写入的 键名 不存在，会报错!!!</li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="number">666</span>:<span class="string">&quot;good&quot;</span>, <span class="string">&quot;lemon&quot;</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)                      <span class="comment"># &#123;666: &#x27;good&#x27;, &#x27;lemon&#x27;: 100&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="number">666</span>])                 <span class="comment"># good</span></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&quot;lemon&quot;</span>])             <span class="comment"># 100</span></span><br><span class="line"><span class="comment"># print(dict1[&quot;alex&quot;])            # 报错；因为这个key不存在</span></span><br></pre></td></tr></table></figure><h4 id="1-2-追加-修改"><a href="#1-2-追加-修改" class="headerlink" title="1.2 追加 修改"></a>1.2 追加 修改</h4><ul><li><strong>格式：</strong>字典名[key] = value</li><li><strong>示例：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;<span class="string">&quot;tom&quot;</span>:<span class="number">60</span>, <span class="string">&quot;lemon&quot;</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加一对key-value &#x27;Abs&#x27;: 70</span></span><br><span class="line">dict2[<span class="string">&quot;Abs&quot;</span>] = <span class="number">70</span></span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为一个key只能对应一个value值，所以，多次对一个key的value赋值，就是修改这个key的值</span></span><br><span class="line">dict2[<span class="string">&quot;tom&quot;</span>] = <span class="number">80</span></span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br></pre></td></tr></table></figure><h4 id="1-3-pop-del-clear-删除-清空"><a href="#1-3-pop-del-clear-删除-清空" class="headerlink" title="1.3 pop()  del()   clear() 删除 清空"></a>1.3 pop()  del()   clear() 删除 清空</h4><blockquote><p><em><strong>注意：不能删除不存在的 键值对</strong></em></p></blockquote><ul><li><strong><code>pop()</code>：</strong>删除指定的键值对</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">&quot;tom&quot;</span>: <span class="number">80</span>, <span class="string">&quot;lemon&quot;</span>: <span class="number">100</span>, <span class="string">&quot;As&quot;</span>: <span class="number">70</span>&#125;</span><br><span class="line"></span><br><span class="line">dict3.pop(<span class="string">&quot;As&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dict3 = <span class="subst">&#123;dict3&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># dict3.pop(&quot;As&quot;)               # 报错；因为这个键值对已经不存在了</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>del()</code>：</strong> 删除字典 或 指定的键值对</li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">&quot;tom&quot;</span>: <span class="number">80</span>, <span class="string">&quot;lemon&quot;</span>: <span class="number">100</span>, <span class="string">&quot;As&quot;</span>: <span class="number">70</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定键值对</span></span><br><span class="line"><span class="keyword">del</span> dict3[<span class="string">&quot;As&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dict3 = <span class="subst">&#123;dict3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字典</span></span><br><span class="line"><span class="keyword">del</span>(dict3)</span><br></pre></td></tr></table></figure><ul><li><strong><code>clear()</code>：</strong>重置字典</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">&quot;tom&quot;</span>: <span class="number">80</span>, <span class="string">&quot;lemon&quot;</span>: <span class="number">100</span>, <span class="string">&quot;As&quot;</span>: <span class="number">70</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dict3 = <span class="subst">&#123;dict3&#125;</span>&quot;</span>)</span><br><span class="line">dict3.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dict3 = <span class="subst">&#123;dict3&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-字典函数-及-遍历"><a href="#2-字典函数-及-遍历" class="headerlink" title="2. 字典函数 及 遍历"></a>2. 字典函数 及 遍历</h3><h4 id="2-1-函数"><a href="#2-1-函数" class="headerlink" title="2.1 函数"></a>2.1 函数</h4><ul><li><strong><code>get()</code>：</strong>如果key存在，返回其对应的value值，如果不存在，返回None</li><li><strong><code>keys()</code>：</strong>查找字典中所有的key；返回可迭代对象，里面的数据是列表，列表中的元素都是字典中的key名</li><li><strong><code>values()</code>：</strong>查找字典中所有的value；返回可迭代对象，里面的数据是列表，列表中的元素都是字典中key名对应的value值</li><li><strong><code>items()</code>：</strong>查找字典中所有的键值对；返回可迭代对象，里面的数据是元组，元组数据1是字典key，元组数据2是字典key对应的value值</li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dict4 = &#123;<span class="string">&quot;tom&quot;</span>:<span class="number">60</span>,<span class="string">&quot;lemon&quot;</span>:<span class="number">100</span>, <span class="string">&quot;lily&quot;</span>:<span class="number">79</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 get() </span></span><br><span class="line"><span class="built_in">print</span>(dict4.get(<span class="string">&quot;lemon&quot;</span>))    <span class="comment"># 返回的是100</span></span><br><span class="line"><span class="built_in">print</span>(dict4.get(<span class="string">&quot;alex&quot;</span>))     <span class="comment"># 返回的是None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 keys()</span></span><br><span class="line"><span class="built_in">print</span>(dict4.keys())          <span class="comment"># dict_keys([&#x27;tom&#x27;, &#x27;lemon&#x27;, &#x27;lily&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 values()</span></span><br><span class="line"><span class="built_in">print</span>(dict4.values())        <span class="comment"># dict_values([60, 100, 79])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 items()</span></span><br><span class="line"><span class="built_in">print</span>(dict4.items())         <span class="comment"># dict_items([(&#x27;tom&#x27;, 60), (&#x27;lemon&#x27;, 100), (&#x27;lily&#x27;, 79)])</span></span><br></pre></td></tr></table></figure><h4 id="2-2-遍历"><a href="#2-2-遍历" class="headerlink" title="2.2 遍历"></a>2.2 遍历</h4><ul><li><strong><code>keys()</code>：</strong>遍历字典中的所有key</li><li><strong><code>values()</code>：</strong>遍历字典中的value</li><li><strong><code>items()</code>：</strong>同时遍历字典中的key和value</li><li><strong><code>enumerate(dict) </code>：</strong>生成序列号；其实这种遍历方式是没有意义的，因为字典是无序的，即使有了序列号也是不稳定的</li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 keys()</span></span><br><span class="line">dict5 = &#123;<span class="string">&quot;tom&quot;</span>: <span class="number">80</span>, <span class="string">&quot;lemon&quot;</span>: <span class="number">100</span>, <span class="string">&quot;As&quot;</span>: <span class="number">70</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict5.keys():   <span class="comment"># key 键名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;key = %s&quot;</span> % key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># values()</span></span><br><span class="line">dict6 = &#123;<span class="string">&quot;tom&quot;</span>: <span class="number">100</span>, <span class="string">&quot;lemon&quot;</span>: <span class="number">70</span>, <span class="string">&quot;As&quot;</span>: <span class="number">59</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict6.values():    <span class="comment"># value 值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value = %d&quot;</span> % value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># items()</span></span><br><span class="line">dict7 = &#123;<span class="string">&quot;lemon&quot;</span>: <span class="number">100</span>, <span class="string">&quot;As&quot;</span>: <span class="number">70</span>, <span class="string">&quot;Bs&quot;</span>: <span class="number">59</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict7.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate(dict) </span></span><br><span class="line">dict8 = &#123;<span class="string">&quot;tom&quot;</span>:<span class="number">60</span>, <span class="string">&quot;lemon&quot;</span>:<span class="number">100</span>, <span class="string">&quot;lily&quot;</span>:<span class="number">110</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(dict8):</span><br><span class="line">    <span class="built_in">print</span>(i, v2)    </span><br><span class="line">    <span class="comment"># 虽然在输出的时候看起来字典是有序的，但实际上字典在内存中就是无序的，这点毋庸置疑</span></span><br></pre></td></tr></table></figure><h2 id="三、练习题"><a href="#三、练习题" class="headerlink" title="三、练习题"></a>三、练习题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：有一个字符串，在控制台输入一个单词统计出现过多少次</span></span><br><span class="line"><span class="comment"># count</span></span><br><span class="line">W = <span class="built_in">input</span>(<span class="string">&quot;请输入一个单词：&quot;</span>)</span><br><span class="line">Str = <span class="string">&quot;lemon is a good man lemon is a nice man lemon is a cool man lemon is a good man lemon is a noble man lemon is a good man&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Str.count(W))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">W = <span class="built_in">input</span>(<span class="string">&quot;请输入一个单词：&quot;</span>)</span><br><span class="line">d = &#123;&#125;   <span class="comment"># word:次数</span></span><br><span class="line">Str = <span class="string">&quot;lemon is a good man lemon is a nice man lemon is a cool man lemon is a good man lemon is a noble man&quot;</span></span><br><span class="line">t = Str.split(<span class="string">&quot; &quot;</span>)  <span class="comment"># 以空格为分隔符截取字符串，将字符串切割成列表</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> t:</span><br><span class="line">    c = d.get(v)</span><br><span class="line">    <span class="keyword">if</span> c == <span class="literal">None</span>:</span><br><span class="line">        d[v] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[v] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(d)          <span class="comment"># 每个单词的次数</span></span><br><span class="line"><span class="built_in">print</span>(d[W])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;流程</span></span><br><span class="line"><span class="string">1、以空格切割字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、循环处理列表中的每个元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、以元素当作key去一个字典中提取数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、如果没有提取到，就以该元素作为key，1作为value 存进字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、如果提取到，将对应的key的value值修改，值加1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6、根据输入的字符串当作key再去字典取值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h1><h2 id="一、set-概念"><a href="#一、set-概念" class="headerlink" title="一、set 概念"></a>一、set 概念</h2><h3 id="1-什么是集合？"><a href="#1-什么是集合？" class="headerlink" title="1. 什么是集合？"></a>1. 什么是集合？</h3><ul><li><p><strong>集合本质</strong></p><ul><li><p>类似 <code>dict</code> ，是一组key的集合，不储存value</p></li><li><p>是无序 和 无重复元素的集合</p></li><li><p>可以使用大括号 { } 或者 set() 函数创建集合</p></li><li><p><strong>注意：</strong>创建空集合时 就必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p></li></ul></li></ul><h3 id="2-如何创建-集合？"><a href="#2-如何创建-集合？" class="headerlink" title="2. 如何创建 集合？"></a>2. 如何创建 集合？</h3><ul><li><strong>格式</strong><ul><li>集合名 = {元素1,  元素2,  元素2, ……,  元素n}</li><li><code>set()</code></li></ul></li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空集合</span></span><br><span class="line">set1 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set1), set1)        <span class="comment"># &lt;class &#x27;set&#x27;&gt; set()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有元素的集合</span></span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;lemon&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set2), set2)        <span class="comment"># &lt;class &#x27;set&#x27;&gt; &#123;1, 2, &#x27;lemon&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有多个重复的元素，验证set能否去重</span></span><br><span class="line">set3 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;lemon&quot;</span>, <span class="number">3</span>, <span class="string">&quot;lemon&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set3), set3)       <span class="comment"># &lt;class &#x27;set&#x27;&gt; &#123;1, 2, 3, &#x27;lemon&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="二、集合操作"><a href="#二、集合操作" class="headerlink" title="二、集合操作"></a>二、集合操作</h2><h3 id="1-add-添加"><a href="#1-add-添加" class="headerlink" title="1. add.()  添加"></a>1. add.()  添加</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set4.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set4 = %s&quot;</span> % set4)   <span class="comment"># set4 = &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">set4.add(<span class="number">4</span>)                 <span class="comment"># 可以添加重复的，但是不会有效果，因为set是无序和无重复元素的集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set4 = %s&quot;</span> % set4)   <span class="comment"># set4 = &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">set4.add(<span class="string">&quot;lemon&quot;</span>)           <span class="comment"># set的元素可以是字符串，因为字符串是不可变的</span></span><br><span class="line">set4.add((<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))         <span class="comment"># set的元素可以是元组，因为元组是不可变的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set4 = %s&quot;</span> % set4)   <span class="comment"># set4 = &#123;1, 2, 3, 4, (5, 6, 7), &#x27;lemon&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-update-插入"><a href="#2-update-插入" class="headerlink" title="2. update()  插入"></a>2. update()  插入</h3><ul><li>update()       插入整个list、tuple、字符串，打碎插入到set</li><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set5 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">set5.update([<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">set5.update((<span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line">set5.update(<span class="string">&quot;abcd&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;set5=<span class="subst">&#123;set5&#125;</span>&quot;</span>)    <span class="comment"># set5=&#123;1, 2, 3, 4, 5, 6, 7, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#125;；set是无序的！</span></span><br></pre></td></tr></table></figure><h3 id="3-remove-discard-删除"><a href="#3-remove-discard-删除" class="headerlink" title="3. remove()   discard()  删除"></a>3. remove()   discard()  删除</h3><ul><li>remove()      删除指定数据；要删除的数据如果不存在则报错</li><li>discard()      删除指定数据；要删除的数据即使不存在也不报错</li><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set6 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove()</span></span><br><span class="line">set6.remove(<span class="number">30</span>)</span><br><span class="line"><span class="comment"># set6.remove(80)            # 报错；因为不存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set6 = %s&quot;</span> % set6)    <span class="comment"># set6 = &#123;70, 40, 10, 50, 20, 60&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># discard()</span></span><br><span class="line">set6.discard(<span class="number">40</span>)</span><br><span class="line">set6.discard(<span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set6 = %s&quot;</span> % set6)    <span class="comment"># set6 = &#123;70, 10, 50, 20, 60&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4. 遍历"></a>4. 遍历</h3><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set7 = &#123;<span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;set&quot;</span>, <span class="string">&quot;good&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set7:</span><br><span class="line">    <span class="built_in">print</span>(i)    <span class="comment"># set是没有索引的！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">for</span> index,date <span class="keyword">in</span> <span class="built_in">enumerate</span>(set7):</span><br><span class="line">    <span class="built_in">print</span>(index,date)   <span class="comment"># index就是下标，但是没有意义，因为集合是无序的！！</span></span><br></pre></td></tr></table></figure><h3 id="5-交集、并集"><a href="#5-交集、并集" class="headerlink" title="5. 交集、并集"></a>5. 交集、并集</h3><ul><li>交集 &amp;   ( 两个集合中相同的元素组成的集合 )</li><li>并集 |    ( 两个集合中所有元素组成的集合，但是都不重复 )</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set8 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">set9 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集 </span></span><br><span class="line">a1 = set8 &amp; set9</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a1 = %s&quot;</span> % a1, <span class="built_in">type</span>(a1))       <span class="comment"># a1 = &#123;2, 3&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">a2 =set8 | set9</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a2 = %s&quot;</span> % a2, <span class="built_in">type</span>(a2))       <span class="comment"># a2 = &#123;1, 2, 3, 4&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-类型转换"><a href="#6-类型转换" class="headerlink" title="6. 类型转换"></a>6. 类型转换</h3><ul><li><p><strong>公式：</strong>想转什么类型就写什么类型</p></li><li><p><strong>示例</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple --&gt; set</span></span><br><span class="line">Tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">Set1 = <span class="built_in">set</span>(Tuple1)</span><br><span class="line"><span class="built_in">print</span>(Set1, <span class="built_in">type</span>(Set1))              <span class="comment"># &#123;1, 2, 3, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set --&gt; tuple</span></span><br><span class="line">Set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">Tuple2 = <span class="built_in">tuple</span>(Set2)</span><br><span class="line"><span class="built_in">print</span>(Tuple2, <span class="built_in">type</span>(Tuple2))          <span class="comment"># (1, 2, 3, 4, 5) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list --&gt; set</span></span><br><span class="line"><span class="type">List</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="type">List</span>), <span class="built_in">type</span>(<span class="built_in">set</span>(<span class="type">List</span>)))    <span class="comment"># &#123;1, 2, 3, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set --&gt; list</span></span><br><span class="line"><span class="type">Set</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="type">Set</span>), <span class="built_in">type</span>(<span class="built_in">list</span>(<span class="type">Set</span>)))  <span class="comment"># [1, 2, 3, 4, 5] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h1 id="If-控制语句"><a href="#If-控制语句" class="headerlink" title="If 控制语句"></a>If 控制语句</h1><h2 id="一、if-语句格式"><a href="#一、if-语句格式" class="headerlink" title="一、if 语句格式"></a>一、if 语句格式</h2><blockquote><p><em><strong>何为真假？</strong></em></p><p><strong>假：</strong>0    0.0    “”     None      Flase；计算表达式的值如果等于0、0.0、”空字符串”、None、Flase的都为假</p><p><strong>真：</strong>除了假的这些值，其他的都为真</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span> 表达式：</span><br><span class="line">    语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑</span></span><br><span class="line">当程序执行到<span class="keyword">if</span>语句时，首先计算<span class="string">&quot;表达式&quot;</span>的值，如果<span class="string">&quot;表达式&quot;</span>的值为真，就执行<span class="keyword">if</span>下的<span class="string">&quot;语句&quot;</span>；如果<span class="string">&quot;表达式&quot;</span>的值为假，则跳过整个<span class="keyword">if</span>语句，继续向下执行。</span><br></pre></td></tr></table></figure><h2 id="二、if-else-语句格式"><a href="#二、if-else-语句格式" class="headerlink" title="二、if-else 语句格式"></a>二、if-else 语句格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span> 表达式：</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑</span></span><br><span class="line">当程序执行到<span class="keyword">if</span>-<span class="keyword">else</span>时，首先计算<span class="string">&quot;表达式&quot;</span>的值，如果<span class="string">&quot;表达式&quot;</span>的值为真，则执行<span class="string">&quot;语句1&quot;</span>，执行完<span class="string">&quot;语句1&quot;</span>跳出整个<span class="keyword">if</span>-<span class="keyword">else</span>语句；如果<span class="string">&quot;表达式&quot;</span>的值为假，则执行<span class="string">&quot;语句2&quot;</span>，执行完<span class="string">&quot;语句2&quot;</span>跳出整个<span class="keyword">if</span>-<span class="keyword">else</span>语句。</span><br></pre></td></tr></table></figure><h2 id="三、if-elif-else-语句格式"><a href="#三、if-elif-else-语句格式" class="headerlink" title="三、if-elif-else 语句格式"></a>三、if-elif-else 语句格式</h2><blockquote><p>注：elif 可以在一个if语句里出现多次，没有限制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span>  表达式<span class="number">1</span></span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span></span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">3</span></span><br><span class="line">    语句<span class="number">3</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句<span class="number">4</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 逻辑</span></span><br><span class="line">这里面的每个<span class="keyword">elif</span>都是对他上面所有表达式的否定；当程序执行<span class="keyword">if</span>-<span class="keyword">elif</span>-<span class="keyword">else</span>语句时，首先会计算“表达式<span class="number">1</span>”的值，如果“表达式<span class="number">1</span>”的值为真，则执行“语句<span class="number">1</span>”，执行完“语句<span class="number">1</span>”，则跳出整个<span class="keyword">if</span>-<span class="keyword">elif</span>-<span class="keyword">else</span>语句；如果“表达式<span class="number">1</span>”为假，计算“表达式<span class="number">2</span>”的值，如果“表达式<span class="number">2</span>”的值为真，则执行“语句<span class="number">2</span>”，执行完“语句<span class="number">2</span>”，则跳出整个<span class="keyword">if</span>-<span class="keyword">elif</span>-<span class="keyword">else</span>语句；如果“表达式<span class="number">2</span>”为假，计算“表达式<span class="number">3</span>”的值；如此下去，直到某个表达式的值为真才停止，如果没有一个真的表达式，且有<span class="keyword">else</span>，则执行“<span class="keyword">else</span>语句”。</span><br></pre></td></tr></table></figure><h2 id="四、if-语句示例"><a href="#四、if-语句示例" class="headerlink" title="四、if 语句示例"></a>四、if 语句示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年龄:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt;= <span class="number">0</span>:              <span class="comment">#0 -1 -2 -3 -4 ......</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你还没出娘胎&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">7</span>:            <span class="comment">#1 2 3 4 5 6 7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;儿童&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">17</span>:           <span class="comment">#8 9 10 11 12 ......17</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;少年&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">22</span>:           <span class="comment">#18 19 20 21 22</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成年&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">30</span>:           <span class="comment">#23 24 25 26 ...... 30</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;青年&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">50</span>:           <span class="comment">#31 32 33 34 ...... 50</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;壮年&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">100</span>:          <span class="comment">#51 52 53 54 ...... 100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;老年&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt;= <span class="number">150</span>:          <span class="comment">#101 102 103 104 ...... 150</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;老寿星&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;老妖怪&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h1><h2 id="一、while-循环使用场景"><a href="#一、while-循环使用场景" class="headerlink" title="一、while 循环使用场景"></a>一、while 循环使用场景</h2><ul><li>循环的作用就是让 <strong>指定的代码</strong> 重复的执行</li><li><code>while</code> 循环最常用的应用场景就是 <strong>让执行的代码</strong> 按照 <strong>指定的次数</strong> <strong>重复</strong> 执行</li><li>需求 —— 打印 5 遍 <code>Hello Python</code></li><li>思考 —— 如果要求打印 100 遍怎么办？</li></ul><h2 id="二、while-语句格式"><a href="#二、while-语句格式" class="headerlink" title="二、while 语句格式"></a>二、while 语句格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">    语句</span><br><span class="line">    </span><br><span class="line"><span class="comment">#逻辑</span></span><br><span class="line">当程序执行到<span class="keyword">while</span>语句时，首先会计算表达式的值，如果表达式的值为假，结束整个<span class="keyword">while</span>语句，如果表达式的值为真，则执行语句，执行完语句再去计算表达式的值，如果表达式的值还为真，则在执行语句...... 直到表达式的值为假才会停止，否则一直循环。</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num = %d&quot;</span> % num)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="三、while-else-语句格式"><a href="#三、while-else-语句格式" class="headerlink" title="三、while-else 语句格式"></a>三、while-else 语句格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#逻辑</span></span><br><span class="line">当<span class="keyword">while</span>表达式为真时，循环执行“语句<span class="number">1</span>”，当语句<span class="number">1</span>执行结束后，在执行<span class="keyword">else</span>中的“语句<span class="number">2</span>”；当<span class="keyword">while</span>条件为假时；则执行<span class="keyword">else</span>中的“语句<span class="number">2</span>”，当“语句<span class="number">2</span>”执行结束后，退出整个<span class="keyword">while</span>循环。并且<span class="keyword">while</span>如果是以<span class="keyword">break</span>导致循环截止的，同样不会执行<span class="keyword">else</span>下面的语句。</span><br><span class="line"></span><br><span class="line"><span class="comment">#总结</span></span><br><span class="line">只有在<span class="keyword">while</span>表达式为假时才执行<span class="keyword">else</span>中的语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="number">5</span>:</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my name is a lemon&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、while-简单示例"><a href="#四、while-简单示例" class="headerlink" title="四、while 简单示例"></a>四、while 简单示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;死循环：表达式永远为真的循环</span></span><br><span class="line"><span class="string">例如：</span></span><br><span class="line"><span class="string">while 1 + 1 == 2:    #1 + 1永远等于2</span></span><br><span class="line"><span class="string">    print(&quot;my name is a lemon&quot;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;用while计算1+2+3+....+100的总数</span></span><br><span class="line"><span class="string">num1 = 0</span></span><br><span class="line"><span class="string">num2 = 1</span></span><br><span class="line"><span class="string">while num2 &lt;= 100:</span></span><br><span class="line"><span class="string">    num1 += num2</span></span><br><span class="line"><span class="string">    num2 += 1</span></span><br><span class="line"><span class="string">print(&quot;num1 = %d&quot; % (num1))     # num1 = 5050</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;将str1变量中的字符串每个字符都打印一遍，并且显示每个字符的序列号</span></span><br><span class="line"><span class="string">str1 = &quot;lemon&quot;</span></span><br><span class="line"><span class="string">index = 0</span></span><br><span class="line"><span class="string">while index &lt; len(str1):</span></span><br><span class="line"><span class="string">    print(index, str1[index])</span></span><br><span class="line"><span class="string">    index += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="五、while-语句练习"><a href="#五、while-语句练习" class="headerlink" title="五、while 语句练习"></a>五、while 语句练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;打印出所有三位数中水仙花数</span></span><br><span class="line"><span class="string">num = 100</span></span><br><span class="line"><span class="string">while num &lt;= 999:</span></span><br><span class="line"><span class="string">    n = num // 100</span></span><br><span class="line"><span class="string">    u = num // 10 % 10</span></span><br><span class="line"><span class="string">    m = num % 10</span></span><br><span class="line"><span class="string">    if num == n**3 + u**3 + m**3:</span></span><br><span class="line"><span class="string">        print(&quot;水仙花数: %s&quot; % (num))</span></span><br><span class="line"><span class="string">    num += 1</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;如何将所有五位数中的回文数都列出来</span></span><br><span class="line"><span class="string">num = 10000</span></span><br><span class="line"><span class="string">while num &lt;= 99999:</span></span><br><span class="line"><span class="string">    a = num // 10000 % 10       # 万</span></span><br><span class="line"><span class="string">    b = num // 1000 % 10        # 千</span></span><br><span class="line"><span class="string">    c = num // 10 % 10          # 十</span></span><br><span class="line"><span class="string">    d = num % 10                # 个</span></span><br><span class="line"><span class="string">    if a == d and b == c:</span></span><br><span class="line"><span class="string">        print(&quot;回文数 = %d&quot; % (num))</span></span><br><span class="line"><span class="string">    num += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;从控制台输入一个数，分解质因数;例如：90=2x3x3x5</span></span><br><span class="line"><span class="string">num = int(input(&quot;请输入质因数:&quot;))</span></span><br><span class="line"><span class="string">i = 2</span></span><br><span class="line"><span class="string">while num != 0 and num != 1:</span></span><br><span class="line"><span class="string">    if num % i == 0:</span></span><br><span class="line"><span class="string">        print(i)</span></span><br><span class="line"><span class="string">        num //= i</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        i += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;从控制台输入字符串，返回这个字符串中有多少个单词</span></span><br><span class="line"><span class="string">str1 = input(&quot;请输入一行字符串:&quot;)</span></span><br><span class="line"><span class="string">str2 = str1.strip()</span></span><br><span class="line"><span class="string">index = 0</span></span><br><span class="line"><span class="string">count = 0</span></span><br><span class="line"><span class="string">while index &lt; len(str2):</span></span><br><span class="line"><span class="string">    while str2[index] != &quot; &quot;:</span></span><br><span class="line"><span class="string">        index += 1</span></span><br><span class="line"><span class="string">        if index == len(str2):</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    count += 1</span></span><br><span class="line"><span class="string">    if index == len(str2):</span></span><br><span class="line"><span class="string">       break</span></span><br><span class="line"><span class="string">    while str2[index] == &quot; &quot;:</span></span><br><span class="line"><span class="string">        index += 1</span></span><br><span class="line"><span class="string">print(count)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输入五个数，找出第二大的值</span></span><br><span class="line"><span class="string">listNum = []</span></span><br><span class="line"><span class="string">num = 0</span></span><br><span class="line"><span class="string">while num &lt; 5:</span></span><br><span class="line"><span class="string">    val = int(input(&quot;请输入五次除了浮点数以外的数字:&quot;))</span></span><br><span class="line"><span class="string">    listNum.append(val)       # 将val的值追加到list列表里</span></span><br><span class="line"><span class="string">    num += 1</span></span><br><span class="line"><span class="string">print(listNum)</span></span><br><span class="line"><span class="string">listNum.sort()    # 升序排序</span></span><br><span class="line"><span class="string">count = listNum.count(listNum[len(listNum) - 1])</span></span><br><span class="line"><span class="string">c = 0</span></span><br><span class="line"><span class="string">while c &lt; count:</span></span><br><span class="line"><span class="string">    listNum.pop()</span></span><br><span class="line"><span class="string">    c += 1</span></span><br><span class="line"><span class="string">print(listNum[len(listNum) -1])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="For-循环语句"><a href="#For-循环语句" class="headerlink" title="For 循环语句"></a>For 循环语句</h1><h2 id="一、for-语句格式"><a href="#一、for-语句格式" class="headerlink" title="一、for 语句格式"></a>一、for 语句格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 集合:</span><br><span class="line">    语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#逻辑：</span></span><br><span class="line">按顺序取“集合”中的每个元素赋值给“变量”，再去执行语句。如此反复循环，直到取完“集合”中的元素截止。</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="二、range-函数方法"><a href="#二、range-函数方法" class="headerlink" title="二、range 函数方法"></a>二、range 函数方法</h2><blockquote><p><strong>功能：</strong>生成数列</p><p><strong>格式：</strong>range([start], [end], [step])</p><p><strong>解释：</strong>start 默认是 0、step 默认是1，这两个是可有可无的，但是end是必须有的 ！！</p><p><strong>示例：</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例1：</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;t = %d&quot;</span> % (t))</span><br><span class="line"></span><br><span class="line"><span class="comment">#例2：</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span> + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;y = %d&quot;</span> % (y))</span><br></pre></td></tr></table></figure><h2 id="三、enumerate-函数方法"><a href="#三、enumerate-函数方法" class="headerlink" title="三、enumerate 函数方法"></a>三、enumerate 函数方法</h2><blockquote><p><strong>功能：</strong>同时生成下标和元素值</p><p><strong>格式：</strong>enumerate([list])</p><p><strong>示例：</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]):         <span class="comment">#index, i = 下标, 元素</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;index = %d&quot;</span> % (index), <span class="string">&quot;i = %d&quot;</span> % (i))</span><br></pre></td></tr></table></figure><h2 id="四、for-语句简单示例"><a href="#四、for-语句简单示例" class="headerlink" title="四、for 语句简单示例"></a>四、for 语句简单示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;用for计算1+2+3+......+100的总核数</span></span><br><span class="line"><span class="string">sum = 0</span></span><br><span class="line"><span class="string">for i in range(1,100 + 1):</span></span><br><span class="line"><span class="string">    sum += i</span></span><br><span class="line"><span class="string">print(&quot;总核数 = %d&quot; % (sum))     # 总核数 = 5050</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;从控制台输入一个数，判断是否是质数；质数：只能被1和自身整除的就是质数，其中，2就是质数，1则不是</span></span><br><span class="line"><span class="string"># 用户输入数字</span></span><br><span class="line"><span class="string">num = int(input(&quot;请输入一个数字: &quot;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 质数大于 1</span></span><br><span class="line"><span class="string">if num &gt; 1:</span></span><br><span class="line"><span class="string">    # 查看因子</span></span><br><span class="line"><span class="string">    for i in range(2, num):</span></span><br><span class="line"><span class="string">        if (num % i) == 0:</span></span><br><span class="line"><span class="string">            print(num, &quot;不是质数&quot;)</span></span><br><span class="line"><span class="string">            print(i, &quot;乘于&quot;, num // i, &quot;是&quot;, num)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        print(num, &quot;是质数&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 如果输入的数字小于或等于 1，不是质数</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print(num, &quot;不是质数&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="break-amp-continue-控制语句"><a href="#break-amp-continue-控制语句" class="headerlink" title="break &amp; continue 控制语句"></a>break &amp; continue 控制语句</h1><h2 id="一、break-语句"><a href="#一、break-语句" class="headerlink" title="一、break 语句"></a>一、break 语句</h2><blockquote><p><strong>作用：</strong>跳出while和for的循环</p><p><strong>注意：</strong>只能跳出距离他最近的那一层循环</p><p><strong>示例：</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如：while</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="string">&quot;lemon&quot;</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="number">5</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="built_in">list</span>[index])    <span class="comment"># index为list列表的下标</span></span><br><span class="line"> index += <span class="number">1</span></span><br><span class="line"> <span class="keyword">if</span> index == <span class="number">4</span>:</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：for</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line"> <span class="built_in">print</span>(i)</span><br><span class="line"> <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">     <span class="keyword">break</span>            <span class="comment"># 结束这个循环</span></span><br></pre></td></tr></table></figure><h2 id="二、continue-语句"><a href="#二、continue-语句" class="headerlink" title="二、continue 语句"></a>二、continue 语句</h2><blockquote><p><strong>作用：</strong>跳过当前循环中的剩余语句，然后继续下一次循环</p><p><strong>注意：</strong>只能跳过距离他最近的那一层循环</p><p><strong>示例：</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如：while</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">5</span>:</span><br><span class="line"> num += <span class="number">1</span></span><br><span class="line"> <span class="built_in">print</span>(num)</span><br><span class="line"> <span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">     <span class="keyword">continue</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;@&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：for</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"> <span class="built_in">print</span>(i)</span><br><span class="line"> <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">     <span class="keyword">continue</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;@&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Python-异常处理"><a href="#Python-异常处理" class="headerlink" title="Python 异常处理"></a>Python 异常处理</h1><blockquote><p>python提供了两个非常重要的功能来处理python程序在运行中出现的异常和错误。你可以使用该功能来调试python程序。</p><ul><li>异常处理</li><li>断言(Assertions)</li></ul></blockquote><h2 id="一、异常处理"><a href="#一、异常处理" class="headerlink" title="一、异常处理"></a>一、异常处理</h2><h3 id="1-python-异常码"><a href="#1-python-异常码" class="headerlink" title="1. python 异常码"></a>1. python 异常码</h3><table><thead><tr><th>异常名称</th><th>描述</th></tr></thead><tbody><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python 语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode 转换时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table><h3 id="2-try–except–else-语句"><a href="#2-try–except–else-语句" class="headerlink" title="2. try–except–else 语句"></a>2. try–except–else 语句</h3><ul><li><p><strong>作用：</strong>用来检测try语句块中的错误，从而让except语句捕获错误信息并处理</p></li><li><p><strong>逻辑：</strong>当 try “语句t” 执行时出现错误，会匹配第一个错误码，如果匹配的上就执行对应的“语句”；如果没有匹配的异常，错误将会被提交到上一层的try语句。或者到程序的最上层；如果当 try “语句t” 执行时没有出现错误，执行else下的“语句e”，{但前提是你得有else语句}</p></li><li><p><strong>格式：</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    语句t</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句e</span><br></pre></td></tr></table></figure><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 使用except而不使用任何的错误类型。&#123;这是比较常用的 ~_~ &#125;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这行的程序出现了错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;very good&quot;</span>)</span><br><span class="line"><span class="comment"># 意思就是我不管这个程序到底出现了什么错误，只要有错误，我就print打印一个错误日志，并且让他越过这个错误继续向下执行代码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 当程序遇到问题的时不让程序结束，而是越过错误继续向下执行</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># print(3 / 2)       # 没有问题的程序</span></span><br><span class="line">    <span class="comment"># print(3 / 0)       # 错误码 ZeroDivisionError</span></span><br><span class="line">    <span class="comment"># print(num)         # 错误码 NameError</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序出现ZeroDivisionError问题&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序出现NameError问题&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;very good&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******************&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 使用except带着多种异常。&#123;与上面的意思相同，只不过就是将多个except语句简化成了一个&#125;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span> / <span class="number">2</span>)            <span class="comment">#没有问题的程序</span></span><br><span class="line">    <span class="comment"># print(3 / 0)          #错误码 ZeroDivisionError</span></span><br><span class="line">    <span class="comment"># print(num)            #错误码 NameError</span></span><br><span class="line"><span class="keyword">except</span> (ZeroDivisionError, NameError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出现了ZeroDivisionError或NameError&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;very good&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;###########################&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>他的特殊性</strong></li></ul><blockquote><p><em>错误其实就是class(类)，所有的错误都继承自BaseException，所以在捕获的时候，他能捕获该自身类型的错误，也能捕获他的子类</em></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码示例1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span> / <span class="number">0</span>)                 <span class="comment"># 错误码 ZeroDivisionError</span></span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;“父类”错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;“子类”错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 思考：讲道理应该执行下面的(“子类”错误)，但执行的确是上面的(“父类”错误)；这是为什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为BaseException错误是ZeroDivisionError错误的父类，所以BaseException错误直接继承了ZeroDivisionErro的错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码示例2</span></span><br><span class="line"><span class="comment"># 跨越多层调用,main调用了func2，func2调用了func1，func1出现了错误，只要main捕获到了就可以处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span> / num)                <span class="comment"># 1 / 0；报错：ZeroDivisionError</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">num</span>):</span></span><br><span class="line">    func1(num)                    <span class="comment"># 调用了func1()函数；并且把自身num的值：0传递给了func1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    func2(<span class="number">0</span>)                      <span class="comment"># 调用了func2()函数；并且给func2传递了一个值：0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    main()                        <span class="comment"># --&gt;调用了main()函数</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:    <span class="comment"># except程序发现有这个ZeroDivisionError错误码，执行他下方的语句，没有就执行else下的语句</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;******&quot;</span>)               <span class="comment"># 执行完后越过错误继续向下执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;very good&quot;</span>)            <span class="comment"># 执行后继续向下执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lemon is a handsome&quot;</span>)      <span class="comment"># 执行完毕后退出程序</span></span><br></pre></td></tr></table></figure><h3 id="3-try–except–finally语句"><a href="#3-try–except–finally语句" class="headerlink" title="3. try–except–finally语句"></a>3. try–except–finally语句</h3><ul><li><strong>作用：</strong>语句 t 不管有没有错误都将执行最后的语句 f</li><li><strong>格式</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    语句t</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句t1</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句t2</span><br><span class="line">......</span><br><span class="line"><span class="keyword">except</span> 错误码 <span class="keyword">as</span> e:</span><br><span class="line">    语句n</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    语句f</span><br></pre></td></tr></table></figure><ul><li><strong>示例</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;“错误”，除数不能为0&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不管except有没有错，都必须执行我&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、断言"><a href="#二、断言" class="headerlink" title="二、断言"></a>二、断言</h2><blockquote><ul><li><p><strong>作用：</strong></p><ul><li>python assert 断言句语格式及用法很简单。在没完善一个程序之前，我们不知道程序在哪里会出错，与其让它在运行时崩溃，不如在出现错误条件时就崩溃，这时候就需要assert断言的帮助。</li></ul></li><li><p><strong>格式:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression</span><br></pre></td></tr></table></figure><ul><li>等价于：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> expression:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure><ul><li>assert 后面也可以紧跟参数:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression [, arguments]</span><br></pre></td></tr></table></figure><ul><li>等价于：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> expression:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError(arguments)</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num, div</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> (div != <span class="number">0</span>), <span class="string">&quot;div不能为0&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num / div</span><br><span class="line"></span><br><span class="line">res = func(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="With-语句"><a href="#With-语句" class="headerlink" title="With 语句"></a>With 语句</h1><blockquote><p>with是从Python2.5引入的一个新的语法，它是一种上下文管理协议，目的在于从流程图中把 try,except 和finally 关键字 和 资源分配释放相关代码统统去掉，简化 try….except….finlally的处理流程；还可以自动关闭文件、线程锁的自动获取和释放等</p></blockquote><ul><li><p><strong>处理对象</strong></p><ul><li>所以使用with处理的对象必须有__enter__()和__exit__()这两个方法。</li><li>with通过__enter__方法初始化，然后在__exit__中做善后以及处理异常。</li></ul></li><li><p><strong>作用</strong></p><ul><li>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。</li></ul></li><li><p><strong>格式</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> expression <span class="keyword">as</span> target:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><ul><li><p><strong>参数解释</strong></p><ul><li><em>expression</em>        是一个需要执行的表达式；</li><li><em>target</em>                是一个变量或者元组，存储的是expression表达式执行返回的结果，可选参数</li></ul></li><li><p><strong>示例</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;/root/lemon.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> t1:</span><br><span class="line">     <span class="built_in">print</span>(t1.read())</span><br></pre></td></tr></table></figure><blockquote><p>这里使用了 with 语句，不管在处理文件过程中是否发生异常，都能保证 with 语句执行完毕后已经关闭掉打开的文件句柄。如果使用传统的 try / finally范式，则要使用类似如下代码：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;/root/lemon.txt&quot;</span></span><br><span class="line">somefile = <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> somefile:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    somefile.close()</span><br></pre></td></tr></table></figure><h1 id="Python-文件处理"><a href="#Python-文件处理" class="headerlink" title="Python 文件处理"></a>Python 文件处理</h1><h2 id="一、open-方法"><a href="#一、open-方法" class="headerlink" title="一、open() 方法"></a>一、open() 方法</h2><blockquote><p><em>Python  open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</em></p><p><em><strong>注意：</strong></em><em>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</em></p></blockquote><ul><li><strong>格式</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(path, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, buffering=-<span class="number">1</span>, newline=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>参数说明:</strong></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>文件路径（相对或者绝对路径）。</td></tr><tr><td>mode</td><td>文件打开模式；默认为文本模式。</td></tr><tr><td>encoding</td><td>编码方式，默认就是utf-8</td></tr><tr><td>errors</td><td>报错处理级别；常用的 ignore（忽略错误）</td></tr><tr><td>newline</td><td>区分换行符</td></tr></tbody></table><ul><li><strong>mode 参数有：</strong></li></ul><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>t</td><td>文本模式 (默认)。</td></tr><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><ul><li><strong>file 对象</strong>:  <em>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数</em></li></ul><table><thead><tr><th><em>方法</em></th><th><em>描述</em></th></tr></thead><tbody><tr><td><strong>file.read()</strong></td><td>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td><strong>file.readline()</strong></td><td>读取整行，包括 “\n” 字符；同时它也可以读取指定文件字符数</td></tr><tr><td><strong>file.readlines()</strong>*</td><td>读取所有行并以列表的类型返回</td></tr><tr><td><strong>file.seek()</strong></td><td>设置文件当前位置【修改描述符 (开始点)】</td></tr><tr><td><strong>file.write()</strong></td><td>将数据以覆盖的形式写入缓冲区（文件），返回的是写入的字符长度。</td></tr><tr><td><strong>file.close()</strong></td><td>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td><strong>file.flush()</strong></td><td>刷新缓冲区，直接把内部缓冲区的数据立刻写入文件，而不是被动的等待自动刷新缓冲区写入。 刷新缓冲区的方法有：关闭文件、缓冲区满了、手动刷新、遇到\n换行符</td></tr><tr><td>file.writelines()</td><td>向文件写一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr><tr><td>file.fileno()</td><td>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td>file.truncate()</td><td>截取文件，截取的字节通过size指定，默认为当前文件位置。</td></tr><tr><td>file.isatty()</td><td>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td>file.next()</td><td>返回文件下一行。</td></tr><tr><td>file.tell()</td><td>返回文件当前位置。</td></tr></tbody></table><h2 id="二、对文件的操作的三个步骤"><a href="#二、对文件的操作的三个步骤" class="headerlink" title="二、对文件的操作的三个步骤"></a>二、对文件的操作的三个步骤</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)、打开文件：<span class="built_in">open</span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)、操作文件：对文件进行读或写 read/<span class="built_in">write</span></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)、关闭文件：close</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：对文件进行读写后，一定不要忘记关闭文件，因为：</strong></p><ul><li>文件对象占用操作系统资源；</li><li>操作系统能打开的文件总数量有限；</li><li>当我们写文件时，操作系统不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。</li><li>只有调用 close() 方法时，操作系统才会把没有写入的数据全部写入至磁盘。</li><li>忘记调用 close() 的后果是数据可能只写了一部分到磁盘，剩下的丢失了。</li></ul></blockquote><h2 id="三、文件处理—读文件"><a href="#三、文件处理—读文件" class="headerlink" title="三、文件处理—读文件"></a>三、文件处理—读文件</h2><h3 id="1-读文件过程"><a href="#1-读文件过程" class="headerlink" title="1. 读文件过程"></a>1. 读文件过程</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、打开文件</span><br><span class="line"></span><br><span class="line">2、读取文件内容</span><br><span class="line"></span><br><span class="line">3、关闭文件</span><br></pre></td></tr></table></figure><h3 id="2-简单示例"><a href="#2-简单示例" class="headerlink" title="2. 简单示例"></a>2. 简单示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、read() 读取文件全部的内容；这种适合读取较小的文件</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span>  <span class="comment">#文件路径</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)        <span class="comment">#打开文件</span></span><br><span class="line"></span><br><span class="line">str1 = f.read()      <span class="comment">#读取文件</span></span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"></span><br><span class="line">f.close()            <span class="comment">#关闭文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、read(number) 读取指定文件字符数</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">str2 = f.read(<span class="number">5</span>)    <span class="comment">#读取文件5个字符的内容</span></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br><span class="line"></span><br><span class="line">str3 = f.read(<span class="number">10</span>)   <span class="comment">#继续读取往后10个字符的内容，换行符\n也算一个字符数</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、readline() 读取整行，包括 &quot;\n&quot; 字符；同时它也可以读取指定文件字符数</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">str4 = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str4 =&quot;</span>, str4)</span><br><span class="line"></span><br><span class="line">str5 = f.readline(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str5 =&quot;</span>, str5)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、readlines() 读取所有行并以列表的类型返回；包含\n换行符</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">list6 = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(list6)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、修改描述符(开始点)</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">str7 = f.read()</span><br><span class="line"><span class="built_in">print</span>(str7)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.seek(<span class="number">5</span>)          <span class="comment"># 将描述符放到第5个字符的后面</span></span><br><span class="line">str8 = f.read()</span><br><span class="line"><span class="built_in">print</span>(str8)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="3-最稳妥的读文件方法"><a href="#3-最稳妥的读文件方法" class="headerlink" title="3. 最稳妥的读文件方法"></a>3. 最稳妥的读文件方法</h3><ul><li><p><strong>再说一遍：</strong>不管执行成不成功，最后必须关闭文件</p></li><li><p><strong>两种方法：</strong></p><ul><li>try - finally 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f1 = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f1.read())</span><br><span class="line"><span class="keyword">finally</span>:                <span class="comment"># 不管上面语句执行成不成功，都将执行finally下的语句</span></span><br><span class="line">    f1.close()          <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><ul><li>with 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f2:    <span class="comment"># with执行到最后会自动退出文件</span></span><br><span class="line">    <span class="built_in">print</span>(f2.read())</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、文件处理-—-写文件"><a href="#四、文件处理-—-写文件" class="headerlink" title="四、文件处理 — 写文件"></a>四、文件处理 — 写文件</h2><h3 id="1-写文件过程"><a href="#1-写文件过程" class="headerlink" title="1. 写文件过程"></a>1. 写文件过程</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>打开要写入的文件路径</span><br><span class="line"><span class="bullet">- </span>以写入的方式打开文件</span><br><span class="line"><span class="bullet">- </span>写入数据到缓存区</span><br><span class="line"><span class="bullet">- </span>关闭文件自动刷新缓存区</span><br></pre></td></tr></table></figure><h3 id="2-简单示例-1"><a href="#2-简单示例-1" class="headerlink" title="2. 简单示例"></a>2. 简单示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、write(&quot;data&quot;) 将数据以覆盖的形式写入缓冲区</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)    <span class="comment"># 以写入的方式打开文件</span></span><br><span class="line"></span><br><span class="line">f.write(<span class="string">&quot;my name is a lemon!!!&quot;</span>)         <span class="comment"># 写入数据到缓存区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while True:    # 因为会一直循环，导致执行不到下面关闭文件的程序，所以数据始终写不到文件里面</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line">f.close()        <span class="comment"># 关闭文件自动刷新缓存区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、flush()刷新缓冲区</span></span><br><span class="line"><span class="comment"># 直接把内部缓冲区的数据立刻写入文件，而不是被动的等待自动刷新缓冲区写入</span></span><br><span class="line"><span class="comment"># 刷新缓冲区有几种方法？--&gt; 1、关闭文件 2、缓冲区满了 3、手动刷新 4、遇到\n换行符</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">&quot;lemon is a very good&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.flush()      <span class="comment"># 刷新缓冲区立即将数据写入文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f.close()      <span class="comment"># 即使不关闭文件也能立刻将数据写入到文件，因为循环上层有一个刷新缓冲区的程序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、write(&quot;data&quot;) 将数据以追加的形式写入缓冲区</span></span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">&quot;my name is a lemon~_~&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">    ff.write(<span class="string">&quot;lemon is very cool!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-最稳妥的写文件方法"><a href="#3-最稳妥的写文件方法" class="headerlink" title="3. 最稳妥的写文件方法"></a>3. 最稳妥的写文件方法</h3><ul><li><p><strong>两种方法：</strong></p><ul><li>try - finally 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f1 = <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;my name is a lemon~_~&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:                <span class="comment"># 不管上面语句执行成不成功，都将执行finally下的语句</span></span><br><span class="line">    f1.close()          <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><ul><li>with 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f2:    <span class="comment"># with执行到最后会自动退出文件</span></span><br><span class="line">    f.write(<span class="string">&quot;my name is a lemon~_~&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、编码与解码"><a href="#五、编码与解码" class="headerlink" title="五、编码与解码"></a>五、编码与解码</h2><ul><li><strong>注：</strong>凡是二进制写入的就必须要编码解码</li><li><strong><code>encode()</code></strong> ：用来编码写入文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;我的名字叫做&#123;lemon&#125;&quot;</span></span><br><span class="line">    f1.write(<span class="built_in">str</span>.encode(<span class="string">&quot;gbk&quot;</span>))       <span class="comment"># 以gbk格式进行编码写入文件</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>decode()</code></strong> ：用来解码读取文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    data = f2.read()</span><br><span class="line">    <span class="comment"># 编码：b&#x27;\xce\xd2\xb5\xc4\xc3\xfb\xd7\xd6\xbd\xd0\xd7\xf6&#123;lemon&#125;&#x27; &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(data, <span class="built_in">type</span>(data))</span><br><span class="line">    <span class="comment"># 将gbk类型数据进行解码读写&#123;编码是什么解码就写什么&#125; &gt; (两者必须要一致性)</span></span><br><span class="line">    gc_data = data.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="comment"># 解码：我的名字叫做&#123;lemon&#125; &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(gc_data, <span class="built_in">type</span>(gc_data))</span><br></pre></td></tr></table></figure><h2 id="六、list-tuple-dict-set的文件操作"><a href="#六、list-tuple-dict-set的文件操作" class="headerlink" title="六、list-tuple-dict-set的文件操作"></a>六、list-tuple-dict-set的文件操作</h2><blockquote><p><strong>概念：</strong>写入就相当于编码，读取就相当于解码；注意：只能用于二进制的形式进行写入、读取</p><p><strong>示例：</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle          <span class="comment"># 引入pickle:数据持久化模块 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1、list</span></span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">gc_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;lemon&quot;</span>]</span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">k1 = <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">pickle.dump(gc_list, k1)             <span class="comment"># 只能使用二进制的格式进行写入</span></span><br><span class="line">k1.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">f1 = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">temp_list = pickle.load(f1)          <span class="comment"># 只能使用二进制的格式进行读取</span></span><br><span class="line"><span class="built_in">print</span>(temp_list, <span class="built_in">type</span>(temp_list))    <span class="comment"># [1, 2, 3, &#x27;lemon&#x27;] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2、tuple</span></span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">gc_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;lemon&quot;</span>)</span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">k2 = <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">pickle.dump(gc_tuple, k2)            <span class="comment"># 只能使用二进制的格式进行写入</span></span><br><span class="line">k2.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">f2 = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">temp_tuple = pickle.load(f2)         <span class="comment"># 只能使用二进制的格式进行读取</span></span><br><span class="line"><span class="built_in">print</span>(temp_tuple, <span class="built_in">type</span>(temp_tuple))  <span class="comment"># (1, 2, 3, &#x27;lemon&#x27;) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 3、dict</span></span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">gc_dict = &#123;<span class="number">1</span>: <span class="string">&quot;dgf&quot;</span>, <span class="number">2</span>: <span class="string">&quot;alex&quot;</span>, <span class="number">3</span>: <span class="string">&quot;lemon&quot;</span>&#125;</span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">k3 = <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">pickle.dump(gc_dict, k3)             <span class="comment"># 只能使用二进制的格式进行写入</span></span><br><span class="line">k3.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">f3 = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">temp_dcit = pickle.load(f3)          <span class="comment"># 只能使用二进制的格式进行读取</span></span><br><span class="line"><span class="built_in">print</span>(temp_dcit, <span class="built_in">type</span>(temp_dcit))    <span class="comment"># &#123;1: &#x27;dgf&#x27;, 2: &#x27;alex&#x27;, 3: &#x27;lemon&#x27;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">f3.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4、set</span></span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">gc_set = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">path = <span class="string">r&quot;file_path&quot;</span></span><br><span class="line">k4 = <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">pickle.dump(gc_set, k4)              <span class="comment"># 只能使用二进制的格式进行写入</span></span><br><span class="line">k4.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">f4 = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">temp_set = pickle.load(f4)           <span class="comment"># 只能使用二进制的格式进行读取</span></span><br><span class="line"><span class="built_in">print</span>(temp_set, <span class="built_in">type</span>(temp_set))      <span class="comment"># &#123;1, 2, 3, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line">f4.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NFS存储服务</title>
      <link href="/2021/07/11/NFS%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/07/11/NFS%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h2 id="一、NFS工作原理"><a href="#一、NFS工作原理" class="headerlink" title="一、NFS工作原理"></a>一、NFS工作原理</h2><h3 id="1、什么是NFS服务器"><a href="#1、什么是NFS服务器" class="headerlink" title="1、什么是NFS服务器"></a>1、什么是NFS服务器</h3><blockquote><p>NFS就是Network File System的缩写，它最大的功能就是可以通过网络，让不同的机器、不同的操作系统可以共享彼此的文件。</p></blockquote><p>NFS服务器可以让PC将网络中的NFS服务器共享的目录挂载到本地端的文件系统中，而在本地端的系统中来看，那个远程主机的目录就好像是自己的一个磁盘分区一样，在使用上相当便利；</p><h3 id="2、NFS挂载原理"><a href="#2、NFS挂载原理" class="headerlink" title="2、NFS挂载原理"></a>2、NFS挂载原理</h3><p>NFS服务器的挂载结构图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griaogtd9ej30p70gkdkc.jpg" alt="img"></p><p>如上图示：</p><p>当我们在NFS服务器设置好一个共享目录/home/public后，其他的有权访问NFS服务器的NFS客户端就可以将这个目录挂载到自己文件系统的某个挂载点，这个挂载点可以自己定义，如上图客户端A与客户端B挂载的目录就不相同。并且挂载好后我们在本地能够看到服务端/home/public的所有数据。如果服务器端配置的客户端只读，那么客户端就只能够只读。如果配置读写，客户端就能够进行读写。挂载后，NFS客户端查看磁盘信息命令：#df –h。</p><p>既然NFS是通过网络来进行服务器端和客户端之间的数据传输，那么两者之间要传输数据就要有想对应的网络端口，NFS服务器到底使用哪个端口来进行数据传输呢？基本上NFS这个服务器的端口开在2049,但由于文件系统非常复杂。因此NFS还有其他的程序去启动额外的端口，这些额外的用来传输数据的端口是随机选择的，是小于1024的端口；既然是随机的那么客户端又是如何知道NFS服务器端到底使用的是哪个端口呢？这时就需要通过远程过程调用（Remote Procedure Call,RPC）协议来实现了！</p><h3 id="3、RPC与NFS如何通讯"><a href="#3、RPC与NFS如何通讯" class="headerlink" title="3、RPC与NFS如何通讯"></a>3、RPC与NFS如何通讯</h3><p>因为NFS支持的功能相当多，而不同的功能都会使用不同的程序来启动，每启动一个功能就会启用一些端口来传输数据，因此NFS的功能对应的端口并不固定，客户端要知道NFS服务器端的相关端口才能建立连接进行数据传输，而RPC就是用来统一管理NFS端口的服务，并且统一对外的端口是111，RPC会记录NFS端口的信息，如此我们就能够通过RPC实现服务端和客户端沟通端口信息。PRC最主要的功能就是指定每个NFS功能所对应的port number,并且通知客户端，记客户端可以连接到正常端口上去。</p><p>那么RPC又是如何知道每个NFS功能的端口呢？</p><p>首先当NFS启动后，就会随机的使用一些端口，然后NFS就会向RPC去注册这些端口，RPC就会记录下这些端口，并且RPC会开启111端口，等待客户端RPC的请求，如果客户端有请求，那么服务器端的RPC就会将之前记录的NFS端口信息告知客户端。如此客户端就会获取NFS服务器端的端口信息，就会以实际端口进行数据的传输了。</p><p>提示：在启动NFS SERVER之前，首先要启动RPC服务（即portmap服务，下同）否则NFS SERVER就无法向RPC服务区注册，另外，如果RPC服务重新启动，原来已经注册好的NFS端口数据就会全部丢失。因此此时RPC服务管理的NFS程序也要重新启动以重新向RPC注册。特别注意：一般修改NFS配置文档后，是不需要重启NFS的，直接在命令执行/etc/init.d/nfs reload或exportfs –rv即可使修改的/etc/exports生效。</p><h3 id="4、NFS客户端和NFS服务端通讯过程"><a href="#4、NFS客户端和NFS服务端通讯过程" class="headerlink" title="4、NFS客户端和NFS服务端通讯过程"></a>4、NFS客户端和NFS服务端通讯过程</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griap8l7jmj30qg0geq69.jpg" alt="img"></p><p>1）首先服务器端启动RPC服务，并开启111端口</p><p>2）服务器端启动NFS服务，并向RPC注册端口信息</p><p>3）客户端启动RPC（portmap服务），向服务端的RPC(portmap)服务请求服务端的NFS端口</p><p>4）服务端的RPC(portmap)服务反馈NFS端口信息给客户端。</p><p>5）客户端通过获取的NFS端口来建立和服务端的NFS连接并进行数据的传输。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griapclknoj30ls0clmye.jpg" alt="img"></p><h2 id="二、NFS部署使用"><a href="#二、NFS部署使用" class="headerlink" title="二、NFS部署使用"></a>二、NFS部署使用</h2><blockquote><p>要部署NFS服务，必须安装下面两个软件包：nfs-utils：NFS主程序，rpcbind:PRC主程序； </p></blockquote><p><strong>NFS服务器端和Client端都需要这安装这两个软件。</strong></p><ul><li>注意：NFS的RPC服务器，Centos5下名字为portmap,CentOS6和CentOS7下名称为rpcbind</li></ul><p><strong>NFS软件包</strong></p><ul><li><p>nfs-utils: NFS主程序，包含rpc.nfsd rpc.mount两个deamons</p></li><li><p>rpcbind: RPC主程序</p></li></ul><p><strong>节点角色</strong></p><ul><li><p>存储服务器：192.168.1.1</p></li><li><p>客户端服务器：192.168.1.2</p></li></ul><h3 id="1、服务端操作"><a href="#1、服务端操作" class="headerlink" title="1、服务端操作"></a>1、服务端操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、yum -y install nfs-utils rpcbind</span><br><span class="line"></span><br><span class="line">2、<span class="keyword">for</span> i <span class="keyword">in</span> rpcbind nfs;<span class="keyword">do</span> chkconfig <span class="variable">$i</span> on; <span class="keyword">done</span>   <span class="comment">##设置为开机启动</span></span><br><span class="line"></span><br><span class="line">3、设置共享目录</span><br><span class="line">mkdir /opt/wwwroot</span><br><span class="line">chmod 777 /opt/wwwroot  <span class="comment">##设置权限</span></span><br><span class="line"></span><br><span class="line">4、vi /etc/exports</span><br><span class="line">/opt/wwwroot192.168.1.0/24(rw,sync,no_root_squash)</span><br><span class="line">rw      表示可读写</span><br><span class="line">ro      Read-only表示只能读权限</span><br><span class="line">sync    文件实际写入磁盘后才返回</span><br><span class="line">no_root_squash    访问nfs server共享目录的用户如果是root的话，它对该目录具有root权限</span><br><span class="line"></span><br><span class="line">5、启动nfs服务程序</span><br><span class="line">/etc/init.d/rpcbind start</span><br><span class="line">/etc/init.d/nfs start</span><br><span class="line">netstat -utpnl |grep rpcbind</span><br><span class="line">showmount -e  <span class="comment">##查看本机共享的目录</span></span><br></pre></td></tr></table></figure><h3 id="2、客户端操作"><a href="#2、客户端操作" class="headerlink" title="2、客户端操作"></a>2、客户端操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1、yum -y install nfs-utils rpcbind</span><br><span class="line"></span><br><span class="line">2、chkconfig rpcbind on</span><br><span class="line"></span><br><span class="line">3、showmount -e 192.168.1.1</span><br><span class="line"></span><br><span class="line">4、<span class="built_in">echo</span> 3 &gt;/proc/sys/vm/drop_caches  <span class="comment">##当nfs因为缓存没有及时而导致错，可以使用该命令</span></span><br><span class="line"></span><br><span class="line">5、客户机挂载使用nfs共享</span><br><span class="line">mkdir -p /var/www/html</span><br><span class="line">mount 192.168.1.1:/opt/wwwroot /var/www/html/</span><br><span class="line">   </span><br><span class="line">6、vi /etc/fstab </span><br><span class="line">192.168.1.1:/opt/wwwroot /var/www/html nfs defaults,_netdev 0 0</span><br><span class="line"></span><br><span class="line">7、<span class="built_in">cd</span> /var/www/html/</span><br><span class="line">touch a.file</span><br><span class="line">ll</span><br><span class="line">切换到1.1上验证：</span><br><span class="line"></span><br><span class="line"><span class="comment"># autofs自动挂载NFS配置：只有使用时才挂载，挂载后不使用会自动超时退出，以便减小存储服务器压力。</span></span><br><span class="line"><span class="comment"># 只需要在客户端配置：</span></span><br><span class="line">yum -y install autofs</span><br><span class="line">vi /etc/auto.nfs</span><br><span class="line">html -rw 192.168.1.1:/opt/wwwroot</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">vi /etc/auto.master</span><br><span class="line">/var/www /etc/auto.nfs  --timeout=60</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">/etc/init.d/autofs  restart</span><br><span class="line">chkconfig autofs on</span><br><span class="line"><span class="built_in">cd</span> /var/www/html  <span class="comment">#进入时自动挂载</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># showmount -e</span></span><br><span class="line">clnt_create: RPC: Program not registered</span><br><span class="line">[root@localhost ~]<span class="comment"># rpc.mountd </span></span><br><span class="line">[root@localhost ~]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> localhost.localdomain:</span><br><span class="line">/opt/wwwroot 192.168.1.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 故障解决</span></span><br><span class="line">1、nfs只能挂载为nobody</span><br><span class="line">同时修改服务端、客户端/etc/idmapd.conf中的Domain为一样的值，随后重启rpcidmapd服务，或重启所有服务</span><br><span class="line">2、客户端无法卸载nfs目录</span><br><span class="line">umount.nfs4: /var/nfs: device is busy</span><br><span class="line">执行fuser -km /opt/wwwroot，然后再执行umount</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LVS四层负载均衡</title>
      <link href="/2021/07/11/LVS%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2021/07/11/LVS%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="LVS负载均衡讲解并应用"><a href="#LVS负载均衡讲解并应用" class="headerlink" title="LVS负载均衡讲解并应用"></a>LVS负载均衡讲解并应用</h1><h2 id="一、LVS介绍"><a href="#一、LVS介绍" class="headerlink" title="一、LVS介绍"></a>一、LVS介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>LVS是Linux Virtual Server的简称，即Linux虚拟服务器，创始人前阿里云首席科学家章文嵩博士(现已经在滴滴)，官方网站：<a href="http://www.linuxvirtualserver.org/">www.linuxvirtualserver.org</a>。从内核版本2.4开始，已经完全内置了LVS的各个功能模块，无需给内核打任何补丁，可以直接使用LVS提供的各种功能。通过LVS提供的负载均衡技术和Linux操作系统可实现一个高性能、高可用的服务器群集，它具有良好可靠性、可扩展性和可操作性，以低廉的成本实现最优的服务性能。 </p><h3 id="通用体系结构"><a href="#通用体系结构" class="headerlink" title="通用体系结构"></a>通用体系结构</h3><p>LVS集群采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服 务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。整个服务器集群的结构对客户是透明的，而且无需修改客户端和服务器端的程序，以下是体系结构图（来源<a href="http://www.linuxvirtualserver.org/architecture.html%EF%BC%89%EF%BC%9A">http://www.linuxvirtualserver.org/architecture.html）：</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd670dv7hj30do0ec75z.jpg"></p><ul><li><p>负载调度器（load balancer)，它是整个集群对外面的前端机，负责将客户的请求发送到一组服务器上执行。</p></li><li><p>服务器池（server pool），是一组真正执行客户请求的服务器，可以是WEB、MAIL、FTP和DNS服务器等。</p></li><li><p>共享存储（shared storage），它为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相同的内容，提供相同的服务，例如数据库、分布式文件系统、网络存储等。</p></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>高并发连接：LVS基于内核网络层面工作，有超强的承载能力和并发处理能力。单台LVS负载均衡器，可支持上万并发连接。稳定性强：是工作在网络4层之上仅作分发之用，这个特点也决定了它在负载均衡软件里的性能最强，稳定性最好，对内存和cpu资源消耗极低。</p></li><li><p>成本低廉：硬件负载均衡器少则十几万，多则几十万上百万，LVS只需一台服务器和就能免费部署使用，性价比极高。</p></li><li><p>配置简单：LVS配置很简单，仅需几行命令即可完成配置，也可写成脚本进行管理。</p></li><li><p>支持多种算法：支持8种负载均衡算法，可根据业务场景灵活调配进行使用。</p></li><li><p>支持多种工作模型:可根据业务场景,使用不同的工作模式来解决生产环境请求处理问题。</p></li><li><p>应用范围广：因为LVS工作在4层，所以它几乎可以对所有应用做负载均衡，包括http、数据库、DNS、ftp服务等等。</p></li><li><p><strong>缺点</strong>：工作在4层，不支持7层规则修改，机制过于庞大，不适合小规模应用。</p></li></ul><h3 id="组件和专业术语"><a href="#组件和专业术语" class="headerlink" title="组件和专业术语"></a>组件和专业术语</h3><p><strong>组件：</strong></p><ul><li><strong>ipvsadm</strong>：用户空间的客户端工具，用于管理集群服务及集群服务上的DS等；</li><li><strong>ipvs</strong>：工作于内核上的netfilter INPUT钩子之上的程序，可根据用户定义的集群实现请求转发；</li></ul><p><strong>专业术语：</strong></p><ul><li><strong>VS</strong>：Virtual Server      #虚拟服务</li><li><strong>DS</strong>：Director Balancer     #也叫(Director Server)负载均衡器、分发器</li><li><strong>RS</strong>：RS Server         #后端请求处理服务器，真实服务器</li><li><strong>CIP:</strong> Client IP        #客户端IP</li><li><strong>VIP</strong>：Director Virtual IP   #负载均衡器虚拟IP</li><li><strong>DIP</strong>：Director IP       #负载均衡器IP</li><li><strong>RIP</strong>：RS Server IP       #后端请求处理的服务器IP</li></ul><h3 id="工作模型"><a href="#工作模型" class="headerlink" title="工作模型"></a>工作模型</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd68t5nl1j30k80abq60.jpg"></p><p><strong>LVS</strong>工作在内核空间，基于内核包处理框架Netfilter实现的一种负责均衡技术，其在工作模式如上图,大致过程：</p><ol><li>当客户端的请求到达负载均衡器的内核空间时，首先会到达PREROUTING链。</li><li>当内核发现请求数据包的目的地址是本机时，将数据包送往INPUT链。</li><li>LVS由用户空间的ipvsadm和内核空间的IPVS组成，ipvsadm用来定义规则，IPVS利用ipvsadm定义的规则工作，IPVS工作在INPUT链上,当数据包到达INPUT链时，首先会被IPVS检查，如果数据包里面的目的地址及端口没有在规则里面，那么这条数据包将被放行至用户空间。</li><li>如果数据包里面的目的地址及端口在规则里面，那么这条数据报文将被修改目的地址为事先定义好的后端服务器，并送往POSTROUTING链。</li><li>最后经由POSTROUTING链发往后端服务器。</li></ol><h2 id="二、负载均衡模式"><a href="#二、负载均衡模式" class="headerlink" title="二、负载均衡模式"></a>二、负载均衡模式</h2><h3 id="LVS-DR模式"><a href="#LVS-DR模式" class="headerlink" title="LVS-DR模式"></a>LVS-DR模式</h3><p><strong>简介：</strong></p><p>全称：Virtual Server via Direct Routing(VS-DR)，也叫直接路由模式，用直接路由技术实现虚拟服务器｡当参与集群的计算机和作为控制管理的计算机在同一个网段时可以用此方法,控制管理的计算机接收到请求包时直接送到参与集群的节点｡直接路由模式比较特别，很难说和什么方面相似，前种模式基本上都是工作在网络层上（三层），而直接路由模式则应</p><p>该是工作在数据链路层上（二层）。</p><p><strong>工作原理：</strong></p><p>LVS DR 原理：用户请求 LVS 到达 director,director 将请求的报文的目标 MAC 地址改</p><p>成后端的 realserver MAC 地址，目标 IP 为 VIP（不变），源 IP 为用户 IP 地址（保持不变），然后 Director 将报文发送到 realserver，realserver检测到目标为自己本地 IP，如果在同一个网段，然后将请求直接返给用户。如果用户跟realserver 不在一个网段，则通过网关返回用户。（此种转发效率最高）</p><p>DS和RS都使用同一个IP对外服务。但只有DS对ARP请求进行响应，所有RS对本身这个IP的ARP请求保持静默（对ARP请求不做响应），也就是说，网关会把对这个服务IP的请求全部定向给DS，而DS收到数据包后根据调度算法，找出对应的 RS，把目的MAC地址改为RS的MAC并发给这台RS。这时RS收到这个数据包，则等于直接从客户端收到这个数据包无异，处理后直接返回给客户端。由于DS要对二层包头进行改换，所以DS和RS之间必须在一个广播域，也可以简单的理解为在同一台交换机上。</p><p><strong>工作流程：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd69o04dsj30fd09hact.jpg"></p><p><strong>说明：</strong></p><ol><li>当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。     此时报文的源IP为CIP，目标IP为VIP；</li><li>PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链；</li><li>IPVS比对数据包请求的服务是否为集群服务，若是，将请求报文中的源MAC地址修改为DIP的MAC地址，将目标MAC地址修改RIP的MAC地址，然后将数据包发至POSTROUTING链。 此时的源IP和目的IP均未修改，仅修改了源MAC地址为DIP的MAC地址，目标MAC地址为RIP的MAC地址；</li><li>由于DS和RS在同一个网络中，所以是通过二层，数据链路层来传输。POSTROUTING链检查目标MAC地址为RIP的MAC地址，那么此时数据包将会发至Real Server；</li><li>RS发现请求报文的MAC地址是自己的MAC地址，就接收此报文。处理完成之后，将响应报文通过lo接口传送给eth0网卡然后向外发出。 此时的源IP地址为VIP，目标IP为CIP；</li><li>响应报文最终送达至客户端。</li></ol><p><strong>地址变化过程：</strong><br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd7a4w3u5j313o0jotqn.jpg" alt="image-20210711184827749"><br><strong>DR模式特点以及注意事项：</strong></p><ol><li>在前端路由器做静态地址路由绑定，将对于VIP的地址仅路由到Director Server</li><li>在arp的层次上实现在ARP解析时做防火墙规则，过滤RS响应ARP请求。修改RS上内核参数（arp_ignore和arp_announce）将RS上的VIP配置在网卡接口的别名上，并限制其不能响应对VIP地址解析请求。</li><li>RS可以使用私有地址；但也可以使用公网地址，此时可以直接通过互联网连入RS以实现配置、监控等；</li><li>RS的网关一定不能指向DIP；</li><li>因为DR模式是通过MAC地址改写机制实现转发,RS跟Dirctory要在同一物理网络内（不能由路由器分隔）；</li><li>请求报文经过Directory，但响应报文一定不经过Director</li><li>不支持端口映射；</li><li>RS可以使用大多数的操作系统；</li><li>RS上的lo接口配置VIP的IP地址; </li></ol><h3 id="LVS-TUN模式"><a href="#LVS-TUN模式" class="headerlink" title="LVS-TUN模式"></a>LVS-TUN模式</h3><p><strong>介绍</strong></p><p>在VS/NAT 的集群系统中，请求和响应的数据报文都需要通过负载调度器，当真实服务器的数目在10台和20台之间时，负载调度器将成为整个集群系统的新瓶颈。大多数 Internet服务都有这样的特点：请求报文较短而响应报文往往包含大量的数据。如果能将请求和响应分开处理，即在负载调度器中只负责调度请求而响应直 接返回给客户，将极大地提高整个集群系统的吞吐量。</p><p>IP隧道（IP tunneling）是将一个IP报文封装在另一个IP报文的技术，这可以使得目标为一个IP地址的数据报文能被封装和转发到另一个IP地址。IP隧道技 术亦称为IP封装技术（IP encapsulation）。IP隧道主要用于移动主机和虚拟私有网络（Virtual Private Network），在其中隧道都是静态建立的，隧道一端有一个IP地址，另一端也有唯一的IP地址。</p><p>在TUN模式下，利用IP隧道技术将请求报文封装转发给后端服务器，响应报文能从后端服务器直接返回给客户。但在这里，后端服务器有一组而非一个，所以我们不可能静态地建立一一对应的隧道，而是动态地选择 一台服务器，将请求报文封装和转发给选出的服务器。</p><p><strong>工作流程</strong></p><p>LVS TUN 原理：跟 LVS DR 类似，也是改变封装 MAC 地址，多了一层隧道加密。实施环</p><p>境复杂，比 LVS DR 模式效率略低。</p><ol><li><p>客户端将请求发往前端的负载均衡器，请求报文源地址是CIP，目标地址为VIP。</p></li><li><p>负载均衡器收到报文后，发现请求的是在规则里面存在的地址，那么它将在客户端请求报文的首部再封装一层IP报文,将源地址改为DIP，目标地址改为RIP,并将此包发送给RS。</p></li><li><p>RS收到请求报文后，会首先拆开第一层封装,然后发现里面还有一层IP首部的目标地址是自己lo接口上的VIP，所以会处理次请求报文，并将响应报文通过lo接口送给eth0网卡直接发送给客户端。注意：需要设置lo接口的VIP不能在共网上出现</p></li></ol><p><strong>地址变化过程</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6atvwxnj30fd08m76a.jpg"></p><h3 id="LVS-NAT模式"><a href="#LVS-NAT模式" class="headerlink" title="LVS-NAT模式"></a>LVS-NAT模式</h3><p><strong>简介：</strong></p><p>NAT模式称为全称Virtualserver via Network address translation(VS/NAT)，是通过网络地址转换的方法来实现调度的。首先调度器(Director)接收到客户的请求数据包时（请求的目的IP为VIP），根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后调度就把客户端发送的请求数据包的目标IP地址及端口改成后端真实服务器的IP地址（RIP）,这样真实服务器（RS）就能够接收到客户的请求数据包了。真实服务器响应完请求后，查看默认路由（NAT模式下我们需要把RS的默认路由设置为DS服务器。）把响应后的数据包发送给DS,DS再接收到响应包后，把包的源地址改成虚拟地址（VIP）然后发送回给客户端。</p><p><strong>具体工作流程：</strong></p><p>LVS NAT 原理：用户请求 LVS 到达 director,director 将请求的报文的目标地址改成后</p><p>端的 realserver 地址，同时将报文的目标端口也改成后端选定的 realserver 相应端口，最后将报文发送到 realserver，realserver 将数据返给 director，director 再把数据发送给用户。（两次请求都经过 director，所以访问大的话，director 会成为瓶颈） </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6b0yf8uj60jt0bhtar02.jpg"></p><p><strong>说明：</strong></p><ol><li><p> 当用户请求到达DirectorServer，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP。</p></li><li><p> PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链。</p></li><li><p> IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，然后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP ，在这个过程完成了目标IP的转换（DNAT）。</p></li><li><p> POSTROUTING链通过选路，将数据包发送给Real Server。</p></li><li><p> Real Server比对发现目标为自己的IP，开始构建响应报文发回给Director Server。 此时报文的源IP为RIP，目标IP为CIP 。</p></li><li><p> Director Server在响应客户端前，此时会将源IP地址修改为自己的VIP地址（SNAT），然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP。 </p></li></ol><p><strong>NAT模式优缺点：</strong></p><ol><li>NAT技术将请求的报文和响应的报文都需要通过DS进行地址改写，因此网站访问量比较大的时候DS负载均衡调度器有比较大的瓶颈，一般要求最多之能10-20台节点。</li><li>节省IP，只需要在DS上配置一个公网IP地址就可以了。</li><li>每台内部的节点服务器的网关地址必须是调度器LB的内网地址。</li><li>NAT模式支持对IP地址和端口进行转换。即用户请求的端口和真实服务器的端口可以不一致。</li></ol><p><strong>地址变化过程：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6bdcq07j30jw0awju6.jpg"></p><h3 id="FULL-NAT模式"><a href="#FULL-NAT模式" class="headerlink" title="FULL-NAT模式"></a>FULL-NAT模式</h3><p><strong>简介：</strong></p><p>FULL-NAT模式可以实际上是根据LVS-NAT模式的一种扩展。在NAT模式下DS需要先对请求进行目的地址转换(DNAT)，然后对响应包进行源地址转换（SNAT），先后进行两次NAT，而 FULL-NAT则分别对请求进行和响应进行DNAT和SNAT，进行4次NAT，当然这样多次数的NAT会对性能大大削减，但是由于对请求报文的目的地址和源地址都进行了转换，后端的RS可以不在同一个VLAN下。</p><p><strong>工作流程：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6bjppdfj60r40cf40c02.jpg"></p><p><strong>说明：</strong></p><ol><li>首先client 发送请求package给VIP;</li><li>VIP 收到package后，会根据LVS设置的LB算法选择一个合适的RS，然后把package 的目地址修改为RS的ip地址，把源地址改成DS的ip地址；</li><li>RS收到这个package后发现目标地址是自己，就处理这个package ，处理完后把这个包发送给DS；</li><li>DS收到这个package 后把源地址改成VIP的IP，目的地址改成CIP(客户端ip)，然后发送给客户端；</li></ol><p><strong>优缺点：</strong></p><ol><li>RIP，DIP可以使用私有地址；</li><li>RIP和DIP可以不再同一个网络中，且RIP的网关未必需要指向DIP；</li><li>支持端口映射；</li><li>RS的OS可以使用任意类型；</li><li>请求报文经由Director，响应报文也经由Director；</li><li>FULL-NAT因为要经过4次NAT，所以性能比NAT还要低；</li><li>由于做了源地址转换，RS无法获取到客户端的真实IP；</li></ol><h3 id="各个模式的区别"><a href="#各个模式的区别" class="headerlink" title="各个模式的区别"></a>各个模式的区别</h3><p><strong>lvs-nat 与 lvs-fullnat：请求和响应报文都经由Director</strong></p><ul><li><p>lvs-nat：RIP的网关要指向DIP</p></li><li><p>lvs-fullnat：RIP和DIP未必在同一IP网络，但要能通信</p></li></ul><p><strong>lvs-dr 与 lvs-tun：请求报文要经由Director，但响应报文由RS直接发往Client</strong></p><ul><li><p>lvs-dr：通过封装新的MAC首部实现，通过MAC网络转发</p></li><li><p>lvs-tun：通过在原IP报文外封装新IP头实现转发，支持远距离通信</p></li></ul><h2 id="三、调度算法"><a href="#三、调度算法" class="headerlink" title="三、调度算法"></a>三、调度算法</h2><p><strong>简介</strong></p><p>LVS在内核中的负载均衡调度是以连接为粒度的。在HTTP协议（非持久）中，每个对象从WEB服务器上获取都需要建立一个TCP连接，同一用户 的不同请求会被调度到不同的服务器上，所以这种细粒度的调度在一定程度上可以避免单个用户访问的突发性引起服务器间的负载不平衡。在内核中的连接调度算法上，<strong>IPVS已实现了以下八种调度算法：</strong></p><ul><li><p>轮询调度<strong>rr</strong>（Round-Robin Scheduling）</p></li><li><p>加权轮询调度<strong>wrr</strong>（Weighted Round-Robin Scheduling）</p></li><li><p>最小连接调度<strong>lc</strong>（Least-Connection Scheduling）</p></li><li><p>加权最小连接调度<strong>wlc</strong>（Weighted Least-Connection Scheduling）</p></li><li><p>基于局部性的最少链接<strong>LBLC</strong>（Locality-Based Least Connections Scheduling）</p></li><li><p>带复制的基于局部性最少链接<strong>LBLCR</strong>（Locality-Based Least Connections with Replication Scheduling）</p></li><li><p>目标地址散列调度<strong>DH</strong>（Destination Hashing Scheduling）</p></li><li><p>源地址散列调度<strong>SH</strong>（Source Hashing Scheduling）</p></li></ul><h3 id="rr（轮询）"><a href="#rr（轮询）" class="headerlink" title="rr（轮询）"></a>rr（轮询）</h3><p>轮询调度：这种是最简单的调度算法，调度器把用户请求按顺序1:1的分配到集群中的每个RS Server上，这种算法平等地对待每一台RS Server，而不管服务器的压力和负载状况。</p><h3 id="wrr（权重-即加权轮询）"><a href="#wrr（权重-即加权轮询）" class="headerlink" title="wrr（权重, 即加权轮询）"></a>wrr（权重, 即加权轮询）</h3><p>加权轮叫调度（Weighted Round-Robin Scheduling）算法可以解决服务器间性能不一的情况，它用相应的权值表示服务器的处理性能，服务器的缺省权值为1。假设服务器A的权值为1，B的 权值为2，则表示服务器B的处理性能是A的两倍。加权轮叫调度算法是按权值的高低和轮叫方式分配请求到各服务器。权值高的服务器先收到的连接，权值高的服 务器比权值低的服务器处理更多的连接，相同权值的服务器处理相同数目的连接数</p><h3 id="sh（源地址哈希）"><a href="#sh（源地址哈希）" class="headerlink" title="sh（源地址哈希）"></a>sh（源地址哈希）</h3><p>源地址散列：主要是实现将此前的session（会话）绑定。将此前客户的源地址作为散列键，从静态的散列表中找出对应的服务器，只要目标服务器是没有超负荷的就将请求发送过去。就是说某客户访问过A,现在这个客户又来了，所以客户请求会被发送到服务过他的A主机。</p><h3 id="dh（目的地址哈希）"><a href="#dh（目的地址哈希）" class="headerlink" title="dh（目的地址哈希）"></a>dh（目的地址哈希）</h3><p>目标地址散列调度（Destination Hashing Scheduling）算法也是针对目标IP地址的负载均衡，但它是一种静态映射算法，通过一个散列（Hash）函数将一个目标IP地址映射到一台服务器。</p><h3 id="lc（最少链接）"><a href="#lc（最少链接）" class="headerlink" title="lc（最少链接）"></a>lc（最少链接）</h3><p>最小连接调度（Least-Connection Scheduling）算法是把新的连接请求分配到当前连接数最小的服务器。最小连接调度是一种动态调度算法，它通过服务器当前所活跃的连接数来估计服务 器的负载情况。调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某台服务器，其连接数加1；当连接中止或超时，其连接数减一。</p><h3 id="wlc（加权最少链接）LVS的理想算法"><a href="#wlc（加权最少链接）LVS的理想算法" class="headerlink" title="wlc（加权最少链接）LVS的理想算法"></a>wlc（加权最少链接）LVS的理想算法</h3><p>加权最小连接调度（Weighted Least-Connection Scheduling）算法是最小连接调度的超集，各个服务器用相应的权值表示其处理性能。服务器的缺省权值为1，系统管理员可以动态地设置服务器的权 值。加权最小连接调度在调度新连接时尽可能使服务器的已建立连接数和其权值成比例。 </p><h3 id="LBLC（基于局部性的最少连接）"><a href="#LBLC（基于局部性的最少连接）" class="headerlink" title="LBLC（基于局部性的最少连接）"></a>LBLC（基于局部性的最少连接）</h3><p>这个算法主要用于Cache集群系统，因为Cache集群的中客户请求报文的目标IP地址的变化，将相同的目标URL地址请求调度到同一台服务器，来提高服务器的访问的局部性和Cache命中率。从而调整整个集群的系统处理能力。但是，如果RSserver的负载处于一半负载，就用最少链接算法，将请求发送给活动链接少的主机。 </p><h3 id="LBLCR（带复制的基于局部性的最少链接）"><a href="#LBLCR（带复制的基于局部性的最少链接）" class="headerlink" title="LBLCR（带复制的基于局部性的最少链接）"></a>LBLCR（带复制的基于局部性的最少链接）</h3><p>该算法首先是基于最少链接的，当一个新请求收到后，一定会将请求发给最少连接的那台主机的。但这样又破坏了cache命中率。但这个算法中，集群服务是cache共享的，假设A的PHP跑了一遍，得到缓存。但其他RSserver可以去A那里拿缓存，这是种缓存复制机制。</p><h2 id="四、管理工具ipvsadm使用"><a href="#四、管理工具ipvsadm使用" class="headerlink" title="四、管理工具ipvsadm使用"></a>四、管理工具ipvsadm使用</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p>ipvsadm是LVS的管理工具，ipvsadm工作在用户空间，用户通过ipvsadm命令编写负载均衡规则。</p></blockquote><h3 id="安装ipvsadm"><a href="#安装ipvsadm" class="headerlink" title="安装ipvsadm"></a>安装ipvsadm</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install ipvsadm -y </span><br><span class="line"></span><br><span class="line"><span class="comment">#文件说明</span></span><br><span class="line">Unit 文件: ipvsadm.service</span><br><span class="line">主程序：/usr/sbin/ipvsadm</span><br><span class="line">规则保存工具：/usr/sbin/ipvsadm-save</span><br><span class="line">规则重载工具：/usr/sbin/ipvsadm-restore</span><br><span class="line">配置文件：/etc/sysconfig/ipvsadm-config</span><br></pre></td></tr></table></figure><h3 id="用法以及参数"><a href="#用法以及参数" class="headerlink" title="用法以及参数"></a>用法以及参数</h3><blockquote><p>ipvsadm –help  #查看使用方法及参数</p></blockquote><p><strong>命令：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-A, --add-service    <span class="comment">#添加一个集群服务. 即为ipvs虚拟服务器添加一个虚拟服务，也就是添加一个需要被负载均衡的虚拟地址。虚拟地址需要是ip地址，端口号，协议的形式。</span></span><br><span class="line">-E, --edit-service   <span class="comment">#修改一个虚拟服务。</span></span><br><span class="line">-D, --delete-service <span class="comment">#删除一个虚拟服务。即删除指定的集群服务;</span></span><br><span class="line">-C, --clear          <span class="comment">#清除所有虚拟服务。</span></span><br><span class="line">-R, --restore        <span class="comment">#从标准输入获取ipvsadm命令。一般结合下边的-S使用。</span></span><br><span class="line">-S, --save           <span class="comment">#从标准输出输出虚拟服务器的规则。可以将虚拟服务器的规则保存，在以后通过-R直接读入，以实现自动化配置。</span></span><br><span class="line">-a, --add-server     <span class="comment">#为虚拟服务添加一个real server（RS）</span></span><br><span class="line">-e, --edit-server    <span class="comment">#修改RS</span></span><br><span class="line">-d, --delete-server  <span class="comment">#删除</span></span><br><span class="line">-L, -l, --list       <span class="comment">#列出虚拟服务表中的所有虚拟服务。可以指定地址。添加-c显示连接表。</span></span><br><span class="line">-Z, --zero           <span class="comment">#将所有数据相关的记录清零。这些记录一般用于调度策略。</span></span><br><span class="line">--<span class="built_in">set</span> tcp tcpfin udp <span class="comment">#修改协议的超时时间。</span></span><br><span class="line">--start-daemon state <span class="comment">#设置虚拟服务器的备服务器，用来实现主备服务器冗余。（注：该功能只支持ipv4）</span></span><br><span class="line">--stop-daemon        <span class="comment">#停止备服务器。</span></span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>以下参数可以接在上边的命令后边。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-t, --tcp-service service-address： <span class="comment">#指定虚拟服务为tcp服务。service-address要是host[:port]的形式。端口是0表示任意端口。如果需要将端口设置为0，还需要加上-p选项（持久连接）。</span></span><br><span class="line">-u, --udp-service service-address： <span class="comment">#使用udp服务，其他同上。</span></span><br><span class="line">-f, --fwmark-service <span class="built_in">integer</span>： <span class="comment">#用firewall mark取代虚拟地址来指定要被负载均衡的数据包，可以通过这个命令实现把不同地址、端口的虚拟地址整合成一个虚拟服务，可以让虚拟服务器同时截获处理去往多个不同地址的数据包。fwmark可以通过iptables命令指定。如果用在ipv6需要加上-6。</span></span><br><span class="line">-s, --scheduler scheduling-method： <span class="comment">#指定调度算法,默认是wlc。调度算法可以指定以下8种：rr（轮询），wrr（权重），lc（最后连接），wlc（权重），lblc（本地最后连接），lblcr（带复制的本地最后连接），dh（目的地址哈希），sh（源地址哈希），sed（最小期望延迟），nq（永不排队）</span></span><br><span class="line">-p, --persistent [timeout]： <span class="comment">#设置持久连接，这个模式可以使来自客户的多个请求被送到同一个真实服务器，通常用于ftp或者ssl中。</span></span><br><span class="line">-M, --netmask netmask： <span class="comment">#指定客户地址的子网掩码。用于将同属一个子网的客户的请求转发到相同服务器。</span></span><br><span class="line">-r, --real-server server-address： <span class="comment">#为虚拟服务指定数据可以转发到的真实服务器的地址。可以添加端口号。如果没有指定端口号，则等效于使用虚拟地址的端口号.</span></span><br><span class="line">[packet-forwarding-method]： <span class="comment">#此选项指定某个真实服务器所使用的数据转发模式。需要对每个真实服务器分别指定模式。</span></span><br><span class="line">-g, --gatewaying： <span class="comment">#使用网关（即直接路由），此模式是默认模式。</span></span><br><span class="line">-i, --ipip： <span class="comment">#使用ipip隧道模式。</span></span><br><span class="line">-m, --masquerading： <span class="comment">#使用NAT模式。</span></span><br><span class="line">-w, --weight weight: <span class="comment">#设置权重。权重是0~65535的整数。如果将某个真实服务器的权重设置为0，那么它不会收到新的连接，但是已有连接还会继续维持（这点和直接把某个真实服务器删除时不同的）。</span></span><br><span class="line">-x, --u-threshold uthreshold： <span class="comment">#设置一个服务器可以维持的连接上限。0~65535。设置为0表示没有上限。</span></span><br><span class="line">-y, --l-threshold lthreshold： <span class="comment">#设置一个服务器的连接下限。当服务器的连接数低于此值的时候服务器才可以重新接收连接。如果此值未设置，则当服务器的连接数连续三次低于uthreshold时服务器才可以接收到新的连接。</span></span><br><span class="line">--mcast-interface interface： <span class="comment">#指定使用备服务器时候的广播接口。</span></span><br><span class="line">--syncid syncid：<span class="comment">#指定syncid， 同样用于主备服务器的同步。</span></span><br></pre></td></tr></table></figure><blockquote><p>以下选项用于list(-l)命令。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-c, --connection    <span class="comment">#列出当前的IPVS连接。</span></span><br><span class="line">--timeout           <span class="comment">#列出超时</span></span><br><span class="line">--stats             <span class="comment">#状态信息</span></span><br><span class="line">--rate              <span class="comment">#传输速率</span></span><br><span class="line">--thresholds        <span class="comment">#列出阈值</span></span><br><span class="line">--persistent-conn   <span class="comment">#持久连接</span></span><br><span class="line">--sor               <span class="comment">#把列表排序</span></span><br><span class="line">--nosort            <span class="comment">#不排序</span></span><br><span class="line">-n, --numeric       <span class="comment">#不对ip地址进行dns查询</span></span><br><span class="line">--exact             <span class="comment">#单位</span></span><br><span class="line">-6                  <span class="comment">#如果fwmark用的是ipv6地址需要指定此选项。  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用IPv6地址，需要在地址两端加上&quot;[]&quot;。例如：ipvsadm -A -t [2001:db8::80]:80 -s rr</span></span><br></pre></td></tr></table></figure><h3 id="LVS集群管理示例"><a href="#LVS集群管理示例" class="headerlink" title="LVS集群管理示例"></a>LVS集群管理示例</h3><p><strong>管理LVS集群中的Real Server举例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1) 添加RS : -a</span><br><span class="line"><span class="comment"># ipvsadm -a -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span></span><br><span class="line">举例1: 往VIP资源为192.168.1.100的集群服务里添加1个real server</span><br><span class="line">ipvsadm -a -t 192.168.1.100 -r 192.168.1.2 -g -w 5</span><br><span class="line"></span><br><span class="line">2) 修改RS : -e</span><br><span class="line"><span class="comment"># ipvsadm -e -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span></span><br><span class="line">举例2: 修改192.168.1.100集群服务里192.168.1.2这个real server的权重为3</span><br><span class="line">ipvsadm -e -t 192.168.1.100:80 -r 192.168.1.2 –g -w 3</span><br><span class="line"></span><br><span class="line">3) 删除RS : -d</span><br><span class="line"><span class="comment"># ipvsadm -d -t|u|f service-address -r server-address</span></span><br><span class="line">举例3: 删除192.168.1.100集群服务里192.168.1.2这个real server</span><br><span class="line">ipvsadm -d -t 192.168.1.100:80 -r 192.168.1.2</span><br><span class="line"></span><br><span class="line">4) 清除规则 (删除所有集群服务), 该命令与iptables的-F功能类似，执行后会清除所有规则:</span><br><span class="line">ipvsadm -C</span><br><span class="line"></span><br><span class="line">5) 保存及读取规则：</span><br><span class="line">ipvsadm -S &gt; /path/to/somefile</span><br><span class="line">ipvsadm-save &gt; /path/to/somefile</span><br><span class="line">ipvsadm-restore &lt; /path/to/somefile</span><br></pre></td></tr></table></figure><p><strong>管理LVS集群服务的查看</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -L|l [options]</span><br><span class="line">options:</span><br><span class="line">  -n         数字格式显示</span><br><span class="line">  --stats    统计信息</span><br><span class="line">  --rate     统计速率</span><br><span class="line">  --timeout  显示tcp、tcpinfo、udp的会话超时时长</span><br><span class="line">  -c         连接客户端数量</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看lvs集群转发情况</span></span><br><span class="line">ipvsadm -Ln</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看lvs集群的连接状态</span></span><br><span class="line">ipvsadm -l --stats</span><br><span class="line">输出说明：</span><br><span class="line">Conns  (connections scheduled)     已经转发过的连接数</span><br><span class="line">InPkts  (incoming packets)         入包个数</span><br><span class="line">OutPkts (outgoing packets)         出包个数</span><br><span class="line">InBytes (incoming bytes)           入流量（字节）</span><br><span class="line">OutBytes (outgoing bytes)          出流量（字节）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看lvs集群的速率</span></span><br><span class="line">ipvsadm -l --rate</span><br><span class="line">输出说明：</span><br><span class="line">CPS   (current connection rate)    每秒连接数</span><br><span class="line">InPPS  (current <span class="keyword">in</span> packet rate)    每秒的入包个数</span><br><span class="line">OutPPS  (current out packet rate)  每秒的出包个数</span><br><span class="line">InBPS  (current <span class="keyword">in</span> byte rate)      每秒入流量（字节）</span><br><span class="line">OutBPS  (current out byte rate)    每秒入流量（字节）</span><br></pre></td></tr></table></figure><h2 id="五、案例篇"><a href="#五、案例篇" class="headerlink" title="五、案例篇"></a>五、案例篇</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>服务器系统：centos7.4</th><th>IP</th><th>主机名</th></tr></thead><tbody><tr><td>虚拟VIP</td><td>192.168.1.100</td><td>null</td></tr><tr><td>调度服务器DS</td><td>192.168.1.1</td><td>ds</td></tr><tr><td>两台真实服务器RS</td><td>192.168.1.2、192.168.1.3</td><td>rs1、rs2</td></tr><tr><td>Client</td><td>192.168.1.4</td><td>client</td></tr></tbody></table><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname ds &amp;&amp; <span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname rs1 &amp;&amp; <span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname rs2 &amp;&amp; <span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname client &amp;&amp; <span class="built_in">logout</span></span><br></pre></td></tr></table></figure><h3 id="LVS-DR模式案例"><a href="#LVS-DR模式案例" class="headerlink" title="LVS-DR模式案例"></a>LVS-DR模式案例</h3><blockquote><p>centos7默认已经将ipvs编译进内核模块，名称为ip_vs,使用时候需要先加载该内核模块。</p></blockquote><p><strong>以下步骤需要在DS上进行：</strong></p><p>1.加载ip_vs模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ds ~]<span class="comment"># modprobe ip_vs      #加载ip_vs模块</span></span><br><span class="line"></span><br><span class="line">[root@ds ~]<span class="comment"># cat /proc/net/ip_vs   #查看是否加载成功</span></span><br><span class="line"></span><br><span class="line">[root@ds ~]<span class="comment"># lsmod | grep ip_vs    #查看加载的模块</span></span><br><span class="line"></span><br><span class="line">[root@ds ~]<span class="comment"># yum -y install ipvsadm  #安装管理工具</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6udw1opj318q08eqcn.jpg" alt="image-20210711183321501"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6um6cqoj318k08s10i.jpg" alt="image-20210711183333392"></p><p>2.配置调度脚本dr.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@ds ~]<span class="comment"># vim /opt/ds.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">VIP=192.168.1.100   <span class="comment">#虚拟IP</span></span><br><span class="line">RIP1=192.168.1.2    <span class="comment">#真实服务器IP1</span></span><br><span class="line">RIP2=192.168.1.3    <span class="comment">#真实服务器IP2</span></span><br><span class="line">PORT=80             <span class="comment">#端口</span></span><br><span class="line">ifconfig ens32:1 <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask 255.255.255.255 up   <span class="comment">#添加VIP</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward             <span class="comment">#开启路由转发</span></span><br><span class="line">route add -host <span class="variable">$VIP</span> dev ens32:1                   <span class="comment">#添加VIP路由</span></span><br><span class="line">/sbin/ipvsadm -C                                   <span class="comment">#清空ipvs中的规则</span></span><br><span class="line">/sbin/ipvsadm -A -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -s wrr              <span class="comment">#添加调度器</span></span><br><span class="line">/sbin/ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -r <span class="variable">$RIP1</span> -g -w 1    <span class="comment">#添加RS1</span></span><br><span class="line">/sbin/ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -r <span class="variable">$RIP2</span> -g -w 1    <span class="comment">#添加RS2</span></span><br><span class="line">/sbin/ipvsadm -ln                                  <span class="comment">#查看规则 </span></span><br></pre></td></tr></table></figure><p>3.执行脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ds ~]<span class="comment"># bash /opt/ds.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd6x4d9x2j318o0dg15k.jpg" alt="image-20210711183559298"></p><p><strong>以下步骤需要在RS上执行：（再次只列举RS1）</strong> </p><p>1.真实服务配置脚本rs.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@rs1 ~]<span class="comment"># vim /opt/rs.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">VIP=192.168.1.100 <span class="comment">#DS上VIP地址</span></span><br><span class="line"><span class="comment">#下面是关闭内核arp响应，永久修改配置参数到/etc/sysctl.conf，目的是为了让ds顺利发送mac地址给客户端</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">ifconfig lo:0 <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask 255.255.255.255 up   <span class="comment">#绑定VIP到DS服务器上</span></span><br><span class="line">/sbin/route add -host <span class="variable">$VIP</span> dev lo:0                            <span class="comment">#添加VIP路由</span></span><br></pre></td></tr></table></figure><p>2.执行脚本</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@rs1</span> ~]<span class="meta"># bash /opt/rs.sh</span></span><br></pre></td></tr></table></figure><p>3.安装测试web服务（以一台为示例）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalds                       <span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalds                    <span class="comment">#禁止开机启动</span></span><br><span class="line">yum -y install httpd                           <span class="comment">#安装httpd</span></span><br><span class="line">systemctl start httpd;systemctl <span class="built_in">enable</span> httpd   <span class="comment">#启动httpd服务</span></span><br></pre></td></tr></table></figure><p><strong>RS1主机配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@rs1 ~]<span class="comment"># vi /etc/httpd/conf/httpd.conf</span></span><br><span class="line">ServerName 192.168.1.2:80</span><br><span class="line">:wq</span><br><span class="line">[root@rs1 ~]<span class="comment"># echo &quot;RS1 192.168.1.2&quot; &gt; /var/www/html/index.html</span></span><br></pre></td></tr></table></figure><p><strong>RS2主机配置</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@rs2 ~]<span class="comment"># vi /etc/httpd/conf/httpd.conf</span></span><br><span class="line">ServerName 192.168.1.3:80</span><br><span class="line">:wq</span><br><span class="line">[root@rs2 ~]<span class="comment"># echo &quot;RS2 192.168.1.3&quot; &gt; /var/www/html/index.html</span></span><br></pre></td></tr></table></figure><p>4.在客户端上测试, 调度算法是轮训，所以结果是交替出现 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># for i in &#123;1..10&#125; ;do curl http://192.168.1.100 ;done</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd70zzqokj318m0hqk3f.jpg" alt="image-20210711183942630"></p><h3 id="LVS-NAT案例"><a href="#LVS-NAT案例" class="headerlink" title="LVS-NAT案例"></a>LVS-NAT案例</h3><blockquote><p>LVS-NAT模式和DR区别要做nat，并且请求和响应都要经过DS，所以需要将RS网关指向DS,由于之前测试过DR模式，在测试NAT模式时候需要将RS环境恢复，RS恢复步骤如下：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore     </span><br><span class="line"><span class="built_in">echo</span> 0 &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 0 &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 0 &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">ifconfig lo:0 down</span><br></pre></td></tr></table></figure><p>调度服务DS配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@ds ~]<span class="comment"># vim /opt/ds.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">VIP=192.168.1.100 <span class="comment">#虚拟IP</span></span><br><span class="line">RIP1=192.168.1.2  <span class="comment">#真实服务器IP1</span></span><br><span class="line">RIP2=192.168.1.3  <span class="comment">#真实服务器IP2</span></span><br><span class="line">PORT=80           <span class="comment">#端口</span></span><br><span class="line">ifconfig ens32:1 <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask 255.255.255.255 up  <span class="comment">#添加VIP</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward           <span class="comment">#开启转发</span></span><br><span class="line">route add -host <span class="variable">$VIP</span> dev ens32:1                 <span class="comment">#添加VIP路由</span></span><br><span class="line">/sbin/ipvsadm -C                                 <span class="comment">#清空ipvs中的规则</span></span><br><span class="line">/sbin/ipvsadm -A -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -s wlc            <span class="comment">#添加调度器</span></span><br><span class="line">/sbin/ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -r <span class="variable">$RIP1</span> -m -w 1  <span class="comment">#添加RS1</span></span><br><span class="line">/sbin/ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -r <span class="variable">$RIP2</span> -m -w 1  <span class="comment">#添加RS2</span></span><br><span class="line">/sbin/ipvsadm -ln                                <span class="comment">#查看规则</span></span><br></pre></td></tr></table></figure><p><strong>RS配置（两台配置相同）</strong></p><blockquote><p>nat模式RS配置很简单，只需要将RS的网关指向DS</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@rs1 ~]<span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens32</span></span><br><span class="line">GATEWAY=192.168.1.100                       <span class="comment">#修改网关至DS的VIP地址</span></span><br><span class="line">:wq</span><br><span class="line">[root@rs1 ~]<span class="comment"># systemctl restart network     #重启网络</span></span><br></pre></td></tr></table></figure><p>由于这里的环境DS和RS在同一个网段下，NAT模式下如果客户端是同网段情况下，RS响应的时候直接响应给同网段的服务器了并不经过DS，这样就导致客户端会丢弃该请求。如果想要同网段的想要访问到DS则需要添加路由，这里需要RS在响应同网段服务器时候将网关指向DS，这样同网段就能访问到DS了，示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rs1 ~]<span class="comment"># route add -net 192.168.1.0/24 gw 192.168.1.100</span></span><br></pre></td></tr></table></figure><p><strong>客户端测试</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># for i in &#123;1..10&#125; ; do curl http://192.168.1.100 ;done</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsd736y5f8j318m0gywq4.jpg" alt="image-20210711184149046"></p><h2 id="六、持久连接"><a href="#六、持久连接" class="headerlink" title="六、持久连接"></a>六、持久连接</h2><h3 id="什么是持久连接"><a href="#什么是持久连接" class="headerlink" title="什么是持久连接"></a>什么是持久连接</h3><p>在LVS中，持久连接是为了用来保证当来自同一个用户的请求时能够定位到同一台服务器，目的是为了会话保持，而通常使用的会话保持技术手段就是cookie与session。</p><h3 id="cookie与session简述"><a href="#cookie与session简述" class="headerlink" title="cookie与session简述"></a>cookie与session简述</h3><p>在Web服务通信中，HTTP本身是无状态协议，不能标识用户来源，当用户在访问A网页，再从A网页访问其他资源跳转到了B网页，这对于服务器来说又是一个新的请求，之前的登陆信息都没有了，怎么办？为了记录用户的身份信息，开发者在浏览器和服务器之间提供了cookie和session技术，简单说来在你浏览网页时候，服务器建立session用于保存你的身份信息，并将与之对应的cookie信息发送给浏览器，浏览器保存cookie，当你再次浏览该网页时候，服务器检查你的浏览器中的cookie并获取与之对应的session数据，这样一来你上次浏览网页的数据依然存在。</p><h3 id="四层均衡负载导致的问题"><a href="#四层均衡负载导致的问题" class="headerlink" title="四层均衡负载导致的问题"></a>四层均衡负载导致的问题</h3><p>由于cookie和session技术是基于应用层（七层）,而LVS工作在4层，只能根据IP地址和端口进行转发，不能根据应用层信息进行转发，所以就存在了问题。比如LVS集群RS是三台，A用户登陆后请求在由第一台处理，而A用户跳转到了另一个页面请求经过DS转发到第二台服务器，但是此时这台服务器上并没有session，用户的信息就没有了，显然这是不能接受的。为了避免上述的问题，<strong>一般的解决方案有三种：</strong></p><ol><li><p>将来自于同一个用户的请求发往同一个服务器(例如nginx的ip_hash算法)；</p></li><li><p>将session信息在服务器集群内共享，每个服务器都保存整个集群的session信息；</p></li><li><p>建立一个session存，所有session信息都保存到存储池中 ；</p></li></ol><p><strong>LVS会话保持实现方式就是通过将来自于同一个用户的请求发往同一个服务器，具体实现分为sh算法和持久连接：</strong></p><p><strong>sh算法：</strong>使用SH算法，SH算法在内核中会自动维护一个哈希表，此哈希表中用每一个请求的源IP地址经过哈希计算得出的值作为键，把请求所到达的RS的地址作为值。在后面的请求中，每一个请求会先经过此哈希表，如果请求在此哈希表中有键值，那么直接定向至特定RS，如没有，则会新生成一个键值，以便后续请求的定向。但是此种方法在时间的记录上比较模糊（依据TCP的连接时长计算），而且其是算法本身，所以无法与算法分离，并不是特别理想的方法。</p><p><strong>持久连接：</strong>此种方法实现了无论使用哪一种调度方法，持久连接功能都能保证在指定时间范围之内，来自于同一个IP的请求将始终被定向至同一个RS，还可以把多种服务绑定后统一进行调度。 </p><p><strong>详细一点说来：</strong>当用户请求到达director时。无论使用什么调度方法，都可以实现对同一个服务的请求在指定时间范围内始终定向为同一个RS。在director内有一个LVS持久连接模板，模板中记录了每一个请求的来源、调度至的RS、维护时长等等，所以，在新的请求进入时，首先在此模板中检查是否有记录（有内置的时间限制，比如限制是300秒，当在到达300秒时依然有用户访问，那么持久连接模板就会将时间增加两分钟，再计数，依次类推，每次只延长2分钟），如果该记录未超时，则使用该记录所指向的RS，如果是超时记录或者是新请求，则会根据调度算法先调度至特定RS，再将调度的记录添加至此表中。这并不与SH算法冲突，lvs持久连接会在新请求达到时，检查后端RS的负载状况，这就是比较精细的调度和会话保持方法。</p><h3 id="LVS的三种持久连接方式"><a href="#LVS的三种持久连接方式" class="headerlink" title="LVS的三种持久连接方式"></a>LVS的三种持久连接方式</h3><p><strong>PCC</strong>：每客户端持久；将来自于同一个客户端的所有请求统统定向至此前选定的RS；也就是只要IP相同，分配的服务器始终相同。</p><p><strong>PPC</strong>：每端口持久；将来自于同一个客户端对同一个服务(端口)的请求，始终定向至此前选定的RS。例如：来自同一个IP的用户第一次访问集群的80端口分配到A服务器，25号端口分配到B服务器。当之后这个用户继续访问80端口仍然分配到A服务器，25号端口仍然分配到B服务器。</p><p><strong>PFMC</strong>：持久防火墙标记连接；将来自于同一客户端对指定服务(端口)的请求，始终定向至此选定的RS；不过它可以将两个毫不相干的端口定义为一个集群服务，例如：合并http的80端口和https的443端口定义为同一个集群服务，当用户第一次访问80端口分配到A服务器，第二次访问443端口时仍然分配到A服务器。 </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>LVS的持久连接功能需要定义在集群服务上面，使用-p timeout选项。</p></blockquote><p><strong>PPC</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ipvsadm -At 192.168.1.100:80 -s rr -p 300</span></span><br><span class="line"><span class="comment"># 上面命令的意思是：添加一个集群服务为192.168.1.100:80，使用的调度算法为rr，持久连接的保持时间是300秒。当超过300秒都没有请求时，则清空LVS的持久连接模板。</span></span><br></pre></td></tr></table></figure><p><strong>PCC：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ipvsadm -A -t 192.168.1.100:0 -s rr -p 600</span></span><br><span class="line"><span class="comment"># ipvsadm -a -t 192.168.1.100:0 -r 192.168.1.2 -g -w 2</span></span><br><span class="line"><span class="comment"># ipvsadm -a -t 192.168.1.100:0 -r 0.1.210.53 -g -w 1</span></span><br></pre></td></tr></table></figure><p><strong>PFMC：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######PNMPP是通过路由前给数据包打标记来实现的</span></span><br><span class="line"><span class="comment"># iptables -t mangle -A PREROUTING -d 192.168.1.100 -ens192 -p tcp --dport 80 -j MARK --set-mark 3</span></span><br><span class="line"><span class="comment"># iptables -t mangle -A PREROUTING -d 192.168.1.100 -ens192 -p tcp --dport 443 -j MARK --set-mark 3</span></span><br><span class="line"><span class="comment"># ipvsadm -A -f 3 -s rr -p 600</span></span><br><span class="line"><span class="comment"># ipvsadm -a -f 3 -r 192.168.1.2 -g -w 2</span></span><br><span class="line"><span class="comment"># ipvsadm -a -f 3 -r 192.168.1.2 -g -w 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云</title>
      <link href="/2021/07/04/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
      <url>/2021/07/04/%E9%98%BF%E9%87%8C%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="阿里云实战"><a href="#阿里云实战" class="headerlink" title="阿里云实战"></a>阿里云实战</h1><h2 id="一、云的概念"><a href="#一、云的概念" class="headerlink" title="一、云的概念"></a>一、云的概念</h2><h3 id="1-1、什么是云"><a href="#1-1、什么是云" class="headerlink" title="1.1、什么是云"></a>1.1、什么是云</h3><blockquote><p>云是一种“按需付费的模式”，这种模式提供了（计算、存储、网络等资源），这些资源能过被快速提供。</p></blockquote><h3 id="1-2、云的分类"><a href="#1-2、云的分类" class="headerlink" title="1.2、云的分类"></a>1.2、云的分类</h3><table><thead><tr><th>公有云</th><th>私有云</th><th>混合云</th></tr></thead><tbody><tr><td>只有使用权，按需付费，技术层面、数据不安全。</td><td>自建机房，自己搭建，自行管理；局限: 资源固定。</td><td>主要业务放私有云，当有临时需求的时候使用公有云，使用结柬后释放。</td></tr></tbody></table><h3 id="1-3、为什么要用云"><a href="#1-3、为什么要用云" class="headerlink" title="1.3、为什么要用云"></a>1.3、为什么要用云</h3><blockquote><ol><li><p>海量资源池灵活调配</p></li><li><p>无处不在的网络访问</p></li><li><p>随需应变的自助服务[包年包月|按需付费]</p></li><li><p>保证服务的高可用性</p></li><li><p>能实现快速弹性伸缩</p></li></ol></blockquote><h3 id="1-4、云有哪些厂商"><a href="#1-4、云有哪些厂商" class="headerlink" title="1.4、云有哪些厂商"></a>1.4、云有哪些厂商</h3><table><thead><tr><th>国内</th><th>国外</th></tr></thead><tbody><tr><td>阿里云</td><td>AWS（亚马逊）</td></tr><tr><td>腾讯云</td><td>AZURE（微软云）</td></tr><tr><td>华为云</td><td>GCP（谷歌云）</td></tr><tr><td>等等……</td><td>等等</td></tr></tbody></table><h3 id="1-5、云的产品名称"><a href="#1-5、云的产品名称" class="headerlink" title="1.5、云的产品名称"></a>1.5、云的产品名称</h3><table><thead><tr><th>名词</th><th>含义</th></tr></thead><tbody><tr><td>安全组</td><td>防火墙规则</td></tr><tr><td>VPC</td><td>虚拟局域网</td></tr><tr><td>EIP</td><td>弹性公网IP</td></tr><tr><td>NAS/OSS</td><td>存储服务</td></tr><tr><td>ECS</td><td>云服务器</td></tr><tr><td>SLB</td><td>负载均衡</td></tr><tr><td>RDS</td><td>云数据库</td></tr><tr><td>ESS</td><td>弹性伸缩</td></tr><tr><td>MQ</td><td>消息队列</td></tr><tr><td>CDN</td><td>网站加速</td></tr><tr><td>等等……</td><td>等等……</td></tr></tbody></table><ul><li><p><strong>实例</strong>        相当于一台服务器或者一个功能，每个实例都有自己的名称/ID</p></li><li><p><strong>释放</strong>        删除某个实例     </p></li></ul><h3 id="1-6、云服务器-VS-物理服务器"><a href="#1-6、云服务器-VS-物理服务器" class="headerlink" title="1.6、云服务器 VS 物理服务器"></a>1.6、云服务器 VS 物理服务器</h3><ul><li><p><strong>物理服务器：机架式服务器 2U 戴尔 成本高</strong></p><ul><li><p>成本：</p><ol><li>服务器钱</li><li>IDC机房（租）</li><li>带宽（300-500RMB/MB/月）</li></ol></li><li><p>应用：</p><ol><li>用于公司数据库</li><li>公司内部用于搭建内部测试环境</li></ol></li></ul></li><li><p><strong>云服务器：根据用户的需求 可以进行配置 升级 更换配置</strong></p><ul><li>特点：<ol><li>公司刚刚创建（创业公司）</li><li>公司整体数据量不大的时候用</li><li>云服务器 用户 数据 配置 越高，会比物理机还贵</li></ol></li><li>应用：<ol><li>初创公司 – 云服务器</li><li>大中型公司 – 物理服务器 + 云服务器</li></ol></li></ul></li></ul><h2 id="二、阿里云架构图"><a href="#二、阿里云架构图" class="headerlink" title="二、阿里云架构图"></a>二、阿里云架构图</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50ay49wfj31640u07wh.jpg" alt="image-20210704164218603"></p><h2 id="三、地域-可用区"><a href="#三、地域-可用区" class="headerlink" title="三、地域 / 可用区"></a>三、地域 / 可用区</h2><h3 id="3-1、地域：服务器的所属城市"><a href="#3-1、地域：服务器的所属城市" class="headerlink" title="3.1、地域：服务器的所属城市"></a>3.1、地域：服务器的所属城市</h3><blockquote><p>华北1（北京）</p><p>华北2（邯郸）</p><p>华南1（上海）</p><p>华南2（深圳）</p><p>等等等……</p></blockquote><h3 id="3-2、可用区：服务器所在城市的某个机房"><a href="#3-2、可用区：服务器所在城市的某个机房" class="headerlink" title="3.2、可用区：服务器所在城市的某个机房"></a>3.2、可用区：服务器所在城市的某个机房</h3><blockquote><p>华北1<br>可用区A     可用区B     可用区C     ……</p><p>华北2<br>可用区A     可用区B     可用区C     ……</p></blockquote><h3 id="3-3、注意事项"><a href="#3-3、注意事项" class="headerlink" title="3.3、注意事项"></a>3.3、注意事项</h3><blockquote><ul><li><p><strong>相同地域：不同的可用区之间内网是互通的</strong></p></li><li><p><strong>不同地域：可用区之间内网是相互隔离的</strong></p></li></ul></blockquote><h3 id="3-4、不同地域的可用区之间如何做到内网通信"><a href="#3-4、不同地域的可用区之间如何做到内网通信" class="headerlink" title="3.4、不同地域的可用区之间如何做到内网通信"></a>3.4、不同地域的可用区之间如何做到内网通信</h3><ul><li><strong>经典网络可以通过云市场购买VPN产品，帮助你不同地域打通。</strong></li><li><strong>如果你是VPC网络环境，那就直接购买阿里云的<a href="https://help.aliyun.com/document_detail/44842.html">高速通道</a>，配置即可。</strong></li></ul><h2 id="四、阿里云计费方式"><a href="#四、阿里云计费方式" class="headerlink" title="四、阿里云计费方式"></a>四、阿里云计费方式</h2><h3 id="4-1、包年包月、按量付费、抢占式实例"><a href="#4-1、包年包月、按量付费、抢占式实例" class="headerlink" title="4.1、包年包月、按量付费、抢占式实例"></a>4.1、包年包月、按量付费、抢占式实例</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50bx7mezj31ow0osx61.jpg" alt="image-20210704164322288"></p><h3 id="4-2、公网流量计费方式"><a href="#4-2、公网流量计费方式" class="headerlink" title="4.2、公网流量计费方式"></a>4.2、公网流量计费方式</h3><table><thead><tr><th>按固定带宽</th><th>公司使用，访问量大，包年包月付费</th></tr></thead><tbody><tr><td><strong>按使用流量</strong></td><td><strong>个人网站，访问量小，0.8元/1GB</strong></td></tr></tbody></table><h2 id="五、基本演练（重点）"><a href="#五、基本演练（重点）" class="headerlink" title="五、基本演练（重点）"></a>五、基本演练（重点）</h2><h3 id="5-1、创建资源组"><a href="#5-1、创建资源组" class="headerlink" title="5.1、创建资源组"></a>5.1、创建资源组</h3><h4 id="5-1-1、登陆阿里云账号—点击控制台"><a href="#5-1-1、登陆阿里云账号—点击控制台" class="headerlink" title="5.1.1、登陆阿里云账号—点击控制台"></a>5.1.1、登陆阿里云账号—点击控制台</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50e2iid5j31bw0u04qp.jpg" alt="image-20210704164415490"></p><h4 id="5-1-2、资源组那块点击-查看全部"><a href="#5-1-2、资源组那块点击-查看全部" class="headerlink" title="5.1.2、资源组那块点击 查看全部"></a>5.1.2、资源组那块点击 查看全部</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50dy333dj31ns0o047g.jpg" alt="image-20210704164439193"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50dvqgb3j31bc0cmq80.jpg" alt="image-20210704164505191"></p><h4 id="5-1-3、创建资源组"><a href="#5-1-3、创建资源组" class="headerlink" title="5.1.3、创建资源组"></a>5.1.3、创建资源组</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50eee6wdj31ba0r6k2x.jpg" alt="image-20210704164547876"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50faingaj30i210mdht.jpg" alt="image-20210704164631219"></p><h3 id="5-2、创建VPC专有网络（局域网）"><a href="#5-2、创建VPC专有网络（局域网）" class="headerlink" title="5.2、创建VPC专有网络（局域网）"></a>5.2、创建VPC专有网络（局域网）</h3><h4 id="5-2-1、产品与服务中找到-专有网络VPC"><a href="#5-2-1、产品与服务中找到-专有网络VPC" class="headerlink" title="5.2.1、产品与服务中找到 专有网络VPC"></a>5.2.1、产品与服务中找到 专有网络VPC</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50gocrwgj31bi0r6tgf.jpg" alt="image-20210704164759059"></p><h4 id="5-2-2、创建专有网络"><a href="#5-2-2、创建专有网络" class="headerlink" title="5.2.2、创建专有网络"></a>5.2.2、创建专有网络</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50hpuh8ej31b80mu7dv.jpg" alt="image-20210704164816853"></p><h4 id="5-2-3、配置-专有网络、交换机"><a href="#5-2-3、配置-专有网络、交换机" class="headerlink" title="5.2.3、配置 专有网络、交换机"></a>5.2.3、配置 专有网络、交换机</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50hmg3m2j30wy0u0dmh.jpg" alt="image-20210704164852971"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50iiy3aij30u00w9dml.jpg" alt="image-20210704164944807"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50j629mzj30u00z6tdf.jpg" alt="image-20210704165023378"></p><h4 id="5-2-4、查看创建的专有网络VPC"><a href="#5-2-4、查看创建的专有网络VPC" class="headerlink" title="5.2.4、查看创建的专有网络VPC"></a>5.2.4、查看创建的专有网络VPC</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50jm16jrj31b80qwgxc.jpg" alt="image-20210704165048182"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50k4qmnpj31b60i0n25.jpg" alt="image-20210704165118406"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50p57u4zj31be0i80y8.jpg" alt="image-20210704165139067"></p><h3 id="5-3、创建安全组"><a href="#5-3、创建安全组" class="headerlink" title="5.3、创建安全组"></a>5.3、创建安全组</h3><h4 id="5-3-1、产品与服务找到-云服务器ECS"><a href="#5-3-1、产品与服务找到-云服务器ECS" class="headerlink" title="5.3.1、产品与服务找到 云服务器ECS"></a>5.3.1、产品与服务找到 云服务器ECS</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50p17n1wj31b60q445k.jpg" alt="image-20210704165601277"></p><h4 id="5-3-2、选择好地域"><a href="#5-3-2、选择好地域" class="headerlink" title="5.3.2、选择好地域"></a>5.3.2、选择好地域</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50pw28e0j30i213y43u.jpg" alt="image-20210704165650428"></p><h4 id="5-3-3、创建配置安全组"><a href="#5-3-3、创建配置安全组" class="headerlink" title="5.3.3、创建配置安全组"></a>5.3.3、创建配置安全组</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50qilrbqj31b40jste8.jpg" alt="image-20210704165712476"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50qsw6mzj61bq0lg43d02.jpg" alt="image-20210704165743480"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50rbu7kaj60yv0u0dpm02.jpg" alt="image-20210704165813597"></p><h3 id="5-4、创建ECS云服务器"><a href="#5-4、创建ECS云服务器" class="headerlink" title="5.4、创建ECS云服务器"></a>5.4、创建ECS云服务器</h3><ul><li><strong>前提：账户余额里最少得有100元</strong></li></ul><blockquote><p><strong>主要分五个步骤：</strong></p><ol><li>基础配置：付费模式、地域及可用区、实例配置/数量、系统镜像、存储</li><li>网络很安全组：网络、公网IP、安全组、IPV6</li><li>系统配置：登陆凭证、实例名称、主机名称、RAM角色</li><li>分组设置：标签、资源组、部署集、专有宿主机</li><li>确认下单—即可</li></ol></blockquote><h4 id="5-4-1、创建ECS实例"><a href="#5-4-1、创建ECS实例" class="headerlink" title="5.4.1、创建ECS实例"></a>5.4.1、创建ECS实例</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50ry4e2mj31910u0guq.jpg" alt="image-20210704165848972"></p><h4 id="5-4-2、基本配置"><a href="#5-4-2、基本配置" class="headerlink" title="5.4.2、基本配置"></a>5.4.2、基本配置</h4><ul><li><strong>选择好 地域/可用区、付费模式、实例配置、实例数量、镜像、存储、点击下一步网络和安全组</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50sj78jtj31ay0b8n2y.jpg" alt="image-20210704165922846"></p><h4 id="5-4-3、网络和安全组"><a href="#5-4-3、网络和安全组" class="headerlink" title="5.4.3、网络和安全组"></a>5.4.3、网络和安全组</h4><ul><li><strong>选择好 网络、交换机、是否分配公网IPV4、选择带宽计费模式 和 带宽峰值、安全组、然后点击下一步 系统配置</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50t2it4fj313e0u0k3r.jpg" alt="image-20210704165953953"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50tgx9i4j31as0p8n52.jpg" alt="image-20210704170016874"></p><h4 id="5-4-4、系统配置"><a href="#5-4-4、系统配置" class="headerlink" title="5.4.4、系统配置"></a>5.4.4、系统配置</h4><ul><li><strong>选择 登陆配置、设置root密码、实例名称、主机名称、然后点击下一步分组配置</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50ul740jj31bc0lcgsq.jpg" alt="image-20210704170113386"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50uzqvf6j31bc0oqk1l.jpg" alt="image-20210704170144726"></p><h4 id="5-4-5、分组设置"><a href="#5-4-5、分组设置" class="headerlink" title="5.4.5、分组设置"></a>5.4.5、分组设置</h4><ul><li><strong>这里就需要修改一下资源组就行了、然后点击确认订单</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50vbeqgqj31bu0emjv2.jpg" alt="image-20210704170203307"></p><h4 id="5-4-6、确认好配置信息后勾选条款创建实例"><a href="#5-4-6、确认好配置信息后勾选条款创建实例" class="headerlink" title="5.4.6、确认好配置信息后勾选条款创建实例"></a>5.4.6、确认好配置信息后勾选条款创建实例</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50vrj1hej31by0gsjxq.jpg" alt="image-20210704170229027"></p><ul><li><strong>创建成功后点击控制台查看</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50wan8zgj31100u0tlp.jpg" alt="image-20210704170300351"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50wo2dkaj613a08gtch02.jpg" alt="image-20210704170320176"></p><h3 id="5-5、远程云服务器的方式"><a href="#5-5、远程云服务器的方式" class="headerlink" title="5.5、远程云服务器的方式"></a>5.5、远程云服务器的方式</h3><h4 id="5-5-1、workbech方式"><a href="#5-5-1、workbech方式" class="headerlink" title="5.5.1、workbech方式"></a>5.5.1、workbech方式</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50xfhbjyj313j0u046b.jpg" alt="image-20210704170405449"></p><h4 id="5-5-2、VNC"><a href="#5-5-2、VNC" class="headerlink" title="5.5.2、VNC"></a>5.5.2、VNC</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50xrfo2dj314c0tqtfh.jpg" alt="image-20210704170425338"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50yb2tt8j313u0pq796.jpg" alt="image-20210704170456137"></p><h4 id="5-5-3、xshell"><a href="#5-5-3、xshell" class="headerlink" title="5.5.3、xshell"></a>5.5.3、xshell</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50zgzs5uj31b60lck1y.jpg" alt="image-20210704170545736"></p><h3 id="5-6、重置密码"><a href="#5-6、重置密码" class="headerlink" title="5.6、重置密码"></a>5.6、重置密码</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50zfryspj31bg0o4k0w.jpg" alt="image-20210704170559994"></p><h4 id="5-6-1、重置实例密码（修改root密码）"><a href="#5-6-1、重置实例密码（修改root密码）" class="headerlink" title="5.6.1、重置实例密码（修改root密码）"></a>5.6.1、重置实例密码（修改root密码）</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs50zt3uqtj30ze0u0nel.jpg" alt="image-20210704170622640"></p><h4 id="5-6-2、修改远程连接（VNC）密码"><a href="#5-6-2、修改远程连接（VNC）密码" class="headerlink" title="5.6.2、修改远程连接（VNC）密码"></a>5.6.2、修改远程连接（VNC）密码</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51067z66j61b20rkaji02.jpg" alt="image-20210704170641389"></p><ul><li><strong>验证一下VNC不重启可不可以</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs510nz4dvj317t0u0tgr.jpg" alt="image-20210704170709194"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5110irfpj31ae0d6gra.jpg" alt="image-20210704170731296"></p><h3 id="5-7、添加云盘-扩容云盘"><a href="#5-7、添加云盘-扩容云盘" class="headerlink" title="5.7、添加云盘 / 扩容云盘"></a>5.7、添加云盘 / 扩容云盘</h3><h4 id="5-7-1、添加云盘"><a href="#5-7-1、添加云盘" class="headerlink" title="5.7.1、添加云盘"></a>5.7.1、添加云盘</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs511cvswkj31be0paal1.jpg" alt="image-20210704170751845"></p><ul><li><strong>选择好创建好要挂在的ECS实例，也可以不选</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51266oqoj614k0u0k1e02.jpg" alt="image-20210704170834585"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs512l3v1mj61b80p8n3r02.jpg" alt="image-20210704170902711"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5132ziucj31ay0py7dr.jpg" alt="image-20210704170930444"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs513lym9lj31a80ton7h.jpg" alt="image-20210704170959198"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs513ss3l6j31au0d8wjr.jpg" alt="image-20210704171013120"></p><ul><li>上面仅仅只是在这台ECS服务器中加了硬盘，后面还需要我们手动分区挂在</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5147fldqj31b20qutqs.jpg" alt="image-20210704171034903"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/vdb</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs514oi286j316f0u0qon.jpg" alt="image-20210704171059099"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs514x8ktmj312f0u0e72.jpg" alt="image-20210704171117403"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># mkfs.xfs /dev/vdb1</span></span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># mkdir /data</span></span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># mount /dev/vdb1 /data/</span></span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs    devtmpfs     461M     0  461M   0% /dev</span><br><span class="line">tmpfs       tmpfs        471M     0  471M   0% /dev/shm</span><br><span class="line">tmpfs       tmpfs        471M  496K  471M   1% /run</span><br><span class="line">tmpfs       tmpfs        471M     0  471M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1   ext4          40G  1.8G   36G   5% /</span><br><span class="line">tmpfs       tmpfs         95M     0   95M   0% /run/user/0</span><br><span class="line">/dev/vdb1   xfs           20G   33M   20G   1% /data</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># vim /etc/fstab      #linux分区开机自动挂载的文件</span></span><br><span class="line">/dev/vdb1    /data      xfs      defaults        0 0</span><br></pre></td></tr></table></figure><h4 id="5-7-2、扩容云盘"><a href="#5-7-2、扩容云盘" class="headerlink" title="5.7.2、扩容云盘"></a>5.7.2、扩容云盘</h4><ul><li><strong>实例—&gt;更多—&gt;磁盘扩容</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs515eea3gj315p0u0n70.jpg" alt="image-20210704171145138"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs515s97zoj319i0i8tdd.jpg" alt="image-20210704171207926"></p><ul><li><a href="https://help.aliyun.com/document_detail/113316.html?spm=5176.2020520101.0.0.11704df50xYLcA"><strong>在线扩容须知</strong></a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5163hm91j31bg0nmgu8.jpg" alt="image-20210704171225868"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs516igjdyj31b40580v5.jpg" alt="image-20210704171248722"></p><ul><li><strong>回到xshell查看扩容是否成功</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs516xqk1jj61ba0ie13u02.jpg" alt="image-20210704171313462"></p><h3 id="5-8、阿里云快照备份及克隆"><a href="#5-8、阿里云快照备份及克隆" class="headerlink" title="5.8、阿里云快照备份及克隆"></a>5.8、阿里云快照备份及克隆</h3><ul><li>ECS 备份策略：每天/每周/每月/时间 进行拍摄快照；快照策略(计划任务)</li><li>手动拍摄快照</li><li>快照应用<ol><li>备份</li><li>克隆（自定义镜像）</li><li><a href="https://help.aliyun.com/document_detail/56159.html?spm=5176.10695662.1996646101.searchclickresult.18efd231ezNxIf">快照计费方式</a></li></ol></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs517jfee2j31bc0fcq76.jpg" alt="image-20210704171349438"></p><h4 id="5-8-1、创建快照策略"><a href="#5-8-1、创建快照策略" class="headerlink" title="5.8.1、创建快照策略"></a>5.8.1、创建快照策略</h4><ul><li><strong>点击实例ID –&gt; 选择本实例云盘 –&gt; 设置自动快照规则</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs517w6u1xj31c20g4tg5.jpg" alt="image-20210704171408527"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5189sehwj319o0jq7af.jpg" alt="image-20210704171430830"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs518q3gz1j31a60dy40v.jpg" alt="image-20210704171457472"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5196krx0j319y0gy7bx.jpg" alt="image-20210704171522618"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs519snm91j30zy0u0ttj.jpg" alt="image-20210704171554300"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51axrhlsj31ba0qkjwo.jpg" alt="image-20210704171621883"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51b1vprvj31ae0l845i.jpg" alt="image-20210704171711446"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51bf2dycj319q0imthd.jpg" alt="image-20210704171730775"></p><h4 id="5-8-2、手动拍摄快照"><a href="#5-8-2、手动拍摄快照" class="headerlink" title="5.8.2、手动拍摄快照"></a>5.8.2、手动拍摄快照</h4><ul><li><strong>创建快照之前现在ECS里安装个apache服务</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># yum -y install httpd</span></span><br><span class="line">[root@host01 ~]<span class="comment"># systemctl start httpd;systemctl enable httpd</span></span><br></pre></td></tr></table></figure><ul><li><strong>点击实例ID –&gt; 选择本实例云盘 –&gt; 创建系统盘快照</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51bz98b5j31ao0i8tf0.jpg" alt="image-20210704171804486"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51clrv04j319u0u0qdc.jpg" alt="image-20210704171840431"></p><ul><li><strong>检查快照</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51d08ifhj31ig0n4alw.jpg" alt="image-20210704171903623"></p><h4 id="5-8-3、克隆（自定义镜像）"><a href="#5-8-3、克隆（自定义镜像）" class="headerlink" title="5.8.3、克隆（自定义镜像）"></a>5.8.3、克隆（自定义镜像）</h4><ul><li><p>默认阿里是没有 克隆 的功能</p></li><li><p>根据上面系统盘快照 创建自定义镜像（克隆）</p></li><li><p>关于镜像的几个问题</p><ul><li>目前阿里 镜像 是免费使用的</li><li>创建的镜像默认只能在当前地区使用；如果实在是想在其他地区使用该镜像的话，就把当前镜像 复制到 其他地区</li></ul></li></ul><blockquote><p><strong>创建自定义镜像</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51dpgi80j31hs0n0am8.jpg" alt="image-20210704171939425"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51efrpudj31a60u0gts.jpg" alt="image-20210704172026276"></p><blockquote><ul><li><p><strong>查看自定义镜像</strong></p></li><li><p><strong>复制镜像：就是将自定义镜像 复制到 其他地域上</strong></p></li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51erfwojj31iu0man6v.jpg" alt="image-20210704172045794"></p><h4 id="5-8-4、根据自定义镜像创建ECS实例"><a href="#5-8-4、根据自定义镜像创建ECS实例" class="headerlink" title="5.8.4、根据自定义镜像创建ECS实例"></a>5.8.4、根据自定义镜像创建ECS实例</h4><blockquote><p><strong>除了镜像和设置密码那块，其他所有配置信息都和在上面创建的ECS一样</strong></p><p><strong>使用镜像预设密码 就是和上个镜像的密码一致</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51fbxy5cj31gu0fa79k.jpg" alt="image-20210704172118411"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51fqj52zj31go0i8ti4.jpg" alt="image-20210704172141280"></p><p><strong>注意：</strong>启动的时候应该是起不来的，因为我在/etc/fstab配置了一个磁盘挂在，但我这个实例并没有这个磁盘，所以会起不来系统，这个时候应该到阿里云控制台中使用 VNC 进入系统中将那句配置注释或删除掉，然后reboot重启。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51h8u8t1j31eg0ga41p.jpg" alt="image-20210704172240053"></p><p><strong>远程连接查看这个实例中有没有apache这个服务</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51hcvpcuj31ce0gkdq6.jpg" alt="image-20210704172302253"></p><h2 id="六、购买弹性公网IP（eip）"><a href="#六、购买弹性公网IP（eip）" class="headerlink" title="六、购买弹性公网IP（eip）"></a>六、购买弹性公网IP（eip）</h2><blockquote><p><strong>eip概述：就是可以将公网ip放到任何主机上使用</strong>（捆绑/解绑）</p><p><strong>使用场景：使用同一个公网IP，给不同的ECS使用</strong></p></blockquote><h3 id="6-1、创建一个没有公网IP的ECS"><a href="#6-1、创建一个没有公网IP的ECS" class="headerlink" title="6.1、创建一个没有公网IP的ECS"></a>6.1、创建一个没有公网IP的ECS</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51hxyrkrj31es0b0gs1.jpg" alt="image-20210704172348616"></p><p><strong>修改一下实例名称和主机名后 点击确认订单就可以了，而且root密码和这台ECS密码是一样的</strong></p><ul><li>可以看到下图：只有一个私网IP，没有公网</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51i8r39yj31bk02875k.jpg" alt="image-20210704172406509"></p><h3 id="6-2、创建弹性公网IP"><a href="#6-2、创建弹性公网IP" class="headerlink" title="6.2、创建弹性公网IP"></a>6.2、创建弹性公网IP</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51it32ctj31ek0kun58.jpg" alt="image-20210704172437374"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51jbi4fhj31ee0lgagy.jpg" alt="image-20210704172458851"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51jhvayaj318x0u07g1.jpg" alt="image-20210704172517211"></p><ul><li><strong>BGP边界网关协议：</strong><ul><li>北方 联通</li><li>南方 电信</li><li>机房在北方（北京）</li><li>但用户在南方 或者 海外，导致访问很慢</li><li><strong>两个解决方法：</strong><ol><li>CDN缓存加速</li><li>BGP多线</li></ol></li></ul></li><li>一个公网IP 支持多个链路（联通、电信、移动、教育网、海外 访问都快，不局限一个运营商里）</li><li>BGP多线机房：一个IP，对应多个线路</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51jxa7b7j31ek0c876r.jpg" alt="image-20210704172542597"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51kmn7f4j619e0u046k02.jpg" alt="image-20210704172622369"></p><h3 id="6-3、使用eip"><a href="#6-3、使用eip" class="headerlink" title="6.3、使用eip"></a>6.3、使用eip</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51l6cc3pj31eg0ka7cf.jpg" alt="image-20210704172652945"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51lt80hbj615p0u0ag002.jpg" alt="image-20210704172731494"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51m6z4dvj319c03yaa9.jpg" alt="image-20210704172753296"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51n14ut7j31bi022dhj.jpg" alt="image-20210704172842043"></p><ul><li><p>可以看到弹性公网IP已经绑定到这台ECS主机上了</p></li><li><p>使用xshell连接是否能用</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51n8fkkqj31b00e279e.jpg" alt="image-20210704172853897"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51nmw0zwj31bg0mitmf.jpg" alt="image-20210704172915953"></p><h2 id="七、RDS数据库产品"><a href="#七、RDS数据库产品" class="headerlink" title="七、RDS数据库产品"></a>七、RDS数据库产品</h2><ul><li>rds云数据库</li><li>他是一个功能，创建完成后，可以使用MySQL命令 或者 阿里的web界面连接RDS 进行操作</li><li>如果不想使用RDS数据库产品，也可以使用ECS + MySQL/Mariadb实现数据库功能</li></ul><h3 id="7-1、创建RDS云数据库"><a href="#7-1、创建RDS云数据库" class="headerlink" title="7.1、创建RDS云数据库"></a>7.1、创建RDS云数据库</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51o0p4nvj31ba0mowk0.jpg" alt="image-20210704172939623"></p><ul><li>点击实例列表—创建实例</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51okfcafj31bo0la44s.jpg" alt="image-20210704173010895"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51p8qunyj319i0u0do2.jpg" alt="image-20210704173048126"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51pp4l59j31b40tkaho.jpg" alt="image-20210704173115469"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51q2pf07j31bk0hwtdu.jpg" alt="image-20210704173136418"></p><ul><li><strong>设置可用区I</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51r35denj30z40u0gsi.jpg" alt="image-20210704173235433"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51rmgnh4j31be0ign1c.jpg" alt="image-20210704173306107"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51s1z7lpj31kq0ggjxx.jpg" alt="image-20210704173330975"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51trj33zj31ge0p27bz.jpg" alt="image-20210704173435021"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51tokb86j31ge0pejxu.jpg" alt="image-20210704173504576"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51u7qivkj31g00rywlj.jpg" alt="image-20210704173533544"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51ukwrr9j31l00e4dkd.jpg" alt="image-20210704173557361"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51v34atqj31f80u013m.jpg" alt="image-20210704173626056"></p><h3 id="7-2、配置RDS数据库"><a href="#7-2、配置RDS数据库" class="headerlink" title="7.2、配置RDS数据库"></a>7.2、配置RDS数据库</h3><h4 id="7-2-1、设置RDS的白名单"><a href="#7-2-1、设置RDS的白名单" class="headerlink" title="7.2.1、设置RDS的白名单"></a>7.2.1、设置RDS的白名单</h4><ul><li>产品与服务 — 云数据库RDS版 — 实例列表 — 管理</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51vs6qmxj31f60o27at.jpg" alt="image-20210704173705759"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51w50npkj31eo0o2qcm.jpg" alt="image-20210704173726338"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51wshuphj31eo0qythx.jpg" alt="image-20210704173803409"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51x5myzoj31ee0mk44y.jpg" alt="image-20210704173825086"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51y0wfq1j30u00vhgtj.jpg" alt="image-20210704173908827"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51ykj5sxj31bg0goq7n.jpg" alt="image-20210704173946941"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51yzkmndj31bm0oi7d1.jpg" alt="image-20210704174009707"></p><h4 id="7-2-2、创建RDS用户"><a href="#7-2-2、创建RDS用户" class="headerlink" title="7.2.2、创建RDS用户"></a>7.2.2、创建RDS用户</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs51zjiupxj31bg0ce0vv.jpg" alt="image-20210704174042602"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52026w7ej612x0u00zt02.jpg" alt="image-20210704174111872"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs520ohindj31ao0cydj3.jpg" alt="image-20210704174149472"></p><h3 id="7-3、连接RDS数据库方法"><a href="#7-3、连接RDS数据库方法" class="headerlink" title="7.3、连接RDS数据库方法"></a>7.3、连接RDS数据库方法</h3><h4 id="7-3-1、MySQL命令连接"><a href="#7-3-1、MySQL命令连接" class="headerlink" title="7.3.1、MySQL命令连接"></a>7.3.1、MySQL命令连接</h4><ul><li>随便在上面我们创建的任意一台ECS中安装一下MySQL客户端</li><li>安装MySQL的目的是为了使用MySQL命令连接我们创建好的RDS云数据库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 ~]<span class="comment"># yum -y install mysql</span></span><br></pre></td></tr></table></figure><ul><li>进入ECS中连接RDS数据库</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52159y7fj61bk08ktc402.jpg" alt="image-20210704174215604"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs521ig9nij31bm0cy13c.jpg" alt="image-20210704174235105"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 ~]<span class="comment"># mysql -uroot -p -h rm-bp11cj60hrbf0538s.mysql.rds.aliyuncs.com       //登陆RDS数据库</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 764</span><br><span class="line">Server version: 5.7.26-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show databases;        //查看一下有什么数据库</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select user,host from mysql.user;      //查看一下有什么用户</span><br><span class="line">+---------------+----------------+</span><br><span class="line">| user          | host           |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">| aurora        | %              |</span><br><span class="line">| aurora_proxy  | %              |</span><br><span class="line">| root          | %              |</span><br><span class="line">| replicator    | 11.112.240.170 |</span><br><span class="line">| aliyun_root   | 127.0.0.1      |</span><br><span class="line">| mysql.session | localhost      |</span><br><span class="line">| mysql.sys     | localhost      |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show grants <span class="keyword">for</span> aliyun_root@127.0.0.1 \G       //查看一下aliyun_root用户权限</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Grants <span class="keyword">for</span> aliyun_root@127.0.0.1: GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;aliyun_root&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> WITH GRANT OPTION</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show grants <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>\G   //查看我自己创建的用户root权限</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Grants <span class="keyword">for</span> root@%: GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> WITH GRANT OPTION</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="7-3-2、web界面连接RDS数据库"><a href="#7-3-2、web界面连接RDS数据库" class="headerlink" title="7.3.2、web界面连接RDS数据库"></a>7.3.2、web界面连接RDS数据库</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5222ilqwj31c00oidoi.jpg" alt="image-20210704174301646"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs522pesglj31760dwwky.jpg" alt="image-20210704174338223"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52310qtpj315q0qck02.jpg" alt="image-20210704174404807"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs523gmj5bj31dm0qqtnk.jpg" alt="image-20210704174429578"></p><h2 id="八、NAS文件存储"><a href="#八、NAS文件存储" class="headerlink" title="八、NAS文件存储"></a>八、NAS文件存储</h2><h3 id="8-1、NAS概述"><a href="#8-1、NAS概述" class="headerlink" title="8.1、NAS概述"></a>8.1、NAS概述</h3><ul><li><strong>NAS  ：分三种类型</strong><ul><li>通用型</li><li>极速型</li><li>文件存储 CPFS</li></ul></li><li><strong>NAS有两种协议类型</strong><ul><li>NFS只支持linux之间的挂在</li><li>SMB既支持linux也支持windows</li></ul></li><li><strong>NAS的使用流程：</strong><ul><li>创建文件系统（相当于安装NFS/Samba软件）</li><li>创建权限组（对这个挂在点的读写权限）</li><li>创建挂载点（进行配置）</li><li>进行挂在（mount）</li></ul></li></ul><h3 id="8-2、创建NAS文件系统"><a href="#8-2、创建NAS文件系统" class="headerlink" title="8.2、创建NAS文件系统"></a>8.2、创建NAS文件系统</h3><ul><li>产品与服务 — 文件存储NAS</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52hj4hfrj31ao0nan2v.jpg" alt="image-20210704175800026"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52iggh73j30u00zftmb.jpg" alt="image-20210704175852701"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52ixrlzpj317n0u0dmq.jpg" alt="image-20210704175912838"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52jhsscrj31bm0tojvt.jpg" alt="image-20210704175953192"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52juwokyj316e09ugnu.jpg" alt="image-20210704180014922"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52k65oq8j31c00hitez.jpg" alt="image-20210704180027889"></p><h3 id="8-3、创建权限组"><a href="#8-3、创建权限组" class="headerlink" title="8.3、创建权限组"></a>8.3、创建权限组</h3><ul><li>创建只读挂载点</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52khehatj31aw0ieag6.jpg" alt="image-20210704180048080"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52l5uf95j313g0u079g.jpg" alt="image-20210704180127050"></p><h3 id="8-4、创建只读挂载点"><a href="#8-4、创建只读挂载点" class="headerlink" title="8.4、创建只读挂载点"></a>8.4、创建只读挂载点</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52lv4k9qj31au0jc0za.jpg" alt="image-20210704180209300"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52m79n0ij316b0u0gs4.jpg" alt="image-20210704180228913"></p><h3 id="8-5、查看所有挂载点"><a href="#8-5、查看所有挂载点" class="headerlink" title="8.5、查看所有挂载点"></a>8.5、查看所有挂载点</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52mhyh2tj31bq0lm10t.jpg" alt="image-20210704180246947"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52n3lu3gj31ns0tsgvv.jpg" alt="image-20210704180319641"></p><h3 id="8-6、使用NAS"><a href="#8-6、使用NAS" class="headerlink" title="8.6、使用NAS"></a>8.6、使用NAS</h3><ul><li>这里挂载点我就直接使用默认的了</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52nh2arlj31nk0ckdlz.jpg" alt="image-20210704180343879"></p><ul><li>先测试是一下ECS能不能ping通这个挂载点</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52ntqn9zj31mw0f6wqw.jpg" alt="image-20210704180402190"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52o7y4mxj31n20ew16u.jpg" alt="image-20210704180424888"></p><ul><li>挂在NAS存储</li><li>注：需要先安装一下nfs-utile这个包，不然系统识别不了！！！</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ECS_01进行挂在</span></span><br><span class="line">[root@host01 ~]<span class="comment"># yum -y install nfs-utils</span></span><br><span class="line">[root@host01 ~]<span class="comment"># mkdir /nfs_data           //创建挂载点目录</span></span><br><span class="line">[root@host01 ~]<span class="comment"># mount -t nfs 0f2ad48dec-dyt61.cn-hangzhou.nas.aliyuncs.com:/  /nfs_data/    //挂载NAS存储</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ECS_02进行挂在</span></span><br><span class="line">[root@host2 ~]<span class="comment"># yum -y install nfs-utils</span></span><br><span class="line">[root@host2 ~]<span class="comment"># mkdir /nfs_data            //创建挂载点目录</span></span><br><span class="line">[root@host2 ~]<span class="comment"># mount -t nfs 0f2ad48dec-dyt61.cn-hangzhou.nas.aliyuncs.com:/  /nfs_data/    //挂载NAS存储</span></span><br></pre></td></tr></table></figure><ul><li>查看是否挂在成功</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52ons071j31n60e011q.jpg" alt="image-20210704180447792"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52ov06fdj31n60fawo3.jpg" alt="image-20210704180503881"></p><ul><li>到web页面查看一下已挂载的客户端</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52p7xyajj61ma0jatim02.jpg" alt="image-20210704180523924"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52pgwggfj31f30u0dm6.jpg" alt="image-20210704180538331"></p><ul><li>卸掉挂载点</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># umount /nfs_data</span></span><br><span class="line">[root@host2 ~]<span class="comment"># umount /nfs_data</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52puvnx9j31l60koqhu.jpg" alt="image-20210704180601336"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52q2mtmzj31lw0j6tmc.jpg" alt="image-20210704180611783"></p><h2 id="九、OSS对象存储"><a href="#九、OSS对象存储" class="headerlink" title="九、OSS对象存储"></a>九、OSS对象存储</h2><h3 id="9-1、OSS-vs-NAS"><a href="#9-1、OSS-vs-NAS" class="headerlink" title="9.1、OSS  vs  NAS"></a>9.1、OSS  vs  NAS</h3><table><thead><tr><th><strong>存储</strong></th><th><strong>场景</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>NAS文件存储</td><td>数据量不大，并发量不高，存储空间有限</td><td>类型有nfs/smb ，创建nas文件系统，挂载使用</td></tr><tr><td>OSS对象存储</td><td>数据量很大，并发量很高，存储空间无限</td><td>配置好后，给开发人员(access id 和 access secret)在代码中使用</td></tr></tbody></table><h3 id="9-2、创建OSS存储（Bucket）"><a href="#9-2、创建OSS存储（Bucket）" class="headerlink" title="9.2、创建OSS存储（Bucket）"></a>9.2、创建OSS存储（Bucket）</h3><ul><li>产品与服务 — 对象存储OSS</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52rovd8uj31jy0nmwkr.jpg" alt="image-20210704180746270"></p><ul><li>创建Bucket对象存储</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52rj5ophj31k80e4q7q.jpg" alt="image-20210704180736968"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52s9vixgj315b0u0an0.jpg" alt="image-20210704180820291"></p><ul><li><a href="https://help.aliyun.com/document_detail/51374.html?spm=5176.8465980.0.0.4e701450VJbX3I"><strong>Bucket的存储类型</strong></a><ol><li>标准存储：高可靠、高可用、高性能，数据会经常被访问到。（性能最好的）</li><li>低频存储：数据长期存储、较少访问，存储单价低于标准类型。（性能中等）</li><li>归档存储：数据长期存储、基本不访问，存储单价低于低频访问型。（最差）</li></ol></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52t4728ij315j0u014g.jpg" alt="image-20210704180905357"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52tidnk9j317q0u0alx.jpg" alt="image-20210704180931798"></p><h3 id="9-3、OSS的两种使用方法"><a href="#9-3、OSS的两种使用方法" class="headerlink" title="9.3、OSS的两种使用方法"></a>9.3、OSS的两种使用方法</h3><h4 id="9-3-1、当成一个网盘来使用"><a href="#9-3-1、当成一个网盘来使用" class="headerlink" title="9.3.1、当成一个网盘来使用"></a>9.3.1、当成一个网盘来使用</h4><ul><li><strong>工作中不会这么用的</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52tyu1syj319u0nwq8d.jpg" alt="image-20210704180951260"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52u9mf3pj311g0u012h.jpg" alt="image-20210704181015283"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52ux3urtj30w70u07d9.jpg" alt="image-20210704181052581"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52v4mp3dj615a0fun0i02.jpg" alt="image-20210704181105886"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52vgp4mgj316g0suwkv.jpg" alt="image-20210704181124116"></p><h4 id="9-3-2、开发程序代码使用"><a href="#9-3-2、开发程序代码使用" class="headerlink" title="9.3.2、开发程序代码使用"></a>9.3.2、开发程序代码使用</h4><ul><li>工作中的使用方法</li><li>代码中使用OSS，需要OSS名称（bucketName）|  access id  和 access secret（这两个东西需要在后面RAM中创建）</li><li><a href="https://help.aliyun.com/document_detail/31947.html?spm=5176.8465980.entries.8.4e7014504nEZVB"><strong>SDK参考</strong></a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52vtp5ovj617i0hktcz02.jpg" alt="image-20210704181145316"></p><ul><li>点击SDK参考 — 有很多语言，这里就看python的就行了 — 选择简单上传 </li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52wjin2wj30dc138ad0.jpg" alt="image-20210704181226468"></p><ul><li>上传的数据类型（有很多，这里就看一下 字符串 和 本地文件）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52xdhyymj30vc01ujri.jpg" alt="image-20210704181313986"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。</span></span><br><span class="line">auth = oss2.Auth(<span class="string">&#x27;&lt;yourAccessKeyId&gt;&#x27;</span>, <span class="string">&#x27;&lt;yourAccessKeySecret&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">bucket = oss2.Bucket(auth, <span class="string">&#x27;http://oss-cn-hangzhou.aliyuncs.com&#x27;</span>, <span class="string">&#x27;&lt;yourBucketName&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line"><span class="comment"># 如果需要上传文件时设置文件存储类型与访问权限，请在put_object中设置相关headers, 参考如下。</span></span><br><span class="line"><span class="comment"># headers = dict()</span></span><br><span class="line"><span class="comment"># headers[&quot;x-oss-storage-class&quot;] = &quot;Standard&quot;</span></span><br><span class="line"><span class="comment"># headers[&quot;x-oss-object-acl&quot;] = oss2.OBJECT_ACL_PRIVATE</span></span><br><span class="line"><span class="comment"># result = bucket.put_object(&#x27;&lt;yourObjectName&gt;&#x27;, &#x27;content of object&#x27;, headers=headers)</span></span><br><span class="line">result = bucket.put_object(<span class="string">&#x27;&lt;yourObjectName&gt;&#x27;</span>, <span class="string">&#x27;content of object&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP返回码。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;http status: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(result.status))</span><br><span class="line"><span class="comment"># 请求ID。请求ID是请求的唯一标识，强烈建议在程序日志中添加此参数。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;request_id: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(result.request_id))</span><br><span class="line"><span class="comment"># ETag是put_object方法返回值特有的属性。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ETag: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(result.etag))</span><br><span class="line"><span class="comment"># HTTP响应头部。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;date: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(result.headers[<span class="string">&#x27;date&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52xrxrdlj312i02m74j.jpg" alt="image-20210704181337456"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-import oss2# 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。auth = oss2.Auth(&#x27;&lt;yourAccessKeyId&gt;&#x27;, &#x27;&lt;yourAccessKeySecret&gt;&#x27;)# Endpoint以杭州为例，其它Region请按实际情况填写。bucket = oss2.Bucket(auth, &#x27;http://oss-cn-hangzhou.aliyuncs.com&#x27;, &#x27;&lt;yourBucketName&gt;&#x27;)# 必须以二进制的方式打开文件，因为需要知道文件包含的字节数。with open(&#x27;&lt;yourLocalFile&gt;&#x27;, &#x27;rb&#x27;) as fileobj:    # Seek方法用于指定从第1000个字节位置开始读写。上传时会从您指定的第1000个字节位置开始上传，直到文件结束。    fileobj.seek(1000, os.SEEK_SET)    # Tell方法用于返回当前位置。    current = fileobj.tell()    bucket.put_object(&#x27;&lt;yourObjectName&gt;&#x27;, fileobj)</span></span><br></pre></td></tr></table></figure><h2 id="十、RAM访问控制"><a href="#十、RAM访问控制" class="headerlink" title="十、RAM访问控制"></a>十、RAM访问控制</h2><ul><li><strong>应用场景：子账号</strong><ul><li>给阿里云账户创建小号（普通用户）</li><li>创建一个账号给运维用（账号密码登陆）</li><li>创建一个账号给开发用（代码程序中使用：access id 和 access key）</li></ul></li></ul><h3 id="10-1、使用RAM访问控制"><a href="#10-1、使用RAM访问控制" class="headerlink" title="10.1、使用RAM访问控制"></a>10.1、使用RAM访问控制</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52y3vxq3j31ba0msn3o.jpg" alt="image-20210704181356032"></p><blockquote><p><strong>第一次用的时候它会让你开通，至就开通就行了，不花钱。</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52ygrkyij31b00g0whm.jpg" alt="image-20210704181417554"></p><blockquote><p><strong>创建用户</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52yzju1hj31me0pg11z.jpg" alt="image-20210704181443820"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs52zg2wkxj31hu0u07fz.jpg" alt="image-20210704181514025"></p><ul><li><strong>访问方式</strong></li></ul><table><thead><tr><th>控制台密码登陆</th><th>运维人员</th><th>运维通过web页面登陆 与 控制台阿里云资源</th></tr></thead><tbody><tr><td>编程登陆</td><td>开发人员</td><td>给开发人员在代码中调用（自动创建一个 <strong>access id</strong> 和 <strong>access secret</strong>）</td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5301dz80j31280u0wn3.jpg" alt="image-20210704181547794"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs530vy55pj30xc0u0wkv.jpg" alt="image-20210704181626559"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs530zxisuj318c0fatd1.jpg" alt="image-20210704181641721"></p><blockquote><p><strong>用户登录名称</strong> <a href="mailto:&#x4f;&#112;&#115;&#x5f;&#108;&#x69;&#64;&#x31;&#x35;&#51;&#52;&#57;&#56;&#48;&#54;&#57;&#x33;&#x32;&#x38;&#54;&#55;&#x37;&#56;&#46;&#x6f;&#x6e;&#x61;&#108;&#x69;&#121;&#117;&#x6e;&#46;&#99;&#x6f;&#109;">&#x4f;&#112;&#115;&#x5f;&#108;&#x69;&#64;&#x31;&#x35;&#51;&#52;&#57;&#56;&#48;&#54;&#57;&#x33;&#x32;&#x38;&#54;&#55;&#x37;&#56;&#46;&#x6f;&#x6e;&#x61;&#108;&#x69;&#121;&#117;&#x6e;&#46;&#99;&#x6f;&#109;</a><br><strong>登录密码</strong> abc123..<br><strong>AccessKey ID</strong> LTAI4GFAEy29WErDRFgJyoAJ<br><strong>AccessKey Secret</strong> QCG3V0BX7QI4D7KzTN043cJUPAJ95x</p></blockquote><h3 id="10-2、运维调用这个用户"><a href="#10-2、运维调用这个用户" class="headerlink" title="10.2、运维调用这个用户"></a>10.2、运维调用这个用户</h3><ul><li><strong>产品与服务 — 访问控制 — 概述</strong> – <a href="https://signin.aliyun.com/1534980693286778.onaliyun.com/login.htm">https://signin.aliyun.com</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5323wkmgj31bg0d8djq.jpg" alt="image-20210704181727131"></p><ul><li><strong>产品与服务 — 访问控制 — 概述 — 用户 — <a href="https://ram.console.aliyun.com/users/Ops_li">Ops_li@1534980693286778.onaliyun.com</a></strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs532dppfgj31bc09ywhb.jpg" alt="image-20210704181756035"></p><ul><li><strong>访问<a href="https://signin.aliyun.com/">https://signin.aliyun.com/</a> 登陆</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs532tmpf1j61bi0omwim02.jpg" alt="image-20210704181826754"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5332q0d0j31c60ma0v2.jpg" alt="image-20210704181843372"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs533o9pjbj31hc0u0qbo.jpg" alt="image-20210704181916494"></p><ul><li><strong>可以看到，这个用户是没有权限的，如果想加权限，需要到主账号中提权</strong></li></ul><h3 id="10-3、给RAM用户授权"><a href="#10-3、给RAM用户授权" class="headerlink" title="10.3、给RAM用户授权"></a>10.3、给RAM用户授权</h3><ul><li><strong>产品与服务 — 访问控制 — 用户 — 添加权限</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5345qrahj31hi0bswhn.jpg" alt="image-20210704181943463"></p><ul><li><strong>权限一般分为两种</strong><ul><li><strong>ReadOnly</strong>：只读权限</li><li><strong>Fuil</strong>：完全（读写）</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs534r2h32j61e20u0apg02.jpg" alt="image-20210704182011043"></p><ul><li><strong>授予子账号ECS只读的权限</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs535os63ej30zn0u0k0s.jpg" alt="image-20210704182109701"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs536l5ky3j31as0awq4y.jpg" alt="image-20210704182125403"></p><ul><li><strong>在从新登陆一下 Ops_li 子账号查看一下</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs536gify7j31ha0tu4bq.jpg" alt="image-20210704182155478"></p><h3 id="10-4、开发调用这个用户"><a href="#10-4、开发调用这个用户" class="headerlink" title="10.4、开发调用这个用户"></a>10.4、开发调用这个用户</h3><ul><li><strong>授予子账号OSS完全的权限</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs537jpd0aj31hg0hidlo.jpg" alt="image-20210704182233176"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs537r3jhxj31el0u048u.jpg" alt="image-20210704182303261"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs537z8sclj31ic03yt8x.jpg" alt="image-20210704182325023"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs538n12q5j319y0cwwhe.jpg" alt="image-20210704182342943"></p><ul><li><strong>登陆子账号测试，</strong><a href="https://signin.aliyun.com/1534980693286778.onaliyun.com/login.htm"><strong>https://signin.aliyun.com</strong></a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs538tdj3mj31k20i4jvm.jpg" alt="image-20210704182412925"></p><ul><li>将其toos-2目录删除（如果能删就证明是完全的权限）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs539gilsqj31hq0iy46m.jpg" alt="image-20210704182442652"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53b28akuj31h40hcgro.jpg" alt="image-20210704182620293"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs539ys0nwj31ho0q0gsq.jpg" alt="image-20210704182518213"></p><ul><li><p>开发人员调用这个用户</p><ul><li><p>创建子账号，根据需要授予权限</p></li><li><p>把access id 和 access secret 交给开发</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AccessKey ID: LTAI4GFAEy29WErDRFgJyoAJAccessKey Secret: QCG3V0BX7QI4D7KzTN043cJUPAJ95x<span class="comment">#开发使用OSS，上传文件为例# -*- coding: utf-8 -*-import oss2# 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。auth = oss2.Auth(&#x27;LTAI4GFAEy29WErDRFgJyoAJ&#x27;, &#x27;QCG3V0BX7QI4D7KzTN043cJUPAJ95x&#x27;)# Endpoint以杭州为例，其它Region请按实际情况填写。bucket = oss2.Bucket(auth, &#x27;http://oss-cn-hangzhou.aliyuncs.com&#x27;, &#x27;lemon-li&#x27;)# 必须以二进制的方式打开文件，因为需要知道文件包含的字节数。with open(&#x27;&lt;yourLocalFile&gt;&#x27;, &#x27;rb&#x27;) as fileobj:    # Seek方法用于指定从第1000个字节位置开始读写。上传时会从您指定的第1000个字节位置开始上传，直到文件结束。    fileobj.seek(1000, os.SEEK_SET)    # Tell方法用于返回当前位置。    current = fileobj.tell()    bucket.put_object(&#x27;&lt;lemon-li&gt;&#x27;, fileobj)</span></span><br></pre></td></tr></table></figure><h2 id="十一、DNS解析"><a href="#十一、DNS解析" class="headerlink" title="十一、DNS解析"></a>十一、DNS解析</h2><ul><li>最终目的：让用户通过域名访问网站</li></ul><p><strong>流程：</strong></p><ol><li><p>购买域名</p><ul><li>新网</li><li>GoDaddy</li><li>阿里云</li></ul></li><li><p>网站环境</p><ul><li>lamp</li><li>nginx+tomcat</li></ul></li><li><p>域名备案（服务器在大陆的都要做）</p><ul><li>根据需求填写信息</li><li>大约半个多月能好</li></ul></li><li><p>域名 解析</p><ul><li>将申请的域名备案好后</li><li>添加域名到 网站公网IP上</li></ul></li></ol><ul><li>专业名词</li></ul><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路</th><th>记录值</th><th>TTL</th></tr></thead><tbody><tr><td>A记录：域名 对应  IPV4的地址</td><td>www：解析后的域名为<a href="http://www.aliyun.com./">www.aliyun.com。</a></td><td>中国联通</td><td>公网IP</td><td>生成缓存，DNS缓存时间</td></tr><tr><td>AAAA记录：域名 对应 IPV6的地址</td><td><strong>@：</strong>直接解析主域名 aliyun.com。</td><td>中国移动</td><td></td><td></td></tr><tr><td>CNAME记录：别名记录，一般用于配置CDN的</td><td>*<strong>：</strong>泛解析，匹配其他所有域名 *.aliyun.com。</td><td>中国电信</td><td></td><td></td></tr><tr><td>MX记录：用于 企业邮箱</td><td><strong>mail：</strong>将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。</td><td>海外</td><td></td><td></td></tr></tbody></table><p><strong>DNS云解析操作流程：</strong></p><ul><li>添加域名</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53coz2e5j31b60l2dle.jpg" alt="image-20210704182756012"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53dj04rej31bo0f2q54.jpg" alt="image-20210704182824304"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53drf2plj316g0kyq5a.jpg" alt="image-20210704182855685"></p><ul><li>添加域名解析记录</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53fgdlxoj31b409e414.jpg" alt="image-20210704183025501"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53fsj3z0j61bi0ee43202.jpg" alt="image-20210704183009655"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53gdk30vj31570u0n22.jpg" alt="image-20210704183126838"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53h65e2zj31bw09mtbj.jpg" alt="image-20210704183157465"></p><ul><li>测试能否ping通</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53i59i57j315u0dkk01.jpg" alt="image-20210704183310493"></p><ul><li>如果域名没进行备案的话，访问时会是这样</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53ijuv1vj31bi0ls15o.jpg" alt="image-20210704183328131"></p><h2 id="十二、CDN配置流程"><a href="#十二、CDN配置流程" class="headerlink" title="十二、CDN配置流程"></a>十二、CDN配置流程</h2><ul><li>CND 内容分发网络</li><li>CDN 给网站加速，缓存网站静态资源 网站样式（css、js、html）图片、视频、音频</li><li>用户访问网站流程：<ul><li>用户先访问CDN，如果CDN没有这个资源则在访问服务器，等下次再有用户访问这个资源时就会直接在CDN上访问</li></ul></li></ul><h3 id="12-1、CDN访问详细流程"><a href="#12-1、CDN访问详细流程" class="headerlink" title="12.1、CDN访问详细流程"></a>12.1、CDN访问详细流程</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53kw1lslj61bk0o4dm002.jpg" alt="image-20210704183501919"></p><h3 id="12-2、使用CDN-给网站加速"><a href="#12-2、使用CDN-给网站加速" class="headerlink" title="12.2、使用CDN 给网站加速"></a>12.2、使用CDN 给网站加速</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53l7qaraj61bc0my0yp02.jpg" alt="image-20210704183606066"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53lbd0lhj31as0ictc6.jpg" alt="image-20210704183546859"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53m7qva1j316o086my5.jpg" alt="image-20210704183640276"></p><ul><li>使用CDN</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53ml97soj31lu0tqdrl.jpg" alt="image-20210704183726119"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53nc39xaj31420u0n5j.jpg" alt="image-20210704183809125"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53nw6ouij31be0iudkw.jpg" alt="image-20210704183841819"></p><p>![image-20210704183900537](/Users/limin/Library/Application Support/typora-user-images/image-20210704183900537.png)</p><ul><li>创建CDN域名 成功后</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53onuom2j31ma0h4wk6.jpg" alt="image-20210704183926274"></p><ul><li>去云解析DNS里配置CNAME记录</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53pwtkcej31l20k40yi.jpg" alt="image-20210704184018968"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53qbed96j315y0u0jxh.jpg" alt="image-20210704184101961"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53r1zypdj318w0j6dkl.jpg" alt="image-20210704184132642"></p><blockquote><p><strong>至此CDN的配置算是完成了，但是现在CDN目前是没有缓存的数据，怎么办？</strong></p><p>需要 <strong>预热/刷新：</strong>让CDN主动找源站 缓存内容，<strong>小的内容使用刷新，大的内容使用预热</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53rg39tqj312y0u0dnq.jpg" alt="image-20210704184157074"></p><h2 id="十三、云监控"><a href="#十三、云监控" class="headerlink" title="十三、云监控"></a>十三、云监控</h2><h2 id="十四、SLB负载均衡"><a href="#十四、SLB负载均衡" class="headerlink" title="十四、SLB负载均衡"></a>十四、SLB负载均衡</h2><h3 id="14-1、SLB常见的两种应用场景"><a href="#14-1、SLB常见的两种应用场景" class="headerlink" title="14.1、SLB常见的两种应用场景"></a>14.1、SLB常见的两种应用场景</h3><ul><li>场景1（推荐）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53slyc7xj31bq0o4jz0.jpg" alt="image-20210704184313307"></p><ul><li>场景2（不推荐）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53t9b5bij31cc0ngq8v.jpg" alt="image-20210704184348698"></p><h3 id="14-2、SLB场景1-应用"><a href="#14-2、SLB场景1-应用" class="headerlink" title="14.2、SLB场景1 应用"></a>14.2、SLB场景1 应用</h3><ul><li><strong>准备好两个可用区的ECS节点</strong><ul><li>华北2 – 可用区A – 2台ECS</li><li>华北2 – 可用区B – 2台ECS</li><li>安装nginx &amp; apache 并 设置页面</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53u41th5j31ae0e0the.jpg" alt="image-20210704184439549"></p><p>#设置页面在此只列出一台</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nginx</span><br><span class="line">systemctl start nginx;systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">vim /usr/share/nginx/html/index.html</span><br><span class="line">133         &lt;h1&gt;ecs001&lt;/h1&gt;</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p>#访问这四台nginx验证一下</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53uut7p0j31b40cadqu.jpg" alt="image-20210704184513526"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53vdz5zfj312j0u07wh.jpg" alt="image-20210704184540532"></p><ul><li>购买SLB负载均衡</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53y9sjoaj31bi0jgdl3.jpg" alt="image-20210704184840635"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53yhploxj31ba0giteg.jpg" alt="image-20210704184632369"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53yq1e80j31bi0lyq8y.jpg" alt="image-20210704184715081"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53yyebypj31bk0qajyc.jpg" alt="image-20210704184742764"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53z52udgj31bu0sw78z.jpg" alt="image-20210704184804220"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs53zbiepij61bg0dmado02.jpg" alt="image-20210704184818233"></p><ul><li>配置SLB负载均衡<ul><li>协议&amp;监听<ul><li>TCP/UDP（四层负载）</li><li>HTTP/HTTPS（七层负载）</li><li>监听端口</li><li>高级配置<ul><li>调度算法（加权轮询WRR）</li><li>监听转发</li><li>会话保持</li><li>访问控制</li><li>Gzip压缩</li><li>等等……</li></ul></li></ul></li><li>后端服务器</li><li>健康检查</li><li>配置审核</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs540v0tzcj619w0u014502.jpg" alt="image-20210704185036480"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5411ssu6j316k0qydm2.jpg" alt="image-20210704185120542"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs542hzp1hj31350u0dm1.jpg" alt="image-20210704185228752"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs543oddsmj319g0u048d.jpg" alt="image-20210704185349264"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs544j7latj31b90u0tm6.jpg" alt="image-20210704185439187"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs544xndlqj31hs0c0dib.jpg" alt="image-20210704185502791"></p><ul><li>因为我后端的四台ECS使用的都是80端口，所以这里就全部写成80，如果主机上还有其他端口的话就直接添加就行了</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs545wpa1xj31h60ocn7d.jpg" alt="image-20210704185600075"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs546gdzxcj31hs0mc0xh.jpg" alt="image-20210704185630608"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs5472v3mjj319a0u07gd.jpg" alt="image-20210704185704520"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs547s4ecsj31ar0u0dor.jpg" alt="image-20210704185745420"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs548phno4j31gv0u0n7n.jpg" alt="image-20210704185841363"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs549fo0d3j31cs0ri79t.jpg" alt="image-20210704185921584"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs549uzvcyj31ii0gy452.jpg" alt="image-20210704185948157"></p><ul><li>使用负载均衡的公网IP访问</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs54aduk3bj31hu0ey43s.jpg" alt="image-20210704190017092"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs54b23y1yj31is0m8nhb.jpg" alt="image-20210704190049145"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs54beb5ffj31iy0o27o1.jpg" alt="image-20210704190115518"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs54dk7xx1j61ii0owqo902.jpg" alt="image-20210704190321040"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs54ci5jymj31ik0oani8.jpg" alt="image-20210704190220340"></p><h2 id="十五、Redis云数据库"><a href="#十五、Redis云数据库" class="headerlink" title="十五、Redis云数据库"></a>十五、Redis云数据库</h2><h2 id="十六、ESS弹性伸缩"><a href="#十六、ESS弹性伸缩" class="headerlink" title="十六、ESS弹性伸缩"></a>十六、ESS弹性伸缩</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go开篇章（一）</title>
      <link href="/2021/06/15/Go%E5%BC%80%E7%AF%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/06/15/Go%E5%BC%80%E7%AF%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Go语言介绍"><a href="#Go语言介绍" class="headerlink" title="Go语言介绍"></a>Go语言介绍</h1><blockquote><p>前言：世界上已经有太多太多的编程语言了，为什么又出来一个Go语言？</p></blockquote><p>硬件限制：摩尔定律已然失效</p><p>摩尔定律：当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。 换言之，每一美元所能买到的电脑性能，将每隔18-24个月翻一倍以上。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9drrt5rvj30go0bkmzo.jpg"></p><p>从上面的图表可以看出，近十年单线程性能和处理器频率保持稳定。我们不能像之前一样把添加更多晶体管当成是解决方案，因为在较小规模上一些量子特性开始出现（如隧道效应），并且因为在同样小的空间里放置更多晶体管的代价非常昂贵，每1美元可以添加的晶体管数量开始下降。</p><p>制造商开始从其他方面提高处理器的性能：</p><ol><li>向处理器添加越来越多的内核，如四核和八核CPU。</li><li>发明了超线程技术。</li><li>为处理器添加了更多缓存以提高性能。</li></ol><p>但上述解决方案也有其自身的局限性。因为成本原因我们不能无限制的为计算机添加内核，也无法无限制的添加缓存来提高性能，因为缓存越大，取值的性能越低。</p><p>我们没有办法在硬件上一直取得突破，我们需要提高软件的性能或者说我们需要高性能的软件。</p><h2 id="Go语言为并发而生"><a href="#Go语言为并发而生" class="headerlink" title="Go语言为并发而生"></a>Go语言为并发而生</h2><p>如上所述，硬件制造商正在为处理器添加越来越多的内核以提高性能。所有数据中心都在这些处理器上运行，更重要的是，今天的应用程序使用多个微服务来维护数据库连接，消息队列和维护缓存。因此，开发的软件和编程语言应该可以轻松地支持并发性，并且应该能够随着CPU核心数量的增加而可扩展。</p><p>但是，大多数现代编程语言（如Java，Python等）都来自90年代的单线程环境。虽然一些编程语言的框架在不断地提高多核资源使用效率，例如 Java 的 Netty 等，但仍然需要开发人员花费大量的时间和精力搞懂这些框架的运行原理后才能熟练掌握。</p><p>Go于2009年发布，当时多核处理器已经上市。Go语言在多核并发上拥有原生的设计优势，Go语言从底层原生支持并发，无须第三方库、开发者的编程技巧和开发经验。</p><p>很多公司，特别是中国的互联网公司，即将或者已经完成了使用 Go 语言改造旧系统的过程。经过 Go 语言重构的系统能使用更少的硬件资源获得更高的并发和I/O吞吐表现。充分挖掘硬件设备的潜力也满足当前精细化运营的市场大环境。</p><p>Go语言的并发是基于 <code>goroutine</code> 的，<code>goroutine</code> 类似于线程，但并非线程。可以将 <code>goroutine</code> 理解为一种虚拟线程。Go 语言运行时会参与调度 <code>goroutine</code>，并将 <code>goroutine</code> 合理地分配到每个 CPU 中，最大限度地使用CPU性能。开启一个<code>goroutine</code>的消耗非常小（大约2KB的内存），你可以轻松创建数百万个<code>goroutine</code>。</p><p><code>goroutine</code>的特点：</p><ol><li><code>goroutine</code>具有可增长的分段堆栈。这意味着它们只在需要时才会使用更多内存。</li><li><code>goroutine</code>的启动时间比线程快。</li><li><code>goroutine</code>原生支持利用channel安全地进行通信。</li><li><code>goroutine</code>共享数据结构时无需使用互斥锁。</li></ol><h2 id="Go性能强悍"><a href="#Go性能强悍" class="headerlink" title="Go性能强悍"></a>Go性能强悍</h2><p>与其他现代高级语言（如Java/Python）相比，使用C，C++的最大好处是它们的性能。因为C/ C++是编译型语言而不是解释的语言。 处理器只能理解二进制文件，Java和Python这种高级语言在运行的时候需要先将人类可读的代码翻译成字节码，然后由专门的解释器再转变成处理器可以理解的二进制文件。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9dtzo21ej31am0m6jus.jpg"></p><p>同C,C++一样，Go语言也是编译型的语言，它直接将人类可读的代码编译成了处理器可以直接运行的二进制文件，执行效率更高，性能更好。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9dug6j1jj31ps0gaahj.jpg"></p><p>数据来源：<a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/">https://benchmarksgame-team.pages.debian.net/benchmarksgame/</a></p><p>可以看出，Go 语言在性能上更接近于 Java 语言，虽然在某些测试用例上不如经过多年优化的 Java 语言，但毕竟 Java 语言已经经历了多年的积累和优化。Go 语言在未来的版本中会通过不断的版本优化提高单核运行性能。</p><h2 id="Go语言简单易学"><a href="#Go语言简单易学" class="headerlink" title="Go语言简单易学"></a>Go语言简单易学</h2><blockquote><p>语法简洁</p></blockquote><p>Go 语言简单易学，学习曲线平缓，不需要像 C/C++ 语言动辄需要两到三年的学习期。Go 语言被称为“互联网时代的C语言”。Go 语言的风格类似于C语言。其语法在C语言的基础上进行了大幅的简化，去掉了不需要的表达式括号，循环也只有 for 一种表示方法，就可以实现数值、键值等各种遍历。</p><blockquote><p>代码风格统一</p></blockquote><p>Go 语言提供了一套格式化工具——<code>go fmt</code>。一些 Go 语言的开发环境或者编辑器在保存时，都会使用格式化工具进行修改代码的格式化，这样就保证了不同开发者提交的代码都是统一的格式。(吐槽下：再也不用担心那些看不懂的黑魔法了…)</p><blockquote><p>开发效率高</p></blockquote><p>Go语言实现了开发效率与执行效率的完美结合，让你像写Python代码（效率）一样编写C代码（性能）。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9dwea64mj30s20gymyh.jpg"></p><h2 id="Go语言的前景"><a href="#Go语言的前景" class="headerlink" title="Go语言的前景"></a>Go语言的前景</h2><p>目前Go语言已经⼴泛应用于人工智能、云计算开发、容器虚拟化、⼤数据开发、数据分析及科学计算、运维开发、爬虫开发、游戏开发等领域。</p><p>Go语言简单易学，天生支持并发，完美契合当下高并发的互联网生态。Go语言的岗位需求持续高涨，目前的Go程序员数量少，待遇好。</p><p>抓住趋势，要学会做一个领跑者而不是跟随者。</p><p>国内Go语言的需求潜力巨大，目前无论是国内大厂还是新兴互联网公司基本上都会有Go语言的岗位需求。</p><p>下图是应用Go语言的公司举例：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9dxhkj7rj30jn0dhk0v.jpg"></p><p>除了上面列出的大厂外，很多小型公司或创业公司也开始使用Go语言，并且很多公司把Go语言作为其主要开发语言。</p><p>现在就开始你的Go语言学习之旅吧！人生苦短，let’s Go.</p><p><a href="https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65">参考链接</a></p><h1 id="Go开发环境"><a href="#Go开发环境" class="headerlink" title="Go开发环境"></a>Go开发环境</h1><p>Go1.16.5 版本。</p><p>PS：Go语言1.14版本之后推荐使用go modules管理以来，也不再需要把代码写在GOPATH目录下了，搭建1.14版本之前的<a href="https://www.liwenzhou.com/posts/Go/install_go_dev_old/">链接</a>。</p><h2 id="Golang-Download"><a href="#Golang-Download" class="headerlink" title="Golang Download"></a>Golang Download</h2><blockquote><p>下载地址</p></blockquote><p>Go官网下载地址：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p><p>Go官方镜像站（推荐）：<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><h2 id="Install-Go"><a href="#Install-Go" class="headerlink" title="Install Go"></a>Install Go</h2><blockquote><p>版本的选择</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9eyyp8ygj31gy0tkn43.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9ev9q4txj30ya0oa0w2.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9evruk6ij30y00nu782.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9ewamjwyj30y80ocad2.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9ewnobn0j30yc0octca.jpg"></p><p>上一步安装过程执行完毕后，可以打开终端窗口，输入<code>go version</code>命令，查看安装的Go版本。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9f0zkl9vj318m06qacz.jpg"></p><h2 id="GOROOT-amp-GOPATH"><a href="#GOROOT-amp-GOPATH" class="headerlink" title="GOROOT &amp; GOPATH"></a>GOROOT &amp; GOPATH</h2><p>GOROOT 和 GOPATH 都是环境变量，其中 <code>GOROOT</code> 是我们安装go开发包的路径，而从Go 1.8版本开始，Go开发包在安装完成后会为 <code>GOPATH</code> 设置一个默认目录，并且在Go1.14及之后的版本中启用了Go Module模式之后，不一定非要将代码写到GOPATH目录下，所以也就<strong>不需要我们再自己配置GOPATH</strong>了，使用默认的即可。</p><h2 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h2><blockquote><p>Go1.14版本之后，都推荐使用 <code>go mod</code> 模式来管理依赖环境了，也不再强制我们把代码必须写在<code>GOPATH</code>下面的src目录了，你可以在你电脑的任意位置编写go代码。</p></blockquote><p>默认GoPROXY配置是：<code>GOPROXY=https://proxy.golang.org,direct</code>，由于国内访问不到<code>https://proxy.golang.org</code>，所以我们需要换一个PROXY，这里推荐使用<code>https://goproxy.io</code>或<code>https://goproxy.cn</code>。</p><p>可以执行下面的命令修改GOPROXY：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.cn,direct</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9f88g4hij616q04gwgy02.jpg"></p><h1 id="Go开发编辑器"><a href="#Go开发编辑器" class="headerlink" title="Go开发编辑器"></a>Go开发编辑器</h1><p>Go采用的是UTF-8编码的文本文件存放源代码，理论上使用任何一款文本编辑器都可以做Go语言开发，这里推荐使用<code>VS Code</code> 和 <code>Goland</code>。 <code>VS Code</code> 是微软开源的编辑器，而 <code>Goland</code> 是jetbrains出品的付费IDE。</p><p>这里使用 <code>VS Code</code> 加插件做为go语言的开发工具。</p><h2 id="VS-Code-介绍"><a href="#VS-Code-介绍" class="headerlink" title="VS Code 介绍"></a>VS Code 介绍</h2><p><code>VS Code</code> 官方下载地址：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p><p>三大主流平台都支持，请根据自己的电脑平台选择对应的安装包。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9faqe0unj319c0pgae7.jpg"></p><p>双击下载好的安装文件，双击安装即可。</p><h2 id="VS-Code-配置"><a href="#VS-Code-配置" class="headerlink" title="VS Code 配置"></a>VS Code 配置</h2><blockquote><p>中文简体插件</p></blockquote><p>点击左侧菜单栏最后一项<code>管理扩展</code>，在<code>搜索框</code>中输入<code>chinese</code> ，选中结果列表第一项，点击<code>install</code>安装。</p><p>安装完毕后右下角会提示<code>重启VS Code</code>，重启之后你的VS Code就显示中文啦！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9fmuuh7dj31gf0u0jxg.jpg"></p><p><code>VSCode</code>主界面介绍：</p><ul><li>Windows</li></ul><p><img src="https://www.liwenzhou.com/images/Go/install_go_dev/vscode_menu.png"></p><ul><li>mac</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9fri0dcej313z0u0afp.jpg"></p><p>安装go扩展</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr9ft23li8j619i0qc43802.jpg"></p><h1 id="第一个Go程序"><a href="#第一个Go程序" class="headerlink" title="第一个Go程序"></a>第一个Go程序</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>现在我们来创建第一个Go项目—— <code>hello</code>。创建一个 <code>hello</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello</span><br></pre></td></tr></table></figure><p>使用 go module 模式新建项目时，需要通过 <code>go mod init 项目名</code> 命令对项目进行初始化，该命令会在项目根目录下生成 <code>go.mod</code>文件。例如，使用 <code>hello</code> 作为第一个Go项目的名称，执行如下命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init hello</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>接下来在该目录中创建一个 <code>main.go</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">// 声明 main 包，表明当前是一个可执行程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>  <span class="comment">// 导入内置 fmt 包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;  <span class="comment">// main函数，是程序执行的入口</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)  <span class="comment">// 在终端打印 Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常重要！！！ 如果此时 VS Code 右下角弹出提示让你安装插件，务必点 <strong>install all</strong> 进行安装。</p><h2 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h2><p><code>go build</code> 命令表示将源代码编译成可执行文件。</p><p>在hello目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure><p>或者在其他目录执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build hello</span><br></pre></td></tr></table></figure><p>go编译器会去 <code>GOPATH</code> 的src目录下查找你要编译的 <code>hello</code> 项目.</p><p>编译得到的可执行文件会保存在执行编译命令的当前目录下，如果是windows平台会在当前目录下找到 <code>hello</code> 可执行文件。</p><p>可在终端直接执行该 <code>hello</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">limin@armin hello % ls -lrth</span><br><span class="line">total 3976</span><br><span class="line">-rw-r--r--  1 limin  staff    22B  6  7 09:45 go.mod</span><br><span class="line">-rw-r--r--  1 limin  staff   231B  6  7 09:46 hello.go</span><br><span class="line">-rwxr-xr-x  1 limin  staff   1.9M  6  7 09:48 hello</span><br><span class="line"></span><br><span class="line">limin@armin hello % ./hello </span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>还可以使用<code>-o</code>参数来指定编译后得到的可执行文件的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">limin@armin hello % go build -o hellolemon</span><br><span class="line">limin@armin hello % ls -lrth</span><br><span class="line">total 7936</span><br><span class="line">-rw-r--r--  1 limin  staff    22B  6  7 09:45 go.mod</span><br><span class="line">-rw-r--r--  1 limin  staff   231B  6  7 09:46 hello.go</span><br><span class="line">-rwxr-xr-x  1 limin  staff   1.9M  6  7 09:48 hello</span><br><span class="line">-rwxr-xr-x  1 limin  staff   1.9M  6  7 09:54 hellolemon</span><br></pre></td></tr></table></figure><h2 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h2><p><code>go run main.go</code> 也可以执行程序，该命令本质上也是先编译再执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limin@armin hello % <span class="keyword">go</span> run hello.<span class="keyword">go</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h2><p><code>go install </code> 表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到 <code>GOPATH</code> 的bin目录下。因为我们的环境变量中配置了 <code>GOPATH </code> 下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。</p><h2 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h2><p>默认 <code>go build</code> 的可执行文件都是当前操作系统可执行的文件，如果我想在windows下编译一个linux下可执行文件，那需要怎么做呢？</p><p>只需要指定目标操作系统的平台和处理器架构即可，例如Windows平台cmd下按如下方式指定环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=0  // 禁用CGO</span><br><span class="line">SET GOOS=linux  // 目标平台是linux</span><br><span class="line">SET GOARCH=amd64  // 目标处理器架构是amd64</span><br></pre></td></tr></table></figure><p>注意：如果使用的是PowerShell终端，那么设置环境变量的语法为<code>$ENV:CGO_ENABLED=0</code>。</p><p>然后再执行<code>go build</code>命令，得到的就是能够在Linux平台运行的可执行文件了。</p><p>Mac 下编译 Linux 和 Windows平台 64位 可执行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure><p>Linux 下编译 Mac 和 Windows 平台64位可执行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure><p>Windows下编译Mac平台64位可执行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=darwin</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build</span><br></pre></td></tr></table></figure><p>现在，开启你的Go语言学习之旅吧。人生苦短，let’s Go.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="/2021/06/15/Tomcat/"/>
      <url>/2021/06/15/Tomcat/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Tomcat个人笔记"><a href="#Tomcat个人笔记" class="headerlink" title="Tomcat个人笔记"></a>Tomcat个人笔记</h1><h2 id="一、Tomcat简介概述"><a href="#一、Tomcat简介概述" class="headerlink" title="一、Tomcat简介概述"></a>一、Tomcat简介概述</h2><h3 id="1-Tomcat-历史由来"><a href="#1-Tomcat-历史由来" class="headerlink" title="1. Tomcat 历史由来"></a><em>1. Tomcat 历史由来</em></h3><ul><li>Tomcat 最初由 Sun 公司的软件架构师 James Duncan Davidson 开发，名称为 “JavaWebServer”。</li><li>1999年，在 Davidson 的帮助下，该项目于1999年 于 apache软件基金会旗下的 JServ 项目合并，并发布第一个版本(3.x)，即是现在的Tomcat，该版本实现了 Servlet2.2 和 JSP 1.1规范。</li><li>2001年，Tomcat 发布了4.0版本，作为里程碑式的版本，Tomcat 完全重新设计了其架构,并实现了Servlet 2.3 和 JSP1.2 规范。</li><li>目前Tomcat已经更新到9.0.x版本，但是目前企业中的Tomcat服务器 ，主流版本还是 7.x 和8.x 。</li></ul><h3 id="2-Tomcat基本简介"><a href="#2-Tomcat基本简介" class="headerlink" title="2. Tomcat基本简介"></a><em>2. Tomcat基本简介</em></h3><blockquote><ul><li><p>Tomcat是由java语言开发的，<strong>只要遇见java语言开发的软件包，就一定要提前安装JDK。</strong>因为java语言号称是一次编译，到处运行。（跨平台运行，且不会出现问题）</p></li><li><p>Tomcat 服务器是一个开源的轻量级Web应用服务器，在中小型系统和并发量小的场合下被普遍使用，是开发和调试Servlet、JSP 程序的首选。<strong>说白了用来解析 jsp 网页的</strong></p></li><li><p><strong>与Tomcat功能类似的web软件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webLogic: oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费。</span><br><span class="line"></span><br><span class="line">webSphere: IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费。</span><br><span class="line"></span><br><span class="line">JBOSS: JBOSS公司的，大型的JavaE服务器，支持所有的JavaEE规范，收费。</span><br><span class="line"></span><br><span class="line">Tomcat: Apache基金组织，中小型的JavaEE服务器，支持少量的JavaEE规范servlet/jsp，开源。</span><br></pre></td></tr></table></figure></li><li><p><strong>Tomcat与其他开源的Web软件有什么不同点</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apache         <span class="comment">#默认只能解析html的页面</span></span><br><span class="line"></span><br><span class="line">Nginx          <span class="comment">#默认只能解析html的页面</span></span><br><span class="line"></span><br><span class="line">Tomcat         <span class="comment">#默认也能解析html的页面，但远远不如以上两者，他主要的作用是能够解析.jsp页面，在公司，很多人把它称之为中间件。</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="二、Tomcat架构原理"><a href="#二、Tomcat架构原理" class="headerlink" title="二、Tomcat架构原理"></a>二、Tomcat架构原理</h2><h3 id="1-HTTP工作原理"><a href="#1-HTTP工作原理" class="headerlink" title="1. HTTP工作原理"></a><em>1. HTTP工作原理</em></h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridxlwz34j30x00i7n1w.jpg" alt="image-20200603234950940"></p><h3 id="2-Tomcat基本架构图"><a href="#2-Tomcat基本架构图" class="headerlink" title="2. Tomcat基本架构图"></a><em>2. Tomcat基本架构图</em></h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridxrs5jdj30es09w3zt.jpg" alt="image-20200603230105779"></p><h3 id="3-Tomcat各目录及文件说明"><a href="#3-Tomcat各目录及文件说明" class="headerlink" title="3. Tomcat各目录及文件说明"></a><em>3. Tomcat各目录及文件说明</em></h3><table><thead><tr><th>整体目录</th><th>目录下文件</th><th>简单说明</th></tr></thead><tbody><tr><td><em><strong>bin</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>存放 Tomcat的启动、停止等批处理脚本和Shell脚本</strong></em></td></tr><tr><td></td><td>startup. bat</td><td>用于在 Windows下启动 Tomcat</td></tr><tr><td></td><td>startup. sh</td><td>用于在 Linux下启动 Tomcat</td></tr><tr><td></td><td>shutdown. bat</td><td>用于在 Windows下停止 Tomcat</td></tr><tr><td></td><td>shutdown. sh</td><td>用于在 Linux下停止 Tomcat</td></tr><tr><td><em><strong>conf</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>用于存放 Tomcat的相关配置文件</strong></em></td></tr><tr><td></td><td>Catalina</td><td>用于存储针对每个虚拟机的 Context 配置目录</td></tr><tr><td></td><td>context.xml</td><td>用于定义所有Web应用均需要加载的 Context 配置，如果Web应用指定了自己的context.xml，那么该文件的配置将被覆盖。</td></tr><tr><td></td><td>catalina.properties</td><td>Java属性的定义文件，用于设定类加载器路径等，以及一些JVM性能相关的调优参数</td></tr><tr><td></td><td>catalina.policy</td><td>当 Tomcat在安全模式下运行时，此文件为默认的安全策略配置</td></tr><tr><td></td><td>logging.properties</td><td>Tomcat日志配置文件，可通过该文件修改 Tomcat日志级别以及日志路径等</td></tr><tr><td></td><td><em>server.xml</em></td><td>Tomcat服务器核心配置文件，用于配置 Tomcat的链接器、监听端口、处理请求的虚拟主机等。</td></tr><tr><td></td><td>tomcat-users.xml</td><td>用于定义 Tomcat默认用户及角色映射信息，Tomcat的 Manager模块即用该文件中定义的用户进行安全认证。</td></tr><tr><td></td><td>web.xml</td><td>Tomcat中所有应用默认的部署描述文件，主要定义了基础 <code>Servlet</code>和<code>MIME</code>映射。</td></tr><tr><td><em><strong>logs</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>Tomcat默认的日志存放路径</strong></em></td></tr><tr><td></td><td><em>catalina.out</em></td><td>Tomcat的日志输出,只要Tomcat服务出问题，就看他</td></tr><tr><td></td><td><em>localhost_access.log.txt</em></td><td>客户端访问 Tomcat 服务的访问日志记录</td></tr><tr><td></td><td>localhost.log</td><td>程序(代码)异常没有被捕获的时候抛出了的地方</td></tr><tr><td></td><td>manager.log</td><td>webapps/manager项目生成的日志</td></tr><tr><td></td><td>host-manager.log</td><td>webapps/host-manager项目生成的日志</td></tr><tr><td><em><strong>webapps</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>Tomcat默认的Web应用部署目录</strong></em></td></tr><tr><td><em><strong>lib</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>Tomcat服务器依赖库目录，包含 Tomcat服务器运行环境依赖 jar包</strong></em></td></tr><tr><td><em><strong>temp</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>存放tomcat在运行过程中产生的临时文件</strong></em></td></tr><tr><td><em><strong>work</strong></em></td><td><em><strong>/</strong></em></td><td><em><strong>存放Web应用JSP代码生成和编译后产生的class文件目录</strong></em></td></tr></tbody></table><h2 id="三、Tomcat部署"><a href="#三、Tomcat部署" class="headerlink" title="三、Tomcat部署"></a>三、Tomcat部署</h2><h3 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1. 安装JDK"></a><em>1. 安装JDK</em></h3><ul><li><strong>官方下载</strong><ul><li><a href="https://www.oracle.com/">https://www.oracle.com</a></li></ul></li><li><strong>个人网站下载</strong><ul><li><a href="http://bbs.lemon-li.cn/jdk-8u181-linux-x64.tar.gz">JDK-8u181-linux-x64</a></li></ul></li><li>Centos7安装Tomcat</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># tar xf jdk-8u181-linux-x64.tar.gz</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># mv jdk1.8.0_181 /usr/local/java</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># vim /etc/profile          #添加JAVA环境变量</span></span><br><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line">wq!</span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># source /etc/profile       # 加载环境变量</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># java -version             #查看JDK版本，当出现版本信息时，表明安装成功</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_181&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="2-安装-Tomcat"><a href="#2-安装-Tomcat" class="headerlink" title="2. 安装 Tomcat"></a><em>2. 安装 Tomcat</em></h3><ul><li><p><strong>官方下载</strong></p><ul><li><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li></ul></li><li><p><strong>个人网站下载</strong></p><ul><li><a href="bbs.lemon-li.cn/apache-tomcat-8.5.32.tar.gz">Tomcat-8.5.32</a></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># tar xf apache-tomcat-8.5.32.tar.gz</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># mv apache-tomcat-8.5.32 /usr/local/tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在catalina.sh文件中添加如下两条配置</span></span><br><span class="line">sed -i <span class="string">&#x27;1a # JDK&#x27;</span> /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span><br><span class="line">sed -i <span class="string">&#x27;2a JAVA_HOME=/usr/local/java&#x27;</span> /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份主配置及删除配置文件注释</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># cp /usr/local/tomcat/conf/server.xml /usr/local/tomcat/conf/server.xml.bak &amp;&amp; perl -lne &#x27;print unless (/&lt;!--/../--&gt;/)&#x27; /usr/local/tomcat/conf/server.xml.bak &gt; /usr/local/tomcat/conf/server.xml &amp;&amp; sed -i /^$/d /usr/local/tomcat/conf/server.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动tomcat服务</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/startup.sh </span></span><br><span class="line">Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/<span class="built_in">local</span>/java</span><br><span class="line">Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/usr/<span class="built_in">local</span>/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查Tomcat是否启动</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># netstat -anptu|grep java</span></span><br><span class="line">tcp6       0      0 :::8080             :::*             LISTEN      26265/java       </span><br><span class="line">tcp6       0      0 127.0.0.1:8005      :::*             LISTEN      26265/java       </span><br><span class="line">tcp6       0      0 :::8009             :::*             LISTEN      26265/java</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Tomcat日志信息</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># tail -f /usr/local/tomcat/logs/catalina.out </span></span><br><span class="line">03-Jun-2020 22:30:50.656 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br><span class="line">03-Jun-2020 22:30:50.662 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">&quot;ajp-nio-8009&quot;</span>]</span><br><span class="line">03-Jun-2020 22:30:50.670 信息 [main] org.apache.catalina.startup.Catalina.start Server startup <span class="keyword">in</span> 485 ms</span><br></pre></td></tr></table></figure><ul><li><strong>Tomcat的三个端口及作用</strong><ul><li>8005：这个端口负责 监听 关闭 Tomcat的请求</li><li>8009：负责与其他web服务器进行通信的接口，用的是AJP协议</li><li>8080：负责接收客户端的请求，用的是HTTP协议</li></ul></li><li><strong>访问Tomcat测试页面</strong><ul><li><a href="http://localhost:8080/">http://localhost:8080/</a></li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridxxwf0qj30s60p4424.jpg" alt="image-20200604003717938"></p><p><em><strong>默认是不让访问的服务器状态的</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridy1lbolj30xi0emmyf.jpg" alt="image-20200604004224065"></p><p><em><strong>怎么解决这个问题？配置tomcat管理员账户</strong></em></p><ul><li><em>如果需要登录系统，必须配置 tomcat用户，在安装完 Tomcat后，进行如下操作</em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加管理页面的用户认证，帐户名为tomcat，密码为123123</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/conf/tomcat-users.xml</span></span><br><span class="line"><span class="comment">#在&lt;tomcat-users&gt;区域中加入以下两个配置</span></span><br><span class="line">&lt;role rolename=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="line">&lt;user username=<span class="string">&quot;tomcat&quot;</span> password=<span class="string">&quot;123123&quot;</span> roles=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="line">wq！</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认tomcat的管理页面只能通过tomcat服务器上的浏览器才可以访问。**设置其可以在其他主机访问</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/webapps/manager/META-INF/context.xml</span></span><br><span class="line">20     allow=<span class="string">&quot;.*&quot;</span> /&gt;     <span class="comment">#允许所有</span></span><br><span class="line">wq！</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启Tomcat</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/shutdown.sh</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/startup.sh</span></span><br></pre></td></tr></table></figure><p><em><strong>再来访问服务器状态</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridy6ri1zj30um0lq78u.jpg" alt="image-20200604004628772"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridyah59jj30x10pptbk.jpg" alt="image-20200604005737091"></p><h2 id="四、server-xml配置文件详解（重点）"><a href="#四、server-xml配置文件详解（重点）" class="headerlink" title="四、server.xml配置文件详解（重点）"></a>四、server.xml配置文件详解（重点）</h2><h3 id="1-一个整体的-server-xml配置实例"><a href="#1-一个整体的-server-xml配置实例" class="headerlink" title="1. 一个整体的 server.xml配置实例"></a><em>1. 一个整体的 server.xml配置实例</em></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-server-xml文件的结构-和-元素"><a href="#2-server-xml文件的结构-和-元素" class="headerlink" title="2. server.xml文件的结构 和 元素"></a><em>2. server.xml文件的结构 和 元素</em></h3><h4 id="2-1-server-xml的整体结构如下："><a href="#2-1-server-xml的整体结构如下：" class="headerlink" title="2.1. server.xml的整体结构如下："></a><em>2.1. server.xml的整体结构如下：</em></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Context</span> /&gt;</span><span class="comment">&lt;!-- 现在常常使用自动部署，不推荐配置Context元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>上面只给出了Tomcat的核心组件，除了核心组件外，Tomcat还有一些其他组件，下面介绍组件的分类。</strong></p></blockquote><h4 id="2-2-server-xml文件中的元素可以分四类"><a href="#2-2-server-xml文件中的元素可以分四类" class="headerlink" title="2.2. server.xml文件中的元素可以分四类"></a><em>2.2. server.xml文件中的元素可以分四类</em></h4><ul><li><p><em><strong>顶层元素：</strong></em>&lt;server&gt; 和 &lt;/service&gt;</p><ul><li>&lt;server&gt; ：元素是整个配置文件的根元素</li><li>&lt;/service&gt; ：元素则代表一个Engine元素以及一组与之相连的Connector元素</li></ul></li><li><p><em><strong>连接器：</strong></em>&lt;Connector /&gt;</p><ul><li>&lt;Connector /&gt;：代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。</li></ul></li><li><p><em><strong>容器：</strong></em>&lt;Engine&gt;&lt;Host&gt;&lt;/Engine&gt;</p><ul><li>容器的功能是处理<strong>Connector</strong>接收进来的请求，并产生相应的响应。<strong>而Engine、Host 和 Context 都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。</strong></li><li>一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。</li></ul></li><li><p><em><strong>内嵌组件：</strong></em><strong>可以内嵌到容器中的组件。</strong></p><ul><li>实际上， <strong>Server</strong> <strong>、Service</strong> <strong>、Connector</strong> <strong>、Engine</strong> <strong>、Host</strong> <strong>和Context</strong> <strong>是最重要的最核心的Tomcat</strong> <strong>组件</strong>，其他组件都可以归为内嵌组件。</li></ul></li></ul><h4 id="2-3-server-xml元素"><a href="#2-3-server-xml元素" class="headerlink" title="2.3. server.xml元素"></a><em>2.3. server.xml元素</em></h4><p><strong>1. &lt;Server&gt;元素</strong></p><ul><li>Server 元素在最顶层，代表整个 Tomcat 容器，因此它必须是server.xml中唯一一个最外层的元素。 一个 Server 元素中可以有一个或多个Service 元素。</li><li>Server 的主要任务，就是提供一个接口让客户端能够访问到这个 Service 集合，同时维护它所包含的所有的Service的声明周期，包括如何初始化、如何结束服务、如何找到客户端要访问的Service。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port=<span class="string">&quot;8005&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><em><strong>参数作用：</strong></em><ul><li><strong>端口号8005：</strong>用来 监听 关闭 Tomcat服务的</li><li><strong>port：</strong>指定Tomcat监听shutdown命令端口.终止服务器运行时,必须在Tomcat服务器所在的机器上发出shutdown命令，该属性必须设置。</li><li><strong>shutdown：</strong>指定终止Tomcat服务器运行时,发给Tomcat服务器的shutdown监听端口的字符串，该属性必须设置。</li></ul></li></ul><p><strong>2. &lt;service&gt; 元素</strong></p><blockquote><ul><li>包含一个&lt;Engine&gt;元素，以及一个或多个&lt;Connector&gt;元素，这些&lt;Connector&gt;元素共享同一个&lt;Engine&gt;`元素。</li><li>Service 的作用是在Connector 和 Engine` 外面包了一层，把它们组装在一起，对外提供服务。</li><li>一个 Service 可以包含多个 Connector，但是只能包含一个 Engine；其中 Connector 的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。</li></ul></blockquote><p><strong>3. &lt;Connector&gt;元素</strong></p><ul><li>接收客户端连接请求，创建Request 和 Response 对象用于和请求端交换数据，然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine，通过配置Connector，可以控制请求Service的协议及端口号。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>参数作用</strong></em><ul><li><strong>端口号8080：</strong>访问浏览器页面的时候使用8080端口；用的是HTTP协议</li><li><strong>端口号8009：</strong>连接Web服务(httpd、nginx)的时候使用8009端口；用的是AJP协议</li><li><strong>port：</strong>服务端监听的端口号，即客户请求的端口号</li><li><strong>protocol：</strong>规定了请求协议</li><li><strong>redirectPort：</strong>表示当请求是https时，重定向至端口号为8443的Connector</li><li><strong>connectionTimeout：</strong>表示连接的超时时间，单位毫秒</li><li><strong>minSpareThreads：</strong>表示Connector最小等待客户请求的线程数，每个请求由一个线程负责，默认10。</li><li><strong>maxThreads：</strong>表示此连接器要创建的请求处理线程的最大数量，能处理的最大并发请求数，默认200。</li><li><strong>maxConnections：</strong>表示服务器在任何给定时间接受和处理的最大连接数。当达到这个数字时，客户端请求会被放到请求队列，默认最大队列数为acceptCount参数值，BIO模式下默认为maxThreads，NIO模式下默认10000。</li><li><strong>acceptCount：</strong>maxConnections达到最大值即所有请求线程正在使用时，传入连接请求的最大队列长度， 当队列满时收到的任何请求都将被拒绝， 默认值为100。</li><li><strong>maxHeaderCount：</strong>允许的请求中的最大header数。 包含比指定限制更多的header的请求将被拒绝。 小于0表示无限制，默认值100。</li></ul></li></ul><p><strong>4. &lt;Engine&gt;元素</strong></p><ul><li>Engine组件在Service组件中有且只有一个，Engine是Service组件中的请求处理组件，Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。</li><li>Engine、Host 和 Context 都是容器，但它们不是平行的关系，而是父子关系：Engine 包含 Host，Host 包含 Context。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>参数作用</strong></em><ul><li><strong>name：</strong>属性用于日志和错误信息，在整个Server中应该唯一。</li><li><strong>defaultHost：</strong>属性指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理，因此defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配。</li></ul></li></ul><p><strong>5. Host元素</strong></p><ul><li>Engine元素至少包含一个或多个Host元素，每个Host元素定义了一个虚拟主机，它可以包含一个或多个Web应用，其中一个Host的name必须与Engine组件的defaultHost属性相匹配。</li><li>另在&lt;Host&gt;元素中可以包含如下的子元素： &lt;Logger&gt;，&lt;Realm&gt;，&lt;Valve&gt;，&lt;Context&gt;`。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>参数作用</strong></em><ul><li><strong>name：</strong>虚拟主机的名字。</li><li><strong>appBase：</strong> 指定虚拟主机的目录，可以指定绝对目录,也可以指定相对于<CATALINA_HOME>的相对目录， 如果此项没有设定，默认值为<CATALINA_HOME>/webapps。</li><li><strong>unpackWARs：</strong> 如果此项设为true，表示将把Web应用的war文件先解压为开放目录结构后再运行，如果设为false，将直接运行war文件。</li><li><strong>autoDeploy：</strong>如果此项设为true，表示当Tomcat服务器处于运行状态时，能够监测appBase下的文件，如果有新的Web应用加入进来，会自动发布这个Web应用。</li></ul></li></ul><p><strong>6. Context 元素</strong></p><ul><li>每个Context元素代表运行在虚拟主机上的单个Web应用，一个&lt;Host&gt;元素中可以包含多个&lt;Context&gt;`元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/xxx&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/xxx/xxx/app1.war&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>参数作用</strong></em><ul><li><strong>path：</strong>指定访问该Web应用的URL入口。</li><li><strong>docBase：</strong>指定Web应用的文件路径，可以为绝对路径,也可以为相对于Host的appBase属性的相对路径，如果Web应用采用开放目录结构,那就指定Web应用的根目录;如果Web应用是个WAR文件,那就指定WAR文件的路径。</li><li><strong>reloadable：</strong>如果这个属性设为true，Tomcat服务器在运行状态下会监视在WEB-INF/class和WEB-INF/lib目录下CLASS文件的改动，如果检测到有calss文件被更新,服务器会自动重新加载Web应用。</li></ul></li></ul><h2 id="五、部署项目"><a href="#五、部署项目" class="headerlink" title="五、部署项目"></a>五、部署项目</h2><h3 id="1-安装Mariadb数据库"><a href="#1-安装Mariadb数据库" class="headerlink" title="1. 安装Mariadb数据库"></a><em>1. 安装Mariadb数据库</em></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># yum -y install mariadb-server mysql</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># systemctl enable mariadb &amp;&amp; systemctl start mariadb</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># mysqladmin -u root -p password &quot;123123&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-导入-smbms-db-sql-数据库-并授权"><a href="#2-导入-smbms-db-sql-数据库-并授权" class="headerlink" title="2. 导入 smbms_db.sql 数据库 并授权"></a><em>2. 导入 smbms_db.sql 数据库 并授权</em></h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridyjb0afj30o104d0st.jpg" alt="image-20200604011047185"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># mysql -uroot -p123123 &lt; smbms_db.sql</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># mysql -u root -p123123</span></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| smbms              |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant all on smbms.* to <span class="string">&#x27;lemon&#x27;</span>@<span class="string">&#x27;192.168.2.1&#x27;</span> identified by <span class="string">&quot;abc22&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h3 id="3-部署超市项目网页"><a href="#3-部署超市项目网页" class="headerlink" title="3. 部署超市项目网页"></a><em>3. 部署超市项目网页</em></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将其超市项目移动至网页存放目录</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># mv WebRoot /usr/local/tomcat/webapps/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改超市项目的数据库连接url、用户名密码</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># cd /usr/local/tomcat/webapps/WebRoot/</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># vim WEB-INF/classes/database.properties</span></span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line"><span class="comment">#在和mysql传递数据的过程中，使用unicode编码格式，并且字符集设置为utf-8</span></span><br><span class="line">url=jdbc:mysql://192.168.2.1:3306/smbms?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">user=lemon</span><br><span class="line">password=abc22</span><br><span class="line">:wq!</span><br></pre></td></tr></table></figure><h3 id="4-重启Tomcat-并访问网页"><a href="#4-重启Tomcat-并访问网页" class="headerlink" title="4. 重启Tomcat 并访问网页"></a><em>4. 重启Tomcat 并访问网页</em></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/shutdown.sh</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/startup.sh</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># netstat -anptu|grep java</span></span><br><span class="line">tcp6       0      0 :::8080             :::*         LISTEN      27025/java          </span><br><span class="line">tcp6       0      0 127.0.0.1:8005      :::*         LISTEN      27025/java          </span><br><span class="line">tcp6       0      0 :::8009             :::*         LISTEN      27025/java</span><br></pre></td></tr></table></figure><ul><li><strong>访问<a href="http://localhost:8080/WebRoot/">http://localhost:8080/WebRoot/</a></strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridyphw75j30u90gi0vw.jpg" alt="image-20200604013053512"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridyrugfxj310j0i2tab.jpg" alt="image-20200604013138703"></p><h2 id="六、Tomcat的常见配置"><a href="#六、Tomcat的常见配置" class="headerlink" title="六、Tomcat的常见配置"></a>六、Tomcat的常见配置</h2><h3 id="1-修改Tomcat默认网页位置"><a href="#1-修改Tomcat默认网页位置" class="headerlink" title="1. 修改Tomcat默认网页位置"></a><em>1. 修改Tomcat默认网页位置</em></h3><ul><li><strong>自定义.jsp页面</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># mkdir -p /usr/local/tomcat/web1</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># cat &lt;&lt;END&gt; /usr/local/tomcat/web1/index.jsp</span></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> import=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">     &lt;title&gt;lemon &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">     &lt;% out.println(<span class="string">&quot;lemon is a hoandsome man&quot;</span>);%&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><ul><li><strong>修改server.xml配置文件 并 重启Tomcat</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/conf/server.xml</span><br><span class="line"># 修改如下:</span><br><span class="line"># 注意：域名是什么就写什么，不要使用默认的localhost，不然别人是可以非法绑定你域名的</span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.lemon.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/usr/local/tomcat/web1&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">prefix</span>=<span class="string">&quot;lemon_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">wq!</span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/startup.sh</span><br><span class="line">[root@tomcat ~]# netstat -anptu|grep java</span><br><span class="line">tcp6       0      0 :::8080             :::*         LISTEN      27025/java          </span><br><span class="line">tcp6       0      0 127.0.0.1:8005      :::*         LISTEN      27025/java          </span><br><span class="line">tcp6       0      0 :::8009             :::*         LISTEN      27025/java</span><br></pre></td></tr></table></figure><ul><li><strong>访问<a href="http://www.lemon.com:8080/">http://www.lemon.com:8080/</a></strong><ul><li>注：需要添加host解析</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridyvyv4fj30tb02mmx3.jpg" alt="image-20200604014626390"></p><h3 id="2-配置基于域名的虚拟主机"><a href="#2-配置基于域名的虚拟主机" class="headerlink" title="2. 配置基于域名的虚拟主机"></a><em>2. 配置基于域名的虚拟主机</em></h3><ul><li><strong>自定义.jsp页面</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># mkdir -p /usr/local/tomcat/web2</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># cat &lt;&lt;END&gt; /usr/local/tomcat/web2/index.jsp</span></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> import=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">     &lt;title&gt;good &lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">     &lt;% out.println(<span class="string">&quot;good is a hoandsome man&quot;</span>);%&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><ul><li><strong>修改server.xml配置文件 并 重启Tomcat</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/server.xml</span><br><span class="line"># 直接再添加一对<span class="tag">&lt;/<span class="name">Host</span>&gt;</span>:</span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.good.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/usr/local/tomcat/web2&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">prefix</span>=<span class="string">&quot;good_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">wq!</span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/startup.sh</span><br><span class="line">[root@tomcat ~]# netstat -anptu|grep java</span><br><span class="line">tcp6       0      0 :::8080             :::*         LISTEN      27025/java          </span><br><span class="line">tcp6       0      0 127.0.0.1:8005      :::*         LISTEN      27025/java          </span><br><span class="line">tcp6       0      0 :::8009             :::*         LISTEN      27025/java</span><br></pre></td></tr></table></figure><ul><li><strong>访问<a href="http://www.good.com:8080/">http://www.good.com:8080</a></strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridz0qf7pj30t802bq2v.jpg" alt="image-20200604015241686"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridz4vq98j30p0023gli.jpg" alt="image-20200604113008284"></p><h3 id="3-配置Tomcat双实例"><a href="#3-配置Tomcat双实例" class="headerlink" title="3. 配置Tomcat双实例"></a><em>3. 配置Tomcat双实例</em></h3><blockquote><p><strong>直接在添加一对</Service>且 将其名字、端口号改掉</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/server.xml</span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;lemon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8010&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.lemon.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/usr/local/tomcat/web1&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;lemon_8081_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.good.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/usr/local/tomcat/web2&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;good_8081_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line">wq!</span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/startup.sh</span><br><span class="line">[root@tomcat ~]# netstat -anptu|grep java</span><br><span class="line">tcp6       0      0 :::8080          :::*            LISTEN      27422/java          </span><br><span class="line">tcp6       0      0 :::8081          :::*            LISTEN      27422/java          </span><br><span class="line">tcp6       0      0 127.0.0.1:8005   :::*            LISTEN      27422/java          </span><br><span class="line">tcp6       0      0 :::8009          :::*            LISTEN      27422/java          </span><br><span class="line">tcp6       0      0 :::8010          :::*            LISTEN      27422/java</span><br></pre></td></tr></table></figure><ul><li><strong>访问<a href="http://www.lemon.com:8080/">http://www.lemon.com:8080</a></strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridzcf9oej30t8023dfr.jpg" alt="image-20200604020032963"></p><ul><li><strong>访问<a href="http://www.lemon.com:8081/">http://www.lemon.com:8081</a></strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridze6iluj30t9020a9z.jpg" alt="image-20200604020111690"></p><ul><li><strong>查看Tomcat访问日志</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gridzglpuvj313h06n0tc.jpg" alt="image-20200604020217173"></p><h3 id="4-定义默认页面（不建议修改）"><a href="#4-定义默认页面（不建议修改）" class="headerlink" title="4. 定义默认页面（不建议修改）"></a><em>4. 定义默认页面（不建议修改）</em></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/web.xml</span><br><span class="line">4693     <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">4694         <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">4695         <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">4696         <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">4697     <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">wq!</span><br><span class="line">重启Tomcat服务</span><br></pre></td></tr></table></figure><h3 id="5-设置页面超时时间（按情况而定）"><a href="#5-设置页面超时时间（按情况而定）" class="headerlink" title="5. 设置页面超时时间（按情况而定）"></a><em>5. 设置页面超时时间（按情况而定）</em></h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/web.xml</span><br><span class="line">595     <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">596         <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">597     <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">wq!</span><br><span class="line">重启Tomcat服务</span><br></pre></td></tr></table></figure><h3 id="6-禁止列出目录（不建议更改）"><a href="#6-禁止列出目录（不建议更改）" class="headerlink" title="6. 禁止列出目录（不建议更改）"></a><em>6. 禁止列出目录（不建议更改）</em></h3><ul><li>默认就是禁止的，如果不想禁止，将false改成true就行。<strong>但是最好不要改！！！</strong></li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/web.xml</span><br><span class="line">110        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">111            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">112            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">113        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">wq!</span><br><span class="line">重启Tomcat服务</span><br></pre></td></tr></table></figure><h2 id="七、Tomcat-的三种工作模式"><a href="#七、Tomcat-的三种工作模式" class="headerlink" title="七、Tomcat 的三种工作模式"></a>七、Tomcat 的三种工作模式</h2><h3 id="1-同步、异步、阻塞、非阻塞的理念"><a href="#1-同步、异步、阻塞、非阻塞的理念" class="headerlink" title="1. 同步、异步、阻塞、非阻塞的理念"></a><em>1. 同步、异步、阻塞、非阻塞的理念</em></h3><ul><li><p><strong>同步：</strong>自己亲自出马持银行卡到银行排队取钱。事必须一件一件事做，等前一件事情做完了才能做下一件事。</p></li><li><p><strong>异步：</strong>异步的概念和同步相对。委托一小弟拿银行卡到银行取钱，然后给你。</p></li><li><p><strong>阻塞：</strong>ATM排队取款，你只能等待。</p></li><li><p><strong>非阻塞：</strong>柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去。</p></li><li><p>总结：同步和异步是一个过程，阻塞和非阻塞是线程的一种状态。</p></li></ul><h3 id="2-Tomcat的三种模式"><a href="#2-Tomcat的三种模式" class="headerlink" title="2. Tomcat的三种模式"></a><em>2. Tomcat的三种模式</em></h3><p>（1）<strong>bio：同步阻塞</strong></p><ul><li><p>即阻塞式I/O操作，表示Tomcat使用的是传统的Java I/O操作(即java.io包及其子包)。一个线程处理一个请求，缺点：并发量高时，线程数较多，浪费资源。</p></li><li><p>使用方式：现在通常不使用</p></li></ul><p>（2）<strong>nio：同步非阻塞</strong></p><ul><li><p>Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。利用 Java 的异步请求 IO 处理，可以通过少量的线程处理大量的请求。</p></li><li><p>使用方式：tomcat默认模式</p></li></ul><p>（3）<strong>apr</strong>：<strong>异步非阻塞</strong></p><ul><li><p>Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。<em>Tomcat apr也是在Tomcat上运行高并发应用的首选模式。</em></p></li><li><p>使用方式：在server.xml中更改使用的协议，更加详细的说明可以之间看tomcat的文档。</p></li></ul><h3 id="3-BIO、NIO、AIO适用场景分析"><a href="#3-BIO、NIO、AIO适用场景分析" class="headerlink" title="3. BIO、NIO、AIO适用场景分析"></a><em>3. BIO、NIO、AIO适用场景分析</em></h3><ul><li><p><strong>BIO</strong>方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</p></li><li><p><strong>NIO</strong>方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</p></li><li><p><strong>AIO</strong>方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</p></li></ul><h3 id="4-Tomcat三种模式性能比较"><a href="#4-Tomcat三种模式性能比较" class="headerlink" title="4. Tomcat三种模式性能比较"></a><em>4. Tomcat三种模式性能比较</em></h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie0iq4o7j30ob0i2121.jpg" alt="image-20200604115521857"></p><h2 id="八、Tomcat优化"><a href="#八、Tomcat优化" class="headerlink" title="八、Tomcat优化"></a>八、Tomcat优化</h2><ul><li><p>对于Tomcat软件的优化，主要是从2个方面入手</p><ul><li>Tomcat自身的配置文件调优</li><li>Tomcat所运行的 Jvm 虚拟机的调优；针对JVM的调优主要有两个方面：内存调优和垃圾回收策略调优。</li></ul></li><li><p>服务器资源</p><ul><li>CPU</li><li>内存</li><li>硬盘</li></ul></li><li><p>注：最好调优完成后测试以下，看看性能方面是否提升</p></li></ul><h3 id="1-Tomcat自身的配置文件调优"><a href="#1-Tomcat自身的配置文件调优" class="headerlink" title="1. Tomcat自身的配置文件调优"></a><em>1. Tomcat自身的配置文件调优</em></h3><h4 id="1-1-禁用AJP协议连接器节省系统资源"><a href="#1-1-禁用AJP协议连接器节省系统资源" class="headerlink" title="1.1.  禁用AJP协议连接器节省系统资源"></a><em>1.1.  禁用AJP协议连接器节省系统资源</em></h4><ul><li><p><strong>为什么要禁言AJP连接器？</strong></p><ul><li>因为项目中一般使用Nginx + tomcat的架构， 所以用不着AJP协议，一般我们可以把AJP连接器禁用，这样有利于提高Tomcat的性能。</li></ul></li><li><p><strong>怎么禁用？</strong></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/server.xml</span><br><span class="line"># 找到下行配置 注释 就禁用了</span><br><span class="line"><span class="comment">&lt;!-- 禁用AJP连接 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</span></span><br><span class="line">wq!</span><br></pre></td></tr></table></figure><ul><li><em>重启 tomcat，查看效果。可以看到 AJP服务已经不存在了</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie0oo8g2j31020ol76q.jpg" alt="image-20200604143727430"></p><h4 id="1-2-配置网页传输压缩"><a href="#1-2-配置网页传输压缩" class="headerlink" title="1.2. 配置网页传输压缩"></a><em>1.2. 配置网页传输压缩</em></h4><ul><li><strong>如果有apache或nginx的服务做代理，tomcat则没必要在配置网页传输压缩</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/conf/server.xml</span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">compression</span>=<span class="string">&quot;on&quot;</span>          # 开启压缩</span></span><br><span class="line"><span class="tag">               <span class="attr">compressionMinSize</span>=<span class="string">&quot;50&quot;</span>   # 指定最小的压缩文件，单位“字节”</span></span><br><span class="line"><span class="tag">               <span class="attr">noCompressionUserAgents</span>=<span class="string">&quot;gozila,traviata&quot;</span>  # 此浏览器类型不进行压缩</span></span><br><span class="line"><span class="tag"><span class="attr">compressableMimeType</span>=<span class="string">&quot;text/html,text,xml,text,javascript,text/css,text/plain&quot;</span> /&gt;</span></span><br><span class="line"># 压缩的文件格式</span><br><span class="line">wq!</span><br><span class="line">重启服务</span><br></pre></td></tr></table></figure><h4 id="1-3-Tomcat修改为-apr工作模式"><a href="#1-3-Tomcat修改为-apr工作模式" class="headerlink" title="1.3. Tomcat修改为 apr工作模式"></a><em>1.3. Tomcat修改为 apr工作模式</em></h4><ul><li><p><strong>怎么查看当前tomcat的工作模式？</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie0vl6dpj30ol0hkjzj.jpg" alt="image-20200604115755369"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1439tbj30oo04nwfa.jpg" alt="image-20200604115823109"></p></li><li><p><strong>修改apr工作模式</strong></p><ul><li>首先需要安装APR的三个依赖 <a href="http://apr.apache.org/download.cgi">http://apr.apache.org/download.cgi</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie17usd0j30qf02mwel.jpg" alt="image-20200604120127538"></p></li><li><p><strong>安装这些APR包</strong></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、安装相关环境包</span><br><span class="line">[root@tomcat ~]<span class="comment"># yum -y install expat-devel</span></span><br><span class="line"></span><br><span class="line">2、安装apr</span><br><span class="line">[root@tomcat ~]<span class="comment"># tar xf apr-1.6.5.tar.gz &amp;&amp; cd apr-1.6.5</span></span><br><span class="line">[root@tomcat apr-1.6.5]<span class="comment"># ./configure --prefix=/usr/local/apr&amp;&amp;make&amp;&amp;make install&amp;&amp;cd</span></span><br><span class="line"></span><br><span class="line">3、安装apr-iconv</span><br><span class="line">[root@tomcat ~]<span class="comment"># tar xf apr-iconv-1.2.2.tar.gz &amp;&amp; cd apr-iconv-1.2.2/</span></span><br><span class="line">[root@tomcat apr-iconv-1.2.2]<span class="comment"># ./configure --prefix=/usr/local/apr-iconv --with-apr=/usr/local/apr &amp;&amp; make &amp;&amp; make install &amp;&amp; cd</span></span><br><span class="line"></span><br><span class="line">4、 安装apr-util</span><br><span class="line">[root@tomcat ~]<span class="comment"># tar xf apr-util-1.6.1.tar.gz &amp;&amp; cd apr-util-1.6.1</span></span><br><span class="line">[root@tomcat apr-util-1.6.1]<span class="comment"># ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-apr-iconv=/usr/local/apr-iconv/bin/apriconv &amp;&amp; make &amp;&amp; make install &amp;&amp; cd</span></span><br><span class="line"></span><br><span class="line">5、安装Tomcat-native</span><br><span class="line">[root@tomcat ~]<span class="comment"># tar xf /usr/local/tomcat/bin/tomcat-native.tar.gz -C ./</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># cd tomcat-native-1.2.17-src/native/</span></span><br><span class="line">[root@tomcat native]<span class="comment"># ./configure --with-apr=/usr/local/apr&amp;&amp;make&amp;&amp;make install&amp;&amp;cd</span></span><br><span class="line"></span><br><span class="line">6、添加环境变量</span><br><span class="line">[root@tomcat ~]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/apr/lib</span><br><span class="line">wq！</span><br><span class="line">[root@tomcat ~]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line">7、修改Tomcat配置文件</span><br><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/conf/server.xml</span></span><br><span class="line">&lt;Listener className=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> SSLEngine=<span class="string">&quot;off&quot;</span> /&gt;</span><br><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span></span><br><span class="line">wq!</span><br><span class="line">重启服务</span><br></pre></td></tr></table></figure><ul><li><strong>查看是否修改</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1euvjhj31020nvq5d.jpg" alt="image-20200604125954654"></p><h4 id="1-4-Tomcat-修改-nio工作模式"><a href="#1-4-Tomcat-修改-nio工作模式" class="headerlink" title="1.4. Tomcat 修改 nio工作模式"></a><em>1.4. Tomcat 修改 nio工作模式</em></h4><ul><li><strong>修改nio工作模式</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/conf/server.xml</span></span><br><span class="line"><span class="comment"># 修改成nio模式</span></span><br><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span><br><span class="line">wq！</span><br><span class="line">重启服务</span><br></pre></td></tr></table></figure><ul><li><strong>查看是否修改</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1hozdmj31020nvdi9.jpg" alt="image-20200604130102965"></p><h3 id="2-Tomcat所运行的-Jvm-的调优。"><a href="#2-Tomcat所运行的-Jvm-的调优。" class="headerlink" title="2. Tomcat所运行的 Jvm 的调优。"></a><em>2. Tomcat所运行的 Jvm 的调优。</em></h3><h4 id="2-1-Tomcat内存调优"><a href="#2-1-Tomcat内存调优" class="headerlink" title="2.1. Tomcat内存调优"></a><em>2.1. Tomcat内存调优</em></h4><ul><li><p><em><strong>找到catalina.sh文件中JAVA_OPTS变量即可，因为后面的启动参数会把JAVA_OPTS作为JVM的启动参数来处理</strong></em></p></li><li><p><em><strong>内存调优这块呢，无非就是通过修改它们各自的内存空间的大小，使应用能够更加合理的运用：</strong></em></p></li><li><p><em><strong>注意：不是JVM内存设置越大越好，具体还是根据项目对象实际占用内存大小而定，可以通过Java自带的分析工具来查看。如果设置过大，会增加回收时间，从而增加暂停应用时间。</strong></em></p></li><li><p><em><strong>内存结构图</strong></em></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1l2dtgj30go08zn0w.jpg" alt="image-20200614100756851"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/bin/catalina.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1pm2laj313k01tjri.jpg" alt="image-20200614100357537"></p><ul><li><em><strong>参数说明：</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding 默认文件编码</span><br><span class="line"></span><br><span class="line">-Xms1024m 设置JVM最小内存为1024m。此值可以设置与-Xmx相同，避免每次垃圾回收完成后JVM重新分配内存</span><br><span class="line"></span><br><span class="line">-Xmx1024m 设置JVM最大可用内存为1024MB</span><br><span class="line"></span><br><span class="line">-XX:NewSize 设置年轻代大小</span><br><span class="line"></span><br><span class="line">-XX:MaxNewSize 设置最大的年轻代大小</span><br><span class="line"></span><br><span class="line">-XX:PermSize 设置永久代大小</span><br><span class="line"></span><br><span class="line">-XX:MaxPermSize 设置最大永久代大小</span><br><span class="line"></span><br><span class="line">-XX:NewRatio=4 设置年轻代（包括Eden和两个Survivor区）与终身代的比值（除去永久代）。设置为4，则年轻代与终身代所占比值为1：4，年轻代占整个堆栈的1/5</span><br><span class="line"></span><br><span class="line">-XX:MaxTenuringThreshold=0 设置垃圾最大年龄，默认为：15。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</span><br><span class="line"></span><br><span class="line">-XX:+DisableExplicitGC 这个将会忽略手动调用GC的代码使得System.gc()的调用就会变成一个空调用，完全不会触发任何GC。</span><br></pre></td></tr></table></figure><p><em><strong>AB压力测试</strong></em></p><ul><li><p><strong>作用：</strong>Apache 附带了压力测试工具 ab，非常容易使用，并且完全可以模拟各种条件对 Web 服务器发起测试请求。在进行性能调整优化过程中，可用 ab 压力测试工具进行优化效果的测试。</p></li><li><p><strong>语法：</strong>ab -n 请求数总和 -c 并发用户数 网站网址</p></li><li><p><strong>重要输出参数：</strong></p><ul><li>Concurrency Level           并发的用户数</li><li>Time taken for tests        表示所有请求被处理完成所花费的总时间   <strong>越少越好</strong></li><li>Complete requests         总请求数</li><li>Failed requests                表示失败的请求数量    <strong>越少越好</strong></li><li>Requests per second     吞吐率，每秒能处理多少个并发   <strong>越多越好</strong></li><li>Transfer rate                    每秒处理字节数的大小     <strong>越多越好</strong></li></ul></li></ul><blockquote><p><em><strong>未加入配之前压力测试结果</strong></em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># ab -n 500000 -c 1000 http://192.168.2.1:8080/</span></span><br></pre></td></tr></table></figure><ul><li><p>第一次测试结果</p><ul><li>Time taken for tests:   <strong>29.393</strong> seconds       <strong>越少越好</strong></li><li>Requests per second:    <strong>17010.63</strong> [#/sec] (mean)      <strong>越多越好</strong></li><li>Transfer rate:          <strong>188412.68</strong> [Kbytes/sec] received     <strong>越多越好</strong></li></ul></li><li><p>第二次测试结果</p><ul><li>Time taken for tests:   <strong>24.984</strong> seconds</li><li>Requests per second:    <strong>20013.16</strong> [#/sec] (mean)</li><li>Transfer rate:          <strong>221669.22</strong> [Kbytes/sec] received</li></ul></li></ul><p><em><strong>加入配之前压力测试结果</strong></em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/bin/catalina.sh</span></span><br><span class="line">111 JAVA_OPTS=<span class="string">&quot;-Dfile.encoding=UTF-8-server -Xms2048m -Xmx2048m -XX:NewSize=512m -XX:MaxNewSize=1024m&quot;</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/shutdown.sh</span></span><br><span class="line">[root@tomcat ~]<span class="comment"># /usr/local/tomcat/bin/startup.sh</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]<span class="comment"># ab -n 500000 -c 1000 http://192.168.2.1:8080/</span></span><br></pre></td></tr></table></figure><ul><li><p>第一次测试结果</p><ul><li>Time taken for tests:   <strong>26.420</strong> seconds</li><li>Requests per second:    <strong>18924.84</strong> [#/sec] (mean)</li><li>Transfer rate:          <strong>210039.88</strong> [Kbytes/sec] received</li></ul></li><li><p>第二次测试结果</p><ul><li>Time taken for tests:   <strong>21.101</strong> seconds</li><li>Requests per second:    <strong>23695.83</strong> [#/sec] (mean)</li><li>Transfer rate:          <strong>262991.32</strong> [Kbytes/sec] received</li></ul></li></ul></blockquote><h4 id="2-2-垃圾回收策略调优"><a href="#2-2-垃圾回收策略调优" class="headerlink" title="2.2. 垃圾回收策略调优"></a>2.2. 垃圾回收策略调优</h4><ul><li><em><strong>找到Tomcat根目录下的bin目录，也是设置catalina.sh文件中JAVA_OPTS变量即可。我们都知道Java虚拟机都有默认的垃圾回收机制，但是不同的垃圾回收机制的效率是不同的，正是因为这点我们才经常对Java虚拟机的垃圾回收策略进行相应的调整。下面也是通过我的一些需求来配置的垃圾回收策略：</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]<span class="comment"># vim /usr/local/tomcat/bin/catalina.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1tvdj4j316h02l3yr.jpg" alt="image-20200614101234535"></p><ul><li><em><strong>Java虚拟机的垃圾回收策略一般分为：串行收集器、并行收集器和并发收集器</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 串行收集器：</span></span><br><span class="line">1、-XX:+UseSerialGC：代表垃圾回收策略为串行收集器，即在整个扫描和复制过程采用单线程的方式来进行，适用于单CPU、新生代空间较小及对暂停时间要求不是非常高的应用上，是client级别默认的GC方式，主要在JDK1.5之前的垃圾回收方式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 并发收集器：</span></span><br><span class="line">1、-XX:+UseParallelGC：代表垃圾回收策略为并行收集器(吞吐量优先)，即在整个扫描和复制过程采用多线程的方式来进行，适用于多CPU、对暂停时间要求较短的应用上，是server级别默认采用的GC方式。此配置仅对年轻代有效。该配置只能让年轻代使用并发收集，而年老代仍旧使用串行收集。</span><br><span class="line"></span><br><span class="line">2、-XX:ParallelGCThreads=4：配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。</span><br><span class="line"></span><br><span class="line">3、-XX:+UseParallelOldGC：配置年老代垃圾收集方式为并行收集。JDK6.0支持对年老代并行收集 。</span><br><span class="line"></span><br><span class="line">4、-XX:MaxGCPauseMillis=100 ：设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。</span><br><span class="line"></span><br><span class="line">5、-XX:+UseAdaptiveSizePolicy：设置此选项后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低相应时间或者收集频率等，此值建议使用并行收集器时，一直打开。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 并发收集器：</span></span><br><span class="line">1、-XX:+UseConcMarkSweepGC:代表垃圾回收策略为并发收集器。</span><br></pre></td></tr></table></figure><ul><li>以上的各种GC机制是需要组合使用的，制定方式有下表所示</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grie1w296oj30gi0czq39.jpg" alt="image-20200614101513638"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2021/06/15/Nginx/"/>
      <url>/2021/06/15/Nginx/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Nginx原理介绍"><a href="#Nginx原理介绍" class="headerlink" title="Nginx原理介绍"></a>Nginx原理介绍</h1><h2 id="1-1-Nginx-概述"><a href="#1-1-Nginx-概述" class="headerlink" title="1.1 Nginx 概述"></a>1.1 Nginx 概述</h2><blockquote><p>Nginx是⼀一个开源且⾼高性能、可靠的HTTP中间件、代理理服务。</p><p>开源: 直接获取源代码</p><p>高性能: 支持海海量量并发</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/ngi.png" alt="image-2020062420084954569"></p><h2 id="1-2-Nginx的优缺点"><a href="#1-2-Nginx的优缺点" class="headerlink" title="1.2 Nginx的优缺点"></a>1.2 Nginx的优缺点</h2><ul><li><p><strong>优点</strong></p><ul><li><strong>高并发量</strong><ul><li>根据官方给出的数据，能够支持高达 50000 个<a href="https://baike.sogou.com/v193462.htm">并发连接数</a>的响应。</li></ul></li><li><strong>内存消耗少</strong><ul><li>处理静态文件，同样起web 服务，比apache 占用更少的内存及资源，所以它是轻量级的。</li></ul></li><li><strong>简单稳定</strong><ul><li>配置简单，基本在一个conf文件中配置，性能比较稳定，可以7*24小时长时间不间断运行。</li></ul></li><li><strong>支持Rwrite重写规则</strong><ul><li>能够根据域名、URL的不同， 将HTTP请求分发到不同的后端服务器群组。</li></ul></li><li><strong>功能多，低成本</strong><ul><li>Nginx可以做高并发的负载均衡，且Nginx是开源免费的，如果使用F5等硬件来做负载均衡，硬件成本比较高。</li></ul></li></ul></li><li><p><strong>缺点</strong></p><ul><li><strong>动态处理差</strong><ul><li>Nginx处理静态文件好，耗费内存少，但是处理动态页面则很鸡肋</li></ul></li><li><strong>rewrite弱</strong><ul><li>虽然Nginx支持rewrite功能，但是相比于Apache来说，Apache比nginx 的rewrite 要强大。</li></ul></li></ul></li></ul><h2 id="1-3-Nginx应用场景"><a href="#1-3-Nginx应用场景" class="headerlink" title="1.3 Nginx应用场景"></a>1.3 Nginx应用场景</h2><blockquote><p>静态处理</p><p>反向代理</p><p>负载均衡</p><p>资源缓存</p><p>安全防护</p><p>访问限制</p><p>访问认证</p></blockquote><h2 id="1-4-Nginx的进程模型"><a href="#1-4-Nginx的进程模型" class="headerlink" title="1.4 Nginx的进程模型"></a>1.4 Nginx的进程模型</h2><blockquote><p><strong>Nginx的启动方式有两种：</strong></p></blockquote><ul><li><p><strong>单进程启动：</strong></p><ul><li>此时系统中只有一个进程，这个进程既是master进程，也是worker进程。</li></ul></li><li><p><strong>多进程启动：</strong></p><ul><li>此时系统中有且仅有一个master进程，有多个worker进程，master进程主要是用来管理worker进程的。</li></ul></li></ul><blockquote><p><strong>Nginx有两种进程：</strong></p></blockquote><p><strong>Master主进程：</strong></p><ol><li>接收客户端的请求，然后在将客户端的请求交给他下面的子进程，子进程返回处理结果后，再将处理结果返回给客户端</li><li>监控并管理子进程的运行状态，当子进程出现异常情况下退出后，自动生成新的子进程</li></ol><p><strong>Worker子进程：</strong></p><ol><li>将主进程的请求交给内核去处理，然后在继续接收主进程发来的请求，当内核处理完后，返回给子进程处理结果，然后子进程再将结果返回给主进程。</li><li>Nginx子进程的数量一般我们会设置与当前服务器的CPU核心数一致，可以使用<code>auto</code>指令让Nginx跟进系统自动设置worker</li></ol><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200621181846932.png" alt="image-20200621181846932"></p><h2 id="1-5-Nginx的组成逻辑图"><a href="#1-5-Nginx的组成逻辑图" class="headerlink" title="1.5 Nginx的组成逻辑图"></a>1.5 Nginx的组成逻辑图</h2><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624200849579.png" alt="image-20200624200849579"></p><h2 id="1-6-Nginx的模块是什么"><a href="#1-6-Nginx的模块是什么" class="headerlink" title="1.6 Nginx的模块是什么"></a>1.6 Nginx的模块是什么</h2><blockquote><p>Nginx之所以有如此多的特性和功能，就是因为有大量的第三方开发者为其开发第三方模块</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624213430515.png" alt="image-20200624213430515"></p><p>上图中都可以在<a href="http://nginx.org/en/docs/">nginx官方文档</a>中查询，这里就不再叙述了~~</p><h1 id="Nginx应用部署"><a href="#Nginx应用部署" class="headerlink" title="Nginx应用部署"></a>Nginx应用部署</h1><h2 id="1-1-进入-nginx-官网，下载"><a href="#1-1-进入-nginx-官网，下载" class="headerlink" title="1.1 进入 nginx 官网，下载"></a>1.1 进入 nginx 官网，下载</h2><blockquote><p><strong>Nginx官方网站：<a href="http://nginx.org/">http://nginx.org/</a></strong></p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200621205106691.png" alt="image-20200621205106691"></p><h2 id="1-2-安装Nginx依赖"><a href="#1-2-安装Nginx依赖" class="headerlink" title="1.2 安装Nginx依赖"></a>1.2 安装Nginx依赖</h2><blockquote><p><strong>安装 openssl、zlib</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc gcc-c++ libtool openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure><h2 id="1-3-安装Nginx并修改属主属祖"><a href="#1-3-安装Nginx并修改属主属祖" class="headerlink" title="1.3 安装Nginx并修改属主属祖"></a>1.3 安装Nginx并修改属主属祖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar xf nginx-1.12.2.tar.gz -C /usr/src/ &amp;&amp; <span class="built_in">cd</span> /usr/src/nginx-1.12.2/</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置、编译、安装</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module &amp;&amp; make &amp;&amp; make install &amp;&amp; <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改属主属组</span></span><br><span class="line">useradd -s /sbin/nologin -M nginx</span><br><span class="line">chown -R nginx:nginx /usr/<span class="built_in">local</span>/nginx/</span><br></pre></td></tr></table></figure><blockquote><p><strong>编译参数解释：</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这三个模块是用来做四层负载转发的</span></span><br><span class="line">--with-stream</span><br><span class="line">--with-stream_ssl_module</span><br><span class="line">--with-stream_realip_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定安装位置</span></span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定worker进程运行的用户和组</span></span><br><span class="line">--user=nginx --group=nginx   </span><br><span class="line"></span><br><span class="line"><span class="comment">#开启状态监听模块 </span></span><br><span class="line">--with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#指向配置文件存放位置</span></span><br><span class="line">--conf-path=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#指向错误日志存放位置</span></span><br><span class="line">--error-log-path=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#指向pid文件存放位置 </span></span><br><span class="line">--pid-path=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用rtsig模块支持（实时信号）</span></span><br><span class="line">--with-rtsig_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时缓存⽂文件</span></span><br><span class="line">--http-client-body-temp-path=/xxx/xxx/client_tem</span><br><span class="line">--http-proxy-temp-path=/xxx/xxx/proxy_temp</span><br><span class="line">--http-fastcgi-temp-path=/xxx/xxx/fastcgi_temp</span><br><span class="line">--http-uwsgi-temp-path=/xxx/xxx/uwsgi_temp</span><br><span class="line">--http-scgi-temp-path=/xxx/xxx/scgi_temp</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加模块</span></span><br><span class="line">--add-module=/xxx/xxx/</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用select模块支持（一种轮询模式,不推荐在高载环境下使用）禁用：--without-select_module</span></span><br><span class="line">--with-select_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_ssl_module支持(使支持https请求，需已安装openssl)</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_xslt_module支持（过滤转换XML请求）</span></span><br><span class="line">--with-http_xslt_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_image_filter_module支持（传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用，要用到gd库） </span></span><br><span class="line">--with-http_image_filter_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）</span></span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用ngx_http_degradation_module支持（允许在内存不足的情况下返回204或444码）</span></span><br><span class="line">--with-http_degradation_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_access_module支持（该模块提供了一个简单的基于主机的访问控制，允许或拒绝基于ip地址）</span></span><br><span class="line">--without-http_access_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_auth_basic_module（该模块是可以使用用户名和密码基于http基本认证方法，来保护你的站点或其部分内容）</span></span><br><span class="line">--without-http_auth_basic_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_rewrite_module支持（该模块允许使用正则表达式改变URL）</span></span><br><span class="line">--without-http_rewrite_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用ngx_http_fastcgi_module支持（该模块允许Nginx 与FastCGI 进程交互，并通过传递参数来控制FastCGI 进程工作。）</span></span><br><span class="line">--without-http_fastcgi_module</span><br></pre></td></tr></table></figure><h2 id="1-4-设置防火墙规则"><a href="#1-4-设置防火墙规则" class="headerlink" title="1.4 设置防火墙规则"></a>1.4 设置防火墙规则</h2><blockquote><p><strong>开放80端口号</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看开放的端口号</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line">设置开放的端口号</span><br><span class="line">firewall-cmd --add-service=http -permanent</span><br><span class="line">sudo firewall-cmd --add-port=80/tcp -permanent</span><br><span class="line"></span><br><span class="line">重启防火墙</span><br><span class="line">firewall-cmd -reload</span><br></pre></td></tr></table></figure><h2 id="1-5-Nginx常用命令-及-信号"><a href="#1-5-Nginx常用命令-及-信号" class="headerlink" title="1.5 Nginx常用命令 及 信号"></a>1.5 Nginx常用命令 及 信号</h2><blockquote><p><strong>命令</strong></p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624203124482.png" alt="image-20200624203124482"></p><blockquote><p><strong>信号</strong></p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/Snipaste_-56.png" alt="image-202006242333124482"></p><p><strong>信号详解：</strong></p><p>1、TERM，INT：nginx的主进程马上被关闭，不能完整处理正在使用的nginx的用户的请求，等同于 nginx -s stop。</p><p>2、QUIT：优雅的关闭nginx进程，在处理完所有正在使用nginx用户请求后再关闭nginx进程，等同于nginx -s quit。</p><p>3、HUP： nginx主进程不变，nginx进程不关闭，但是重新加载配置文件。等同于nginx -s reload。</p><p>4、USR1：不用关闭nginx进程就可以重读日志，此命令可以用于nginx的日志定时备份，按月/日等时间间隔分割有用。</p><p>5、USR2：nginx的版本需要升级的时候，不需要停止nginx，就能对nginx升级。</p><p>6、WINCH：配合USR2对nginx升级，优雅的关闭nginx旧版本的进程，</p><blockquote><p>reload重载配置文件的过程</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/1.png" alt="image-20200624211822429"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624211822429.png" alt="image-20200624211822429"></p><h2 id="1-6-优化Nginx且编写启动脚本"><a href="#1-6-优化Nginx且编写启动脚本" class="headerlink" title="1.6 优化Nginx且编写启动脚本"></a>1.6 优化Nginx且编写启动脚本</h2><blockquote><p><strong>两者做一个就行，当然也可以都做</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/* /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx启动脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /lib/systemd/system/nginx.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=nginx</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/nginx/sbin/nginx</span></span><br><span class="line"><span class="string">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span></span><br><span class="line"><span class="string">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给予启动脚本执行权限</span></span><br><span class="line">chmod u+x /lib/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述脚本解释</span></span><br><span class="line">[Unit]:服务的说明</span><br><span class="line">Description:描述服务</span><br><span class="line">After:描述服务类别</span><br><span class="line">[Service]服务运行参数的设置，注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span><br><span class="line">Type=forking是后台运行的形式</span><br><span class="line">ExecStart为服务的具体运行命令</span><br><span class="line">ExecReload为重启命令</span><br><span class="line">ExecStop为停止命令</span><br><span class="line">PrivateTmp=True表示给服务分配独立的临时空间</span><br><span class="line">[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure><h2 id="1-7-启动Nginx服务"><a href="#1-7-启动Nginx服务" class="headerlink" title="1.7 启动Nginx服务"></a>1.7 启动Nginx服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除nginx.conf配置文件所有的注释行和空行（这步可有可无）</span></span><br><span class="line">sed -i /<span class="comment">#.*/d /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">sed -i /^$/d /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">netstat -anptu|grep <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      4827/nginx: master</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line"></span><br><span class="line">ps -aux|grep <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line">root 4827  0.0  0.1  46108  1152 ?  Ss  21:56   0:00 nginx: master process /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">nginx      4830  0.0  0.1  46556  1936 ?        S    21:56   0:00 nginx: worker process</span><br><span class="line">root       4849  0.0  0.0 112676   980 pts/0    R+   21:57   0:00 grep --color=auto nginx</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装Nginx时的编译参数和版本</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br><span class="line">nginx version: nginx/1.12.2</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br><span class="line"><span class="comment">#####################################################################################################</span></span><br></pre></td></tr></table></figure><h1 id="Nginx常用模块及内置变量"><a href="#Nginx常用模块及内置变量" class="headerlink" title="Nginx常用模块及内置变量"></a>Nginx常用模块及内置变量</h1><h2 id="1-1-Nginx常用模块"><a href="#1-1-Nginx常用模块" class="headerlink" title="1.1 Nginx常用模块"></a>1.1 Nginx常用模块</h2><blockquote><p><strong>Nginx模块分为 Nginx官方模块 以及 Nginx第三方模块</strong></p></blockquote><table><thead><tr><th>Nginx编译选项</th><th>模块作用</th></tr></thead><tbody><tr><td>ngx_http_core_module</td><td>包含⼀些核心的http参数配置，对应Nginx的配置区块部分</td></tr><tr><td>ngx_http_access_module</td><td>访问控制模块，用来控制网站用户对Nginx的访问</td></tr><tr><td>ngx_http_gzip_module</td><td>压缩模块，对Nginx返回的数据压缩，属于性能优化模块</td></tr><tr><td>ngx_http_fastcgi_module</td><td>fastci模块，和动态应用相关的模块，例如PHP</td></tr><tr><td>ngx_http_proxy_module</td><td>proxy代理模块</td></tr><tr><td>ngx_http_upstream_module</td><td>负载均衡模块，可以实现网站的负载均衡功能及节点的健康检查。</td></tr><tr><td>ngx_http_rewrite_module</td><td>URL地址重写模块</td></tr><tr><td>ngx_http_limit_conn_module</td><td>限制用户并发连接数及请求数模块</td></tr><tr><td>ngx_http_limit_req_module</td><td>限制Nginx request processing rate根据定义的key</td></tr><tr><td>ngx_http_log_module</td><td>访问日志模块，以指定的格式记录Nginx客户访问日志等信息</td></tr><tr><td>ngx_http_auth_basic_module</td><td>Web认证模块，设置Web用户通过账号密码访问Nginx</td></tr><tr><td>nginx_http_ssl_module</td><td>ssl模块，用于加密的http连接，如https</td></tr></tbody></table><h2 id="1-2-Nginx内置变量"><a href="#1-2-Nginx内置变量" class="headerlink" title="1.2 Nginx内置变量"></a>1.2 Nginx内置变量</h2><blockquote><p><strong>http请求变量</strong></p><p><strong>Nginx内置变量</strong></p><p><strong>自定义变量</strong></p></blockquote><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>$uri</td><td>当前请求的uri，不带参数</td></tr><tr><td>$request_uri</td><td>请求的uri，带完整参数</td></tr><tr><td>$host</td><td>http请求报文中host首部,如果没有则以处理此请求的虚拟主机的主机名代替</td></tr><tr><td>$hostname</td><td>nginx服务运行在主机的主机名</td></tr><tr><td>$remote_addr</td><td>客户端IP</td></tr><tr><td>$remote_port</td><td>客户端口</td></tr><tr><td>$remote_user</td><td>用户认证时客户端用户输入的用户名</td></tr><tr><td>$request_filename</td><td>用户请求中的URI经过本地root或alias转换后映射的本地文件路径</td></tr><tr><td>$request_method</td><td>请求方法, GET POST PUT</td></tr><tr><td>$server_addr</td><td>服务器地址</td></tr><tr><td>$server_port</td><td>服务器端口</td></tr><tr><td>$server_name</td><td>服务器名称</td></tr><tr><td>$server_protocol</td><td>服务器向客户端发送响应时的协议, 如http/1.1 http/1.0</td></tr><tr><td>$scheme</td><td>在请求中使用scheme, 如<a href="http://xxx.com中的http/">http://xxx.com中的http</a></td></tr><tr><td>$http_HEADER</td><td>匹配请求报文中指定的HEADER</td></tr><tr><td>$http_host</td><td>匹配请求报文中的host首部</td></tr><tr><td>$document_root</td><td>当前请求映射到的root配置</td></tr></tbody></table><h1 id="Nginx-conf-配置文件"><a href="#Nginx-conf-配置文件" class="headerlink" title="Nginx.conf 配置文件"></a><a href="https://www.cnblogs.com/dongye95/p/11096785.html#_label2_0">Nginx.conf 配置文件</a></h1><h2 id="1-1-Nginx配置文件语法"><a href="#1-1-Nginx配置文件语法" class="headerlink" title="1.1 Nginx配置文件语法"></a>1.1 Nginx配置文件语法</h2><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624202639852.png" alt="image-20200624202639852"></p><h2 id="1-2-配置文件整体结构"><a href="#1-2-配置文件整体结构" class="headerlink" title="1.2 配置文件整体结构"></a>1.2 配置文件整体结构</h2><p><strong>Nginx主配置文件 nginx.conf，整个配置文件是以区块的形式组织的；一般，每个区块以一对大括号 {} 来表示开始与结束。</strong></p><blockquote><ol><li><p>Main位于nginx.conf配置文件的最高层；Main层下可以有Event、HTTP层</p></li><li><p>HTTP层下面允许有多个Server层, 用于对不同的网站做不同的配置</p></li><li><p>Server层也允许有多个location, 用于对不同的路径资源进行不同模块的配置</p></li></ol></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200621230154767.png" alt="image-20200621230154767"></p><h3 id="1-2-1-main全局块"><a href="#1-2-1-main全局块" class="headerlink" title="1.2.1 main全局块"></a>1.2.1 main全局块</h3><p>配置影响nginx全局的指令。主要包括：</p><ul><li>配置运行Nginx服务器用户（组）</li><li>worker process数</li><li>Nginx进程</li><li>PID存放路径错误日志的存放路径</li><li>配置文件的引入</li></ul><h3 id="1-2-2-events块"><a href="#1-2-2-events块" class="headerlink" title="1.2.2 events块"></a>1.2.2 events块</h3><p>配置影响nginx服务器或与用户的网络连接。主要包括：</p><ul><li>设置网络连接的序列化</li><li>是否允许同时接收多个网络连接</li><li>事件驱动模型的选择</li><li>最大连接数的配置</li></ul><h3 id="1-2-3-http块"><a href="#1-2-3-http块" class="headerlink" title="1.2.3 http块"></a>1.2.3 http块</h3><p>可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。主要包括：</p><ul><li>定义MIMI-Type</li><li>自定义服务日志</li><li>允许sendfile方式传输文件</li><li>连接超时时间</li><li>单连接请求数上限</li></ul><h3 id="1-2-4-server块"><a href="#1-2-4-server块" class="headerlink" title="1.2.4 server块"></a>1.2.4 server块</h3><p>配置虚拟主机的相关参数，一个http中可以有多个server。主要包括：</p><ul><li>配置网络监听</li><li>基于名称的虚拟主机配置</li><li>基于IP的虚拟主机配置</li></ul><h3 id="1-2-5-location块"><a href="#1-2-5-location块" class="headerlink" title="1.2.5 location块"></a>1.2.5 location块</h3><p>配置请求的路由，以及各种页面的处理情况。主要包括：</p><ul><li>location配置</li><li>请求根目录配置更改</li><li>location的URI</li><li>网站默认首页配置</li></ul><h2 id="1-3-Nginx的默认配置"><a href="#1-3-Nginx的默认配置" class="headerlink" title="1.3 Nginx的默认配置"></a>1.3 Nginx的默认配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### main全局块 ####</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;                           // nginx的worker工作进程，一般数值为cpu核数</span><br><span class="line"></span><br><span class="line"><span class="comment">#### events事件块 ####</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;                  // 每个后台<span class="attribute">worker</span> process进程的最大并发连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#### http块 ####</span></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;                  // 文件扩展名与类型映射表</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;    // 默认文件类型</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;                        // 开启高效传输模式，默认为<span class="attribute">off</span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;                     // 连接超时时间，单位是秒</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#### server块 ####</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;                       // 监听端口</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;                // 提供服务的域名或主机名</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#### location块 ####</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;                       // 存放网站路径</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;       // 默认访问首⻚文件</span><br><span class="line">        &#125;</span><br><span class="line">        // 指定错误代码, 统一定义错误页面, 错误代码重定向到新的 Locaiton资源上</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx日志文件详解"><a href="#Nginx日志文件详解" class="headerlink" title="Nginx日志文件详解"></a>Nginx日志文件详解</h1><h2 id="1-1-Nginx日志配置"><a href="#1-1-Nginx日志配置" class="headerlink" title="1.1 Nginx日志配置"></a>1.1 Nginx日志配置</h2><blockquote><p><strong>在学习日志之前, 我们需要先了解下HTTP请求和返回</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v https://www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200621232120269.png" alt="image-20200621232120269"></p><p><strong>log_format语法格式及参数语法说明如下:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 配置语法: 包括: error.log access.log ###</span></span><br><span class="line">Syntax: <span class="attribute">log_format</span>  &lt;NAME&gt;  &lt;String&gt;;</span><br><span class="line">Default: <span class="attribute">log_format</span> combined <span class="string">&quot;...&quot;</span>;</span><br><span class="line">Context: <span class="attribute">http</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Nginx默认日志格式 ###</span></span><br><span class="line">log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">### Nginx日志变量解释 ###</span></span><br><span class="line"><span class="attribute">log_format</span></span><br><span class="line">    $remote_addr             <span class="comment">#记录访问网站的客户端地址</span></span><br><span class="line">    $remote_user             <span class="comment">#nginx认证用户名</span></span><br><span class="line">    $time_local              <span class="comment">#记录访问时间与时区</span></span><br><span class="line">    $request                 <span class="comment">#用户的http请求行, GET等方法、http协议版本</span></span><br><span class="line">    $status                  <span class="comment">#http状态码，记录请求返回的状态码，例如：200、301、404等</span></span><br><span class="line">    $body_bytes_sent         <span class="comment">#服务器发送给客户端的响应body字节数大小，默认为B(byte)</span></span><br><span class="line">    $http_referer            <span class="comment">#记录此次请求是从哪个连接访问过来的，可以根据该参数进行防盗链设置。</span></span><br><span class="line">    $http_user_agent         <span class="comment">#记录客户端访问信息，例如：浏览器、手机客户端等</span></span><br><span class="line">    $http_x_forwarded_for    <span class="comment">#当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置</span></span><br></pre></td></tr></table></figure><h2 id="1-2访问日志段分析"><a href="#1-2访问日志段分析" class="headerlink" title="1.2访问日志段分析"></a>1.2访问日志段分析</h2><p>摘出来一段部分结果：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">120.4.15.223 - <span class="attribute">lemon</span> [<span class="number">22</span>/Jun/<span class="number">2020</span>:<span class="number">12</span>:<span class="number">01</span>:<span class="number">43</span> +<span class="number">0800</span>] <span class="string">&quot;GET /index.php/archives/56/ HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">4865</span> <span class="string">&quot;http://www.lemon-li.cn/&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure><p>各个字段所对应的变量</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.254                            //$<span class="attribute">remote_addr</span></span><br><span class="line">lemon                                    //$remote_user</span><br><span class="line">[<span class="number">22</span>/Jun/<span class="number">2020</span>:<span class="number">12</span>:<span class="number">01</span>:<span class="number">43</span> +<span class="number">0800</span>]             //$time_local</span><br><span class="line"><span class="string">&quot;GET /index.php/archives/56/ HTTP/1.1&quot;</span>   //$request</span><br><span class="line"><span class="number">200</span>                                      //$status</span><br><span class="line"><span class="number">4865</span>                                     //$body_bytes_sent</span><br><span class="line"><span class="string">&quot;http://www.lemon-li.cn/&quot;</span>                //$http_referer</span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Windows xx Firefox/77.0&quot;</span>   //$http_user_agent</span><br><span class="line"><span class="string">&quot;-&quot;</span>                                      //$http_x_forwarded_for</span><br></pre></td></tr></table></figure><h2 id="1-3-Nginx访问日志统计"><a href="#1-3-Nginx访问日志统计" class="headerlink" title="1.3 Nginx访问日志统计"></a>1.3 Nginx访问日志统计</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##统计tcp连接数</span></span><br><span class="line">netstat -anpt|awk <span class="string">&#x27;NR&gt;=3&#123;print $6&#125;&#x27;</span>|sort -rn|uniq -c</span><br><span class="line"></span><br><span class="line"><span class="comment">##统计访问日志中访问量最多的10个IP地址, 这下面两个都行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /usr/<span class="built_in">local</span>/nginx/logs/access.log | sort | uniq -c | sort -nr -k1 | head -n 10</span><br><span class="line">cat /usr/<span class="built_in">local</span>/nginx/logs/access.log|awk <span class="string">&#x27;&#123;a[$1]++&#125; END &#123;for(b in a) print b&quot;\t&quot;a[b]&#125;&#x27;</span>|sort -k2 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment">##统计HTTP状态码次数</span></span><br><span class="line">awk <span class="string">&#x27;&#123;S[$9]++&#125;;END&#123;for(i in S) &#123;print S[i],i&#125;&#125;&#x27;</span> /usr/<span class="built_in">local</span>/nginx/logs/access.log|sort -nr|head</span><br><span class="line"></span><br><span class="line"><span class="comment">##注解：</span></span><br><span class="line">awk <span class="string">&#x27;&#123; print $1&#125;&#x27;</span>：取数据的低1域（第1列）。</span><br><span class="line">sort：对IP部分进行排序。</span><br><span class="line">uniq -c：打印每一重复行出现的次数。（并去掉重复行）。</span><br><span class="line">sort -nr -k1：按照重复行出现的次序倒序排列，-k1以第一列为标准排序。</span><br><span class="line">head -n 10：取排在前5位的IP 。</span><br></pre></td></tr></table></figure><h2 id="1-4-http-access-module局限性"><a href="#1-4-http-access-module局限性" class="headerlink" title="1.4 http_access_module局限性"></a>1.4 http_access_module局限性</h2><blockquote><p>下图是没有使用 http_x_forwarded_for 记录真实客户端IP地址以及代理服务器IP</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200623102751786.png" alt="image-20200623102751786"></p><blockquote><p>下图是使用 http_x_forwarded_for 记录真实客户端IP地址以及代理服务器IP</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200623104731498.png" alt="image-20200623104731498"></p><p><strong>解决方式</strong></p><ol><li><p>采用HTTP头信息控制访问, 代理以及web服务开启 http_x_forwarded_for</p></li><li><p>结合geo模块作</p></li><li><p>通过HTTP自动以变量传递</p></li></ol><h1 id="Nginx常用的基本配置"><a href="#Nginx常用的基本配置" class="headerlink" title="Nginx常用的基本配置"></a>Nginx常用的基本配置</h1><h2 id="1-1-Nginx-虚拟主机"><a href="#1-1-Nginx-虚拟主机" class="headerlink" title="1.1 Nginx 虚拟主机"></a>1.1 Nginx 虚拟主机</h2><blockquote><p>所谓虚拟主机，在web服务器里就是一个独立的网站 站点，这个站点对应独立的域名(也可能是IP或端口)，具有独立的程序及资源目录，可以独立地对外提供服务供用户访问。</p></blockquote><h3 id="1-1-1-配置基于域名虚拟主机（最常用的）"><a href="#1-1-1-配置基于域名虚拟主机（最常用的）" class="headerlink" title="1.1.1 配置基于域名虚拟主机（最常用的）"></a>1.1.1 配置基于域名虚拟主机（最常用的）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.创建web站点⽬目录</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># mkdir -p /soft/code/&#123;www,bbs&#125;</span></span><br><span class="line">[root@nginx conf]<span class="comment"># echo &quot;www&quot; &gt; /soft/code/www/index.html</span></span><br><span class="line">[root@nginx conf]<span class="comment"># echo &quot;bbs&quot; &gt; /soft/code/bbs/index.html</span></span><br><span class="line">[root@nginx conf]<span class="comment"># tree /soft/</span></span><br><span class="line">/soft/</span><br><span class="line">└── code</span><br><span class="line">    ├── bbs</span><br><span class="line">    │   └── index.html</span><br><span class="line">    └── www</span><br><span class="line">        └── index.html</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.配置虚拟主机</span><br><span class="line">[root@nginx conf]<span class="comment"># cat vhosts/&#123;www,bbs&#125;.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.lemon-li.cn;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/www;</span><br><span class="line">    <span class="attribute">index</span>    index.html;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.lemon-li.cn;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/bbs;</span><br><span class="line">    <span class="attribute">index</span>    index.html;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.访问</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># curl www.lemon-li.cn</span></span><br><span class="line">www</span><br><span class="line"></span><br><span class="line">[root@nginx conf]<span class="comment"># curl bbs.lemon-li.cn</span></span><br><span class="line">bbs</span><br></pre></td></tr></table></figure><h3 id="1-1-2-配置不同端口访问不同虚拟主机"><a href="#1-1-2-配置不同端口访问不同虚拟主机" class="headerlink" title="1.1.2 配置不同端口访问不同虚拟主机"></a>1.1.2 配置不同端口访问不同虚拟主机</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 仅修改 <span class="attribute">listen</span> 监听端口即可 , 但不能和系统端口发生冲突!</span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8002</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-配置虚拟主机别名"><a href="#1-1-3-配置虚拟主机别名" class="headerlink" title="1.1.3 配置虚拟主机别名"></a>1.1.3 配置虚拟主机别名</h3><blockquote><p>所谓虚拟主机别名，就是虚拟主机设置除了主域名以外的一个域名，实现用户访问的多个域名对应同一个虚拟主机网站的功能</p><p>这里以bbs.lemon-li.cn域名的虚拟主机为例，为其增加一个别名lemon.com时，出现网站内容和访问bbs.lemon-li.cn是一样的</p><p>具体配置如下：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 默认配置</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.lemon-li.cn;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 别名配置</span><br><span class="line">[root@<span class="attribute">nginx</span> conf]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> bbs.lemon-li.cn lemon-li-cn;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用 <span class="attribute">Linux</span> 下 curl 测试结果</span><br><span class="line">[root@nginx conf]<span class="comment"># curl lemon-li.cn</span></span><br><span class="line">bbs.lemon-li.cn</span><br><span class="line"></span><br><span class="line">[root@nginx conf]<span class="comment"># curl bbs.lemon-li.cn</span></span><br><span class="line">bbs.lemon-li.cn</span><br><span class="line"></span><br><span class="line">// 访问带 bbs 和不带 bbs 是一样的, 当然除了别名实现也可以通过 rewrite 实现</span><br></pre></td></tr></table></figure><h2 id="1-2-Nginx-状态监控"><a href="#1-2-Nginx-状态监控" class="headerlink" title="1.2 Nginx 状态监控"></a>1.2 Nginx 状态监控</h2><blockquote><p>–with-http_stub_status_module             记录 Nginx 客户端基本访问状态信息</p></blockquote><p><strong>默认用法：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: stub_status;</span><br><span class="line">Default: <span class="attribute">off</span></span><br><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><p><strong>具体配置：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line"><span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提供了以下状态信息：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 1</span><br><span class="line"><span class="comment">## Nginx 当前活跃连接数, 有多少人在请求</span></span><br><span class="line"></span><br><span class="line">server accepts handled requests</span><br><span class="line"> 1 1 1</span><br><span class="line"><span class="comment">## server表示Nginx处理接收握⼿总次数。</span></span><br><span class="line"><span class="comment">## accepts表示Nginx处理接收总连接数。</span></span><br><span class="line"><span class="comment">## 请求丢失数=(握⼿数-连接数)可以看出,本次状态显示没有丢失请求。</span></span><br><span class="line"><span class="comment">## handled requests，表示总共处理了了1次请求。</span></span><br><span class="line"></span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br><span class="line"><span class="comment">## Reading表示Nginx读取数据</span></span><br><span class="line"><span class="comment">## Writing表示Nginx写的情况</span></span><br><span class="line"><span class="comment">## Waiting表示Nginx开启keep-alive长连接情况下, 既没有读也没有写, 建立连接情况</span></span><br></pre></td></tr></table></figure><p><strong>使用ab命令测试压力</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 100 http://192.168.2.1:80/index.html</span><br><span class="line">-c  并发数</span><br><span class="line">-n  总的请求数</span><br><span class="line">-k  是否开启长连接</span><br></pre></td></tr></table></figure><p><strong>访问查看</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200622162405702.png" alt="image-20200622162405702"></p><h2 id="1-3-Nginx下载站点"><a href="#1-3-Nginx下载站点" class="headerlink" title="1.3 Nginx下载站点"></a>1.3 Nginx下载站点</h2><blockquote><p>Nginx默认是不允许列出整个目录浏览下载的 !</p></blockquote><p><strong>默认用法：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">autoindex</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: off;</span><br><span class="line">Context: http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">//autoindex常⽤用参数</span><br><span class="line">autoindex_exact_size <span class="literal">off</span>;</span><br><span class="line">默认为on， 显示出文件的确切大小，单位是bytes。</span><br><span class="line">修改为off，显示出文件的大概大小，单位是kB或者MB或者GB。</span><br><span class="line"></span><br><span class="line"><span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">默认为off，显示的文件时间为GMT时间。</span><br><span class="line">修改为on， 显示的文件时间为文件的服务器时间。</span><br><span class="line"></span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>,gbk;</span><br><span class="line">默认中文目录乱码，添加上解决乱码。</span><br></pre></td></tr></table></figure><p><strong>具体配置：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//开启目录浏览</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>  /download;</span><br><span class="line">    <span class="attribute">autoindex</span>  <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>,gbk;</span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建站点资源</span><br><span class="line">[root@<span class="attribute">nginx</span> /]<span class="comment"># mkdir -p /download</span></span><br><span class="line">[root@nginx /]<span class="comment"># cd download/</span></span><br><span class="line">[root@nginx download]<span class="comment"># touch lemon&#123;1..20&#125;.txt</span></span><br></pre></td></tr></table></figure><p><strong>展示效果：</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624125401798.png" alt="image-20200624125401798"></p><h2 id="1-4-Nginx-访问控制"><a href="#1-4-Nginx-访问控制" class="headerlink" title="1.4 Nginx 访问控制"></a>1.4 Nginx 访问控制</h2><blockquote><p><strong>基于IP的访问控制 http_access_module</strong></p><p><strong>基于⽤用户登陆认证 http_auth_basic_module</strong></p></blockquote><h3 id="1-4-1-基于IP的访问控制"><a href="#1-4-1-基于IP的访问控制" class="headerlink" title="1.4.1 基于IP的访问控制"></a>1.4.1 基于IP的访问控制</h3><p><strong>语法格式如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 允许配置语法</span><br><span class="line">Syntax: <span class="attribute">allow</span> address | CIDR | unix: | all;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, <span class="attribute">limit_except</span></span><br><span class="line"></span><br><span class="line">// 拒绝配置语法</span><br><span class="line">Syntax: deny address | CIDR | unix: | all;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, limit_except</span><br></pre></td></tr></table></figure><p><strong>具体配置如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 配置拒绝某一个 IP, 其他全部允许</span><br><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">192.168.2.254</span>;</span><br><span class="line">    <span class="attribute">allow</span> all;</span><br><span class="line">    <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 只允许某一个网段访问 , 其它全部拒绝</span><br><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">192.168.2.0</span>/<span class="number">24</span>;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">    <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-基于用户登陆认证"><a href="#1-4-2-基于用户登陆认证" class="headerlink" title="1.4.2 基于用户登陆认证"></a>1.4.2 基于用户登陆认证</h3><p><strong>语法格式如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 配置语法</span><br><span class="line">Syntax:  <span class="attribute">auth_basic</span> string | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">auth_basic</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">limit_except</span></span><br><span class="line"></span><br><span class="line">// ⽤户密码记录配置文件</span><br><span class="line">Syntax:  auth_basic_user_file file;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location, limit_except</span><br></pre></td></tr></table></figure><p><strong>具体配置如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 需要安装依赖组件</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># yum install httpd-tools</span></span><br><span class="line">[root@nginx ~]<span class="comment"># htpasswd -c /usr/local/nginx/conf/user.conf lemon</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cat /usr/local/nginx/conf/user.conf</span></span><br><span class="line">lemon:$apr1$TLvI5fjG$vOFaI7v3AxSFD/M/NO3TP/</span><br><span class="line"></span><br><span class="line">// 可在 http,server,location 里添加如下信息</span><br><span class="line">auth_basic <span class="string">&quot;Auth access Blog Input your Passwd!&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /usr/local/nginx/conf/user.conf;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-上面两者也可以一起用"><a href="#1-4-3-上面两者也可以一起用" class="headerlink" title="1.4.3 上面两者也可以一起用"></a>1.4.3 上面两者也可以一起用</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//想对哪个网页进行加密就在哪个里面加入以下配置：</span><br><span class="line"><span class="attribute">auth_basic</span> <span class="string">&quot;Auth access Blog Input your Passwd!&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /usr/local/nginx/conf/user.conf;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.168.2.254</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure><h2 id="1-5-Nginx-访问限制"><a href="#1-5-Nginx-访问限制" class="headerlink" title="1.5 Nginx 访问限制"></a>1.5 Nginx 访问限制</h2><h3 id="1-5-1-http协议的连接与请求"><a href="#1-5-1-http协议的连接与请求" class="headerlink" title="1.5.1 http协议的连接与请求"></a>1.5.1 http协议的连接与请求</h3><blockquote><p>HTTP是建立在TCP,  在完成HTTP请求需要先建立TCP三次握手（称为TCP连接），在连接的基础上在HTTP请求。</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200622000823214.png" alt="image-20200622000823214"></p><h3 id="1-5-2-HTTP-协议的连接与请求"><a href="#1-5-2-HTTP-协议的连接与请求" class="headerlink" title="1.5.2 HTTP 协议的连接与请求"></a>1.5.2 HTTP 协议的连接与请求</h3><ul><li><p>HTTP 请求建立在一次 TCP 连接基础上</p></li><li><p>一次 TCP 请求至少产生一次 HTTP 请求</p></li></ul><table><thead><tr><th>HTTP协议版本</th><th>连接关系</th></tr></thead><tbody><tr><td>HTTP1.0</td><td>TCP不能复用</td></tr><tr><td>HTTP1.1</td><td>顺序性TCP复用</td></tr><tr><td>HTTP2.0</td><td>多路复用TCP复用</td></tr></tbody></table><h3 id="1-5-3-Nginx-连接限制"><a href="#1-5-3-Nginx-连接限制" class="headerlink" title="1.5.3 Nginx 连接限制"></a>1.5.3 Nginx 连接限制</h3><blockquote><p><strong>连接频率限制  limit_conn_module</strong></p></blockquote><p><strong>连接限制语法：</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/connss.png" alt="image-20200622000823214"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/asd.png" alt="image-20200624225455880"></p><p><strong>具体配置如下 :</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    //<span class="attribute">http</span> 段配置连接限制 , 同一时刻只允许一个客户端 IP 连接</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=conn_zone:<span class="number">10m</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            // 限制向客户端返回的速度，每秒钟速率50字节，这个配置仅仅只是为了能看到效果</span><br><span class="line">            <span class="attribute">limit_rate</span> <span class="number">50</span>;</span><br><span class="line">        // 同一时刻只允许一个客户端 <span class="attribute">IP</span> 连接</span><br><span class="line">            limit_conn conn_zone <span class="number">1</span>;</span><br><span class="line">            // 修改限制发生时向客户端返回的错误码，可做可不做</span><br><span class="line">            <span class="attribute">limit_conn_status</span> <span class="number">500</span>;</span><br><span class="line">            // 修改限制发生时的日志级别，可做可不做</span><br><span class="line">            <span class="attribute">limit_conn_log_level</span> <span class="literal">warn</span>;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打开两个终端同时请求</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://ttk.lemon-li.cn/</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624231652524.png" alt="image-20200624231652524"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624231848233.png" alt="image-20200624231848233"></p><h3 id="1-5-4-Nginx-请求限制"><a href="#1-5-4-Nginx-请求限制" class="headerlink" title="1.5.4 Nginx 请求限制"></a>1.5.4 Nginx 请求限制</h3><blockquote><p>请求频率限制 limit_req_module</p></blockquote><p><strong>请求限制语法：</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/reu.png" alt="image-20200624231848233"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/req.png" alt="image-20200624231848233"></p><p><strong>具体配置如下：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    //<span class="attribute">http</span> 段配置请求限制, rate 限制速率，限制一秒钟最多一个 IP 请求</span><br><span class="line">    limit_req_zone $binary_remote_addr zone=req_zone:<span class="number">10m</span> rate=1r/s;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">...</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">// 1r/<span class="attribute">s</span> 内只接收一个请求, 剩下的将被延迟处理, 请求数超过 burst 定义的数量, 多余请求拒绝处理并返回<span class="number">503</span>错误码给客户端</span><br><span class="line">            limit_req zone=req_zone burst=<span class="number">3</span> nodelay;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ab压力测试：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 100 http://192.168.2.1:80/index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Benchmarking ttk.lemon-li.cn (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx</span><br><span class="line">Server Hostname:        ttk.lemon-li.cn</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        25 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      20</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   0.033 seconds</span><br><span class="line">Complete requests:      50</span><br><span class="line">Failed requests:        46         <span class="comment"># 可以看到这里，失败了46次，也就是说50次请求只成功了4次，也就是1 + 3 = 4</span></span><br><span class="line">   (Connect: 0, Receive: 0, Length: 46, Exceptions: 0)</span><br><span class="line">Write errors:           0</span><br><span class="line">Non-2xx responses:      46</span><br><span class="line">Total transferred:      18062 bytes</span><br><span class="line">HTML transferred:       9576 bytes</span><br><span class="line">Requests per second:    1503.17 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       13.305 [ms] (mean)</span><br><span class="line">Time per request:       0.665 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          530.28 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        3    4   0.6      4       5</span><br><span class="line">Processing:     3    4   0.6      4       5</span><br><span class="line">Waiting:        3    4   0.6      4       5</span><br><span class="line">Total:          6    8   1.1      8      10</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      8</span><br><span class="line">  66%      8</span><br><span class="line">  75%      9</span><br><span class="line">  80%      9</span><br><span class="line">  90%      9</span><br><span class="line">  95%      9</span><br><span class="line">  98%     10</span><br><span class="line">  99%     10</span><br><span class="line"> 100%     10 (longest request)</span><br></pre></td></tr></table></figure><p><strong>使用浏览器测试狂点刷新5次就会报503</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/GIF%202020-6-24%2016-07-32.gif" alt="image-20200621205106691"></p><p><strong>查看错误日志信息</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020/06/24 16:27:04 [error] 960<span class="comment">#0: *1903 limiting requests, excess: 3.486 by zone &quot;req_zone&quot;, client: 101.200.227.38, server: ttk.lemon-li.cn, request: &quot;GET / HTTP/1.0&quot;, host: &quot;ttk.lemon-li.cn&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-5-整体总结"><a href="#1-5-5-整体总结" class="headerlink" title="1.5.5 整体总结"></a>1.5.5 整体总结</h3><blockquote><p><strong>连接限制 没有 请求限制有效?</strong></p></blockquote><ul><li><p>前面说过, 多个请求可以建立在一次的TCP连接之上,  那么我们对请求的精度限制，当然比对一个连接的限制会更加的有效。</p></li><li><p>因为同一时刻只允许一个连接请求进入。</p></li><li><p>但是同一时刻多个请求可以通过一个连接进入。</p></li><li><p>所以请求限制才是比较合理的限制解决方案。</p></li></ul><h2 id="1-6-Nginx日志分割"><a href="#1-6-Nginx日志分割" class="headerlink" title="1.6 Nginx日志分割"></a>1.6 Nginx日志分割</h2><blockquote><p><strong>技术要点：</strong></p><ol><li><p>剪切日志后，使用 kill -USR1 发送信号重新生成日志文件，同时还不影响网站请求处理进程。</p></li><li><p>错误时通过echo和tee -a命令将错误显示的同时写入到日志文件/var/log/messages。</p></li></ol></blockquote><h3 id="1-6-1-手动日志分割"><a href="#1-6-1-手动日志分割" class="headerlink" title="1.6.1 手动日志分割"></a>1.6.1 手动日志分割</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 查看nginx日志文件</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># ll -h /usr/local/nginx/logs/</span></span><br><span class="line">总用量 <span class="number">60K</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">41</span> access.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">478</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">39</span> <span class="literal">error</span>.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">4</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">33</span> nginx.pid</span><br><span class="line"></span><br><span class="line">// 先备份日志文件</span><br><span class="line">[root@nginx logs]<span class="comment"># pwd</span></span><br><span class="line">/usr/local/nginx/logs</span><br><span class="line">[root@nginx logs]<span class="comment"># cp access.log access.log.bak</span></span><br><span class="line">[root@nginx logs]<span class="comment"># ll -h</span></span><br><span class="line">总用量 <span class="number">60K</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">51</span> access.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">41</span> access.log.bak</span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root <span class="number">829</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">52</span> <span class="literal">error</span>.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root   <span class="number">4</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">33</span> nginx.pid</span><br><span class="line"></span><br><span class="line">// 手动执行日志切割命令 或 发送信号</span><br><span class="line">[root@nginx logs]<span class="comment"># nginx -s reopen</span></span><br><span class="line">[root@nginx logs]<span class="comment"># ll -h</span></span><br><span class="line">总用量 <span class="number">60K</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root   <span class="number">0</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">51</span> access.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root <span class="number">52K</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">41</span> access.log.bak</span><br><span class="line">-rw-r--r-- <span class="number">1</span> nginx root <span class="number">829</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">52</span> <span class="literal">error</span>.log</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root   <span class="number">4</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">00</span>:<span class="number">33</span> nginx.pid</span><br></pre></td></tr></table></figure><h3 id="1-6-2-自动日志分割"><a href="#1-6-2-自动日志分割" class="headerlink" title="1.6.2 自动日志分割"></a>1.6.2 自动日志分割</h3><blockquote><p><strong>就是写一个脚本，然后放到计划任务当中按时间自动切割日志</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 编写日志切割脚本</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># vi /root/cut_nginx_log.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">datetime=$(date -d <span class="string">&quot;-1 day&quot;</span> <span class="string">&quot;+%Y%m%d&quot;</span>)</span><br><span class="line">log_path=<span class="string">&quot;/usr/local/nginx/logs&quot;</span></span><br><span class="line">pid_path=<span class="string">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span></span><br><span class="line">mkdir -p $log_path/backup</span><br><span class="line">if [ -f $pid_path ];<span class="attribute">then</span></span><br><span class="line">    mv $log_path/access.log $log_path/backup/access.log-$datetime</span><br><span class="line">    kill -USR1 $(cat $pid_path)  <span class="comment">#USR1通常被用来告知应用程序重载配置文件</span></span><br><span class="line">    find $log_path/backup -mtime +<span class="number">30</span> | xargs rm -f</span><br><span class="line">else</span><br><span class="line">    echo <span class="string">&quot;Error,Nginx is not working!&quot;</span>  &gt;&gt; /var/log/messages</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">// 给予脚本执行权限</span><br><span class="line">[root@nginx ~]<span class="comment"># chmod +x /root/cut_nginx_log.sh</span></span><br><span class="line"></span><br><span class="line">//添加至计划任务，每天的<span class="number">00</span>:<span class="number">00</span>点执行</span><br><span class="line">[root@nginx ~]<span class="comment"># echo &quot;0 0 * * * /root/cut_nginx_log.sh&quot; &gt;&gt; /var/spool/cron/root</span></span><br><span class="line">[root@nginx ~]<span class="comment"># crontab –l</span></span><br><span class="line"></span><br><span class="line">//手动执行一下这个脚本验证下效果</span><br><span class="line">[root@nginx ~]<span class="comment"># bash -x /root/cut_nginx_log.sh</span></span><br><span class="line">++ date -d <span class="string">&#x27;-1 day&#x27;</span> +%Y%m%d</span><br><span class="line">+ datetime=<span class="number">20200624</span></span><br><span class="line">+ log_path=/usr/local/nginx/logs</span><br><span class="line">+ pid_path=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">+ mkdir -p /usr/local/nginx/logs/backup</span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> -f /usr/local/nginx/logs/nginx.pid <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ mv /usr/local/nginx/logs/access.log /usr/local/nginx/logs/backup/access.log-<span class="number">20200624</span></span><br><span class="line">++ cat /usr/local/nginx/logs/nginx.pid</span><br><span class="line">+ kill -USR1 <span class="number">968</span></span><br><span class="line">+ find /usr/local/nginx/logs/backup -mtime +<span class="number">30</span></span><br><span class="line">+ xargs rm -f</span><br><span class="line"></span><br><span class="line">// 查看日志是否被切割及备份</span><br><span class="line">[root@nginx ~]<span class="comment"># ls /usr/local/nginx/logs/backup/</span></span><br><span class="line">access.log-<span class="number">20200624</span></span><br></pre></td></tr></table></figure><h2 id="1-7-Nginx平滑升级部署"><a href="#1-7-Nginx平滑升级部署" class="headerlink" title="1.7 Nginx平滑升级部署"></a>1.7 Nginx平滑升级部署</h2><blockquote><ul><li><strong>作用：在不影响客户端业务的情况下升级Nginx服务</strong></li><li><strong>切记，这里一定要使用绝对路径启动Nginx，才能够作热升级</strong></li></ul></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624212307459.png" alt="image-20200624212307459"></p><p><strong>Nginx信号详解：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.TERM，INT：nginx的主进程马上被关闭，不能完整处理正在使用的nginx的用户的请求，等同于 <span class="attribute">nginx</span> -s stop。</span><br><span class="line"><span class="number">2</span>.QUIT：优雅的关闭nginx进程，在处理完所有正在使用nginx用户请求后再关闭nginx进程，等同于nginx -s quit。</span><br><span class="line"><span class="number">3</span>.HUP： nginx主进程不变，nginx进程不关闭，但是重新加载配置文件。等同于nginx -s reload。</span><br><span class="line"><span class="number">4</span>.USR1：不用关闭nginx进程就可以重读日志，此命令可以用于nginx的日志定时备份，按月/日等时间间隔分割有用。</span><br><span class="line"><span class="number">5</span>.USR2：nginx的版本需要升级的时候，不需要停止nginx，就能对nginx升级。</span><br><span class="line"><span class="number">6</span>.WINCH：配合USR2对nginx升级，优雅的关闭nginx旧版本的进程</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200624212511817.png" alt="image-20200624212511817"></p><blockquote><p><strong>具体操作如下：</strong></p><ul><li>当前版本为：nginx-1.12.2</li><li>升级版本为：nginx-1.16.1</li></ul></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// 查看旧的nginx都编译了什么模块，一会编译新版本时就照着加就行了</span><br><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br><span class="line"></span><br><span class="line">// 查看旧版本nginx的后台进程PID，一会升级nginx时会用到</span><br><span class="line">[root@nginx ~]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">2241</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56316</span>  <span class="number">1156</span> ?  Ss  <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">2242</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56700</span>  <span class="number">1932</span> ?  S   <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line"></span><br><span class="line">// 备份旧nginx的二进制命令文件</span><br><span class="line">[root@nginx ~]<span class="comment"># cp -r /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span></span><br><span class="line">[root@nginx ~]<span class="comment"># ll /usr/local/nginx/sbin/</span></span><br><span class="line">总用量 <span class="number">14888</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> nginx nginx <span class="number">7621776</span> <span class="number">6</span>月  <span class="number">21</span> <span class="number">21</span>:<span class="number">53</span> nginx</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root  root  <span class="number">7621776</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">02</span>:<span class="number">01</span> nginx.old</span><br><span class="line"></span><br><span class="line">// 准备nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>源码包</span><br><span class="line">[root@nginx ~]<span class="comment"># wget http://nginx.org/download/nginx-1.16.1.tar.gz</span></span><br><span class="line"></span><br><span class="line">// 解压、配置、编译nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>源码包。注：<span class="comment">#不能加make install，如若添加，则覆盖了!</span></span><br><span class="line">[root@nginx ~]<span class="comment"># tar xf nginx-1.16.1.tar.gz  -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.16.1/</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module &amp;&amp; make</span></span><br><span class="line"></span><br><span class="line">// 进入编译好的objs目录中将编译好的nginx1.<span class="number">16</span>.<span class="number">1</span>的二进制命令文件拷贝至对应位置</span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># cd objs/ &amp;&amp; ll</span></span><br><span class="line">总用量 <span class="number">7976</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">18617</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> autoconf.err</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">56144</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> Makefile</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">7961952</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">56</span> nginx</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">5341</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">56</span> nginx.<span class="number">8</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">7651</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> ngx_auto_config.h</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root     <span class="number">657</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> ngx_auto_headers.h</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">9435</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> ngx_modules.c</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">93664</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">56</span> ngx_modules.o</span><br><span class="line">drwxr-xr-x <span class="number">9</span> root root      <span class="number">91</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">01</span>:<span class="number">55</span> src</span><br><span class="line">[root@nginx objs]<span class="comment"># cp -rf nginx /usr/local/nginx/sbin/</span></span><br><span class="line">cp：是否覆盖<span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span>？ y</span><br><span class="line">[root@nginx objs]<span class="comment"># ll /usr/local/nginx/sbin/</span></span><br><span class="line">总用量 <span class="number">15220</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">7961952</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">02</span>:<span class="number">04</span> nginx</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">7621776</span> <span class="number">6</span>月  <span class="number">25</span> <span class="number">02</span>:<span class="number">01</span> nginx.old</span><br><span class="line"></span><br><span class="line">// 开始使用信号实现热升级nginx</span><br><span class="line"><span class="comment">## 发送 USR2 信号，向主进程（ master）发送 USR2 信号，Nginx 会启动一个新版本的 master 进程和对应工作进程，和旧版一起处理请求。</span></span><br><span class="line">[root@nginx objs]<span class="comment"># kill -USR2 2241</span></span><br><span class="line">[root@nginx objs]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">2241</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56316</span>  <span class="number">1340</span> ?  Ss  <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">2242</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56700</span>  <span class="number">1932</span> ?  S   <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process     <span class="comment">#老版本进程</span></span><br><span class="line">root  <span class="number">5361</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">3</span>  <span class="number">56348</span>  <span class="number">3336</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">5362</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56744</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process     <span class="comment">#新版本进程</span></span><br><span class="line"></span><br><span class="line">[root@nginx objs]<span class="comment"># kill -WINCH 2242      # 关闭老版本进程的worker进程</span></span><br><span class="line">[root@nginx objs]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">2241</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56316</span>  <span class="number">1340</span> ?  Ss  <span class="number">01</span>:<span class="number">53</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">root  <span class="number">5361</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">3</span>  <span class="number">56348</span>  <span class="number">3336</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">5362</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56744</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line">nginx <span class="number">5366</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56700</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">10</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process  <span class="comment">#这是关掉老版本woker之后新生成的woker进程</span></span><br><span class="line"></span><br><span class="line">[root@nginx objs]<span class="comment"># kill -QUIT 2241      # 关闭老版本进程的master进程</span></span><br><span class="line">[root@nginx objs]<span class="comment"># ps -aux|grep nginx</span></span><br><span class="line">root  <span class="number">5361</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">3</span>  <span class="number">56348</span>  <span class="number">3336</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx <span class="number">5362</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">56744</span>  <span class="number">1928</span> ?  S   <span class="number">02</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line"></span><br><span class="line">[root@nginx objs]<span class="comment"># nginx -V             # 至此，nginx就算是热升级成功了</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br></pre></td></tr></table></figure><h2 id="1-8-index-和-autoindex的区别"><a href="#1-8-index-和-autoindex的区别" class="headerlink" title="1.8 index 和 autoindex的区别"></a>1.8 index 和 autoindex的区别</h2><blockquote><p><strong>index模块</strong></p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/3.png" alt="image-20200624212307459"></p><blockquote><p><strong>autoindex模块</strong></p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/56.png" alt="image-20200624212307459"></p><p><strong>autoindex 主要有下面四个指令：</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625013255522.png" alt="image-20200625013255522"></p><h2 id="1-9-root-和-alias-的区别（重点）"><a href="#1-9-root-和-alias-的区别（重点）" class="headerlink" title="1.9 root 和 alias 的区别（重点）"></a>1.9 root 和 alias 的区别（重点）</h2><blockquote><p><strong>root属性指定的值是要加入到最终路径的，所以访问的位置变成了 root的值/locaiton的值。而我不想把访问的URI加入到路径中。所以就需要使用alias属性，其会抛弃URI，直接访问alias指定的位置</strong></p></blockquote><h3 id="1-9-1-root属性"><a href="#1-9-1-root属性" class="headerlink" title="1.9.1 root属性"></a>1.9.1 root属性</h3><blockquote><p><strong>结论： root属性，会把root的值（这里是yyy）加入到访问路径（locaition）之前</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> xxx &#123;</span><br><span class="line">    <span class="attribute">root</span> yyy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://url/aaa.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/aaa.html，实际访问的是</a>  <a href="http://url/yyy/xxx/aaa.html">http://URL/yyy/xxx/aaa.html</a></p><p>浏览器访问 <a href="http://url/xxx/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/abc.html，实际访问的是</a>  <a href="http://url/yyy/xxx/abc.html">http://URL/yyy/xxx/abc.html</a></p><p>浏览器访问 <a href="http://url/xxx/ccc/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/ccc/abc.html，实际访问的是</a>  <a href="http://url/yyy/xxx/ccc/abc.html">http://URL/yyy/xxx/ccc/abc.html</a></p><h3 id="1-9-2-alias属性（别名）"><a href="#1-9-2-alias属性（别名）" class="headerlink" title="1.9.2 alias属性（别名）"></a>1.9.2 alias属性（别名）</h3><blockquote><p><strong>结论：alias属性，会把alias的值（这里是yyy）替代访问路径匹配的部分（这里是xxx）</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">locaiton</span> xxx &#123;</span><br><span class="line">    <span class="comment"># alias必须以 / 结束，否则无效!!!</span></span><br><span class="line">    <span class="attribute">alias</span> /yyy/; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://url/xxx.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx.html，实际访问的是</a>  <a href="http://url/yyy/xxx.html">http://URL/yyy/xxx.html</a></p><p>浏览器访问 <a href="http://url/xxx/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/abc.html，实际访问的是</a>  <a href="http://url/yyy/abc.html">http://URL/yyy/abc.html</a></p><p>浏览器访问 <a href="http://url/xxx/ccc/abc.html%EF%BC%8C%E5%AE%9E%E9%99%85%E8%AE%BF%E9%97%AE%E7%9A%84%E6%98%AF">http://URL/xxx/ccc/abc.html，实际访问的是</a>  <a href="http://url/yyy/ccc/abc.html">http://URL/yyy/ccc/abc.html</a></p><h2 id="1-10-定义错误页面"><a href="#1-10-定义错误页面" class="headerlink" title="1.10 定义错误页面"></a>1.10 定义错误页面</h2><blockquote><p><strong>模块：</strong>error_page，作用是根据客户端的访问网站的返回状态码，为其指定到特定的错误页面</p></blockquote><p>语法：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page <span class="keyword">code</span> [ <span class="keyword">code</span>... ] [ = | =answer-<span class="keyword">code</span> ] uri | @named_location </span><br></pre></td></tr></table></figure><p><strong>简单示例：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 编写错误页面</span><br><span class="line"><span class="attribute">echo</span> <span class="string">&#x27;client_4xx_error&#x27;</span> &gt; /www/test/400_error.html</span><br><span class="line">echo <span class="string">&#x27;client_5xx_error&#x27;</span> &gt; /www/test/500_error.html</span><br><span class="line"></span><br><span class="line">// 定义客户端错误页面</span><br><span class="line">error_page <span class="number">400</span> <span class="number">401</span> <span class="number">402</span> <span class="number">403</span> <span class="number">404</span> /400_error.html;</span><br><span class="line"><span class="attribute">location</span> /400_error.html &#123;</span><br><span class="line"><span class="attribute">root</span> /www/test;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义服务端错误页面</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">501</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /500_error.html;</span><br><span class="line"><span class="attribute">location</span> /500_error.html &#123;</span><br><span class="line"><span class="attribute">root</span> /www/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证一下效果</strong></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625104239563.png" alt="image-20200625104239563"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625104314946.png" alt="image-20200625104314946"></p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625104456679.png" alt="image-20200625104456679"></p><h2 id="1-11-设置Nginx防盗链"><a href="#1-11-设置Nginx防盗链" class="headerlink" title="1.11 设置Nginx防盗链"></a>1.11 设置Nginx防盗链</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">zhen主机配置防盗链</span><br><span class="line">[root@zhen ~]<span class="comment"># vi /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">在server&#123;&#125;区域里添加以下配置：</span><br><span class="line">        location ~* \.(wma|wmv|asf|mp3|mmf|zip|rar|gif|png|swf|flv|jpeg) &#123;</span><br><span class="line">            valid_referers nonde blocked  *.zhen.com  zhen.com;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">               rewrite  ^/  http://www.zhen.com/error.jpg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#注意：不能存在以下缓存配置：</span></span><br><span class="line">     55         location  ~  \.(gif|jpg|jpeg|png|bmp|ico)$   &#123;</span><br><span class="line">     56             expires 1d;</span><br><span class="line">     57         &#125;</span><br><span class="line">wq!</span><br><span class="line">[root@zhen html]<span class="comment"># systemctl restart nginx</span></span><br><span class="line">解释：</span><br><span class="line">第一行： wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv 表示对这些后缀的文件进行防盗链。</span><br><span class="line">第二行：valid_referers表示被允许的URL，none表示浏览器中 referer（Referer 是 header 的一部分，当浏览器向 web 服务器发送请求时，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理） 为空的情况，就直接在浏览器访问图片，blocked referer 不为空的情况，但是值被代理或防火墙删除了，这些值不以http://或 https://开头，*.zhen是匹配URL的域名。</span><br><span class="line">第三行：<span class="keyword">if</span>&#123;&#125;判断如果是来自于invalid_referer（不被允许的URL）链接，即不是来自第二行指定的URL,就强制跳转到错误页面，当然直接返回 404 （<span class="built_in">return</span> 404）也是可以的，也可以是图片。</span><br><span class="line">注意：防盗链测试时，不要和expires配置一起使用。</span><br></pre></td></tr></table></figure><h2 id="1-12-如何在已经安装好的nginx中添加模块"><a href="#1-12-如何在已经安装好的nginx中添加模块" class="headerlink" title="1.12 如何在已经安装好的nginx中添加模块"></a>1.12 如何在已经安装好的nginx中添加模块</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 原已经安装好的nginx，现在需要添加一个未被编译安装的模块:</span><br><span class="line"></span><br><span class="line">// 查看原来编译时都带了哪些参数</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -V</span></span><br><span class="line"><span class="attribute">nginx</span> version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span> <span class="number">20120313</span> (Red Hat <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span>-<span class="number">16</span>) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre</span><br><span class="line"></span><br><span class="line">进入nginx源码目录</span><br><span class="line"><span class="comment"># cd nginx-1.12.2</span></span><br><span class="line"></span><br><span class="line">// 添加的参数 （要加之前已经过的编译模块，不然最后只有新编译模块）</span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/nginx --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre --with-http_ssl_module</span></span><br><span class="line"></span><br><span class="line">// 编译，make完之后在objs目录下就多了个nginx，这个就是新版本的程序了。注意 &#123;不要<span class="attribute">make</span> install，否则就是覆盖安装&#125;</span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"></span><br><span class="line">// 替换nginx二进制文件</span><br><span class="line"><span class="comment"># cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak    (备份之前的nginx二进文件)</span></span><br><span class="line"><span class="comment"># cp ./objs/nginx  /usr/local/nginx/sbin/ </span></span><br><span class="line"></span><br><span class="line">// 测试新的nginx程序是否正确</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -t</span></span><br><span class="line">nginx: theconfiguration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx:configuration file /usr/local/nginx/conf/nginx.conf test issuccessful</span><br><span class="line"></span><br><span class="line">// 重新加载nginx</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -s reload</span></span><br><span class="line"></span><br><span class="line">// 查看ngixn版本极其编译参数</span><br><span class="line"><span class="comment"># /usr/local/nginx/sbin/nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span> <span class="number">20120313</span> (Red Hat <span class="number">4</span>.<span class="number">4</span>.<span class="number">7</span>-<span class="number">16</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.1e-fips <span class="number">11</span> Feb <span class="number">2013</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre --with-http_ssl_module</span><br></pre></td></tr></table></figure><h2 id="1-13-Nginx中的location指令（重点）"><a href="#1-13-Nginx中的location指令（重点）" class="headerlink" title="1.13 Nginx中的location指令（重点）"></a>1.13 Nginx中的location指令（重点）</h2><blockquote><p>location的作用是根据用户请求的URI来执行不同的应用，就是根据用户请求的网站URL进行匹配，匹配成功即进行相关的操作</p></blockquote><h3 id="1-13-1-安装第三方的模块"><a href="#1-13-1-安装第三方的模块" class="headerlink" title="1.13.1 安装第三方的模块"></a>1.13.1 安装第三方的模块</h3><ul><li><strong>下载第三方模块echo</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># wget https://github.com/openresty/echo-nginx-module/archive/v0.61.tar.gz</span></span><br></pre></td></tr></table></figure><ul><li><strong>重新编译添加三方echo模块</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="attribute">nginx</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module</span><br><span class="line"></span><br><span class="line">[root@nginx ~]<span class="comment"># tar -xf  v0.61.tar.gz -C /usr/src/</span></span><br><span class="line">[root@nginx ~]<span class="comment"># cd /usr/src/nginx-1.16.1/</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/usr/src/echo-nginx-module-0.61/ &amp;&amp; make</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># cp -rf objs/nginx /usr/local/nginx/sbin/</span></span><br><span class="line"></span><br><span class="line">[root@nginx nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-threads --with-file-aio --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/usr/src/echo-nginx-module-<span class="number">0</span>.<span class="number">61</span>/</span><br></pre></td></tr></table></figure><h3 id="1-13-2-location语法-及-符号规则"><a href="#1-13-2-location语法-及-符号规则" class="headerlink" title="1.13.2 location语法 及 符号规则"></a>1.13.2 location语法 及 符号规则</h3><ul><li><strong>location语法格式：</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~</span> ] uri &#123; ... &#125;</span><br><span class="line">Syntax: <span class="attribute">location</span> @name &#123; ... &#125;</span><br><span class="line">Default: —</span><br><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><ul><li><strong>location的符号：</strong></li></ul><table><thead><tr><th align="left">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">表示精确匹配</td></tr><tr><td align="left">^~</td><td align="left">表示uri以指定字符或字符串开头</td></tr><tr><td align="left">~</td><td align="left">表示区分大小写的正则匹配</td></tr><tr><td align="left">~*</td><td align="left">表示不区分大小写的正则匹配</td></tr><tr><td align="left">/</td><td align="left">通用匹配，任何请求都会匹配到</td></tr></tbody></table><ul><li><strong>注意事项：</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">有些资料上介绍location支持 不匹配 !~，</span><br><span class="line">如： <span class="attribute">location</span> !<span class="regexp">~ &#x27;png&#x27;</span>&#123; ... &#125;</span><br><span class="line">这是错误的，location不支持 !~</span><br><span class="line"></span><br><span class="line">如果有这样的需求，可以通过if来实现，</span><br><span class="line">如： <span class="attribute">if</span> ($uri !<span class="regexp">~ &#x27;png&#x27;)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">注意：location优先级小于if</span><br></pre></td></tr></table></figure><h3 id="1-13-4-location优先级及案例"><a href="#1-13-4-location优先级及案例" class="headerlink" title="1.13.4 location优先级及案例"></a>1.13.4 location优先级及案例</h3><blockquote><p>总结一句话：= 符号优先级最高，/ 符号优先级最低</p></blockquote><ul><li><strong>规则优先级：</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=  高于  ^~  高于  ~* 等于 ~  高于  /</span><br></pre></td></tr></table></figure><ul><li><strong>对比 / 和 ~</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span>  /abc &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：~</span><br></pre></td></tr></table></figure><ul><li><strong>对比 ~ 和 ~</strong>*</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：<span class="regexp">~</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">示例2：把他们两个的顺序调整一下</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：<span class="regexp">~*</span></span><br><span class="line"><span class="regexp">结论是：~和~*优先级其实是一样的，如果两个同时出现，配置文件中哪个location靠前，哪个生效。</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>对比 ^~ 和 ~</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /abc</span> &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /abc &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;^~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc/1.html</span><br><span class="line">结果是：^~</span><br></pre></td></tr></table></figure></li><li><p><strong>对比 = 和 ^~</strong></p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> location;</span><br><span class="line">    <span class="attribute">root</span>  html;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /abc.html &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;^~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /abc.html &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">测试命令：<span class="attribute">curl</span> http://127.0.0.1/abc.html</span><br><span class="line">结果是：=</span><br></pre></td></tr></table></figure><h1 id="Nginx静态资源控制"><a href="#Nginx静态资源控制" class="headerlink" title="Nginx静态资源控制"></a>Nginx静态资源控制</h1><h2 id="1-静态资源类型"><a href="#1-静态资源类型" class="headerlink" title="1. 静态资源类型"></a>1. 静态资源类型</h2><blockquote><p>Nginx 作为静态资源 Web 服务器部署配置, 传输非常的高效, 常常用于静态资源处理,  请求,  动静分离</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625134655267.png" alt="image-20200625134655267"></p><blockquote><p><em><strong>非服务器动态运行 生成的文件就属于静态资源！</strong></em></p><ul><li><p><strong>静态资源：</strong>可以理解为前端的固定页面，这里面包含HTML、CSS、JS、图片等等，不需要查数据库也不需要程序处理，直接就能够显示的页面，如果想修改内容则必须修改页面，但是访问效率相当高。</p></li><li><p><strong>动态资源：</strong>需要程序处理或者从数据库中读数据，能够根据不同的条件在页面显示不同的数据，内容更新不需要修改页面但是访问速度不及静态页面。</p></li></ul></blockquote><table><thead><tr><th>类型</th><th>种类</th></tr></thead><tbody><tr><td>浏览器端渲染</td><td>HTML、CSS、JS</td></tr><tr><td>图片</td><td>JPEG、GIF、PNG</td></tr><tr><td>音频</td><td>FLV、Mp4</td></tr><tr><td>文件</td><td>TXT、任意下载文件</td></tr></tbody></table><h2 id="2-静态资源基本配置"><a href="#2-静态资源基本配置" class="headerlink" title="2. 静态资源基本配置"></a>2. 静态资源基本配置</h2><h3 id="2-1-文件读取高效-sendfile"><a href="#2-1-文件读取高效-sendfile" class="headerlink" title="2.1 文件读取高效 sendfile"></a>2.1 文件读取高效 sendfile</h3><p><strong>作用简介：</strong></p><blockquote><p>sendfile可以让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据；开启这个参数后可以让数据不用经过用户buffer。如果这个参数不开启，会先在用户空间（Nginx进程空间）申请一个buffer，用read函数把数据从磁盘读到cache，再从cache读取到用户空间的buffer，再用write函数把数据从用户空间的buffer写入到内核的buffer，最后到tcp socket。</p></blockquote><p><strong>语法格式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">sendfile</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">sendfile</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">if</span> in location</span><br></pre></td></tr></table></figure><h3 id="2-2-提高网络传输效率-tcp-nopush"><a href="#2-2-提高网络传输效率-tcp-nopush" class="headerlink" title="2.2 提高网络传输效率 tcp_nopush"></a>2.2 提高网络传输效率 tcp_nopush</h3><p><strong>作用简介：</strong></p><blockquote><p>告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。就是说数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。</p></blockquote><p><strong>语法格式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">tcp_nopush</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">tcp_nopush</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><h3 id="2-3-与-tcp-nopush-对应的配置-tcp-nodelay"><a href="#2-3-与-tcp-nopush-对应的配置-tcp-nodelay" class="headerlink" title="2.3 与 tcp_nopush 对应的配置 tcp_nodelay"></a>2.3 与 tcp_nopush 对应的配置 tcp_nodelay</h3><p><strong>作用简介：</strong></p><blockquote><p>告诉nginx不要缓存数据，而是一段一段的发送—当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。作用: 在keepalive连接下,提高网络的传输 ‘实时性’</p></blockquote><p><strong>语法格式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">tcp_nodelay</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><h3 id="2-4-注意事项"><a href="#2-4-注意事项" class="headerlink" title="2.4 注意事项"></a>2.4 注意事项</h3><ol><li><p>tcp_nopush配置 与 tcp_nodelay 互斥。</p></li><li><p>在nginx中tcp_nopush必须和sendfile配合使用。</p></li></ol><h2 id="3-静态资源文件压缩配置"><a href="#3-静态资源文件压缩配置" class="headerlink" title="3. 静态资源文件压缩配置"></a>3. 静态资源文件压缩配置</h2><blockquote><p>Nginx 将响应报文发送至客户端之前可以启用压缩功能，这能够有效的节约带宽，并提高响应至客户端的速度。</p></blockquote><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625215739171.png" alt="image-20200625215739171"></p><h3 id="3-1-gzip-压缩配置语法"><a href="#3-1-gzip-压缩配置语法" class="headerlink" title="3.1 gzip 压缩配置语法"></a>3.1 gzip 压缩配置语法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">gzip</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">gzip</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">if</span> in location</span><br><span class="line"></span><br><span class="line">作用: 数据传输时压缩</span><br></pre></td></tr></table></figure><h3 id="3-2-gzip-压缩比率配置语法"><a href="#3-2-gzip-压缩比率配置语法" class="headerlink" title="3.2 gzip 压缩比率配置语法"></a>3.2 gzip 压缩比率配置语法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">gzip_comp_level</span> level;</span><br><span class="line">Default: <span class="attribute">gzip_comp_level</span> <span class="number">1</span>;</span><br><span class="line">Context: http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">作用: 压缩本身比较耗费服务端性能</span><br></pre></td></tr></table></figure><h3 id="3-3-gzip-压缩协议版本"><a href="#3-3-gzip-压缩协议版本" class="headerlink" title="3.3 gzip 压缩协议版本"></a>3.3 gzip 压缩协议版本</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span> | <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">Default: <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">Context: http, server, <span class="attribute">location</span></span><br><span class="line"></span><br><span class="line">作用: 压缩使用在http哪个协议, 主流版本<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-4-图片压缩案例（不建议开启图片压缩）"><a href="#3-4-图片压缩案例（不建议开启图片压缩）" class="headerlink" title="3.4 图片压缩案例（不建议开启图片压缩）"></a>3.4 图片压缩案例（不建议开启图片压缩）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon-<span class="attribute">min</span> vhosts]<span class="comment"># mkdir -p /www/images</span></span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># cat ttl.lemon-li.cn.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">     <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">     <span class="attribute">server_name</span>  ttl.lemon-li.cn;</span><br><span class="line">     <span class="attribute">access_log</span>   logs/ttl_logs/access_ttl.lemon.cn.log    main;</span><br><span class="line">     <span class="attribute">error_log</span>    logs/ttl_logs/error_ttl.lemon.cn.log     <span class="literal">info</span>;</span><br><span class="line">     <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">      <span class="attribute">root</span> /www/images;</span><br><span class="line">         <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">         <span class="attribute">gzip</span>   <span class="literal">on</span>;</span><br><span class="line">         <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">         <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">         <span class="attribute">gzip_types</span> text/plain application/json application/x-javascript application/css application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625225001698.png" alt="image-20200625225001698"></p><p>没有开启 gzip 图片压缩时</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625225811631.png" alt="image-20200625225811631"></p><p>开启 gzip 图片压缩时(关于图片的压缩比率不是太过明显)</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625230007749.png" alt="image-20200625230007749"></p><h3 id="3-5-文本压缩案例"><a href="#3-5-文本压缩案例" class="headerlink" title="3.5 文本压缩案例"></a>3.5 文本压缩案例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@lemon-min vhosts]<span class="comment"># mkdir -p /www/doc</span></span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># for i in &#123;1..20000&#125;;do echo &quot;asdabnvfgf&quot; &gt;&gt; /www/doc/test.txt ; done</span></span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># ll -h /www/doc/</span></span><br><span class="line">总用量 216K</span><br><span class="line">-rw-r--r-- 1 root root 215K 6月  25 23:15 test.txt</span><br><span class="line">[root@lemon-min vhosts]<span class="comment"># cat ttl.lemon-li.cn.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">     listen    80;</span><br><span class="line">     server_name  ttl.lemon-li.cn;</span><br><span class="line">     access_log   logs/ttl_logs/access_ttl.lemon.cn.log    main;</span><br><span class="line">     error_log    logs/ttl_logs/error_ttl.lemon.cn.log     info;</span><br><span class="line">     location ~ .*\.(txt|xml)$ &#123;</span><br><span class="line">     root /www/doc;</span><br><span class="line">    sendfile on;</span><br><span class="line">        gzip   on;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_types text/plain application/json application/x-javascript application/css application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有启用 gzip 文件压缩时</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625231806340.png" alt="image-20200625231806340"></p><p>启用 gzip 文件压缩时（可见压缩的重要性）</p><p><img src="https://bucket-1301203199.cos.ap-shanghai.myqcloud.com/armin/image-20200625231931243.png" alt="image-20200625231931243"></p><h2 id="4-静态资源浏览器缓存"><a href="#4-静态资源浏览器缓存" class="headerlink" title="4. 静态资源浏览器缓存"></a>4. 静态资源浏览器缓存</h2><p><em><strong>HTTP协议定义的缓存机制 (如: Expires; Cache-control 等)</strong></em></p><blockquote><p><strong>1、浏览器无缓存</strong></p><p>浏览器请求-&gt;无缓存-&gt;请求WEB服务器-&gt;请求响应-&gt;呈现</p><p><strong>2、浏览器有缓存</strong></p><p>浏览器请求-&gt;有缓存-&gt;校验过期-&gt;是否有更新-&gt;呈现</p><p>校验是否过期 Expires HTTP1.0, Cache-Control(max-age) HTTP1.1</p><p>协议中Etag头信息校验 Etag ()</p><p>Last-Modified头信息校验 Last-Modified (具体时间)</p></blockquote><p><strong>1.缓存配置语法 expires</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">expires</span> [modified] time;</span><br><span class="line"><span class="attribute">expires</span> epoch | max | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">expires</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, location, <span class="attribute">if</span> in location</span><br></pre></td></tr></table></figure><p><strong>2.配置静态资源缓存</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(js|css|html)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/js;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(jpg|gif|png)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /soft/code/images;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.开发代码没有正式上线时, 希望静态文件不被缓存</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//取消<span class="attribute">js</span> css html等静态文件缓存</span><br><span class="line">location <span class="regexp">~ .*\.(css|js|swf|json|mp4|htm|html)$</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-store;</span><br><span class="line">    <span class="attribute">add_header</span> Pragma <span class="literal">no</span>-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-静态资源防盗链"><a href="#5-静态资源防盗链" class="headerlink" title="5. 静态资源防盗链"></a>5. 静态资源防盗链</h2><blockquote><p><strong>防盗链就是防止别人盗用服务器中的图片、文件、视频等相关资源。防盗链：是通过location + rewrite + http_refer实现的。</strong></p></blockquote><p><strong>1. 基于 http_refer 防盗链配置模块</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: <span class="attribute">valid_referers</span> <span class="literal">none</span> | <span class="literal">blocked</span> | server_names | string ...;</span><br><span class="line">Default: —</span><br><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><p><strong>2. 准备html文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>pachong<span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.69.113/test.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 启动防盗链</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(wma|wmv|asf|mp3|mmf|zip|rar|gif|png|swf|flv|jpeg)</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> nonde <span class="literal">blocked</span>  <span class="regexp">*.zhen.com</span>  zhen.com;</span><br><span class="line">    <span class="attribute">if</span> ($invalid_referer) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span> <span class="regexp"> ^/</span>  http://www.zhen.com/error.jpg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：不能存在以下缓存配置：</span></span><br><span class="line"><span class="attribute">location</span>  <span class="regexp">~  \.(gif|jpg|jpeg|png|bmp|ico)$</span>   &#123;</span><br><span class="line">    <span class="attribute">expires</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 验证</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 伪造协议头访问</span><br><span class="line">[root@C-<span class="attribute">Server</span> ~]<span class="comment"># curl -e &quot;http://www.baidu.com&quot; -I http://192.168.69.113/test.jpg</span></span><br><span class="line">HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="number">403</span> Forbidden</span><br><span class="line">Server: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">Date: Tue, <span class="number">17</span> Apr <span class="number">2018</span> <span class="number">04</span>:<span class="number">55</span>:<span class="number">18</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">169</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">// 伪造协议头访问</span><br><span class="line">[root@C-Server ~]<span class="comment"># curl -e &quot;http://www.xuliangwei.com&quot; -I http://192.168.69.113/tes</span></span><br><span class="line">t.jpg</span><br><span class="line">HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br><span class="line">Date: Tue, <span class="number">17</span> Apr <span class="number">2018</span> <span class="number">04</span>:<span class="number">55</span>:<span class="number">27</span> GMT</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line">Content-Length: <span class="number">174315</span></span><br><span class="line">Last-Modified: Wed, <span class="number">29</span> Nov <span class="number">2017</span> <span class="number">03</span>:<span class="number">16</span>:<span class="number">08</span> GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;5a1e2678-2a8eb&quot;</span></span><br><span class="line">Expires: Tue, <span class="number">17</span> Apr <span class="number">2018</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">27</span> GMT</span><br><span class="line">Cache-Control: max-age=<span class="number">43200</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统调用列表</title>
      <link href="/2021/06/15/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%97%E8%A1%A8/"/>
      <url>/2021/06/15/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Linux系统调用列表"><a href="#Linux系统调用列表" class="headerlink" title="Linux系统调用列表"></a>Linux系统调用列表</h1><blockquote><p>1、按照惯例，这个列表以man pages第2节，即系统调用节为蓝本。按照笔者的理解，对其作了大致的分类，同时也作了一些小小的修改，删去了几个仅供内核使用，不允许用户调用的系统调用，对个别本人稍觉不妥的地方作了一些小的修改，并对所有列出的系统调用附上简要注释。</p><p>2、其中有一些函数的作用完全相同，只是参数不同。（可能很多熟悉C++朋友马上就能联想起函数重载，但是别忘了Linux核心是用C语言写的，所以只能取成不同的函数名）。还有一些函数已经过时，被新的更好的函数所代替了（gcc在链接这些函数时会发出警告），但因为兼容的原因还保留着，这些函数我会在前面标上“*”号以示区别。</p></blockquote><h2 id="一、进程控制"><a href="#一、进程控制" class="headerlink" title="一、进程控制"></a>一、进程控制</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">fork</td><td>创建一个新进程</td></tr><tr><td align="left">clone</td><td>按指定条件创建子进程</td></tr><tr><td align="left">execve</td><td>运行可执行文件</td></tr><tr><td align="left">exit</td><td>中止进程</td></tr><tr><td align="left">_exit</td><td>立即中止当前进程</td></tr><tr><td align="left">getdtablesize</td><td>进程所能打开的最大文件数</td></tr><tr><td align="left">getpgid</td><td>获取指定进程组标识号</td></tr><tr><td align="left">setpgid</td><td>设置指定进程组标志号</td></tr><tr><td align="left">getpgrp</td><td>获取当前进程组标识号</td></tr><tr><td align="left">setpgrp</td><td>设置当前进程组标志号</td></tr><tr><td align="left">getpid</td><td>获取进程标识号</td></tr><tr><td align="left">getppid</td><td>获取父进程标识号</td></tr><tr><td align="left">getpriority</td><td>获取调度优先级</td></tr><tr><td align="left">setpriority</td><td>设置调度优先级</td></tr><tr><td align="left">modify_ldt</td><td>读写进程的本地描述表</td></tr><tr><td align="left">nanosleep</td><td>使进程睡眠指定的时间</td></tr><tr><td align="left">nice</td><td>改变分时进程的优先级</td></tr><tr><td align="left">pause</td><td>挂起进程，等待信号</td></tr><tr><td align="left">personality</td><td>设置进程运行域</td></tr><tr><td align="left">prctl</td><td>对进程进行特定操作</td></tr><tr><td align="left">ptrace</td><td>进程跟踪</td></tr><tr><td align="left">sched_get_priority_max</td><td>取得静态优先级的上限</td></tr><tr><td align="left">sched_get_priority_min</td><td>取得静态优先级的下限</td></tr><tr><td align="left">sched_getparam</td><td>取得进程的调度参数</td></tr><tr><td align="left">sched_getscheduler</td><td>取得指定进程的调度策略</td></tr><tr><td align="left">sched_rr_get_interval</td><td>取得按RR算法调度的实时进程的时间片长度</td></tr><tr><td align="left">sched_setparam</td><td>设置进程的调度参数</td></tr><tr><td align="left">sched_setscheduler</td><td>设置指定进程的调度策略和参数</td></tr><tr><td align="left">sched_yield</td><td>进程主动让出处理器,并将自己等候调度队列队尾</td></tr><tr><td align="left">vfork</td><td>创建一个子进程，以供执行新程序，常与execve等同时使用</td></tr><tr><td align="left">wait</td><td>等待子进程终止</td></tr><tr><td align="left">wait3</td><td>参见wait</td></tr><tr><td align="left">waitpid</td><td>等待指定子进程终止</td></tr><tr><td align="left">wait4</td><td>参见waitpid</td></tr><tr><td align="left">capget</td><td>获取进程权限</td></tr><tr><td align="left">capset</td><td>设置进程权限</td></tr><tr><td align="left">getsid</td><td>获取会晤标识号</td></tr><tr><td align="left">setsid</td><td>设置会晤标识号</td></tr></tbody></table><h2 id="二、文件系统控制"><a href="#二、文件系统控制" class="headerlink" title="二、文件系统控制"></a>二、文件系统控制</h2><h3 id="1、文件读写操作"><a href="#1、文件读写操作" class="headerlink" title="1、文件读写操作"></a>1、文件读写操作</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">fcntl</td><td>文件控制</td></tr><tr><td align="left">open</td><td>打开文件</td></tr><tr><td align="left">creat</td><td>创建新文件</td></tr><tr><td align="left">close</td><td>关闭文件描述字</td></tr><tr><td align="left">read</td><td>读文件</td></tr><tr><td align="left">write</td><td>写文件</td></tr><tr><td align="left">readv</td><td>从文件读入数据到缓冲数组中</td></tr><tr><td align="left">writev</td><td>将缓冲数组里的数据写入文件</td></tr><tr><td align="left">pread</td><td>对文件随机读</td></tr><tr><td align="left">pwrite</td><td>对文件随机写</td></tr><tr><td align="left">lseek</td><td>移动文件指针</td></tr><tr><td align="left">_llseek</td><td>在64位地址空间里移动文件指针</td></tr><tr><td align="left">dup</td><td>复制已打开的文件描述字</td></tr><tr><td align="left">dup2</td><td>按指定条件复制文件描述字</td></tr><tr><td align="left">flock</td><td>文件加/解锁</td></tr><tr><td align="left">poll</td><td>I/O多路转换</td></tr><tr><td align="left">truncate</td><td>截断文件</td></tr><tr><td align="left">ftruncate</td><td>参见truncate</td></tr><tr><td align="left">umask</td><td>设置文件权限掩码</td></tr><tr><td align="left">fsync</td><td>把文件在内存中的部分写回磁盘</td></tr></tbody></table><h3 id="2、文件系统操作"><a href="#2、文件系统操作" class="headerlink" title="2、文件系统操作"></a>2、文件系统操作</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">access</td><td>确定文件的可存取性</td></tr><tr><td align="left">chdir</td><td>改变当前工作目录</td></tr><tr><td align="left">fchdir</td><td>参见chdir</td></tr><tr><td align="left">chmod</td><td>改变文件方式</td></tr><tr><td align="left">fchmod</td><td>参见chmod</td></tr><tr><td align="left">chown</td><td>改变文件的属主或用户组</td></tr><tr><td align="left">fchown</td><td>参见chown</td></tr><tr><td align="left">lchown</td><td>参见chown</td></tr><tr><td align="left">chroot</td><td>改变根目录</td></tr><tr><td align="left">stat</td><td>取文件状态信息</td></tr><tr><td align="left">lstat</td><td>参见stat</td></tr><tr><td align="left">fstat</td><td>参见stat</td></tr><tr><td align="left">statfs</td><td>取文件系统信息</td></tr><tr><td align="left">fstatfs</td><td>参见statfs</td></tr><tr><td align="left">readdir</td><td>读取目录项</td></tr><tr><td align="left">getdents</td><td>读取目录项</td></tr><tr><td align="left">mkdir</td><td>创建目录</td></tr><tr><td align="left">mknod</td><td>创建索引节点</td></tr><tr><td align="left">rmdir</td><td>删除目录</td></tr><tr><td align="left">rename</td><td>文件改名</td></tr><tr><td align="left">link</td><td>创建链接</td></tr><tr><td align="left">symlink</td><td>创建符号链接</td></tr><tr><td align="left">unlink</td><td>删除链接</td></tr><tr><td align="left">readlink</td><td>读符号链接的值</td></tr><tr><td align="left">mount</td><td>安装文件系统</td></tr><tr><td align="left">umount</td><td>卸下文件系统</td></tr><tr><td align="left">ustat</td><td>取文件系统信息</td></tr><tr><td align="left">utime</td><td>改变文件的访问修改时间</td></tr><tr><td align="left">utimes</td><td>参见utime</td></tr><tr><td align="left">quotactl</td><td>控制磁盘配额</td></tr></tbody></table><h2 id="三、系统控制"><a href="#三、系统控制" class="headerlink" title="三、系统控制"></a>三、系统控制</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">ioctl</td><td>I/O总控制函数</td></tr><tr><td align="left">_sysctl</td><td>读/写系统参数</td></tr><tr><td align="left">acct</td><td>启用或禁止进程记账</td></tr><tr><td align="left">getrlimit</td><td>获取系统资源上限</td></tr><tr><td align="left">setrlimit</td><td>设置系统资源上限</td></tr><tr><td align="left">getrusage</td><td>获取系统资源使用情况</td></tr><tr><td align="left">uselib</td><td>选择要使用的二进制函数库</td></tr><tr><td align="left">ioperm</td><td>设置端口I/O权限</td></tr><tr><td align="left">iopl</td><td>改变进程I/O权限级别</td></tr><tr><td align="left">outb</td><td>低级端口操作</td></tr><tr><td align="left">reboot</td><td>重新启动</td></tr><tr><td align="left">swapon</td><td>打开交换文件和设备</td></tr><tr><td align="left">swapoff</td><td>关闭交换文件和设备</td></tr><tr><td align="left">bdflush</td><td>控制bdflush守护进程</td></tr><tr><td align="left">sysfs</td><td>取核心支持的文件系统类型</td></tr><tr><td align="left">sysinfo</td><td>取得系统信息</td></tr><tr><td align="left">adjtimex</td><td>调整系统时钟</td></tr><tr><td align="left">alarm</td><td>设置进程的闹钟</td></tr><tr><td align="left">getitimer</td><td>获取计时器值</td></tr><tr><td align="left">setitimer</td><td>设置计时器值</td></tr><tr><td align="left">gettimeofday</td><td>取时间和时区</td></tr><tr><td align="left">settimeofday</td><td>设置时间和时区</td></tr><tr><td align="left">stime</td><td>设置系统日期和时间</td></tr><tr><td align="left">time</td><td>取得系统时间</td></tr><tr><td align="left">times</td><td>取进程运行时间</td></tr><tr><td align="left">uname</td><td>获取当前UNIX系统的名称、版本和主机等信息</td></tr><tr><td align="left">vhangup</td><td>挂起当前终端</td></tr><tr><td align="left">nfsservctl</td><td>对NFS守护进程进行控制</td></tr><tr><td align="left">vm86</td><td>进入模拟8086模式</td></tr><tr><td align="left">create_module</td><td>创建可装载的模块项</td></tr><tr><td align="left">delete_module</td><td>删除可装载的模块项</td></tr><tr><td align="left">init_module</td><td>初始化模块</td></tr><tr><td align="left">query_module</td><td>查询模块信息</td></tr><tr><td align="left">*get_kernel_syms</td><td>取得核心符号,已被query_module代替</td></tr></tbody></table><h2 id="四、内存管理"><a href="#四、内存管理" class="headerlink" title="四、内存管理"></a>四、内存管理</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">brk</td><td>改变数据段空间的分配</td></tr><tr><td align="left">sbrk</td><td>参见brk</td></tr><tr><td align="left">mlock</td><td>内存页面加锁</td></tr><tr><td align="left">munlock</td><td>内存页面解锁</td></tr><tr><td align="left">mlockall</td><td>调用进程所有内存页面加锁</td></tr><tr><td align="left">munlockall</td><td>调用进程所有内存页面解锁</td></tr><tr><td align="left">mmap</td><td>映射虚拟内存页</td></tr><tr><td align="left">munmap</td><td>去除内存页映射</td></tr><tr><td align="left">mremap</td><td>重新映射虚拟内存地址</td></tr><tr><td align="left">msync</td><td>将映射内存中的数据写回磁盘</td></tr><tr><td align="left">mprotect</td><td>设置内存映像保护</td></tr><tr><td align="left">getpagesize</td><td>获取页面大小</td></tr><tr><td align="left">sync</td><td>将内存缓冲区数据写回硬盘</td></tr><tr><td align="left">cacheflush</td><td>将指定缓冲区中的内容写回磁盘</td></tr></tbody></table><h2 id="五、网络管理"><a href="#五、网络管理" class="headerlink" title="五、网络管理"></a>五、网络管理</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">getdomainname</td><td>取域名</td></tr><tr><td align="left">setdomainname</td><td>设置域名</td></tr><tr><td align="left">gethostid</td><td>获取主机标识号</td></tr><tr><td align="left">sethostid</td><td>设置主机标识号</td></tr><tr><td align="left">gethostname</td><td>获取本主机名称</td></tr><tr><td align="left">sethostname</td><td>设置主机名称</td></tr></tbody></table><h2 id="六、socket控制"><a href="#六、socket控制" class="headerlink" title="六、socket控制"></a>六、socket控制</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">socketcall</td><td>socket系统调用</td></tr><tr><td align="left">socket</td><td>建立socket</td></tr><tr><td align="left">bind</td><td>绑定socket到端口</td></tr><tr><td align="left">connect</td><td>连接远程主机</td></tr><tr><td align="left">accept</td><td>响应socket连接请求</td></tr><tr><td align="left">send</td><td>通过socket发送信息</td></tr><tr><td align="left">sendto</td><td>发送UDP信息</td></tr><tr><td align="left">sendmsg</td><td>参见send</td></tr><tr><td align="left">recv</td><td>通过socket接收信息</td></tr><tr><td align="left">recvfrom</td><td>接收UDP信息</td></tr><tr><td align="left">recvmsg</td><td>参见recv</td></tr><tr><td align="left">listen</td><td>监听socket端口</td></tr><tr><td align="left">select</td><td>对多路同步I/O进行轮询</td></tr><tr><td align="left">shutdown</td><td>关闭socket上的连接</td></tr><tr><td align="left">getsockname</td><td>取得本地socket名字</td></tr><tr><td align="left">getpeername</td><td>获取通信对方的socket名字</td></tr><tr><td align="left">getsockopt</td><td>取端口设置</td></tr><tr><td align="left">setsockopt</td><td>设置端口参数</td></tr><tr><td align="left">sendfile</td><td>在文件或端口间传输数据</td></tr><tr><td align="left">socketpair</td><td>创建一对已联接的无名socket</td></tr></tbody></table><h2 id="七、用户管理"><a href="#七、用户管理" class="headerlink" title="七、用户管理"></a>七、用户管理</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">getuid</td><td>获取用户标识号</td></tr><tr><td align="left">setuid</td><td>设置用户标志号</td></tr><tr><td align="left">getgid</td><td>获取组标识号</td></tr><tr><td align="left">setgid</td><td>设置组标志号</td></tr><tr><td align="left">getegid</td><td>获取有效组标识号</td></tr><tr><td align="left">setegid</td><td>设置有效组标识号</td></tr><tr><td align="left">geteuid</td><td>获取有效用户标识号</td></tr><tr><td align="left">seteuid</td><td>设置有效用户标识号</td></tr><tr><td align="left">setregid</td><td>分别设置真实和有效的的组标识号</td></tr><tr><td align="left">setreuid</td><td>分别设置真实和有效的用户标识号</td></tr><tr><td align="left">getresgid</td><td>分别获取真实的,有效的和保存过的组标识号</td></tr><tr><td align="left">setresgid</td><td>分别设置真实的,有效的和保存过的组标识号</td></tr><tr><td align="left">getresuid</td><td>分别获取真实的,有效的和保存过的用户标识号</td></tr><tr><td align="left">setresuid</td><td>分别设置真实的,有效的和保存过的用户标识号</td></tr><tr><td align="left">setfsgid</td><td>设置文件系统检查时使用的组标识号</td></tr><tr><td align="left">setfsuid</td><td>设置文件系统检查时使用的用户标识号</td></tr><tr><td align="left">getgroups</td><td>获取后补组标志清单</td></tr><tr><td align="left">setgroups</td><td>设置后补组标志清单</td></tr></tbody></table><h2 id="八、进程间通信"><a href="#八、进程间通信" class="headerlink" title="八、进程间通信"></a>八、进程间通信</h2><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">ipc</td><td>进程间通信总控制调用</td></tr></tbody></table><h3 id="1、信号"><a href="#1、信号" class="headerlink" title="1、信号"></a>1、信号</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">sigaction</td><td>设置对指定信号的处理方法</td></tr><tr><td align="left">sigprocmask</td><td>根据参数对信号集中的信号执行阻塞/解除阻塞等操作</td></tr><tr><td align="left">sigpending</td><td>为指定的被阻塞信号设置队列</td></tr><tr><td align="left">sigsuspend</td><td>挂起进程等待特定信号</td></tr><tr><td align="left">signal</td><td>参见signal</td></tr><tr><td align="left">kill</td><td>向进程或进程组发信号</td></tr><tr><td align="left">*sigblock</td><td>向被阻塞信号掩码中添加信号,已被sigprocmask代替</td></tr><tr><td align="left">*siggetmask</td><td>取得现有阻塞信号掩码,已被sigprocmask代替</td></tr><tr><td align="left">*sigsetmask</td><td>用给定信号掩码替换现有阻塞信号掩码,已被sigprocmask代替</td></tr><tr><td align="left">*sigmask</td><td>将给定的信号转化为掩码,已被sigprocmask代替</td></tr><tr><td align="left">*sigpause</td><td>作用同sigsuspend,已被sigsuspend代替</td></tr><tr><td align="left">sigvec</td><td>为兼容BSD而设的信号处理函数,作用类似sigaction</td></tr><tr><td align="left">ssetmask</td><td>ANSI C的信号处理函数,作用类似sigaction</td></tr></tbody></table><h3 id="2、消息"><a href="#2、消息" class="headerlink" title="2、消息"></a>2、消息</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">msgctl</td><td>消息控制操作</td></tr><tr><td align="left">msgget</td><td>获取消息队列</td></tr><tr><td align="left">msgsnd</td><td>发消息</td></tr><tr><td align="left">msgrcv</td><td>取消息</td></tr></tbody></table><h3 id="3、管道"><a href="#3、管道" class="headerlink" title="3、管道"></a>3、管道</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">pipe</td><td>创建管道</td></tr></tbody></table><h3 id="4、信号量"><a href="#4、信号量" class="headerlink" title="4、信号量"></a>4、信号量</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">semctl</td><td>信号量控制</td></tr><tr><td align="left">semget</td><td>获取一组信号量</td></tr><tr><td align="left">semop</td><td>信号量操作</td></tr></tbody></table><h3 id="5、共享内存"><a href="#5、共享内存" class="headerlink" title="5、共享内存"></a>5、共享内存</h3><table><thead><tr><th align="left">方法</th><th>作用</th></tr></thead><tbody><tr><td align="left">shmctl</td><td>控制共享内存</td></tr><tr><td align="left">shmget</td><td>获取共享内存</td></tr><tr><td align="left">shmat</td><td>连接共享内存</td></tr><tr><td align="left">shmdt</td><td>拆卸共享内存</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSe基础</title>
      <link href="/2021/06/15/JavaSe%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/15/JavaSe%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、Java-语言概述"><a href="#一、Java-语言概述" class="headerlink" title="一、Java 语言概述"></a>一、Java 语言概述</h1><h2 id="1-什么是Java语言"><a href="#1-什么是Java语言" class="headerlink" title="1. 什么是Java语言"></a>1. 什么是Java语言</h2><p>Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p><h2 id="2-Java语言发展历史"><a href="#2-Java语言发展历史" class="headerlink" title="2. Java语言发展历史"></a>2. Java语言发展历史</h2><ul><li>1995 年Sun公司发布Java1.0版本</li><li>1997 年发布Java 1.1版本</li><li>1998 年发布Java 1.2版本</li><li>2000 年发布Java 1.3版本</li><li>2002 年发布Java 1.4版本</li><li>2004 年发布Java 1.5版本</li><li>2006 年发布Java 1.6版本</li><li><em><strong>2009 年Oracle甲骨文公司收购Sun公司，并于2011发布Java 1.7版本</strong></em></li><li>2014 年发布Java 1.8版本</li><li>2017 年发布Java 9.0版本</li></ul><h2 id="3-JAVA的优势"><a href="#3-JAVA的优势" class="headerlink" title="3. JAVA的优势"></a>3. JAVA的优势</h2><ul><li><p><em><strong>可移植性</strong></em></p><ul><li>跨平台，linux、windown、mac，JAVA程序流传一句话：一次编写，到处运行</li></ul></li><li><p><em><strong>面向对象</strong></em></p><ul><li>模拟人的思维写程序，JAVA里面俗称：万物皆对象</li></ul></li><li><p><em><strong>动态性</strong></em></p><ul><li>但是JAVA本身是不具有动态性的，单可以利用反射机制来让JAVA有动态性</li></ul></li><li><p><em><strong>多线程</strong></em></p><ul><li>比如：在现实生活中我们使用笔记本电脑既可以打游戏的同时也能够听音乐</li></ul></li><li><p><em><strong>安全性</strong></em></p><ul><li>可以构建一些能防病毒、防篡改的系统</li></ul></li><li><p><em><strong>健壮性</strong></em></p><ul><li>生态圈丰富</li></ul></li><li><p><em><strong>等等等等……</strong></em></p></li></ul><h2 id="4-Java语言能做什么"><a href="#4-Java语言能做什么" class="headerlink" title="4. Java语言能做什么"></a>4. Java语言能做什么</h2><ul><li><em><strong>移动应用开发</strong></em></li></ul><blockquote><p>现在最大的移动设备操作系统安卓的App开发语言就是java，随便打开一个App他们就是用的java语言。在安卓没有出现之前我们玩的手机上的游戏大多是java开发的，是否还记得进入游戏的时候一个java图标的游戏呢。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grickb287bj30go0a0762.jpg" alt="image-20200614204816463"></p><ul><li><em><strong>嵌入式</strong></em></li></ul><blockquote><p>我们经常用的电饭煲、微波炉、录像机、汽车等都是使用嵌入式系统。java在嵌入式领域处着重要的地位，有着很大的发展空间。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grickfb0l7j30hg09twjd.jpg" alt="image-20200614205444139"></p><ul><li><em><strong>大数据</strong></em></li></ul><blockquote><p>火爆高薪的大数据领域，java也能接入，大数据技术都在不同程度使用着java。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grickletfqj30ga096adm.jpg" alt="image-20200614205721941"></p><ul><li><em><strong>网站领域</strong></em></li></ul><blockquote><p>大型的电子商务平台就是使用java开发的。例如有名的淘宝网、京东。java可以运用许多不同框架创建web项目，从而有开发大型网站的基础。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grickr29enj310h0qbwto.jpg" alt="image-20200614204705497"></p><h2 id="5-JAVA的三大版本"><a href="#5-JAVA的三大版本" class="headerlink" title="5. JAVA的三大版本"></a>5. JAVA的三大版本</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grickurvgoj314i0gz4bs.jpg" alt="image-20200614212335661"></p><h2 id="6-JDK-amp-JRE-amp-JVM"><a href="#6-JDK-amp-JRE-amp-JVM" class="headerlink" title="6. JDK &amp; JRE &amp; JVM"></a>6. JDK &amp; JRE &amp; JVM</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grickyhw4xj314q0le14q.jpg" alt="image-20200614214326270"></p><blockquote><p>jdk：java development kit          java开发工具包</p><p>jre：java runtime enviroment     java运行时环境</p><p>jvm：java virtual machine          java虚拟机</p><p>三者之间是包含关系，jdk包含jre，jre包含jvm</p></blockquote><h1 id="二、Java开发环境搭建"><a href="#二、Java开发环境搭建" class="headerlink" title="二、Java开发环境搭建"></a>二、Java开发环境搭建</h1><blockquote><p><strong>搭建步骤</strong></p><ol><li>JDK下载与安装</li><li>配置JDK环境变量</li><li>JDK目录介绍</li><li>编写第一个Java程序</li></ol><p><strong>安装JDK需要注意的事项</strong></p><ol><li>安装路径中不要包含中文</li><li>安装路径中不要包含空格</li></ol></blockquote><h2 id="1-JDK下载与安装"><a href="#1-JDK下载与安装" class="headerlink" title="1. JDK下载与安装"></a>1. JDK下载与安装</h2><ul><li><em><strong>下载JDK</strong></em></li></ul><p>JDK下载地址：<a href="https://www.oracle.com/">https://www.oracle.com/</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricl51i88j30zs0q2qby.jpg" alt="image-20200614215449515"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricl8gwqdj30xn08saaq.jpg" alt="image-20200614215610643"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griclbn1h1j30y00cuwfq.jpg" alt="image-20200614215721104"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricldtr46j30y10jz0ur.jpg" alt="image-20200614215815555"></p><ul><li><em><strong>安装JDK</strong></em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griclkiolyj30nt07l748.jpg" alt="image-20200614220017404"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griclpkk8cj60jg0agmxm02.jpg" alt="image-20200614220056955"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricltqof0j30dw0aldg6.jpg" alt="image-20200614220806395"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griclzwmx6j30dw0aj74e.jpg" alt="image-20200614220828697"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricm4nw6bj30dw0al3yr.jpg" alt="image-20200614221115423"></p><h2 id="2-配置JDK环境变量"><a href="#2-配置JDK环境变量" class="headerlink" title="2. 配置JDK环境变量"></a>2. 配置JDK环境变量</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricm9sqe7j30y00fgabi.jpg" alt="image-20200614221313204"></p><ul><li>右击此电脑 — 点击属性</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricmehiltj30v50d4gtn.jpg" alt="image-20200614221505992"></p><ul><li>点击高级系统设置 — 点击环境变量</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricmhahuvj30v90hm0ul.jpg" alt="image-20200614221619959"></p><ul><li>新建系统变量 — 创建JAVA_HOME变量</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricmmdn91j30in0i73z7.jpg" alt="image-20200614222007977"></p><ul><li>配置系统path变量</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricmud0pwj30pl0nwtam.jpg" alt="image-20200614222756658"></p><ul><li>保存以上配置</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricn00m6jj30pl0nt3zi.jpg" alt="image-20200614222834639"></p><ul><li>打开cmd终端，使用DOS命令验证是否安装成功</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricn6fvl0j60tj049t8x02.jpg" alt="image-20200614223013939"></p><h2 id="3-JDK目录介绍"><a href="#3-JDK目录介绍" class="headerlink" title="3. JDK目录介绍"></a>3. JDK目录介绍</h2><ul><li><strong>bin目录</strong></li></ul><p>其中bin目录里面存放了JDK的各种工具命令，即JDK开发工具的可执行文件。其中这些可执行文件都是二进制的，其中包括编译器、解释器以及其他一些工具，比如我们刚开始用的Javac、Java命令去检查JDK是否安装配置正确就是在这个目录下面的命令。bin目录下的内容如下图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricn9drjhj30rp0hqtak.jpg" alt="image-20200614224010085"></p><ul><li><strong>include目录</strong></li></ul><p>其中include目录里面是一些供C语言使用的标题文件，其中C语言的头文件支持Java本地接口和Java虚拟机调试程序接口的本地编程技术。这里头文件的作用是让Java调用C/C++实现的函数功能。include目录下的内容如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricnczvrrj30q305m0sx.jpg" alt="image-20200614224112646"></p><ul><li><strong>jre目录</strong></li></ul><p>其中jre(Java runtime  environment即Java运行时环境)目录路径下安装的就是运行Java程序所必须的JRE环境。我们可以看到在jre目录下的bin里面有java.exe、javaws.exe，但没有javac.exe。jre目录下的内容如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricngcdxbj30pn05dglw.jpg" alt="image-20200614224201279"></p><ul><li><strong>lib目录</strong></li></ul><p>其中lib目录：该路径下存放的是JDK工具命令的实际执行程序。lib目录下的内容如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricnk5eepj30r9091js3.jpg" alt="image-20200614224254211"></p><ul><li><strong>src.zip 和 javafx-src.zip目录</strong></li></ul><p>该压缩文件里面存放的就是Java所有核心类库的源代码。src.zip目录解压内容如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricnmxc2uj30pt03fa9v.jpg" alt="image-20200614224832009"></p><p><img src="1.%20JavaSe%E5%9F%BA%E7%A1%80.assets/image-20200614224810498.png" alt="image-20200614224810498"></p><h2 id="4-编写第一个Java程序"><a href="#4-编写第一个Java程序" class="headerlink" title="4. 编写第一个Java程序"></a>4. 编写第一个Java程序</h2><blockquote><ol><li>新建一个存放源代码的目录</li><li>然后再创建一个java类型文件（Hello.java）</li><li>使用Notepad++文本工具编写Hello.java程序文件</li><li>进入cmd终端，使用javac命令将其写好的java程序文件编译成一个.class文件</li><li>执行编译后的.class文件；注：运行时不要加上.class后缀！！！</li></ol></blockquote><ul><li>创建代码存放目录</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricnq8jfgj30y006y3z0.jpg" alt="image-20200614225755533"></p><ul><li>新建一个Hello.java程序文件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricntzfdwj30y0057glt.jpg" alt="image-20200614225911637"></p><ul><li>使用Notepad++文本工具编写Hello.java程序文件<ul><li>注意事项：<ul><li>每个字母和符号必须与示例代码一模一样。</li><li>保证文件名和类的名字是一致的，注意大小写。</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public class后面代表定义一个类的名称，类是Java当中所有源代码的基本组织单位。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="comment">// 第二行的内容是万年不变的固定写法，代表main方法，这一行代表程序执行的起点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 第三行代表打印输出语句（其实就是屏幕显示），希望显示什么，就在小括号当中填写什么内容</span></span><br><span class="line">System.out.print(<span class="string">&quot;Hello worlld!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>关于main方法：</strong>称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</li></ul><blockquote><p>第一个 Hello 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的 Java 源文件 编译成JVM可以看懂的字节码文件。</p></blockquote><ul><li>进入cmd终端，使用javac命令将其写好的Hello.java编译成可执行文件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricny5uuoj30y004laaf.jpg" alt="image-20200614230922528"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grico0ve3vj30xc09egmd.jpg" alt="image-20200614230955791"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grico3cdqrj30xc08taav.jpg" alt="image-20200614231153893"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grico7er9mj30mn01pglf.jpg" alt="image-20200614231311802"></p><blockquote><p><strong>注意事项：</strong>执行时不要加上程序的.class后缀，不然会报错</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricoej7egj30k701amx3.jpg" alt="image-20200614231418652"></p><h1 id="三、编译型-和-解释型"><a href="#三、编译型-和-解释型" class="headerlink" title="三、编译型 和 解释型"></a>三、编译型 和 解释型</h1><blockquote><p><strong>Java这两种都有</strong></p><p>你可以说它是编译型的。因为所有的Java代码都是要编译的，.java不经过编译就什么用都没有。</p><p>你可以说它是解释型的。因为java代码编译后不能直接运行，它是解释运行在JVM上的，所以它是解释运行的，那也就算是解释的了。  </p><p>但是，现在的JVM为了效率，都有一些JIT优化。它又会把.class的二进制代码编译为本地的代码直接运行，所以，又是编译的。</p><p>像C、C++ 他们经过一次编译之后直接可以编译成操作系统了解的类型，可以直接执行的 所以他们是编译型的语言。没有经过第二次的处理  而Java不一样他首先由编译器编译成.class类型的文件，这个是java自己类型的文件  然后在通过虚拟机(JVM)从.class文件中读一行解释执行一行，所以他是解释型的语言，而由于java对于多种不同的操作系统有不同的JVM所以 Java实现了真正意义上的跨平台！ </p></blockquote><h2 id="1-编译型"><a href="#1-编译型" class="headerlink" title="1. 编译型"></a>1. 编译型</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricopnsjrj30jb03uaba.jpg" alt="image-20200615082821326"></p><p>编译型语言是指使用专门的编译器，针对特定平台（操作系统）将某种高级语言源代码一次性“翻译”成可被该平台硬件执行的机器码（包括机器指令和操作数），并包装成该平台所能识别的可执行性程序的格式，这个转换过程称为“编译”。编译生成的可执行性程序可以脱离开发环境，在特定的平台上独立运行。</p><p>因为编译型语言是一次性低编译成机器码，所以可以脱离开发环境独立运行，而且通过运行效率较高；但因为编译型语言的程序被编译成特定平台上的机器码，因为编译生成的可执行性程序通常无法移植到其他平台上运行；如果需要移植，则必须将源代码复制到特定平台上，针对特定平台进行修改，至少也需要采用特定平台上的编译器重新编译。</p><h2 id="2-解释型"><a href="#2-解释型" class="headerlink" title="2. 解释型"></a>2. 解释型</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricou19z8j30k305qdh8.jpg" alt="image-20200615082845181"></p><p>解释性语言是指使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行的语言。解释性语言通常不会进行整体性的编译和链接处理，解释型语言相当于把编译型语言中的编译和解释过程混合到一起同时完成。</p><p>可以认为：每次执行解释型语言的程序都需要进行一次编译，因此解释型语言的程序运行效率通常较低，而且不能脱离解释器独立运行。但解释型语言有一个优势：跨平台比较容易，只需提供特定平台的解释器即可，每个特定平台上的解释器负责将源程序解释成特定平台的机器指令即可。解释型语言可以方便地实现源程序级的移植，但这是以牺牲程序执行效率为代价的。</p><h2 id="3-个人总结"><a href="#3-个人总结" class="headerlink" title="3. 个人总结"></a>3. 个人总结</h2><ul><li><p>编译型语言<strong>一次性</strong>将源码进行编译完成并生成可执行性程序（比如.exe程序）</p></li><li><p>解释型语言<strong>逐行</strong>进行编译并且解释执行（比如Python从上往下逐条解释执行）</p></li></ul><h1 id="四、IDEA开发工具"><a href="#四、IDEA开发工具" class="headerlink" title="四、IDEA开发工具"></a>四、IDEA开发工具</h1><h2 id="1-什么是IDE？"><a href="#1-什么是IDE？" class="headerlink" title="1. 什么是IDE？"></a>1. 什么是IDE？</h2><blockquote><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。</p></blockquote><h2 id="2-下载IntelliJ-IDEA"><a href="#2-下载IntelliJ-IDEA" class="headerlink" title="2. 下载IntelliJ IDEA"></a>2. 下载IntelliJ IDEA</h2><ul><li>进入官网</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricp0manmj310h0mi4ak.jpg" alt="image-20200615084832868"></p><ul><li>下载IntelliJ IDEA</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricp3eakbj310h0pn7gp.jpg" alt="image-20200615084619196"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricp67vxkj310h0n2mzs.jpg" alt="image-20200615084931566"></p><ul><li>下载社区版</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricp9x934j31000ogdhe.jpg" alt="image-20200615085106430"></p><h2 id="3-安装IntelliJ-IDEA"><a href="#3-安装IntelliJ-IDEA" class="headerlink" title="3. 安装IntelliJ IDEA"></a>3. 安装IntelliJ IDEA</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricpcq0i2j30mo06r0sm.jpg" alt="image-20200615093911486"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricpgzue4j30dv0as0th.jpg" alt="image-20200615093948160"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricpwfnv0j30dv0as3yp.jpg" alt="image-20200615094053818"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricq0nzuzj30dv0asjrl.jpg" alt="image-20200615094210602"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricq4pnb5j30dv0as0sy.jpg" alt="image-20200615094225111"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricq8zn0mj30dv0asdgl.jpg" alt="image-20200615094401543"></p><h2 id="4-简单使用IntelliJ-IDEA"><a href="#4-简单使用IntelliJ-IDEA" class="headerlink" title="4. 简单使用IntelliJ IDEA"></a>4. 简单使用IntelliJ IDEA</h2><ul><li>选择不导入设置</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricqdqhqmj30bs04ra9y.jpg" alt="image-20200615094454294"></p><ul><li>创建新的项目</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricqif1qhj30r00gyq3c.jpg" alt="image-20200615102325213"></p><ul><li>创建一个空的项目</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricqkq7azj311w0ptq3e.jpg" alt="image-20200615102425436"></p><ul><li>创建项目 及 指定位置</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricqoix4uj311w0ptmxl.jpg" alt="image-20200615102718837"></p><ul><li>配置好java环境</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricqraqh1j30vb0md3zs.jpg" alt="image-20200615102856483"></p><ul><li>新建一个模块</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricqu5fkpj30vc0d175b.jpg" alt="image-20200615104143425"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricr14xqkj31210ptt9h.jpg" alt="image-20200615113928834"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricr3ie61j31210pt74n.jpg" alt="image-20200615114016199"></p><ul><li>使用 IDEA 创建第一个java的.class文件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricraiumzj30vj0nstau.jpg" alt="image-20200615114231808"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricrdcp97j30qe0bj74f.jpg" alt="image-20200615095622292"></p><ul><li>编写java程序 并 运行.class程序文件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricrg58pzj314a0rkacz.jpg" alt="image-20200615115540657"></p><h1 id="五、Java基础"><a href="#五、Java基础" class="headerlink" title="五、Java基础"></a>五、Java基础</h1><h2 id="1-注释comment"><a href="#1-注释comment" class="headerlink" title="1. 注释comment"></a>1. 注释comment</h2><p><em><strong>概述</strong></em></p><blockquote><ul><li>在代码量少的情况时，我们还能够看懂里面的代码，但是当项目打码量多或者复杂的时候就需要注释了</li><li>注释并不会被当作程序来执行，注释是给程序员来看的</li><li>所以编写代码时，打注释是一个非常好的习惯</li></ul></blockquote><p><em><strong>Java注释有三种：</strong></em></p><ul><li><p>单行注释</p><ul><li>格式如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><ul><li>格式如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>javaDoc文档注释</p><ul><li>格式如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Dev</span> lemon</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p><em><strong>有趣的代码注释</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grick2u50tj30q70esmxb.jpg" alt="image-20200615120021625"></p><h2 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2. 关键字"></a>2. 关键字</h2><blockquote><ul><li><strong>关键字 ：是指在程序中，Java已经定义好的单词，具有特殊含义。</strong><ul><li>关键字比较多，不能死记硬背，学到哪里记到哪里即可。</li><li>Hello 案例中，出现的关键字有 public 、 class 、 static 、 void 等，这些单词已经被Java定义好，全部都是小写字母，notepad++中颜色特殊。</li></ul></li></ul></blockquote><ul><li><strong>关键字总览</strong></li></ul><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h2 id="3-标识符"><a href="#3-标识符" class="headerlink" title="3. 标识符"></a>3. 标识符</h2><blockquote><p><em><strong>标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。</strong></em></p></blockquote><ul><li><strong>命名规则：</strong> <code>硬性要求</code><ul><li>标识符可以包含 英文字母 26个(区分大小写) 、 0 -9数字 、 $ （美元符号） 和 _ （下划线） 。</li><li>标识符不能以数字开头。</li><li>标识符不能是关键字。</li></ul></li><li><strong>命名规范：</strong> <code>软性建议</code><ul><li>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。<ul><li>写法：MyFirstName</li></ul></li><li>方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。<ul><li>写法：myFirstName</li></ul></li><li>变量名规范：全部小写。<ul><li>写法：name</li></ul></li></ul></li></ul><h2 id="4-常量概述"><a href="#4-常量概述" class="headerlink" title="4. 常量概述"></a>4. 常量概述</h2><blockquote><p><strong>常量 是指在Java程序中固定不变的数据。</strong></p></blockquote><p><em><strong>常量的分类：</strong></em></p><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0，1， 567， -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0， -0.1， 2.55</td></tr><tr><td>字符常量</td><td>单引号引起来, 只能写一个字符, 必须有内容</td><td>‘a’ ， ‘空格’， ‘好’</td></tr><tr><td>字符串常量</td><td>双引号引起来,可以写多个字符, 也可以不写</td><td>“A” ，”Hello” ，”你好” ，””</td></tr><tr><td>布尔常量</td><td>只有两个值</td><td>true ， false</td></tr><tr><td>空常量</td><td>只有一个值</td><td>null</td></tr></tbody></table><p><strong>字符常量和字符串常量的区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">形式上： </span></span><br><span class="line"><span class="comment">    字符常量是单引号引起的一个字符；</span></span><br><span class="line"><span class="comment">    字符串常量是双引号引起的若干个字符；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">含义上：</span></span><br><span class="line"><span class="comment">字符常量相当于一个整型值，可以参加表达式的运算；</span></span><br><span class="line"><span class="comment">字符串常量代表一个地址值（该字符串在内存中存放的位置）；</span></span><br><span class="line"><span class="comment">占内存大小：字符常量只占一个字节；</span></span><br><span class="line"><span class="comment">字符串常量占若干个字节，（至少一个字符结束标志）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><em><strong>练习</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 输出整数常量</span></span><br><span class="line">        System.out.println(<span class="number">666</span>);</span><br><span class="line">        <span class="comment">// 输出小数常量</span></span><br><span class="line">        System.out.println(<span class="number">6.6</span>);</span><br><span class="line">        <span class="comment">// 输出字符常量</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        <span class="comment">// 输出字符串变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;lemon&quot;</span>);</span><br><span class="line">        <span class="comment">//输出布尔常量</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-数据类型-和-变量"><a href="#5-数据类型-和-变量" class="headerlink" title="5. 数据类型 和 变量"></a>5. 数据类型 和 变量</h2><blockquote><p>Java是一种强类型语言：他要求对变量的使用要严格符合规定</p></blockquote><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><ul><li><strong>Java的数据类型分为两大类：</strong><ul><li>基本数据类型 ：包括 <code>整数</code>  <code>浮点数</code>  <code>字符</code>  <code>布尔</code> </li><li>引用数据类型 ：包括 <code>类</code>  <code>数组</code>  <code>接口 </code></li></ul></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><p>Java中有8种基本类型，分为4类，分别为：</p><ul><li>整数型：byte 、 short、 int 、 long</li><li>浮点型：float、double</li><li>字符型：char</li><li>布尔型：boolean</li></ul></li><li><p>八种基本数据类型</p></li></ul><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128 ~ 127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768 ~ 32767</td></tr><tr><td>整型</td><td>int（默认）</td><td>4个字节</td><td>-2147483648 ~ 2147483647</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p><strong>常量是固定不变的数据，那么在程序中可以变化的量就称为变量。</strong></p><ul><li>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</li><li>数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。</li><li>程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。</li></ul></blockquote><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 数据值;</span><br></pre></td></tr></table></figure><ul><li>练习:</li></ul><blockquote><p>变量名称：在同一个大括号范围内，变量的名字不可以相同。</p><p>变量赋值：定义的变量，不赋值不能使用。</p><p>long类型：建议数据后加L表示。</p><p>float类型：建议数据后加F表示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义字节型变量</span></span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">127</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">// 定义短整型变量</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">32767</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">// 定义整型变量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">// 定义长整形变量；</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">9223372036854775807L</span>;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        <span class="comment">// 定义单精度浮点数变量</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">5.5F</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        <span class="comment">// 定义双精度浮点型变量</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">8.5</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        <span class="comment">// 定义布尔型变量</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(bool);</span><br><span class="line">        <span class="comment">// 定义字符型变量</span></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KVM虚拟化</title>
      <link href="/2021/06/15/KVM%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
      <url>/2021/06/15/KVM%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、虚拟化技术简介"><a href="#一、虚拟化技术简介" class="headerlink" title="一、虚拟化技术简介"></a>一、虚拟化技术简介</h1><blockquote><p>服务器虚拟化是指将一台计算机（称为物理服务器）通过 hypervisor 虚拟为多台逻辑计算机的技术，这些逻辑计算机又被称为虚拟机（VM，全称：Virtual  Machine），每台虚拟机都拥有独立的“硬件”。虽然你可以在虚拟机的操作系统中看到这些“硬件”，不过它们并不是真实存在的，而是通过 hypervisor 将物理机的硬件虚拟而来。虚拟机运行时，虚拟机硬件的工作实际是由物理机的硬件完成的。</p></blockquote><h2 id="1-Hypervisor-的作用"><a href="#1-Hypervisor-的作用" class="headerlink" title="1. Hypervisor 的作用"></a>1. Hypervisor 的作用</h2><p><strong>hypervisor 又被称为虚拟机监视器（ VMM，全称：Virtual Machine Monitor），是实现物理机虚拟为虚拟机的操作系统或者软件，它为虚拟机提供虚拟的硬件资源，负责管理和分配这些资源，并确保上层虚拟机之间的相互隔离。</strong></p><h2 id="2-Hypervisor-有两种类型"><a href="#2-Hypervisor-有两种类型" class="headerlink" title="2. Hypervisor 有两种类型"></a>2. Hypervisor 有两种类型</h2><ul><li>一种是操作系统，直接安装在物理机上；</li><li>另一种是应用程序，需要先在物理机上安装操作系统，再在操作系统中安装 hypervisor。</li></ul><h1 id="二、虚拟化的分类"><a href="#二、虚拟化的分类" class="headerlink" title="二、虚拟化的分类"></a>二、虚拟化的分类</h1><blockquote><p>服务器虚拟化的有多种划分方式，可以根据虚拟化架构划分为裸金属/寄居，根据虚拟化层次硬件辅助虚拟化/软件辅助虚拟化，根据虚拟化平台划分为全虚拟化/半虚拟化。</p></blockquote><h2 id="1-裸金属（原生）-寄居"><a href="#1-裸金属（原生）-寄居" class="headerlink" title="1. 裸金属（原生）/寄居"></a>1. 裸金属（原生）/寄居</h2><blockquote><p>判断虚拟化类型是裸金属还是寄居架构，取决于虚拟化层，也就是 hypervisor 所处的位置。寄居架构将虚拟化层（hypervisor）以一个应用程序的方式安装运行于操作系统之上，支持最为广泛的各种硬件配置（只要HOST  OS支持该硬件即可）。裸金属架构将虚拟化层（ hypervisor）直接安装到干净的 x86 服务器上，裸金属架构相对于寄居架构效率更高（少了Host OS这一层），且具有更好的可扩展性、健壮性和性能。</p><p>企业级服务器虚拟化都是裸金属架构（效率更高），像主流的企业级服务器虚拟化 ESXi   KVM  Xen  Hyper-v都是裸金属架构。</p></blockquote><ul><li><p>未虚拟化的 x86 服务器架构，自下而上是物理硬件（Hardware）、操作系统（OS），应用程序（ APP ）</p></li><li><p>这和我们个人计算机一样，就是在计算机上装操作系统，再在操作系统里面安装应用程序。</p></li><li><p>架构图如下：</p><ul><li>未做虚拟化的 x86 服务器</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric808gt3j308c08cq2s.jpg" alt="image-20200613090458360"></p><ul><li><p>做完裸金属的 x86 服务器</p><ul><li>裸金属（bare-metal）架构也叫 bare-metal hypervisor、Ⅰ型，最有代表性就是 VMware ESX（i）。</li><li>ESXi 是 VMware 的企业级服务器虚拟化技术，本身是一个操作系统，直接安装的物理服务器上。</li><li>使用 ESXi 需要先在物理服务器上安装 ESXi，然后在 ESXi 中创建各种虚拟硬件（相应虚拟硬件的集合，不包括操作系统，也可以称为虚拟机），再在虚拟机上安装操作系统，最后才能在这些操作系统中安装应用程序。</li><li><strong>Tips：早期 VMware 的企业级服务器虚拟化版本称为 ESX，后来升级版本称为 ESXi。</strong></li><li>VMware ESXi 架构图</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric8tpdmmj308c09qaa3.jpg" alt="image-20200613090839786"></p></li></ul></li></ul><h2 id="2-有点特殊的裸金属-KVM"><a href="#2-有点特殊的裸金属-KVM" class="headerlink" title="2. 有点特殊的裸金属 KVM"></a>2. 有点特殊的裸金属 KVM</h2><ul><li><p>部署 KVM ，首先需要在物理服务器上安装Linux系统，再在Linux中“安装 KVM ”。通常所说的 KVM 实际上是KVM 和 qemu 两种技术的结合，qemu 本身是一种完整的寄居架构软件，采用二进制翻译的方式虚拟化CPU， KVM 则采用效率更高的硬件辅助虚拟化CPU。由于 KVM 只能虚拟化CPU、内存，其它硬件（网卡、硬盘）的虚拟化则是由 qemu 来负责。</p></li><li><p>qemu 是寄居架构，通俗来讲就是 qemu 是个工作在Linux上的软件。而 KVM 则相当于“给Linux内核打了一个补丁”，将Linux部分内核转换为 hypervisor ，Linux内核自然属于操作系统，这样看来 KVM的 hypervisor既有寄居（qemu）又有裸金属（kvm），是一种比较特殊的裸金属。</p></li><li><p>架构图如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric8wgsgcj30b40b4glr.jpg" alt="image-20200613092310606"></p></li></ul><h1 id="三、虚拟化原理简介"><a href="#三、虚拟化原理简介" class="headerlink" title="三、虚拟化原理简介"></a>三、虚拟化原理简介</h1><h2 id="1-用户-内核空间"><a href="#1-用户-内核空间" class="headerlink" title="1. 用户/内核空间"></a>1. 用户/内核空间</h2><ul><li>Windows和Linux都将内存分为内核空间和用户空间，操作系统内核代码运行在内核空间，应用程序代码运行在用户空间。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric8zla2jj30dw05kmx0.jpg" alt="image-20200613093239698"></p><h2 id="2-特权级"><a href="#2-特权级" class="headerlink" title="2. 特权级"></a>2. 特权级</h2><blockquote><p><strong>CPU清除内存数据、设置时钟等指令是非常危险的，如果用错了会导致系统崩溃。通过特权级这一机制，区分内核代码和应用程序代码权限，保证操作系统正常运行。</strong></p></blockquote><ul><li><p>特权级是一种用来保护数据和阻止恶意行为的机制，x86 计算机的CPU提供4个特权级：ring0~3 ，ring0权限最高，ring3 权限最低</p></li><li><p>ring0 提供给操作系统内核(内核空间代码)使用，可以使用所有CPU指令，可以直接操作硬件(如CPU、内存)</p></li><li><p>ring3 提供给应用程序（用户空间代码）使用的，只可以调用基本的CPU指令</p></li><li><p>ring1  ring2 被设计为运行驱动程序，但Windows、Linux将驱动程序运行在 ring0，未使用这两个特权级</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric930g11j30mc0g3459.jpg" alt="image-20200613093436217"></p><h2 id="3-指令类型"><a href="#3-指令类型" class="headerlink" title="3. 指令类型"></a>3. 指令类型</h2><h3 id="3-1-未虚拟化时，CPU的指令分为特权指令和非特权指令。"><a href="#3-1-未虚拟化时，CPU的指令分为特权指令和非特权指令。" class="headerlink" title="3.1 未虚拟化时，CPU的指令分为特权指令和非特权指令。"></a>3.1 未虚拟化时，CPU的指令分为特权指令和非特权指令。</h3><blockquote><p><strong>Tips：特权指令必须以 ring0 运行，否则会产生异常，将控制权交还 ring0，非特权指令有的需要以  ring0运行，有的不需要。</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric99fpnwj30dw08cwes.jpg" alt="image-20200613093917522"></p><p><strong>特权指令</strong></p><p>在多用户、多任务的计算机系统中特权指令必不可少，它主要用于系统资源的分配和管理，包括改变系统工作方式，检测用户的访问权限，修改虚拟存储器管理的段表、页表，完成任务的创建和切换等。</p><p>常见的特权指令有以下几种:</p><p>（1）有关对I/O设备使用的指令 如启动I/O设备指令、测试I/O设备工作状态和控制I/O设备动作的指令等。</p><p>（2）有关访问程序状态的指令 如对程序状态字（ PSW ）的指令等。</p><p>（3）存取特殊寄存器指令 如存取中断寄存器、时钟寄存器等指令。</p><p>（4）其他指令</p><p><strong>非特权指令</strong></p><p>非特权指令有的需要以 ring0 运行，有的可以任意ring运行。操作系统内核以 ring0 运行，可以使用所有指令；应用程序以 ring3 运行，所以不能使用特权指令和部分非特权指令。</p><h3 id="3-2-虚拟化后，CPU的指令分为特权指令，敏感指令，普通指令。"><a href="#3-2-虚拟化后，CPU的指令分为特权指令，敏感指令，普通指令。" class="headerlink" title="3.2 虚拟化后，CPU的指令分为特权指令，敏感指令，普通指令。"></a>3.2 虚拟化后，CPU的指令分为特权指令，敏感指令，普通指令。</h3><blockquote><ul><li><p><strong>Tips：特权指令只有 ring0  才能执行，当非 ring0 执行时会产生异常，非特权指令有的也需要 ring0 才能运行，但是它们非 ring0 运行不会产生异常。</strong></p></li><li><p><strong>Tips：敏感指令 = 特权指令 + 部分非特权指令，也就是说特权指令一定是敏感指令。</strong></p></li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric9epor4j30go0a00tu.jpg" alt="image-20200622232027050"></p><p><strong>敏感指令</strong></p><p>敏感指令是指操作特权资源的指令。</p><p>1.企图访问或修改虚拟机模式或机器状态的指令。</p><p>2.企图访问或修改敏感寄存器或存储单元，如时钟寄存器、中断寄存器等的指令。</p><p>3.企图访问存储保护系统或内存、地址分配系统的指令。</p><p>4.所有I/O指令。</p><h1 id="四、KVM-虚拟化演练"><a href="#四、KVM-虚拟化演练" class="headerlink" title="四、KVM 虚拟化演练"></a>四、KVM 虚拟化演练</h1><blockquote><p>如果系统使用物理机，需要在BIOS里面开启 Intel VT-x 或 AMD-V，如果是 VMware workstation，还须将处理器的虚拟化引擎中的三项开启。</p></blockquote><ul><li>本机主要硬件配置（使用 VMware workstation 模拟）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPU：i5-6200U(8核）</span><br><span class="line"></span><br><span class="line">内存：8G</span><br><span class="line"></span><br><span class="line">硬盘：SATA 500G</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric9l88n6j30k90jnjrs.jpg" alt="image-20200613173836183"></p><h2 id="1-部署-KVM"><a href="#1-部署-KVM" class="headerlink" title="1. 部署 KVM"></a>1. 部署 KVM</h2><blockquote><p>安装 KVM 有多种方式可供选择，下面列出：</p></blockquote><h3 id="1-1-安装系统时-生产环境推荐"><a href="#1-1-安装系统时-生产环境推荐" class="headerlink" title="1.1 安装系统时(生产环境推荐)"></a>1.1 安装系统时(生产环境推荐)</h3><ul><li>在基础环境中选择 Virtualization Host，附加环境中选择 Virtualization Platform(虚拟化平台)，这将仅安装基础虚拟化环境和命令行工具。           </li><li>这种方式只能通过命令行管理虚拟机                    </li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric9rctc3j60m80gon2702.jpg" alt="image-20200613103936918"></p><h3 id="1-2-安装系统时-学习环境推荐"><a href="#1-2-安装系统时-学习环境推荐" class="headerlink" title="1.2 安装系统时(学习环境推荐)"></a>1.2 安装系统时(学习环境推荐)</h3><ul><li><p>在基础环境中选择 Server with GUI，附加环境选择 Virtualization Client， Virtualization Hypervisor ， and Virtualization Tools，除了将安装虚拟化环境和命令行工具，还将安装一个管理虚拟机的图形工具（virt-manager）。</p></li><li><p>这种方式既可以用图形界面，也可以用命令行来管理虚拟机，推荐用这种方法</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric9wiogzj30m80go43n.jpg" alt="image-20200613110028406"></p><h3 id="1-3-手动安装"><a href="#1-3-手动安装" class="headerlink" title="1.3 手动安装"></a>1.3 手动安装</h3><p><strong>验证CPU是否支持 KVM 虚拟化</strong></p><blockquote><p>如果结果中有 vmx（Intel）或 svm(AMD) 字样，就说明CPU的支持</p><p>其中 intel cpu 支持会有 vmx ， AMD cpu 会支持 svm</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E --color <span class="string">&#x27;(vmx|svm)&#x27;</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grica0m6tij31gv0ewwgw.jpg" alt="image-20200613121007577"></p><p><strong>通过yum安装虚拟化的软件包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##配置系统光盘的本地yum源</span></span><br><span class="line">mount /dev/sr0 /mnt/</span><br><span class="line">cat &lt;&lt;<span class="string">END&gt;&gt; /etc/yum.repos.d/yum.repo</span></span><br><span class="line"><span class="string">[lemon]</span></span><br><span class="line"><span class="string">baseurl=file:///mnt</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##安装</span></span><br><span class="line">yum -y groupinstall <span class="string">&quot;GNOME Desktop&quot;</span>        <span class="comment">#图形界面，可装可不装</span></span><br><span class="line"></span><br><span class="line">yum -y install libvirt* virt-* qemu-kvm* bridge-utils      <span class="comment">#KVM相关软件包，必装</span></span><br></pre></td></tr></table></figure><p>说明：libvirtd 服务非常重要，必须确保该服务能够正常运行，才能使用各种管理工具。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bridge-utils    设置网络网卡桥接。</span><br><span class="line">qemu-kvm        此包提供hypervisor以及宿主机和虚拟机之间的通信。</span><br><span class="line">qemu-img        此包提供虚拟机磁盘管理工具; 是qemu-kvm的依赖包，所以安装命令中可以不写qemu-img</span><br><span class="line">libvirt         安装虚拟机管理工具，使用virsh等命令来管理和控制虚拟机。</span><br><span class="line">virt-install    这个包提供了virt-install命令，用于从命令行创建虚拟机。</span><br><span class="line">libvirt-python  这个包包含一个模块，它允许用Python编写的应用程序使用libvirt 提供的API。</span><br><span class="line">libvirt-client  此包提供用于访问libvirt的API和库，还包括virsh，用于从命令行管理和控制虚拟机。</span><br><span class="line">virt-manager    这个包提供了virt-manager工具，也称为Virtual Machine Manager。这是一个用于管理虚拟机的图形工具，它使用libvirt-client库作为管理API。</span><br></pre></td></tr></table></figure><p><strong>验证安装结果，下图说明已经成功安装了</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep kvm</span><br></pre></td></tr></table></figure><p>如果安装成功则显示：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grica83tw8j30qj04bmx8.jpg" alt="image-20200613122659088"></p><p><em><strong>如果出现下面这种情况</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricb8yddwj30mr01pweg.jpg" alt="image-20200613123052878"></p><p><strong>需要去BIOS里设置下</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricbopph4j30ar032jri.jpg" alt="image-20200613123135117"></p><p><strong>如果没有，需要执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe kvm-intel</span><br></pre></td></tr></table></figure><p>还没有就重启一下系统试试</p><p><strong>开启 kvm 服务，并且设置其开机自动启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start libvirtd</span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd</span><br></pre></td></tr></table></figure><p><strong>查看状态操作结果,如下图所示，说明运行情况良好</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status libvirtd</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griccj6ug4j30u2099js4.jpg" alt="image-20200613131424231"></p><h2 id="2-kvm-安装虚机"><a href="#2-kvm-安装虚机" class="headerlink" title="2. kvm 安装虚机"></a>2. kvm 安装虚机</h2><p><strong>向默认路径下载或拉取系统ISO，后面做虚拟化主机的时候会用到</strong></p><blockquote><p>libvirtd 存放镜像的默认位置在  /var/lib/libvirt/images/</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griccmsnjdj30u8052glx.jpg" alt="image-20200613201137513"></p><blockquote><p>在 kvm 上开启 VNC 连接</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griccpjza2j30k90jl0t6.jpg" alt="image-20200613202618334"></p><blockquote><p>安装VNC 客户端工具</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griccw5nzsj30bw08jmye.jpg" alt="image-20200616135119615"></p><blockquote><p>命令行安装虚拟机</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@KVM ~]<span class="comment"># virt-install --name centos7-01 --memory 1024 --vcpus 1 \</span></span><br><span class="line">--disk /opt/centos7-01.raw,format=raw,size=10 \</span><br><span class="line">--cdrom /var/lib/libvirt/images/CentOS-7-x86_64-DVD-1708.iso \</span><br><span class="line">--network=default --graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--virt-type kvm --os-type=linux --os-variant rhel7 --noautoconsole</span><br><span class="line"></span><br><span class="line"><span class="comment">#virt-install参数</span></span><br><span class="line">--name=xx                      　           <span class="comment">#虚拟机唯一名称</span></span><br><span class="line">--memory=1024                               <span class="comment">#虚拟机内存，单位为mb</span></span><br><span class="line">--vcpus=1                                   <span class="comment">#虚拟机CPU数量</span></span><br><span class="line">--disk path=/xx/xxx[,size=10,format=raw]    <span class="comment">#存储文件及格式(虚机磁盘)</span></span><br><span class="line">--cdrom=/xxx/xxx                            <span class="comment">#指定安装源文件</span></span><br><span class="line">--network bridge=br0    　　　　　　　　　　   <span class="comment">#网络连接方式，默认为NAT模式</span></span><br><span class="line">--graphics vnc,port=xxx,listen=xxx 　　　　  <span class="comment">#图形化连接参数</span></span><br><span class="line">--virt-type=kvm        　　　　　　　　　      <span class="comment">#虚拟机类型</span></span><br><span class="line">--os-type=xxx                               <span class="comment">#系统类型</span></span><br><span class="line">--os-variant=xxx 　　　　　　　　　　　　　   　 <span class="comment">#系统版本</span></span><br><span class="line">--noautoconsole    　　　　     <span class="comment">#不加这个选项的话会一直卡在这个终端，直到这个系统彻底安装完毕</span></span><br></pre></td></tr></table></figure><ul><li><p>必须关闭防火墙 或者 添加防火墙规则</p></li><li><p>在vnc客户端上输入ip跟端口号，默认是5900，每创建一个虚机，端口则加1（5901）</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricd0umvoj30bw08jaad.jpg" alt="image-20200616143903479"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricd4lpzwj30pn0iet8q.jpg" alt="image-20200616144019122"></p><p>下面就直接安装就行了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricd9e8bvj30sd0n0n2j.jpg" alt="image-20200613211037936"></p><blockquote><p>创建完一个虚机后，会有两个文件：</p><ol><li>虚机的模板文件（.xml）</li><li>虚机的磁盘文件（.raw）</li></ol><p>所以，如果想要备份虚机的话，就只需要备份这两个文件</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricdcj911j30vz052wet.jpg" alt="image-20200616151537441"></p><h2 id="3-virsh-常用命令"><a href="#3-virsh-常用命令" class="headerlink" title="3. virsh 常用命令"></a>3. virsh 常用命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##kvm比较重要的俩个目录</span></span><br><span class="line">/etc/libvirt/qemu/                         <span class="comment">#虚拟机配置文件默认目录</span></span><br><span class="line">/var/lib/libvirt/images/                   <span class="comment">#默认镜像文件位置 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##日常管理命令</span></span><br><span class="line">virsh list --all                           <span class="comment">#查看所有虚拟机，加all列出关机状态的</span></span><br><span class="line">virsh console xxx                          <span class="comment">#以控件台连接到指定虚拟机，需要修改虚机内核配置</span></span><br><span class="line">virsh start xxx                            <span class="comment">#启动虚拟机</span></span><br><span class="line">virsh autostart xxx                        <span class="comment">#设置虚机随机启动</span></span><br><span class="line">virsh shutdown xxx                         <span class="comment">#关闭虚拟机，一般关不了</span></span><br><span class="line">virsh destroy xxx                          <span class="comment">#强制关闭虚拟机（断电）</span></span><br><span class="line">virsh <span class="built_in">suspend</span> kvm01                        <span class="comment">#挂起虚拟机</span></span><br><span class="line">virsh resume kvm01                         <span class="comment">#恢复挂起的虚拟机</span></span><br><span class="line">virsh dumpxml kvm01 &gt; kvm01.xml            <span class="comment">#导出虚机配置文件（备份）</span></span><br><span class="line">virsh undefine xxx                         <span class="comment">#删除虚拟机，只会删除对应的xml，硬盘文件不会删除</span></span><br><span class="line">virsh define /opt/kvm01.xml                <span class="comment">#重新定义一个虚拟</span></span><br><span class="line">virsh edit kvm01                           <span class="comment">#编辑虚机配置文件</span></span><br><span class="line">virsh snapshot-create kvm01                <span class="comment">#创建虚拟机快照（建快照镜像格式要为qcow2格式）</span></span><br><span class="line">virsh snapshot-list kvm01                  <span class="comment">#查看虚拟机快照</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##虚机磁盘管理命令</span></span><br><span class="line">qemu-img create -f qcow2 /opt/kvm01-1.raw 20G            <span class="comment">#新建虚机磁盘，默认格式为raw</span></span><br><span class="line">qemu-img info kvm01                                      <span class="comment">#查看虚机磁盘系统格式</span></span><br><span class="line">qemu-img convert -f raw 原格式文件 -O qcow2 转换格式文件    <span class="comment">#转换虚机磁盘系统格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##虚机在线添加硬盘和扩容磁盘的管理命令</span></span><br><span class="line">virsh attach-disk</span><br><span class="line"></span><br><span class="line"><span class="comment">##虚机快照管理命令</span></span><br><span class="line">virsh snapshot-create 虚机名                              <span class="comment">#创建快照</span></span><br><span class="line">virsh snapshot-list 虚机名                                <span class="comment">#查看快照</span></span><br><span class="line">virsh snapshot-revert 虚机名 --snapshotname 快照名         <span class="comment">#还原快照</span></span><br><span class="line">virsh snapshot-delete 虚机名 --snapshotname 快照名         <span class="comment">#删除快照</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##虚机克隆管理命令</span></span><br><span class="line">virt-clone --auto-clone -o 虚机名                         <span class="comment">#完整克隆</span></span><br></pre></td></tr></table></figure><h2 id="4-KVM-的日常管理"><a href="#4-KVM-的日常管理" class="headerlink" title="4. KVM 的日常管理"></a>4. KVM 的日常管理</h2><blockquote><p>virsh vncdisplay kvm01                            #查看虚机对应的VNC端口号</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricdgnvwfj30ny06k74i.jpg" alt="image-20200616160142192"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricdlxiwfj30bw08j74l.jpg" alt="image-20200616160214735"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricdrzd4jj60si0n2q2y02.jpg" alt="image-20200616160233769"></p><blockquote><p>virsh list –all                                         #查看所有虚拟机，加all列出关机状态的</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricdz09fkj30m20563yi.jpg" alt="image-20200616144500438"></p><blockquote><p>virsh start  kvm01                               #启动虚拟机</p><p>virsh shutdown  kvm01                      #温柔的关机（有时候不好使）</p><p>virsh destroy  kvm01                         #强制关机（断电）</p><p>virsh suspend  kvm01                       #挂起虚拟机</p><p>virsh resume  kvm01                        #恢复挂起的虚拟机</p></blockquote><ul><li>启动虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grice5m7q5j60q30aa74o02.jpg" alt="image-20200616150132206"></p><ul><li>温柔的关闭虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricebpucsj30rk0ac3yx.jpg" alt="image-20200616150157783"></p><ul><li>强制关闭虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricei4mnfj30of0agwew.jpg" alt="image-20200616150220871"></p><ul><li>挂起虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricelvno5j30oc0ah3yx.jpg" alt="image-20200616150328099"></p><ul><li>恢复挂起的虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griceq3x1yj30o30adt95.jpg" alt="image-20200616150436572"></p><blockquote><p>virsh dumpxml kvm01 &gt; kvm01.xml          #导出虚拟机配置文件（备份）</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griceuvo1jj30s80593ys.jpg" alt="image-20200616152507757"></p><blockquote><p>virsh undefine kvm01                               #取消定义，删除虚拟机，只会删除对应的xml，硬盘文件不会删除</p><p>virsh define /xxx/xxx/kvm01.xml              #重新定义一个虚拟机；.raw的磁盘文件必须得是存在的，不然不行</p></blockquote><ul><li>删除虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griceyiqlhj30r60cr0tj.jpg" alt="image-20200616153000017"></p><ul><li>恢复虚机</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricf5n2b3j30vw0bwdgi.jpg" alt="image-20200616161447817"></p><blockquote><p>virsh edit kvm01                                        #编辑虚机配置文件；修改前记得先关闭虚机</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricf9vswwj30oc07t0t0.jpg" alt="image-20200616154924406"></p><blockquote><p>virsh domrename kvm01  kvm02                   修改虚机名；修改前记得先关闭虚机</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricfekkczj30p40akwev.jpg" alt="image-20200616155422743"></p><h2 id="5-KVM虚拟机开机自启-和-console登陆"><a href="#5-KVM虚拟机开机自启-和-console登陆" class="headerlink" title="5. KVM虚拟机开机自启 和 console登陆"></a>5. KVM虚拟机开机自启 和 console登陆</h2><h3 id="4-1-KVM虚拟机开机自启"><a href="#4-1-KVM虚拟机开机自启" class="headerlink" title="4.1 KVM虚拟机开机自启"></a>4.1 KVM虚拟机开机自启</h3><blockquote><p>virsh autostart  kvm01                                    #设置随宿主机开机自启动</p><p>virsh autostart –disable  kvm01                     #取消随宿主机开机自启动</p></blockquote><ul><li>设置web01虚机随着宿主机的启动而启动</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricfk7aavj30p303omx6.jpg" alt="image-20200616162412556"></p><ul><li>验证</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricfouhgaj30qo078t8u.jpg" alt="image-20200616162517589"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricfveidbj30p905f0sq.jpg" alt="image-20200616162710182"></p><ul><li>为什么他能够自启？<ul><li>其实和启动系统服务的原理一样，就是加了一个软连接</li><li>而且如果你取消了虚机的自启，这个软连接也就会跟随着消失</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricg1gys7j30oz05d3yr.jpg" alt="image-20200616163051350"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricg7ix36j30y503mmxa.jpg" alt="image-20200616163112556"></p><ul><li>取消掉虚机自启，验证这个软连接还会不会消失</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricgadj5dj30oo058gm0.jpg" alt="image-20200616163351001"></p><h3 id="4-2-console登陆"><a href="#4-2-console登陆" class="headerlink" title="4.2 console登陆"></a>4.2 console登陆</h3><blockquote><p>virsh console kvm01                          #以控件台连接到指定虚拟机</p></blockquote><ul><li>在没有配置 虚机 内核的情况下运行这个命令</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricgf2cq3j30na059aa6.jpg" alt="image-20200616164119696"></p><ul><li><p>所以我们需要先修改 虚机 的内核</p><ul><li>先使用VNC登陆查看一下虚机的IP地址</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricgjarlnj30sg093q2y.jpg" alt="image-20200616172815926"></p><ul><li>在使用ssh在kvm宿主机上远程虚机上面</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricglnsxej30z707u0tj.jpg" alt="image-20200616172914807"></p><ul><li>调整虚机的内核并重启系统</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grubby --upadte-kernel=ALL --args=<span class="string">&quot;console=ttyS0,115200n8&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricgovjfoj30xw05c3z2.jpg" alt="image-20200616173139816"></p><ul><li>对比一下两个文件；需要安装vim 或者 df</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7-01 ~]<span class="comment"># yum -y install vim </span></span><br><span class="line">[root@centos7-01 ~]<span class="comment"># vimdiff /boot/grub2/grub.cfg /opt/grub.cfg</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricgromp0j31gv0mrjs2.jpg" alt="image-20200616173328907"></p></li><li><p>然后在从KVM上使用console这个命令看看会有什么变化</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gricguvo6nj30qt0by750.jpg" alt="image-20200616173645322"></p><h2 id="6-KVM磁盘格式转换-和-快照管理"><a href="#6-KVM磁盘格式转换-和-快照管理" class="headerlink" title="6. KVM磁盘格式转换 和 快照管理"></a>6. KVM磁盘格式转换 和 快照管理</h2><blockquote><ul><li>raw（裸格式）                             //占用空间较大，性能较好，但不支持虚拟机快照功能</li><li>qcow2（copy on write）              //占用空间较小，支持快照，性能比RAW稍差一些</li></ul></blockquote><h3 id="6-1-虚机磁盘格式转换"><a href="#6-1-虚机磁盘格式转换" class="headerlink" title="6.1 虚机磁盘格式转换"></a>6.1 虚机磁盘格式转换</h3><ul><li>基于centos7-01.raw磁盘格式文件转换为一个centos7-01.qcow2格式文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw /opt/centos7-01.raw -O qcow2 /opt/centos7-01.qcow2</span><br></pre></td></tr></table></figure><ul><li>修改虚机配置文件，改变虚机磁盘格式</li></ul><h2 id="9-KVM热添加硬盘-和-扩容"><a href="#9-KVM热添加硬盘-和-扩容" class="headerlink" title="9. KVM热添加硬盘 和 扩容"></a>9. KVM热添加硬盘 和 扩容</h2><h2 id="7-KVM全克隆虚机"><a href="#7-KVM全克隆虚机" class="headerlink" title="7. KVM全克隆虚机"></a>7. KVM全克隆虚机</h2><h2 id="8-KVM链接克隆虚机"><a href="#8-KVM链接克隆虚机" class="headerlink" title="8. KVM链接克隆虚机"></a>8. KVM链接克隆虚机</h2><h1 id="五、KVM网络讲解配置（重点）"><a href="#五、KVM网络讲解配置（重点）" class="headerlink" title="五、KVM网络讲解配置（重点）"></a>五、KVM网络讲解配置（重点）</h1><blockquote><p><em><strong>经常玩虚拟机的都知道有两种模式：一种是NAT，一种是Bridge</strong></em></p><ul><li><p>NAT就好比宿主机（就是安装 kvm 虚拟化的主机）是台路由器，虚拟机是连接路由器下面的电脑，跟宿主机同个网段的电脑是访问不了虚拟机的，要访问的话，就得在宿主机上设置端口映射。</p></li><li><p>Bridge 就是把宿主机的物理网卡当做一个交换机，虚拟机直接连接交换机，那就跟宿主机是同一个网段的了，可以被其它电脑访问到，一般做服务虚拟化都是用桥接模式。</p></li></ul></blockquote><h3 id="4-1-原理"><a href="#4-1-原理" class="headerlink" title="4.1 原理"></a>4.1 原理</h3><blockquote><p>使用 libvirt 安装完 qemu kvm 虚拟机，但是发现虚拟机不能上网，虚拟机想要上网，有很多中方法。 我们称Guest机器为虚拟机,Host机器为开机运行的真实机器。</p><p><em><strong>KVM 虚拟机网络配置一般的两种方式：</strong></em></p><ul><li>NAT方式是kvm 安装后的默认方式。它支持主机与虚拟机的互访，同时也支持虚拟机访问互联网，但不支持外界访问虚拟机</li><li>Bridge 方式是将虚拟机桥接到 host机器的网卡上，guest 和 host 机器都通过bridge上网.对外不同的 ip</li></ul><p><em><strong>NAT和桥接的比较：</strong></em></p><ul><li>NAT模式和桥接模式虚拟机都可以上外网。</li><li>由于NAT的网络在一个虚拟网络里，所以局域网其他主机是无法访问虚拟机的，而宿主机可以访问虚拟机，虚拟机可以访问局域网的所有主机，因为真实的局域网相对于NAT的虚拟网络，就是NAT的虚拟网络的外网，不懂的人可以查查NAT的相关知识。</li><li>桥接模式下，多个虚拟机之间可以互相访问；NAT模式下，多个虚拟机之间也可以相互访问。</li></ul><p><em><strong>两种网络的使用场景：</strong></em></p><ul><li>如果你建一个虚拟机，只是给自己用，不需要给局域网其他人用，那么可以选择NAT。</li><li>反之，选择使用 Bridge </li></ul></blockquote><h3 id="4-2-NAT-和-Bridge架构图"><a href="#4-2-NAT-和-Bridge架构图" class="headerlink" title="4.2 NAT 和 Bridge架构图"></a>4.2 NAT 和 Bridge架构图</h3><p>NAT  的网络结构图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grich4vwssj30r90gggml.jpg" alt="image-20200613181800335"></p><p>Bridge 的网络结构图： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grichay2xpj30uw0ghta0.jpg" alt="image-20200613181516976"></p><h3 id="4-3-NAT方式"><a href="#4-3-NAT方式" class="headerlink" title="4.3 NAT方式"></a>4.3 NAT方式</h3><blockquote><p>NAT方式是 kvm 安装后的默认方式。它支持主机与虚拟机的互访，同时也支持虚拟机访问互联网，但不支持外界访问虚拟机。</p><p>要想实现外部访问 kvm NAT 模式中的虚拟机，需要做端口映射 并 开启路由转发</p></blockquote><p>检查当前的网络设置：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-list --all</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grichel5sgj30sl049mxe.jpg" alt="image-20200613184210296"></p><p>检查当前的网络接口：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grichgkbl7j30yb0n2go7.jpg" alt="image-20200613185540978"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grichlodjtj30my0akjrr.jpg" alt="image-20200613190437268"></p><h3 id="4-4-Bridge方式"><a href="#4-4-Bridge方式" class="headerlink" title="4.4 Bridge方式"></a>4.4 Bridge方式</h3><blockquote><p>有两种配置方案：</p><ul><li>手动修改网卡配置文件</li><li>使用 virsh iface-bridge 命令</li></ul></blockquote><h1 id="六、KVM热迁移虚机实战"><a href="#六、KVM热迁移虚机实战" class="headerlink" title="六、KVM热迁移虚机实战"></a>六、KVM热迁移虚机实战</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2021/06/15/Redis/"/>
      <url>/2021/06/15/Redis/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="Redis-概述"><a href="#Redis-概述" class="headerlink" title="Redis 概述"></a>Redis 概述</h2><blockquote><p><strong>Redis 是什么？</strong></p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务 !</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p><blockquote><p><strong>Redis 能干嘛？</strong></p></blockquote><p>1、内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof）<br>2、效率高，可以用于高速缓存<br>3、发布订阅系统<br>4、地图信息分析<br>5、计时器、计数器（浏览量！）<br>6、……..</p><blockquote><p><strong>Redis有什么特性？</strong></p></blockquote><p>1、多样的数据类型<br>2、持久化<br>3、集群<br>4、事务<br>5、……</p><blockquote><p><strong>Redis官方</strong></p></blockquote><p>1、官网：<a href="https://redis.io/">https://redis.io/</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric3k4xpzj311m0ekjtu.jpg" alt="image-20200620112315949"></p><p>2、中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric3mcir7j311m0ckq4v.jpg" alt="image-20200620112250860"></p><h2 id="Redis的数据回收策略"><a href="#Redis的数据回收策略" class="headerlink" title="Redis的数据回收策略"></a>Redis的数据回收策略</h2><p><em><strong>volatile-lru：</strong></em>从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰；</p><p><em><strong>volatile-ttl：</strong></em>从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰；</p><p><em><strong>volatile-random：</strong></em>从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰；</p><p><em><strong>allkeys-lru：</strong></em>从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰；</p><p><em><strong>allkeys-random：</strong></em>从数据集（server.db[i].dict）中任意选择数据淘汰；</p><p><em><strong>no-enviction：</strong></em>（驱逐）禁止驱逐数据；</p><h2 id="Redis-应用部署"><a href="#Redis-应用部署" class="headerlink" title="Redis 应用部署"></a>Redis 应用部署</h2><blockquote><p><strong>1、下载安装包：<code>redis-5.0.8.tar.gz</code></strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric3tdrazj311407y3zv.jpg" alt="image-20200620112734219"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric3qhy77j30vm06p751.jpg" alt="image-20200620112819418"></p><blockquote><p><strong>2、解压Redis的安装包 至 /usr/local/src目录下</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric3wn6oaj30rp0460sx.jpg" alt="image-20200620114441168"></p><blockquote><p><strong>3、进入解压后的文件，可以看到我们redis的配置文件</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric3zg91gj30w2048dg6.jpg" alt="image-20200620114524896"></p><blockquote><p><strong>4、编译 Redis 源码</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># yum -y install gcc-c++</span></span><br><span class="line"></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># make &amp;&amp; echo $?</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric41snu0j30tp092q3b.jpg" alt="image-20200620115402887"></p><blockquote><p><strong>5、创建redis安装目录</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># mkdir -p /usr/local/redis         #Redis家目录</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># mkdir -p /usr/local/redis/pid</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># mkdir -p /usr/local/redis/log</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># mkdir -p /usr/local/redis/bin</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># mkdir -p /usr/local/redis/conf</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># ll /usr/local/redis/</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 2 root root 6 6月  20 11:58 bin</span><br><span class="line">drwxr-xr-x 2 root root 6 6月  20 11:58 conf</span><br><span class="line">drwxr-xr-x 2 root root 6 6月  20 11:58 <span class="built_in">log</span></span><br><span class="line">drwxr-xr-x 2 root root 6 6月  20 11:57 pid</span><br></pre></td></tr></table></figure><blockquote><p><strong>6、拷贝Redis相关文件至此目录中</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp redis.conf /usr/local/redis/conf/</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp src/redis-server /usr/local/redis/bin/</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp src/redis-cli /usr/local/redis/bin/</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp src/redis-benchmark /usr/local/redis/bin/</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp src/redis-check-rdb /usr/local/redis/bin/</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp src/redis-check-aof /usr/local/redis/bin/</span></span><br><span class="line">[root@redis01 redis-5.0.8]<span class="comment"># cp src/redis-sentinel /usr/local/redis/bin/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>redis.conf</td><td>redis配置文件</td></tr><tr><td>redis-server</td><td>redis服务端程序</td></tr><tr><td>redis-cli</td><td>redis客户端程序</td></tr><tr><td>redis-benchmark</td><td>用于进行测试redis性能测试的工具</td></tr><tr><td>redis-check-rdb</td><td>用于修复出现问题的dump.rdb文件</td></tr><tr><td>redis-check-aof</td><td>用于修复出现问题的aof文件</td></tr><tr><td>redis-sentinel</td><td>用于哨兵集群管理工具</td></tr></tbody></table><blockquote><p><strong>7、配置Redis命令的软连接</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 ~]<span class="comment"># ln -s /usr/local/redis/bin/* /usr/local/bin/</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>8、修改Redis配置文件</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 ~]<span class="comment"># vim /usr/local/redis/conf/redis.conf</span></span><br><span class="line">69 <span class="built_in">bind</span> 192.168.2.1                                  <span class="comment">#修改监听的IP地址</span></span><br><span class="line">88 protected-mode no                                 <span class="comment">#关闭redis的保护模式</span></span><br><span class="line">136 daemonize yes                                    <span class="comment">#开启redis的后台守护进程模式</span></span><br><span class="line">158 pidfile <span class="string">&quot;/usr/local/redis/pid/redis_6379.pid&quot;</span>    <span class="comment">#指定pid文件位置</span></span><br><span class="line">171 logfile <span class="string">&quot;/usr/local/redis/log/redis_6379.log&quot;</span>    <span class="comment">#指定log文件位置</span></span><br><span class="line">263 dir <span class="string">&quot;/usr/local/redis/&quot;</span>                          <span class="comment">#指定本地快照数据库存放目录（dump.rdb）</span></span><br><span class="line">507 requirepass 123456                               <span class="comment">#开启redis密码 并 设置redis的密码为123456</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>9、Redis配置文件详解</strong></p></blockquote><table><thead><tr><th>配置</th><th>作用</th></tr></thead><tbody><tr><td>daemonize yes</td><td>以后台daemon方式运行redis</td></tr><tr><td>pidfile “redis.pid”</td><td>默认pid文件路径</td></tr><tr><td>port 6379</td><td>默认端口</td></tr><tr><td>bind 127.0.0.1</td><td>默认绑定本机所有ip地址，为了安全，可以只监听内网ip</td></tr><tr><td>timeout 300</td><td>客户端超时设置，单位为秒</td></tr><tr><td>loglevel verbose</td><td>设置日志级别，支持四个级别：debug、notice、verbose、warning</td></tr><tr><td>logfile stdout</td><td>日志记录方式，默认为标准输出，logs不写文件，输出到空设备/deb/null</td></tr><tr><td>logfile “redis.log”</td><td>可以指定日志文件路径</td></tr><tr><td>databases 16</td><td>开启数据库的数量</td></tr><tr><td>save 900 1</td><td>创建本地数据库快照；900秒内，执行1次写操作后触发快照</td></tr><tr><td>save 300 10</td><td>创建本地数据库快照；300秒内，执行10次写操作</td></tr><tr><td>save 60 10000</td><td>创建本地数据库快照；60秒内，执行10000次写操作</td></tr><tr><td>rdbcompression yes</td><td>启用数据库lzf压缩，也可以设置为no</td></tr><tr><td>dbfilename dump.rdb</td><td>本地快照数据库名称</td></tr><tr><td>dir “/usr/local/redis”</td><td>本地快照数据库存放目录（默认在启动redis的路径）</td></tr><tr><td>requirepass 123456</td><td>设置redis数据库连接密码</td></tr><tr><td>appendfsync everysec</td><td>设置日志同步的频率, 每秒执行同步, 还有两个参数always、no一般设置为everysec, 相当于MySQL事物日志的写方式</td></tr><tr><td>Slaveof</td><td>设置数据库为其他数据库的从数据库</td></tr><tr><td>Masterauth</td><td>主数据库连接需要的密码验证</td></tr><tr><td>vm-enabled</td><td>是否开启虚拟内存支持 (vm开头的参数都是配置虚拟内存的)</td></tr><tr><td>vm-swap-file</td><td>设置虚拟内存的交换文件路径</td></tr><tr><td>vm-max-memory</td><td>设置redis使用的最大物理内存大小</td></tr><tr><td>vm-page-size</td><td>设置虚拟内存的页大小</td></tr><tr><td>vm-pages</td><td>设置交换文件的总的page数量</td></tr><tr><td>vm-max-threads</td><td>设置使用swap存储同时使用的线程数量，通常设置值为核心数相同，如果设置为0，则会以串行方式，对数据的完整性有着极大的保证</td></tr><tr><td>Glueoutputbuf</td><td>把小的输出缓存存放在一起</td></tr><tr><td>hash-max-zipmap-entries</td><td>设置hash的临界值</td></tr><tr><td>Activerehashing</td><td>重新hash</td></tr></tbody></table><blockquote><p><strong>10、编写启动脚本并启动Redis</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 ~]<span class="comment"># vim /etc/init.d/redis</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 80 90</span></span><br><span class="line"><span class="comment"># description: Start and Stop redis</span></span><br><span class="line"><span class="comment">#PATH=/usr/local/bin:/sbin:/usr/bin:/bin</span></span><br><span class="line">REDISPORT=6379</span><br><span class="line">EXEC=/usr/<span class="built_in">local</span>/redis/bin/redis-server</span><br><span class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/redis/bin/redis-cli</span><br><span class="line">PIDFILE=/usr/<span class="built_in">local</span>/redis/pid/redis_6379.pid</span><br><span class="line">CONF=<span class="string">&quot;/usr/local/redis/conf/redis.conf&quot;</span></span><br><span class="line">AUTH=<span class="string">&quot;123456&quot;</span></span><br><span class="line">LISTEN_IP=$(netstat -utpln |grep redis-server |awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PIDFILE</span> exists, process is already running or crashed&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Starting Redis server...&quot;</span></span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span>=<span class="string">&quot;0&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;Redis is running...&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PIDFILE</span> does not exist, process is not running&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Stopping ...&quot;</span></span><br><span class="line">                <span class="variable">$REDIS_CLI</span> -h <span class="variable">$LISTEN_IP</span> -p <span class="variable">$REDISPORT</span> -a <span class="variable">$AUTH</span> SHUTDOWN</span><br><span class="line">                <span class="keyword">while</span> [ -x <span class="variable">$&#123;PIDFILE&#125;</span> ]</span><br><span class="line">               <span class="keyword">do</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Waiting for Redis to shutdown ...&quot;</span></span><br><span class="line">                    sleep 1</span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Redis stopped&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">   restart|force-reload)</span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> stop</span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> start</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot;</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">[root@redis01 ~]<span class="comment"># chmod 755 /etc/init.d/redis  #给予脚本执行权限</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># /etc/init.d/redis start      #启动Redis</span></span><br><span class="line">Starting Redis server...</span><br><span class="line">Redis is running...</span><br><span class="line">[root@redis01 ~]<span class="comment"># netstat -anptu|grep &quot;6379&quot;</span></span><br><span class="line">tcp        0      0 192.168.2.1:6379        0.0.0.0:*            LISTEN      22704/redis-server</span><br></pre></td></tr></table></figure><blockquote><p><strong>11、查看redis家目录生成的文件</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 ~]<span class="comment"># tree /usr/local/redis/</span></span><br><span class="line">/usr/<span class="built_in">local</span>/redis/</span><br><span class="line">├── bin</span><br><span class="line">│   ├── redis-benchmark</span><br><span class="line">│   ├── redis-check-aof</span><br><span class="line">│   ├── redis-check-rdb</span><br><span class="line">│   ├── redis-cli</span><br><span class="line">│   ├── redis-sentinel</span><br><span class="line">│   └── redis-server</span><br><span class="line">├── conf</span><br><span class="line">│   └── redis.conf</span><br><span class="line">├── dump.rdb</span><br><span class="line">├── <span class="built_in">log</span></span><br><span class="line">│   └── redis_6379.log</span><br><span class="line">└── pid</span><br><span class="line">    └── redis_6379.pid</span><br><span class="line"></span><br><span class="line">4 directories, 10 files</span><br></pre></td></tr></table></figure><blockquote><p><strong>12、使用redis-cli 连接Redis服务方式</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 方式一：redis-cli -h IP -p port -a password       #不推荐在公司这么用，适合学习的时候用</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># redis-cli -h 192.168.2.1 -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 方式二：redis-cli -h IP -p port                   #这种的方式，再进去之后需要用AUTH认证密码</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># redis-cli -h 192.168.2.1 -p 6379</span></span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">192.168.2.1:6379&gt; AUTH 123456</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 可能会出现错误信息：(error) ERR Client sent AUTH, but no password is set</span></span><br><span class="line">解决方法如下：</span><br><span class="line">192.168.1.1:6379&gt; CONFIG SET requirepass <span class="string">&quot;123456&quot;</span>   <span class="comment">#设置密码</span></span><br><span class="line">OK</span><br><span class="line">192.168.1.1:6379&gt; AUTH 123456</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><blockquote><p><strong>模块化，包含，类似于Nginx中的include</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric47vvyvj30rm01sgli.jpg" alt="image-20200620170715446"></p><blockquote><p><strong>网络配置</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port 6379                          <span class="comment"># 端口设置</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1                     <span class="comment"># 默认绑定本机所有ip地址，为了安全，可以只监听内网ip</span></span><br><span class="line">protected-mode yes                 <span class="comment"># 保护模式</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>SECURITY 安全配置</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456                 <span class="comment"># 设置redis数据库连接密码，默认是没有密码！</span></span><br><span class="line">masterauth &lt;master-password&gt;       <span class="comment"># 主数据库连接需要的密码验证</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>通用配置 GENERAL</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes                      <span class="comment"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！</span></span><br><span class="line">pidfile <span class="string">&quot;redis.pid&quot;</span>                <span class="comment"># 默认pid文件路径</span></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span>                <span class="comment"># 指定日志文件路径</span></span><br><span class="line">loglevel notice                    <span class="comment"># 设置日志级别，支持四个级别：debug、notice、verbose、warning</span></span><br><span class="line">databases 16                       <span class="comment"># 开启数据库的数量，默认是 16 个数据库</span></span><br><span class="line">always-show-logo yes               <span class="comment"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>rdb快照配置</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">save 900 1                         <span class="comment"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作</span></span><br><span class="line">save 300 10                        <span class="comment"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作</span></span><br><span class="line">save 60 10000                      <span class="comment"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作</span></span><br><span class="line">rdbcompression yes                 <span class="comment"># 是否压缩 rdb 文件，需要消耗一些cpu资源！</span></span><br><span class="line">dbfilename dump.rdb                <span class="comment"># 本地快照数据库名称</span></span><br><span class="line">dir ./                             <span class="comment"># 本地快照数据库存放目录（默认在启动redis的路径）</span></span><br><span class="line">stop-writes-on-bgsave-error yes    <span class="comment"># 持久化如果出错，是否还需要继续工作！</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>AOF配置</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no                      <span class="comment"># 默认关闭的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span>    <span class="comment"># aof持久化的文件的名字</span></span><br><span class="line">appendfsync always                 <span class="comment"># 每次修改都会 sync。消耗性能</span></span><br><span class="line">appendfsync everysec               <span class="comment"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class="line">appendfsync no                     <span class="comment"># 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>限制 CLIENTS</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000                   <span class="comment"># 设置能连接上redis的最大客户端的数量</span></span><br><span class="line">timeout 300                        <span class="comment"># 客户端超时设置，单位为秒</span></span><br><span class="line">maxmemory &lt;bytes&gt;                  <span class="comment"># redis 配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction        <span class="comment"># 内存到达上限之后的处理策略, 如下:</span></span><br><span class="line">  1、allkeys-random    随机删除</span><br><span class="line">  2、volatile-random   随机删除即将过期key </span><br><span class="line">  3、allkeys-lru       删除lru算法的key </span><br><span class="line">  4、volatile-ttl      删除即将过期的 </span><br><span class="line">  5、noeviction        永不过期，返回错误</span><br><span class="line">  6、volatile-lru      只对设置了过期时间的key进行LRU（默认值）</span><br></pre></td></tr></table></figure><blockquote><p><strong>REPLICATION 复制，集群配置</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 3       <span class="comment"># 设置slave节点数量，如果slave节点数量少于此值，那么master节点将停止客户端一切写请求</span></span><br><span class="line">min-slaves-max-lag 10       <span class="comment"># master与slave之间同步数据的超时时间，超过此时间，master节点将停止客户端一切写操作</span></span><br><span class="line">slaveof IP PORT             <span class="comment"># slave节点指定主master的ip地址以及端口</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>虚拟内存配置</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm-enabled                         <span class="comment"># 是否开启虚拟内存支持</span></span><br><span class="line">vm-swap-file                       <span class="comment"># 设置虚拟内存的交换文件路径</span></span><br><span class="line">vm-max-memory                      <span class="comment"># 设置redis使用的最大物理内存大小</span></span><br><span class="line">vm-page-size                       <span class="comment"># 设置虚拟内存的页大小</span></span><br><span class="line">vm-pages                           <span class="comment"># 设置交换文件的总的page数量</span></span><br></pre></td></tr></table></figure><h2 id="Redis-测试性能"><a href="#Redis-测试性能" class="headerlink" title="Redis 测试性能"></a>Redis 测试性能</h2><p><strong>redis-benchmark</strong> 是一个压力测试工具，官方自带的性能测试工具。</p><blockquote><p><strong>常用选项：</strong></p></blockquote><table><thead><tr><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><strong>-h</strong></td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td><strong>-p</strong></td><td>指定服务器端口</td><td>6379</td></tr><tr><td><strong>-s</strong></td><td>指定服务器 socket</td><td></td></tr><tr><td><strong>-c</strong></td><td>指定并发连接数</td><td>50</td></tr><tr><td><strong>-n</strong></td><td>指定请求数</td><td>10000</td></tr><tr><td><strong>-d</strong></td><td>以字节的形式指定 SET/GET 值的数据大小</td><td>2</td></tr><tr><td><strong>-k</strong></td><td>1=keep alive 0=reconnect</td><td>1</td></tr><tr><td><strong>-r</strong></td><td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td></td></tr><tr><td><strong>-P</strong></td><td>通过管道传输 <numreq> 请求</td><td>1</td></tr><tr><td><strong>-q</strong></td><td>强制退出 redis。仅显示 query/sec 值</td><td></td></tr><tr><td><strong>–csv</strong></td><td>以 CSV 格式输出</td><td></td></tr><tr><td><strong>-l</strong></td><td>生成循环，永久执行测试</td><td></td></tr><tr><td><strong>-t</strong></td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td><strong>-I</strong></td><td>Idle 模式。仅打开 N 个 idle 连接并等待。</td><td></td></tr></tbody></table><blockquote><p><strong>简单测试下</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接 100000请求</span></span><br><span class="line">redis-benchmark -h 192.168.2.1 -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric4gnqoyj60t80in0ts02.jpg" alt="image-20200620130500634"></p><blockquote><p><strong>如何查看这些分析呢？</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric4hq67hj30sb085acy.jpg" alt="image-20200620130539716"></p><h2 id="Redis-基础Key-Value"><a href="#Redis-基础Key-Value" class="headerlink" title="Redis 基础Key-Value"></a>Redis 基础Key-Value</h2><blockquote><p><strong>Redis 是单线程的！</strong></p></blockquote><p>明白Redis是很快的，官方表示，Redis是基于内存操作，CPU不是Redis性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了！所有就使用了单线程了！</p><p>Redis 是C 语言写的，官方提供的数据为 100000+ 的QPS，完全不比同样是使用 key-vale的Memecache差！</p><blockquote><p><strong>Redis 为什么单线程还这么快？</strong></p></blockquote><p>1、误区1：高性能的服务器一定是多线程的？</p><p>2、误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</p><p>3、对CPU&gt;内存&gt;硬盘的速度要有所了解！</p><p>4、核心：redis 是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！！！），对于内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个CPU上的，在内存情况下，这个就是最佳的方案！</p><blockquote><p><strong>redis默认有16个数据库，默认使用的是第0个，可以使用 select 进行切换数据库！</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric4lecrmj30v2043wep.jpg" alt="image-20200620131047944"></p><blockquote><p><strong>后面如果遇到不会的命令，可以在官网查看帮助文档！</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric4o7jj5j30uh01sjrd.jpg" alt="image-20200620143436298"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; select 3               <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[3]&gt; dbsize              <span class="comment"># 查看DB的key个数！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">192.168.2.1:6379[3]&gt; <span class="built_in">set</span> name lemon      <span class="comment"># 创建一对key value</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[3]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379[3]&gt; <span class="built_in">type</span> name           <span class="comment"># 查看key的value数据类型</span></span><br><span class="line">string</span><br><span class="line">192.168.2.1:6379[3]&gt; get name            <span class="comment"># 查看key的value值</span></span><br><span class="line"><span class="string">&quot;lemon&quot;</span></span><br><span class="line">192.168.2.1:6379[3]&gt; exists name         <span class="comment"># 判断当前的key是否存在; 1代表存在, 0代表不存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379[3]&gt; exists name1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">192.168.2.1:6379[3]&gt; <span class="built_in">set</span> AA aa</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[3]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379[3]&gt; del AA              <span class="comment"># 删除key</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379[3]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379[3]&gt; select 1</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[1]&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[1]&gt; <span class="built_in">set</span> height 1.8</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[1]&gt; randomkey           <span class="comment">#随机返回一个Key</span></span><br><span class="line"><span class="string">&quot;height&quot;</span></span><br><span class="line">192.168.2.1:6379[1]&gt; randomkey</span><br><span class="line"><span class="string">&quot;age&quot;</span></span><br><span class="line">192.168.2.1:6379[1]&gt; keys *              <span class="comment"># 查看当前数据库所有的key</span></span><br><span class="line">1) <span class="string">&quot;height&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">192.168.2.1:6379[1]&gt; keys h*             <span class="comment"># 查看当前数据库所有以h开头的key</span></span><br><span class="line">1) <span class="string">&quot;height&quot;</span></span><br><span class="line">192.168.2.1:6379[1]&gt; expire age 10       <span class="comment"># 设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379[1]&gt; ttl age             <span class="comment"># 查看当前key的剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379[1]&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">192.168.2.1:6379[1]&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">192.168.2.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;height&quot;</span></span><br><span class="line">192.168.2.1:6379[1]&gt; rename height AA    <span class="comment"># 修改key名</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;AA&quot;</span></span><br><span class="line">192.168.2.1:6379[1]&gt; flushdb             <span class="comment"># 清空当前数据库的内容</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[1]&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">192.168.2.1:6379[1]&gt; flushall            <span class="comment"># 清空全部数据库的内容</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[1]&gt; select 3</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379[3]&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><h2 id="Redis中操作之其他操作"><a href="#Redis中操作之其他操作" class="headerlink" title="Redis中操作之其他操作"></a>Redis中操作之其他操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; dbsize <span class="comment">#查看所有key的数目 </span></span><br><span class="line">192.168.2.1:6379&gt; flushdb  <span class="comment">#删除当前选择数据库中的所有key </span></span><br><span class="line">192.168.2.1:6379&gt; flushall  <span class="comment">#删除所有数据库中的所有key </span></span><br><span class="line">192.168.2.1:6379&gt; save<span class="comment">#将数据同步保存到磁盘 </span></span><br><span class="line">192.168.2.1:6379&gt; bgsave <span class="comment">#异步保存 </span></span><br><span class="line">192.168.2.1:6379&gt; lastsave <span class="comment">#上次成功保存到磁盘的Unix时间戳 </span></span><br><span class="line">192.168.2.1:6379&gt; info<span class="comment">#查询server信息 </span></span><br><span class="line">192.168.2.1:6379&gt; slaveof<span class="comment">#改变复制策略设置</span></span><br></pre></td></tr></table></figure><h1 id="Redis五大数据类型"><a href="#Redis五大数据类型" class="headerlink" title="Redis五大数据类型"></a>Redis五大数据类型</h1><blockquote><p><strong>官网文档</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric4rzyyfj30xb0is775.jpg" alt="image-20200620141701476"></p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><blockquote><p>String是简单的 key-value 键值对，value 不仅可以是 String，也可以是数字；String在redis内部存储默认就是一个字符串，被redisObject所引用，当遇到incr,decr等操作时会转成数值型进行计算，此时redisObject的encoding字段为int。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> key1 v1</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; append key1 <span class="string">&quot;hello&quot;</span>         <span class="comment"># 追加字符串，如果当前key不存在，就相当于set key</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">192.168.2.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; strlen key1                 <span class="comment"># 获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># i++</span></span><br><span class="line"><span class="comment"># 步长 i+=</span></span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> key2 0                  <span class="comment"># 初始浏览量为0</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; incr key2                   <span class="comment"># 自增1 浏览量变为1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; incr key2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; decr key2                   <span class="comment"># 自减1  浏览量-1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; decr key2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">192.168.2.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; incrby key2 10              <span class="comment"># 可以设置步长，指定增量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">192.168.2.1:6379&gt; incrby key2 10</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line">192.168.2.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;20&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; decrby key2 10              <span class="comment"># 可以设置步长，指定减量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">192.168.2.1:6379&gt; decrby key2 10</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">192.168.2.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 字符串范围 range</span></span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> key3 <span class="string">&quot;hello,world&quot;</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; get key3</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; getrange key3 0 4           <span class="comment"># 截取字符串 [0,4]</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; getrange key3 0 -1          <span class="comment"># 获取全部的字符串 和 get key是一样的</span></span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> key4 abcdefg</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; get key4</span><br><span class="line"><span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; setrange key4 1 xx</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">192.168.2.1:6379&gt; get key4</span><br><span class="line"><span class="string">&quot;axxdefg&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># setex (set with expire)   # 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist)  # 不存在在设置 （在分布式锁中会常常使用！）</span></span><br><span class="line">192.168.2.1:6379&gt; setex key5 30 <span class="string">&quot;hello&quot;</span>       <span class="comment"># 设置key5 的值为 hello, 30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; ttl key5</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">192.168.2.1:6379&gt; get key5</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; setnx mykey <span class="string">&quot;redis&quot;</span>        <span class="comment"># 如果mykey 不存在，创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">2) <span class="string">&quot;key1&quot;</span></span><br><span class="line">3) <span class="string">&quot;key5&quot;</span></span><br><span class="line">4) <span class="string">&quot;key4&quot;</span></span><br><span class="line">5) <span class="string">&quot;key3&quot;</span></span><br><span class="line">6) <span class="string">&quot;key2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; ttl key5</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">2) <span class="string">&quot;key1&quot;</span></span><br><span class="line">3) <span class="string">&quot;key4&quot;</span></span><br><span class="line">4) <span class="string">&quot;key3&quot;</span></span><br><span class="line">5) <span class="string">&quot;key2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; setnx mykey <span class="string">&quot;MongoDB&quot;</span>      <span class="comment"># 如果mykey存在，创建失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># mset  同时创建多个键值</span></span><br><span class="line"><span class="comment"># mget  同时获取多个键的值</span></span><br><span class="line">192.168.2.1:6379&gt; mset k1 <span class="string">&#x27;v1&#x27;</span> k2 <span class="string">&#x27;v2&#x27;</span> k3 <span class="string">&#x27;v3&#x27;</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;key3&quot;</span></span><br><span class="line">5) <span class="string">&quot;key1&quot;</span></span><br><span class="line">6) <span class="string">&quot;key2&quot;</span></span><br><span class="line">7) <span class="string">&quot;key4&quot;</span></span><br><span class="line">8) <span class="string">&quot;k3&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">getset <span class="comment"># 先get然后在set</span></span><br><span class="line">192.168.2.1:6379&gt; getset db <span class="string">&#x27;redis&#x27;</span>          <span class="comment"># 如果不存在值，则返回 nil, 在设置k-v</span></span><br><span class="line">(nil)</span><br><span class="line">192.168.2.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; getset db <span class="string">&#x27;mongodb&#x27;</span>        <span class="comment"># 如果存在值，获取原来的值，并设置新的值</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><blockquote><p><strong>概述：</strong>Redis列表是简单的字符串列表，可以类比到C++中的std::list，简单的说就是一个列表或者说是一个队列。可以从头部或尾部向Redis列表添加元素。列表的最大长度为2^32 - 1，也即每个列表支持超过40亿个元素。Redis list的实现为一个双向列表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销，Redis内部的很多实现，包括发送缓冲队列等也都是用的这个数据结构。</p><p><strong>场景：</strong>Redis list的应用场景非常多，也是Redis最重要的数据结构之一，比如twitter的关注列表、粉丝列表等都可以用Redis的list结构来实现，再比如有的应用使用Redis的list类型实现一个简单的轻量级消息队列，生产者push，消费者pop/bpop。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#rpush</span></span><br><span class="line"><span class="comment">#lpush</span></span><br><span class="line"><span class="comment">#lrange</span></span><br><span class="line">192.168.2.1:6379&gt; rpush list1 1         <span class="comment"># 创建列表并在尾部添加元素 &#123;追加&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; rpush list1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.1.1:6379&gt; lrange list1 0 -1     <span class="comment"># 获取list中所有的元素值！</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lpush list1 one       <span class="comment"># 将一个值或者多个值，添加到列表头部 &#123;插入&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; lpush list1 two</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">192.168.2.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;1&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lrange list1 1 2      <span class="comment"># 通过区间获取具体的值！</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#lpop</span></span><br><span class="line"><span class="comment">#rpop</span></span><br><span class="line">192.168.2.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;1&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lpop list1           <span class="comment"># 移除list1的第一个元素</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; rpop list1           <span class="comment"># 移除list1的最后一个元素</span></span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#lindex</span></span><br><span class="line">192.168.2.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lindex list1 1       <span class="comment"># 通过下标获得 list 中的某一个值！</span></span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lindex list1 0</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#Llen</span></span><br><span class="line">192.168.2.1:6379&gt; lpush list2 one two three three</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">192.168.2.1:6379&gt; llen list2           <span class="comment"># 返回列表的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#移除指定的值！</span></span><br><span class="line"><span class="comment">#取关 uid</span></span><br><span class="line"><span class="comment">#Lrem</span></span><br><span class="line">192.168.2.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lrem list2 1 one          <span class="comment"># 移除list2列表中指定个数的value，精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lrem list2 2 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#ltrim : list 截断!</span></span><br><span class="line">192.168.2.1:6379&gt; rpush mylist <span class="string">&#x27;hello-1&#x27;</span> <span class="string">&#x27;hello-2&#x27;</span> <span class="string">&#x27;hello-3&#x27;</span> <span class="string">&#x27;hello-4&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">192.168.2.1:6379&gt; ltrim mylist 1 2    <span class="comment"># 通过下标截取指定的长度，这个list已经被改变了，截断了只剩下截取的元素！</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello-2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello-3&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#rpoplpush : 移除列表的最后一个元素，将他移动到新的列表中！</span></span><br><span class="line">192.168.2.1:6379&gt; rpush mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello-2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello-3&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; rpoplpush mylist myotherlist      <span class="comment"># 将列表最后一个元素移动到新的列表中</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lrange mylist 0 -1                <span class="comment"># 查看原来的列表</span></span><br><span class="line">1) <span class="string">&quot;hello-2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello-3&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lrange myotherlist 0 -1           <span class="comment"># 查看目标列表中，确实存在改值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#lset : 将列表中指定下标的值替换为另外一个值，更新操作</span></span><br><span class="line">192.168.2.1:6379&gt; exists list3             <span class="comment"># 判断这个列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">192.168.2.1:6379&gt; lset list3 0 <span class="string">&#x27;item&#x27;</span>      <span class="comment"># 如果不存在列表我们去更新就会报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">192.168.2.1:6379&gt; lpush list3 <span class="string">&#x27;value1&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; LRANGE list3 0 -1</span><br><span class="line">1) <span class="string">&quot;value1&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; lset list3 0 <span class="string">&#x27;item&#x27;</span>      <span class="comment"># 如果存在，更新当前下标的值</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; LRANGE list3 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#linsert : 将某个具体的value插入到列把你中某个元素的前面或者后面！</span></span><br><span class="line">192.168.2.1:6379&gt; rpush list4 <span class="string">&quot;hello&quot;</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379&gt; linsert list4 before <span class="string">&quot;world&quot;</span> <span class="string">&quot;other&quot;</span>        <span class="comment"># 插入</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; lrange list4 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; linsert list4 after <span class="string">&#x27;world&#x27;</span> <span class="string">&#x27;new&#x27;</span>           <span class="comment"># 追加</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">192.168.2.1:6379&gt; lrange list4 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">4) <span class="string">&quot;new&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><blockquote><p><strong>概述：</strong>可以理解为一堆值不重复的列表，类似数学领域中的集合概念，且Redis也提供了针对集合的求交集、并集、差集等操作。set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</p><p><strong>场景：</strong>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。又或者在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#sadd ：创建集合并赋值</span></span><br><span class="line"><span class="comment">#smembers ：查看集合的值</span></span><br><span class="line"><span class="comment">#sismember ：判断某一个值是不是在set集合中！</span></span><br><span class="line">192.168.2.1:6379&gt; sadd myset <span class="string">&quot;one&quot;</span>              <span class="comment"># 创建myset并赋值one</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; sadd myset <span class="string">&quot;two&quot;</span> <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379&gt; smembers myset                <span class="comment"># 查看指定set的所有值</span></span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; sismember myset <span class="string">&#x27;one&#x27;</span>         <span class="comment"># 判断某一个值是不是在set集合中！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; sismember myset <span class="string">&#x27;ten&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#scard</span></span><br><span class="line">192.168.2.1:6379&gt; scard myset                   <span class="comment"># 获取set集合中的内容元素个数！</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#srem ：移除</span></span><br><span class="line">192.168.2.1:6379&gt; srem myset <span class="string">&#x27;one&#x27;</span>              <span class="comment"># 移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#set 无序不重复集合。抽随机！</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;lovekuangshen2&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovekuangshen&quot;</span></span><br><span class="line">3) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset  <span class="comment"># 随机抽选出一个元素</span></span><br><span class="line"><span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2  <span class="comment"># 随机抽选出指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;lovekuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovekuangshen2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) <span class="string">&quot;lovekuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;lovekuangshen2&quot;</span></span><br><span class="line"></span><br><span class="line">192.168.2.1:6379&gt; sadd myset <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; srandmember myset       <span class="comment"># 随机抽选出一个元素</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; srandmember myset 2     <span class="comment"># 随机抽选出指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; srandmember myset 2</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#spop : 随机删除key！</span></span><br><span class="line">192.168.2.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; spop myset          <span class="comment"># 随机删除一些set集合中的元素！</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#smove : 将一个指定的值，移动到另外一个set集合！</span></span><br><span class="line">192.168.2.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; smove myset myset2 <span class="string">&quot;hello&quot;</span>      <span class="comment"># 将一个指定的值，移动到另外一个set集合！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#微博，B站，共同关注！(并集)</span></span><br><span class="line"><span class="comment">#数字集合类：</span></span><br><span class="line"><span class="comment">#- 差集 SDIFF</span></span><br><span class="line"><span class="comment">#- 交集 SINTER</span></span><br><span class="line"><span class="comment">#- 并集 SUNION</span></span><br><span class="line">192.168.2.1:6379&gt; sadd set1 a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; sadd set2 c d e</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; SDIFF set1 set2        <span class="comment"># 差集  不同的</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; SINTER set1 set2       <span class="comment"># 交集  相同的; 共同好友就可以这样实现</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; SUNION set1 set2       <span class="comment"># 并集  共同的</span></span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;d&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h2><blockquote><p><strong>概述：</strong>有序集合 类似 无序集合，它只是在set的基础上，增加了一个值，set k1 v1 zset k1 score1 v1</p><p><strong>场景：</strong>Redis sorted set的使用场景与set类似，区别是set不是自动有序的，而sorted set可以通过用户额外提供一个优先级(score)的参数来为成员排序，并且是插入有序的，即自动排序。当你需要一个有序的并且不重复的集合列表，那么可以选择sorted set数据结构。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#zadd ：创建有序集合</span></span><br><span class="line">192.168.2.1:6379&gt; zadd myzset1 1 <span class="string">&#x27;one&#x27;</span>                 <span class="comment"># 添加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; zadd myzset1 2 <span class="string">&#x27;two&#x27;</span> 3 <span class="string">&#x27;three&#x27;</span>       <span class="comment"># 添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">192.168.2.1:6379&gt; zrange myzset1 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#ZRANGEBYSCORE ：实现排序</span></span><br><span class="line">192.168.2.1:6379&gt; zadd salary 2500 zhangsan          <span class="comment"># 添加三个用户</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; zadd salary 3500 lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; zadd salary 4500 wangwu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; zrangebyscore salary -inf +inf     <span class="comment"># 显示全部的用户 从小到大！</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; zrevrange salary 0 -1              <span class="comment"># 从大到小进行排序！</span></span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; zrangebyscore salary -inf +inf withscores      <span class="comment"># 显示全部的用户并且附带成绩</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;2500&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;3500&quot;</span></span><br><span class="line">5) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">6) <span class="string">&quot;4500&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; zrangebyscore salary -inf 3500 withscores      <span class="comment"># 显示工资小于等于3500员工的升序排序！</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;2500&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;3500&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 移除rem中的元素</span></span><br><span class="line">192.168.2.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">3) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; zrem salary lisi        <span class="comment"># 移除有序集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; zcard salary            <span class="comment"># 获取有序集合中的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">192.168.2.1:6379&gt; zadd myzset2 1 hello 2 world 3 good</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; zcount myzset2 1 3      <span class="comment"># 获取指定区间的成员数量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.2.1:6379&gt; zcount myzset2 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><blockquote><p><strong>概述：</strong>Map集合，key-map! 时候这个值是一个map集合！ 本质和String类型没有太大区别，还是一个简单的key-vlaue！</p><p><strong>场景：</strong>假设有多个用户及对应的用户信息，可以用来存储以用户ID为key，将用户信息序列化为比如json格式做为value进行保存</p></blockquote><p><strong>hash变更的数据 user, 尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的存储，String更加适合字符串存储！</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">192.168.2.1:6379&gt; hset myhash1 field1 <span class="string">&#x27;cool&#x27;</span>      <span class="comment"># set一个具体 key-vlaue</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; hmset myhash1 field1 <span class="string">&#x27;hello&#x27;</span> field2 <span class="string">&#x27;world&#x27;</span>      <span class="comment"># set多个 key-vlaue</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; hget myhash1 field1             <span class="comment"># 获取一个字段值</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; hmget myhash1 field1 field2     <span class="comment"># 获取多个字段值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; hgetall myhash1                 <span class="comment"># 获取全部的数据，</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; hdel myhash1 field1             <span class="comment"># 删除hash指定key字段！对应的value值也就消失了！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; hgetall myhash1</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#hlen</span></span><br><span class="line">192.168.2.1:6379&gt; hmset myhash2 field1 <span class="string">&#x27;hello&#x27;</span> field2 <span class="string">&#x27;world&#x27;</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; hgetall myhash2</span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; hlen myhash2            <span class="comment"># 获取hash表的字段数量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">192.168.2.1:6379&gt; hexists myhash2 field1  <span class="comment"># 判断hash中指定字段是否存在！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; hexists myhash2 field3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">192.168.2.1:6379&gt; hkeys myhash2           <span class="comment"># 只获得所有field</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;field2&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; hvals myhash2           <span class="comment"># 只获得所有value</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#incr  decr</span></span><br><span class="line">192.168.2.1:6379&gt; hset myhash2 field3 <span class="string">&#x27;5&#x27;</span>           <span class="comment">#指定增量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; hincrby myhash2 field3 1</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">192.168.2.1:6379&gt; hincrby myhash2 field3 -1</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">192.168.2.1:6379&gt; hsetnx myhash2 field4 hello       <span class="comment"># 如果不存在则可以设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">192.168.2.1:6379&gt; hsetnx myhash2 field4 world       <span class="comment"># 如果存在则不能设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h1 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h1><blockquote><p><strong>Redis事务的概念</strong></p></blockquote><p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>Redis事务实际上就是一次性、顺序性、排他性的执行一个队列中的一系列命令。所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！</p><p><strong>Redis事务没有隔离级别的概念;</strong>   批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。</p><p>Redis不保证原子性; Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><h2 id="Redis事务相关命令"><a href="#Redis事务相关命令" class="headerlink" title="Redis事务相关命令"></a>Redis事务相关命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">WATCH  key  key …</td><td align="left">监视一或多个key, 如果在事务执行之前，被监视的key被其他命令改动，则事务被打断（类似乐观锁 ）</td></tr><tr><td align="left">MULTI</td><td align="left">标记一个事务块的开始</td></tr><tr><td align="left">EXEC</td><td align="left">执行所有事务块内的命令</td></tr><tr><td align="left">DISCARD</td><td align="left">取消事务，放弃执行事务块内的所有命令</td></tr><tr><td align="left">UNWATCH</td><td align="left">取消 WATCH 命令对所有 key 的监视</td></tr></tbody></table><h2 id="Redis事务的3个阶段"><a href="#Redis事务的3个阶段" class="headerlink" title="Redis事务的3个阶段"></a>Redis事务的3个阶段</h2><ul><li>开启事务（multi）</li><li>命令入队（……）</li><li>执行事务（exec）</li></ul><h2 id="Redis事务使用案例"><a href="#Redis事务使用案例" class="headerlink" title="Redis事务使用案例"></a>Redis事务使用案例</h2><blockquote><p><strong>正常执行事务！</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; multi          <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">&#x27;v1&#x27;</span>    <span class="comment"># 命令入队</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k2 <span class="string">&#x27;v2&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k3 <span class="string">&#x27;v3&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">exec</span>           <span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br><span class="line">192.168.2.1:6379&gt; keys *         <span class="comment">#检查事务中的命令是否成功执行</span></span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>放弃事务！</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; multi          <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k4 <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k5 <span class="string">&#x27;v5&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; DISCARD        <span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; keys *         <span class="comment"># 事务队列中命令都不会被执行！</span></span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>编译型异常</strong>（源代码有问题！ 命令有错！） ，事务中所有的命令都不会被执行！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; multi         <span class="comment"># 开始事务</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k4 <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k5 <span class="string">&#x27;v5&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; getset k5     <span class="comment"># 执行错误的命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k6 <span class="string">&#x27;v6&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">exec</span>          <span class="comment"># 执行事务报错！</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">192.168.2.1:6379&gt; keys *        <span class="comment"># 所有的命令都不会被执行！</span></span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>运行时异常</strong>（1/0）， 如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k4 <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; incr k4              <span class="comment"># 会执行的时候失败！</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> k5 <span class="string">&#x27;v5&#x27;</span></span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; get k5</span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">exec</span>                 <span class="comment"># 虽然第一条事务命令报错了，但是依旧正常执行成功了！</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v5&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k5&quot;</span></span><br><span class="line">4) <span class="string">&quot;k4&quot;</span></span><br><span class="line">5) <span class="string">&quot;k3&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>监控</strong>！ Watch （面试常问！）</p></blockquote><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁！ 更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li></ul><blockquote><p><strong>Redis监控测试</strong></p></blockquote><p>正常执行成功！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; watch money         <span class="comment"># 监视 money 对象</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">exec</span>               <span class="comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><p>模拟测试多线程修改值 , 使用 watch 可以当做redis的乐观锁操作！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; watch money       <span class="comment"># 监视 money</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">192.168.2.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">exec</span>              <span class="comment"># 执行之前，另外一个线程，修改了我们的值，这个时候，就会导致事务执行失败！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>那怎么解决这个问题呢？</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric55q4fdj30qq0bkgmu.jpg" alt="image-20200630200813319"></p><h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><h2 id="持久化概述"><a href="#持久化概述" class="headerlink" title="持久化概述"></a>持久化概述</h2><blockquote><p><strong>作用：</strong></p><ul><li>Redis的所有数据都是保存在内存中, 如果没有配置持久化, redis重启后数据就全丢失了, 于是需要开启redis的持久化功能, 将数据保存到磁盘上, 当redis重启后, 可以从磁盘中恢复数据。</li><li>那么不定期的通过异步方式保存到磁盘上（半持久化模式）; 也可以把每一次数据变化都写入到一个append only file里面（全持久化模式）。 如若在服务器中开启了两种持久化的方式，默认执行AOF持久化方式。</li></ul><p><strong>实现方式：</strong></p><ul><li><p>RDB持久化：将Reids在内存中的数据库记录,定时dump到磁盘上，<em><strong>类似于快照功能</strong></em>。</p></li><li><p>AOF持久化：原理是将Reids的操作日志以追加的方式写入文件，<em><strong>近似实时性</strong></em>。</p></li><li><p>默认redis用的就是RDB方式的持久化，如果两种持久化都开启的话，则优先使用AOF</p></li></ul><p><strong>二者区别：</strong></p><ul><li><em><strong>RDB</strong></em>持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。</li><li><em><strong>AOF</strong></em>持久化是以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。</li></ul><p><strong>应用场景：</strong></p><ul><li><p>愿意牺牲一些性能（选择AOF）；</p></li><li><p>换取更高的缓存一致性，保证数据库最高可能的完整性（选择AOF）；</p></li><li><p>愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（RDB）；</p></li></ul></blockquote><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><blockquote><p><strong>什么是RDB ?</strong></p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘, 也就是行话讲的Snapshot快照, 它恢复时是将快照文件直接读到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！</p><p>有时候在生产环境我们会将这个文件进行备份！（dump.rdb）</p><p><strong>优点：</strong></p><ul><li>适合大规模的数据恢复！</li><li>对数据的完整性要不高！</li></ul><p><strong>缺点：</strong></p><ul><li>需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！</li><li>fork进程的时候，会占用一定的内容空间！！</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5b7phvj60yv0trdhf02.jpg" alt="image-20200630065642027"></p><p><strong>rdb保存的文件是dump.rdb</strong> 都是在配置文件中快照中进行配置的！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启RDB快照功能，在900秒内完成一个key值得变动触发快照功能，如若将所有save配置项都注释掉，那么则将关闭RDB快照功能</span></span><br><span class="line">218 save 900 1</span><br><span class="line">219 save 300 10</span><br><span class="line">220 save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当RDB快照后台进程失败，不影响用户得写操作</span></span><br><span class="line">235 stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否将RDB快照文件压缩，关闭后会增加性能</span></span><br><span class="line">241 rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭RDB快照文件的检查校验，增加性能</span></span><br><span class="line">250 rdbchecksum no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快照文件的名称</span></span><br><span class="line">253 dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快照文件的存储路径</span></span><br><span class="line">263 dir /usr/<span class="built_in">local</span>/redis/</span><br></pre></td></tr></table></figure><p><strong>测试一下：</strong></p><blockquote><p><em><strong>只要 60s 内修改了 2 次 key，就会触发 RDB 操作</strong></em></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5e05y5j30op07s74h.jpg" alt="image-20200630092722202"></p><blockquote><p><strong>触发机制</strong></p></blockquote><p>1、save的规则满足的情况下，会自动触发rdb规则</p><p>2、执行 flushall 命令，也会触发我们的rdb规则！</p><p>3、退出redis，也会产生 rdb 文件！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5g9h25j30qp03e0sn.jpg" alt="image-20200630094131322"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5hq4kgj30th05v0su.jpg" alt="image-20200630094206024"></p><blockquote><p><strong>恢复rdb文件</strong></p></blockquote><p>1、redis在启动的时候会自动检查dump.rdb 恢复其中的数据！</p><p>2、查看需要存在的位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/redis&quot;</span></span><br></pre></td></tr></table></figure><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><blockquote><p><strong>什么是AOF ？</strong></p><ul><li><p>就相当于我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p></li><li><p>以日志的形式来记录每个写操作, 将Redis执行过的所有指令记录下来（读操作不记录）, 只许追加文件但不可以改写文件, redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></li></ul><p><strong>AOF 文件的生成过程具体包括命令追加，文件写入，文件同步三个步骤。</strong> </p><ul><li>AOF保存的是 appendonly.aof 文件</li><li>Redis 打开 AOF 持久化功能后，Redis 在执行完一个写命令后，都会将执行的写命令追回到 Redis 内部的缓冲区的末尾。这个过程是命令的追加过程。 接下来，缓冲区的写命令会被写入到 AOF 文件，这一过程是文件写入过程。对于操作系统来说，调用write函数并不会立刻将数据写入到硬盘，为了将数据真正写入硬盘，还需要调用fsync函数，调用fsync函数即是文件同步的过程。只有经过文件同步过程，AOF 文件才在硬盘中真正保存了 Redis 的写命令。appendfsync 配置选项正是用来配置将写命令同步到文件的频率的，各个选项的值的含义如表 1 所示。而值为no的话表示为写入AOF文件，但是不进行磁盘同步，根据linux系统默认进行磁盘同步，默认30s，效率是最高的。</li></ul><p><strong>优点：</strong></p><ul><li>每一次修改都同步，文件的完整会更加好！</li><li>每秒同步一次，可能会丢失一秒的数据</li></ul><p><strong>缺点：</strong></p><ul><li>相对于数据文件来说，aof远远大于 rdb，修复的速度也比 rdb慢！</li><li>AOF 运行效率也要比 rdb 慢，所以我们redis默认的配置就是rdb持久化！</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5liurrj30xb0rbq5h.jpg" alt="image-20200630065829868"></p><p><strong>aof保存的文件是 appendonly.aof</strong> 都是在配置文件中快照中进行配置的！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭RDB持久化</span></span><br><span class="line">218 <span class="comment">#save 900 1</span></span><br><span class="line">219 <span class="comment">#save 300 10</span></span><br><span class="line">220 <span class="comment">#save 60 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启AOF持久化方式</span></span><br><span class="line">672 appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定AOF持久化的文件名</span></span><br><span class="line">676 appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步频率，具体参数见下方表一</span></span><br><span class="line">702 appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如若设置为yes，则redis执行的命令会存放到缓冲区，待系统自动同步到硬盘</span></span><br><span class="line">724 no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment">#若当前写入的AOF文件达到了上次rewrite文件大小的100%，则触发rewrite操作</span></span><br><span class="line">743 auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置AOF持久化重写文件的最小值，当达到60M并且符合100%的条件时，则触发rewrite操作</span></span><br><span class="line">744 auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p><strong>同步频率级别（推荐no | everysec）</strong></p><table><thead><tr><th>频率级别</th><th>频率作用</th></tr></thead><tbody><tr><td>always</td><td>每个Redis 命令都要同步写入硬盘；这个级别严重降低 Redis的性能</td></tr><tr><td>everysec</td><td>每秒执行一次同步，显示的将 写 多个命令同步到硬盘</td></tr><tr><td>no</td><td>让操作系统来决定如何进行同步</td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5p8qxyj30s306bmx7.jpg" alt="image-20200630100833103"></p><p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为yes就开启了 aof ;  重启 redis 就可以生效了！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5ufcs3j30p006lgly.jpg" alt="image-20200630101058952"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5r2o4oj30rb02emx6.jpg" alt="image-20200630103558878"></p><blockquote><p><strong>触发机制</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric5vteb6j30qb0ea74l.jpg" alt="image-20200630103844193"></p><blockquote><p><strong>重写规则说明</strong></p></blockquote><p>aof 默认就是文件的无限追加，文件会越来越大！</p><p>如果 aof 文件大于了 64mb，Redis 会重新 fork一个新的进程来将我们的文件进行重写！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric60xe87j30ug0jxwfy.jpg" alt="image-20200630105249045"></p><h2 id="RDB转换AOF持久化"><a href="#RDB转换AOF持久化" class="headerlink" title="RDB转换AOF持久化"></a>RDB转换AOF持久化</h2><blockquote><p><strong>RDB持久化的数据，当改为AOF持久化的时候，数据是无法同步的，倘若想要RDB里边的数据，操作如下：</strong></p><p><em><strong>建议：不要轻易改变持久化的方式</strong></em></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 ~]<span class="comment"># vim /usr/local/redis/conf/redis.conf</span></span><br><span class="line">218 save 900 1            <span class="comment">#暂时开启rdb</span></span><br><span class="line">219 save 300 10</span><br><span class="line">220 save 60 10000</span><br><span class="line">672 appendonly no         <span class="comment">#暂时关掉aof</span></span><br><span class="line">:wq!</span><br><span class="line">[root@redis01 ~]<span class="comment"># /etc/init.d/redis restart</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># redis-cli -h 192.168.2.1 -p 6379 -a 123456</span></span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; save</span><br><span class="line">192.168.2.1:6379&gt; config <span class="built_in">set</span> appendonly yes</span><br><span class="line">192.168.2.1:6379&gt; save</span><br><span class="line">192.168.2.1:6379&gt; shutdown save</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 最后修改配置文件，把RDB改成AOF</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># vim /usr/local/redis/conf/redis.conf</span></span><br><span class="line">218 <span class="comment">#save 900 1            #关闭rdb</span></span><br><span class="line">219 <span class="comment">#save 300 10</span></span><br><span class="line">220 <span class="comment">#save 60 10000</span></span><br><span class="line">672 appendonly yes         <span class="comment">#开启aof</span></span><br><span class="line">:wq!</span><br><span class="line">[root@redis01 ~]<span class="comment"># /etc/init.d/redis restart</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># redis-cli -h 192.168.2.1 -p 6379 -a 123123</span></span><br><span class="line">192.168.2.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">192.168.2.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@redis01 ~]<span class="comment"># cat /usr/local/redis/appendonly.aof </span></span><br><span class="line">*2</span><br><span class="line"><span class="variable">$6</span></span><br><span class="line">SELECT</span><br><span class="line"><span class="variable">$1</span></span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line">SET</span><br><span class="line"><span class="variable">$4</span></span><br><span class="line">name</span><br><span class="line"><span class="variable">$5</span></span><br><span class="line">lemon</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line">SET</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line">age</span><br><span class="line"><span class="variable">$2</span></span><br><span class="line">18</span><br></pre></td></tr></table></figure><h2 id="持久化总结"><a href="#持久化总结" class="headerlink" title="持久化总结"></a>持久化总结</h2><p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p><p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</p><p>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</p><p>4、同时开启两种持久化方式</p><ul><li><p>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p></li><li><p>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</p></li></ul><p>5、性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ul><h1 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a><strong>Redis缓存穿透和雪崩</strong></h1><blockquote><p><strong>服务的高可用问题！</strong></p></blockquote><p>在这里我们不会详细的区分析解决方案的底层！</p><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric65n9lzj30yi0gc40s.jpg" alt="image-20200630225949201"></p><h2 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h2><blockquote><p><strong>概念</strong></p></blockquote><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><blockquote><p><strong>解决方案</strong></p></blockquote><p><em><strong>1、布隆过滤器</strong></em></p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则<br>丢弃，从而避免了对底层存储系统的查询压力；</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric69tttcj30al0a7wft.jpg" alt="image-20200630230148135"></p><p><em><strong>2、缓存空对象</strong></em></p><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric6ey651j308i0a10tq.jpg" alt="image-20200630230349775"></p><p>但是这种方法会存在两个问题：</p><p>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</p><p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h2 id="缓存击穿（量太大，缓存过期！）"><a href="#缓存击穿（量太大，缓存过期！）" class="headerlink" title="缓存击穿（量太大，缓存过期！）"></a>缓存击穿（量太大，缓存过期！）</h2><blockquote><p><strong>概述</strong></p></blockquote><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间, 有大量的请求并发访问, 这类数据一般是热点数据, 由于缓存过期, 会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><blockquote><p><strong>解决方案</strong></p></blockquote><p><em><strong>1、设置热点数据永不过期</strong></em></p><p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p><p><em><strong>2、加互斥锁</strong></em></p><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric6k6ey3j60xd0dyt9s02.jpg" alt="image-20200630230709208"></p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote><p><strong>概念</strong></p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！</p><p>产生雪崩的原因之一, 比如在写本文的时候, 马上就要到双十二零点, 很快就会迎来一波抢购, 这波商品时间比较集中的放入了缓存,假设缓存一个小时。那么到了凌晨一点钟的时候, 这批商品的缓存就都过期了。而对这批商品的访问查询, 都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gric6neu3xj30xj0jygs9.jpg" alt="image-20200630230859339"></p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><blockquote><p><strong>解决方案</strong></p></blockquote><p><em><strong>1、redis高可用</strong></em></p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p><p><em><strong>2、限流降级</strong></em></p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><em><strong>3、数据预热</strong></em></p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix</title>
      <link href="/2021/06/15/Zabbix/"/>
      <url>/2021/06/15/Zabbix/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、监控生态"><a href="#一、监控生态" class="headerlink" title="一、监控生态"></a>一、监控生态</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>监控是整个运维乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供详实的数据用于追查定位问题。目前业界有很多不错的开源产品可供选择。选择一款开源的监控系统，是一个省时省力、效率最高的方案。当然，对监控不是很明白的朋友们，看了以下文章可能会对监控整个体系有比较深刻的认识。</p><h2 id="2-监控目标"><a href="#2-监控目标" class="headerlink" title="2. 监控目标"></a>2. 监控目标</h2><p>每个人由于所在的行业、公司、业务、岗位不同，对监控的理解也不尽相同，但是我们需要注意，监控是需要站在公司的业务角度去考虑，而不是针对某个监控技术的使用。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib94u040j30fa056q35.jpg" alt="1"></p><p><strong>对系统不间断的实时监控：</strong>实际上是对系统不间断的实时监控(这就是监控)；</p><p><strong>实时反馈系统当前状态：</strong>我们监控某个硬件、或者某个系统，都是需要能实时看到当前系统的状态，是正常、异常、或者故障</p><p><strong>保证服务可靠性安全性：</strong>我们监控的目的就是要保证系统、服务、业务正常运行</p><p><strong>保证业务持续稳定运行：</strong>如果我们的监控做得很完善，即使出现故障，能第一时间接收到故障报警，在第一时间处理解决，从而保证业务持续性的稳定运行。</p><h2 id="3-监控方法"><a href="#3-监控方法" class="headerlink" title="3. 监控方法"></a>3. 监控方法</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib9qeotwj30al057dfu.jpg"></p><p><strong>发现问题：</strong>当系统发生故障报警，我们会收到故障报警的信息。</p><p><strong>定位问题：</strong>故障邮件一般都会写某某主机故障、具体故障的内容，我们需要对报警内容进行分析。比如一台服务器连不上，我们就需要考虑是网络问题、还是负载太高导致长时间无法连接，又或者某开发触发了防火墙禁止的相关策略等，我们就需要去分析故障具体原因。</p><p><strong>解决问题：</strong>当然我们了解到故障的原因后，就需要通过故障解决的优先级去解决该故障。</p><p><strong>总结问题：</strong>当我们解决完重大故障后，需要对故障原因以及防范进行总结归纳，避免以后重复出现。</p><h2 id="4-监控工具"><a href="#4-监控工具" class="headerlink" title="4. 监控工具"></a>4. 监控工具</h2><blockquote><p>下面我们需要选择一款适合公司业务的监控工具进行监控,。这里我对监控工具进行了简单的分类。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib9kcr94j30fe0dudg8.jpg" alt="2"></p><h3 id="4-1-老牌监控如下"><a href="#4-1-老牌监控如下" class="headerlink" title="4.1 老牌监控如下"></a>4.1 老牌监控如下</h3><p><strong>MRTG</strong>（Multi Route Trffic Grapher）是一套可用来绘制网络流量图的软件，由瑞士奥尔滕的Tobias Oetiker与Dave Rand所开发，以GPL授权。MRTG最好的版本是1995年推出的，用Perl语言写成，可跨平台使用，数据采集用SNMP协议，MRTG将手机到的数据通过Web页面以GIF或者PNG格式绘制出图像。</p><p><strong>Ganglia</strong>是一个跨平台的、可扩展的、高性能的分布式监控系统，如集群和网格。它基于分层设计，使用广泛的技术，用RRDtool存储数据。具有可视化界面，适合对集群系统的自动化监控。其精心设计的数据结构和算法使得监控端到被监控端的连接开销非常低。目前已有成千上万的集群正在使用这个监控系统，可以轻松地处理2000个节点的集群环境。</p><p><strong>Cacti</strong>（英文含义为仙人掌）是一套基于PHP、MySQL、SNMP和RRDtool开发的网络流量监测图形分析工具，它通过snmpget来获取数据使用RRDtool绘图，但使用者无须了解RRDtool复杂的参数。提供了非常强大的数据和用户管理功能，可以指定每一个用户能查看树状结构、主机设备以及任何一张图，还可以与LDAP结合进行用户认证，同时也能自定义模板。在历史数据展示监控方面，其功能相当不错。Cacti通过添加模板，使不同设备的监控添加具有可复用性，并且具备可自定义绘图的功能，具有强大的运算能力（数据的叠加功能）</p><p><strong>Nagios</strong>是一个企业级监控系统，可监控服务的运行状态和网络信息等，并能监视所指定的本地或远程主机状态以及服务，同时提供异常告警通知功能等。Nagios可运行在Linux和UNIX平台上。同时提供Web界面，以方便系统管理人员查看网络状态、各种系统问题、以及系统相关日志等。Nagios的功能侧重于监控服务的可用性，能根据监控指标状态触发告警。目前Nagios也占领了一定的市场份额，不过Nagios并没有与时俱进，已经不能满足于多变的监控需求，架构的扩展性和使用的便捷性有待增强，其高级功能集成在商业版Nagios XI中。</p><p><strong>Smokeping</strong>主要用于监视网络性能，包括常规的ping、www服务器性能、DNS查询性能、SSH性能等。底层也是用RRDtool做支持，特点是绘制图非常漂亮，网络丢包和延迟用颜色和阴影来标示，支持将多张图叠放在一起，其作者还开发了MRTG和RRDtll等工具。 Smokeping的站点为：<a href="http://tobi.oetiker.cn/hp%E3%80%82">http://tobi.oetiker.cn/hp。</a></p><p><strong>开源监控系统</strong>OpenTSDB用HBase存储所有时序（无须采样）的数据，来构建一个分布式、可伸缩的时间序列数据库。它支持秒级数据采集，支持永久存储，可以做容量规划，并很容易地接入到现有的告警系统里。OpenTSDB可以从大规模的集群（包括集群中的网络设备、操作系统、应用程序）中获取相应的采集指标，并进行存储、索引和服务，从而使这些数据更容易让人理解，如Web化、图形化等。</p><h3 id="4-2-王牌监控"><a href="#4-2-王牌监控" class="headerlink" title="4.2 王牌监控"></a>4.2 王牌监控</h3><p><strong>Zabbix</strong>是一个分布式监控系统，支持多种采集方式和采集客户端，有专用的Agent代理，也支持SNMP、IPMI、JMX、Telnet、SSH等多种协议，它将采集到的数据存放到数据库，然后对其进行分析整理，达到条件触发告警。其灵活的扩展性和丰富的功能是其他监控系统所不能比的。相对来说，它的总体功能做得非常优秀。从以上各种监控系统的对比来看，Zabbix都是具有优势的，其丰富的功能、可扩展的能力、二次开发的能力和简单易用的特点，读者只要稍加学习，即可构建自己的监控系统。</p><p><strong>小米的监控系统：Open-Falcon</strong>。Open-Falcon的目标是做最开放、最好用的互联网企业级监控产品。</p><h3 id="4-3-三方监控"><a href="#4-3-三方监控" class="headerlink" title="4.3 三方监控"></a>4.3 三方监控</h3><p>现在市场上有很多不错的第三方监控，比如：<strong>监控宝、监控易、听云</strong>、还有很多云厂商自带监控，但在这里我不打算着重介绍，如果想了解三方监控可自行上官网咨询。（避免说广告植入）。</p><h2 id="5-监控流程"><a href="#5-监控流程" class="headerlink" title="5. 监控流程"></a>5. 监控流程</h2><blockquote><p>上面介绍了这么多，到底选择什么监控工具最合适呢？我这里推荐几款开源监控工具：Zabbix、Open-Falcon、LEPUS天兔(专用于监控数据库)。但本文还是基于Zabbix来构建整个监控体系生态圈。 下面我们就来聊聊Zabbix的整个流程：</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib9z8m8sj30ab08jt8s.jpg"></p><p><strong>数据采集：</strong>Zabbix通过SNMP、Agent、ICMP、SSH、IPMI等对系统进行数据采集；</p><p><strong>数据存储：</strong>Zabbix存储在MySQL上，也可以存储在其他数据库服务；</p><p><strong>数据分析：</strong>当我们事后需要复盘分析故障时，Zabbix能给我们提供图形以及时间等相关信息，方面我们确定故障所在；</p><p><strong>数据展示：</strong>Web界面展示、(移动APP、java_php开发一个Web界面也可以)；</p><p><strong>监控报警：</strong>电话报警、邮件报警、微信报警、短信报警、报警升级机制等（无论什么报警都可以）；</p><p><strong>报警处理：</strong>当接收到报警，我们需要根据故障的级别进行处理，比如:重要紧急、重要不紧急，等。根据故障的级别，配合相关的人员进行快速处理。</p><h2 id="6-监控指标"><a href="#6-监控指标" class="headerlink" title="6. 监控指标"></a>6. 监控指标</h2><p>上面了解了监控方法、目标、流程、也了解了监控有哪些工具，可能有人会疑惑，我们具体要监控些什么东西，在这里我进行了分类整理，包含硬件监控、系统监控、应用监控、网络监控、流量分析、日志监控、安全监控、API监控、性能监控、业务监控。</p><h3 id="6-1-硬件监控"><a href="#6-1-硬件监控" class="headerlink" title="6.1 硬件监控"></a>6.1 硬件监控</h3><p>早期我们通过机房巡检的方式，查看硬件设备灯光闪烁情况判断是否故障，这样非常浪费人力，并且是重复性无技术含量的工作，大家懂得。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griba76a14j30b308jaa6.jpg" alt="55"></p><p>当然我们现在可以通过IPMI对硬件详细情况进行监控，并对CPU、内存、磁盘、温度、风扇、电压等设置报警设置报警阈值(自行对监控报警内容编写合理的报警范围) 。</p><p>IPMI监控硬件服务参考资料：Zabbix IPMI Interface</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribabqsmgj30fe05pmx5.jpg" alt="22"></p><h3 id="6-2-系统监控"><a href="#6-2-系统监控" class="headerlink" title="6.2 系统监控"></a>6.2 系统监控</h3><p>中小型企业基本全是Linux服务器，那么我们肯定是要监控起系统资源的使用情况，系统监控是监控体系的基础。</p><p>监控主要对象：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribai0mxvj30fe0c3gm5.jpg" alt="ss"></p><p>CPU有几个重要的概念：上下文切换、运行队列和使用率。这也是我们CPU监控的几个重点指标。</p><p>通常情况，每个处理器的运行队列不要高于3，CPU 利用率中用“户态/内核态”比例维持在70/30，空闲状态维持在50%，上下文切换要根据系统繁忙程度来综合考量。</p><p>针对CPU常用的工具有：htop、top、vmstat、mpstat、dstat、glances。Zabbix提供系统监控模板：Zabbix Agent Interface。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribaptw20j30fd08wjrl.jpg" alt="ds"></p><p><strong>CPU整体状态</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribat7n6xj30fe092wet.jpg" alt="ddds"></p><p><strong>上下文切换</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribaz8rjcj30fe09at92.jpg" alt="ass"></p><p><strong>负载状态</strong></p><p>内存：通常我们需要监控内存的使用率、SWAP使用率、同时可以通过Zabbix描绘内存使用率的曲线图形发现某服务内存溢出等。</p><p>针对内存常用的工具有：free、top、vmstat、glances。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribb5u3uoj30fe08wwes.jpg" alt="q"></p><p><strong>内存使用率</strong></p><p>IO分为磁盘IO和网络IO。除了在做性能调优我们要监控更详细的数据外，日常监控只关注磁盘使用率、磁盘吞吐量、磁盘写入繁忙程度，网络也是监控网卡流量即可。</p><p>常用工具有：iostat、iotop、df、iftop、sar、glances。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribbaggg2j30fe090weo.jpg" alt="wq"></p><p><strong>磁盘使用率</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribbg1305j30fe0an0sz.jpg" alt="ee"></p><p><strong>磁盘读/写吞吐</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribbqfufxj30fe09dgm0.jpg" alt="ww"></p><p><strong>网卡进出口流量</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribbtnrdhj30fe0apq3b.jpg" alt="3w"></p><p><strong>TCP的11种状态信息</strong></p><p>其它系统监控还有运行的进程端口、进程数、登陆用户、Open File等（详细查看Zabbix自带OS Linux模板）。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribc25jb0j30fe01uglh.jpg" alt="ac"></p><h3 id="6-3-应用监控"><a href="#6-3-应用监控" class="headerlink" title="6.3 应用监控"></a>6.3 应用监控</h3><p>把硬件监控和系统监控研究明白后，我们进一步操作是需要登陆到服务器上查看服务器运行了哪些服务，都需要监控起来。</p><p>应用服务监控也是监控体系中比较重要的内容，例如：LVS、HAProxy、Docker、Nginx、PHP、Memcached、Redis、MySQL等，相关的服务都需要使用zabbix监控起来。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribc5rr8zj30fe05b3yg.jpg" alt="ax"></p><p><strong>nginx_status</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribc9zrrnj30fe060weh.jpg" alt="h"></p><p><strong>PHP-FPM_status</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribckditlj60fe06x74e02.jpg" alt="m"></p><p><strong>Redis_status</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribcnp4ihj30fd06b0ss.jpg" alt="v"></p><p><strong>JVM监控</strong></p><ul><li>Zabbix提供应用服务监控：Zabbix Agent UserParameter</li><li>Zabbix提供的Java监控：Zabbix     JMX Interface</li><li>Percona提供MySQL数据库监控：percona-monitoring-plulgins</li></ul><h3 id="6-4-网络监控"><a href="#6-4-网络监控" class="headerlink" title="6.4 网络监控"></a>6.4 网络监控</h3><p>作为一个针对全国用户的电商网站，时刻掌握各地到机房的网络状态也是必须的。</p><p>网络监控是我们构建监控平台是必须要考虑的，尤其是针对有多个机房的场景，各个机房之间的网络状态，机房和全国各地的网络状态都是我们需要重点关注的对象，那如何掌握这些状态信息呢？我们需要借助于网络监控工具Smokeping。 </p><p>Smokeping 是rrdtool的作者Tobi Oetiker的作品，是用Perl写的，主要是监视网络性能，www服务器性能，DNS查询性能等，使用rrdtool绘图，而且支持分布式，直接从多个agent进行数据的汇总。</p><p>同时，由于自己监控点比较少，还可以借助很多商业的监控工具，比如监控宝、基调、博瑞等。同时这些服务提供商还可以帮助你监控CDN的状态。</p><p><strong>监控宝</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribdng88jj30fd08g0t8.jpg" alt="u"></p><h3 id="6-5-流量分析"><a href="#6-5-流量分析" class="headerlink" title="6.5 流量分析"></a>6.5 流量分析</h3><p>网站流量分析对于运维人员来说，更是一门必须掌握的知识了。比如对于一家电商公司来说：通过对订单来源的统计和分析，可以了解我们在某个网站上的广告投入有没有收到预期的效果。 可以区分不同地区的访问人数、甚至商品交易额等。百度统计、Google分析、站长工具等，只需要在页面嵌入一个js即可。</p><p>但是，数据始终是在对方手中，个性化定制不方便，于是Google出一个叫Piwik的开源分析工具。</p><p><strong>Piwik</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribdtd5i2j30fe08pdfx.jpg" alt="fg"></p><p><strong>百度统计</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribdy208sj30fe05d0sq.jpg" alt="xh"></p><h3 id="6-6-日志监控"><a href="#6-6-日志监控" class="headerlink" title="6.6 日志监控"></a>6.6 日志监控</h3><p>通常情况下，随着系统的运行，操作系统会产生系统日志，应用程序会产生应用程序的访问日志、错误日志，运行日志，网络日志，我们可以使用ELK来进行日志监控。</p><p>对于日志监控来说，最见的需求就是收集、存储、查询、展示，开源社区正好有相对应的开源项目：Logstash（收集）+ElasticSearch（存储+搜索）+Kibana（展示）。</p><p>我们将这三个组合起来的技术称之为ELK Stack，所以说ELK Stack指的是Elasticsearch、Logstash、Kibana技术栈的结合。</p><p>如果收集了日志信息，部署更新有异常出现，可以立即在Kibana上看到。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribe3oljwj30fe077q38.jpg" alt="nu"></p><p><strong>ELK日志展示（当然也可以通过Zabbix过滤错误日志来进行告警。）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribe9ysvpj60fe0370sv02.jpg" alt="op"></p><h3 id="6-7-安全监控"><a href="#6-7-安全监控" class="headerlink" title="6.7 安全监控"></a>6.7 安全监控</h3><p>虽然Linux开源的安全产品不少，比如四层iptables，七层WEB防护Nginx+Lua实现WAF，最后将相关的日志都收至ELkstack，通过图形化进行不同的攻击类型展示。但是始终是一件比较耗费时间，并且个人效果并不是很好。这个时候我们可以选择接入第三方服务厂商。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribegs7ulj30fe05zq2y.jpg" alt="qxgh"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribelxv2vj30fe05yjrb.jpg" alt="0o"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribeqmt1fj30fe07omxh.jpg" alt="zqa"></p><p><strong>某某三方安全</strong></p><p>三方厂商提供全面的漏洞库，涵盖服务、后门、数据库、配置检测、CGI、SMTP等多种类型。</p><p>全面检测主机、Web应用漏洞自主挖掘和行业共享相结合第一时间更新0-day漏洞，杜绝最新安全隐患。</p><h3 id="6-8-API监控"><a href="#6-8-API监控" class="headerlink" title="6.8 API监控"></a>6.8 API监控</h3><p>由于API变得越来越重要，很显然我们也需要这样的数据来分辨我们提供的 API是否能够正常运作。</p><p>监控API接口GET、POST、PUT、DELETE、HEAD、OPTIONS的请求。可用性、正确性、响应时间为三大重性能指标。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribewp1bqj30fe02m3yj.jpg" alt="sder"></p><p><strong>API监控</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribf2abgij30fe06baa4.jpg" alt="pl"></p><p><strong>三方API监控</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribf7w94aj30fe0a63yv.jpg" alt="jhk"></p><p><strong>响应时间</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribfcnt0fj30fe08gaa9.jpg" alt="pkgh"></p><h3 id="6-9-性能监控"><a href="#6-9-性能监控" class="headerlink" title="6.9 性能监控"></a>6.9 性能监控</h3><p>全面监控网页性能，DNS响应时间、HTTP建立连接时间、页面性能指数、响应时间、可用率、元素大小等。Zabbix提供URL监控：Zabbix Web 监控。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribfhs34dj30fe08cglq.jpg" alt="hfyu"></p><p><strong>Zabbix站点监控</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribfnql4gj30fe099q33.jpg" alt="gvb"></p><p><strong>终端响应时间</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribfsiutmj30fe06baa3.jpg" alt="ugfr"></p><h3 id="6-10-业务监控"><a href="#6-10-业务监控" class="headerlink" title="6.10 业务监控"></a>6.10 业务监控</h3><p>没有业务指标监控的监控平台，不是一个完善的监控平台，通常在我们的监控系统中，必须将我们重要的业务指标进行监控，并设置阈值进行告警通知。比如电商行业：</p><p>每分钟产生多少订单、每分钟注册多少用户、每天有多少活跃用户、每天有多少推广活动、推广活动引入多少用户、推广活动引入多少流量、推广活动引入多少利润等，重要指标都可以加入Zabbix上，然后通过Screen展示。</p><p>注：由于业务监控图表，涉及到隐私的数据太多，就不截图了。</p><h2 id="7-监控报警"><a href="#7-监控报警" class="headerlink" title="7. 监控报警"></a>7. 监控报警</h2><p>故障报警通知的方式有很多种，当然最常用的还是短信和邮件。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribfy3ui6j30a607aglm.jpg" alt="vdr"></p><p><strong>短信报警</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribg3nb9gj30a40f0mxm.jpg" alt="shoyji"></p><p><strong>邮件报警</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribgac7jxj30fe07sq34.jpg" alt="youjigh"></p><h2 id="8-报警处理"><a href="#8-报警处理" class="headerlink" title="8. 报警处理"></a>8. 报警处理</h2><p>报警后故障如何处理？首先我们可以通过告警升级机制先自动处理，比如Nginx服务down了，可以设置告警升级自动启动Nginx。</p><p>但是如果一般业务出现了严重故障，我们通常根据故障的级别、业务，来指派不同的运维人员进行处理。</p><p>当然不同业务形态、不同架构、不同服务可能采用的方式都不同，这个没有一个固定的模式套用。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribgf0lvnj30bj06iwej.jpg" alt="gfvyt"></p><h2 id="10-面试监控"><a href="#10-面试监控" class="headerlink" title="10. 面试监控"></a>10. 面试监控</h2><blockquote><p>在运维面试中，常常会被问题监控相关的问题，这个问题到底该如何来回答，我针对本文给大家提供了一个简单的回答思路</p></blockquote><p>1、硬件监控</p><p>通过SNMP来进行路由器交换机的监控(这些可以跟一些厂商沟通来了解如何做)、服务器的温度以及其它，可以通过IPMI来实现。当然如果没有硬件全都是云，直接跳过这一步骤。</p><p>2、系统监控</p><p>如CPU的负载，上下文切换、内存使用率、磁盘读写、磁盘使用率、磁盘inode使用率。当然这些都是需要配置触发器，因为默认太低会频繁报警。</p><p>3、服务监控</p><p>比如公司用的LNMP架构，Nginx自带Status模块、PHP也有相关的Status、MySQL的话可以通过Percona官方工具来进行监控。Redis这些通过自身的info获取信息进行过滤等。方法都类似。要么服务自带。要么通过脚本来实现想监控的内容，以及报警和图形功能。</p><p>4、网络监控</p><p>如果是云主机又不是跨机房，那么可以选择不监控网络。当然你说我们是跨机房以及如何如何，推荐使用smokeping来做网络相关的监控，或者直接交给你们的网络工程师来做，因为术业有专攻。</p><p>5、安全监控</p><p>如果是云主机可以考虑使用自带的安全防护。当然也可以使用iptables。如果是硬件，那么推荐使用硬件防火墙。使用云可以购买防DDOS，避免出现故障导致down机一天。如果是系统，那么权限、密码、备份、恢复等基础方案要做好。Web同时也可以使用Nginx+Lua来实现一个Web层面的防火墙。当然也可以使用集成好的OpenResty。</p><p>6、Web监控</p><p>Web监控的话题其实还是很多。比如可以使用自带的Web监控来监控页面相关的延迟、js响应时间、下载时间、等等。这里我推荐使用专业的商业软件监控宝或听云来实现。毕竟人家全国各地都有机房（如果本身是多机房那就另说了）。</p><p>7、日志监控</p><p>如果是Web的话可以使用监控Nginx的50x、40x的错误日志，PHP的ERROR日志。其实这些需求无非是，收集、存储、查询、展示，我们其实可以使用开源的ELKStack来实现。Logstash（收集）、Elasticsearch（存储+搜索）、Kibana（展示）。</p><p>8、业务监控</p><p>上面做了那么多，其实最终还是保证业务的运行。这样我们做的监控才有意义。所以业务层面这块的监控需要和开发以及总监开会讨论，监控比较重要的业务指标，（需要开会确认）然后通过简单的脚本就可以实现，最后设置触发器即可 。</p><p>9、流量分析</p><p>平时我们分析日志都是拿awk sed xxx一堆工具来实现。这样对我们统计IP、PV、UV不是很方便。那么可以使用百度统计、Google统计、商业，让开发嵌入代码即可。为了避免隐私也可以使用Piwik来做相关的流量分析。</p><p>10、可视化</p><p>通过Screen以及引入一些第三方的库来美化界面，同时我们也需要知道，订单量突然增加、突然减少。或者说突然来了一大波流量，这流量从哪儿来，是不是推广了，还是被攻击了。可以结合监控平来梳理各个系统之间的业务关系。</p><p>11、自动化监控</p><p>如上我们做了那么多的工作，当然不能是一台一台的来加key实现。可以通过Zabbix的主动模式以及被动模式来实现。当然最好还是通过API来实现。</p><p>总结</p><p>真正想做到更完整的监控体系，目前的开源软件确实无法很好地满足，有条件的公司都开始自己开发自己的监控系统，比如小米开源的Open-Falcon。</p><p>也有比较好的开源的监控框架如Sensu等，再加上InfluxDB、Grafana可以用来定制符合自己企业的监控平台。</p><h1 id="二、Zabbix配置文件详解"><a href="#二、Zabbix配置文件详解" class="headerlink" title="二、Zabbix配置文件详解"></a>二、Zabbix配置文件详解</h1><blockquote><p>在zabbix服务(server)端、客户(agent)端、代理(proxy)端分别对应着一个配置文件。</p><ul><li>zabbix_server.conf（服务端）</li><li>zabbix_agentd.conf（客户端）</li><li>zabbix_proxy.conf （代理端）</li></ul></blockquote><h2 id="1-zabbix-server-conf详解"><a href="#1-zabbix-server-conf详解" class="headerlink" title="1. zabbix_server.conf详解"></a>1. zabbix_server.conf详解</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">NodeID=0                      <span class="comment">#分布式节点id号，0代表是独立服务器，默认是被注释掉的，不强制配置</span></span><br><span class="line">ListenPort=10051              <span class="comment">#zabbix server的端口，默认是10051，可以自行修改，范围是1024-32767 ，一般默认即可</span></span><br><span class="line">SourceIP=                     <span class="comment">#连接的源ip地址（出口），默认为空，默认即可</span></span><br><span class="line">LogFile=/tmp/zabbix_server.log  <span class="comment">#日志文件的存放位置</span></span><br><span class="line">LogFileSize=1                 <span class="comment">#说明：日志达到多少M里就轮转；若此参数值为0时，则不轮转，日志将不断变大，建议设置成轮转。</span></span><br><span class="line">DebugLevel=3                  <span class="comment">#指定调试级别，默认即可</span></span><br><span class="line">PidFile=/tmp/zabbix_server.pid  <span class="comment">#pid文件的存放位置</span></span><br><span class="line">DBHost=localhost              <span class="comment">#数据库主机名，当设置为localhost时，连接mysql通过sock</span></span><br><span class="line">DBName=zabbix                 <span class="comment">#指定存放zabbix数据数据库的名字</span></span><br><span class="line">DBUser=zabbix                 <span class="comment">#指定连接数据库的用户名</span></span><br><span class="line">DBPassword=123456             <span class="comment">#用户连接数据库需要的密码</span></span><br><span class="line">DBSocket=/var/lib/mysql/mysql.sock     <span class="comment">#前文主机设置为localhost，用户连接数据库所用的sock位置</span></span><br><span class="line">DBPort=3306                   <span class="comment">#数据库的端口号，当用sock连接时，无关紧要，当通过网络连接时需设置</span></span><br><span class="line">StartPollers=5                <span class="comment">#说明;初始化时，启动子进程数量，数量越多，则服务端吞吐能力越强，对系统资源消耗越大。</span></span><br><span class="line">StartIPMIPollers=0            <span class="comment">#说明:主要用于IPmi技术用于获取硬件状态场景。若无相关监控项，建议设置为0</span></span><br><span class="line">StartTrappers=5               <span class="comment">#用于设置诸如SNMP STRAPPER场景提交来的数据的接收进程数，若客户机SNMP TRAPPER技术较多，建议加大此参数值</span></span><br><span class="line">StartPingers=1                <span class="comment">#用于设置启用icmp协议PING主机方式启动线程数量，若单台代理所管理机器超过500台，建议加大此数值</span></span><br><span class="line">StartDiscoverers=1            <span class="comment">#用于设置自动发现主机的线程数量，若单台代理所管理机器超过500台，可以考虑加大此数值（仅适用于直接AGENT场景）</span></span><br><span class="line">StartHTTPPollers=1            <span class="comment">#说明：用于设置WEB拨测监控线程数，可视具体情况增加或减少此数值。</span></span><br><span class="line">JavaGateway=127.0.0.1         <span class="comment">#JavaGateway的ip地址或主机名</span></span><br><span class="line">JavaGatewayPort=10052         <span class="comment">#JavaGateway的端口号</span></span><br><span class="line">StartJavaPollers=5            <span class="comment">#开启连接javagatey的进程数</span></span><br><span class="line">SNMPTrapperFile=/tmp/zabbix_traps.tmp    <span class="comment"># SNMP trap发送到server的数据临时存放文件</span></span><br><span class="line">StartSNMPTrapper=0            <span class="comment">#如果设置为1，snmp trapper进程就会开启</span></span><br><span class="line">ListenIP=0.0.0.0              <span class="comment">#监听来自trapper的ip地址</span></span><br><span class="line">HousekeepingFrequency=1       <span class="comment">#说明：多少小时清理一次代理端数据库的history, alert, and alarms，以保持代理端数据库轻便，建议保持默认</span></span><br><span class="line">MaxHousekeeperDelete=500      <span class="comment">#每次轮询housekeeper这个任务的时候，超过这个阀值的行都会被清理。</span></span><br><span class="line">SenderFrequency=30            <span class="comment">#说明:多少秒后重试发送失败的报警信息</span></span><br><span class="line">CacheSize=8M                  <span class="comment">#说明：zabbix初始化时占用多少系统共享内存用于存储配置信息，HOST,ITEM,TRIGGER数据，视监控主机数量和监控项调整，建议调整到32M或者更大</span></span><br><span class="line">CacheUpdateFrequency=60       <span class="comment">#说明：zabbix更新操作系统CACHE配置，若管理页面操作不频繁，可以考虑加大参数值</span></span><br><span class="line">StartDBSyncers=4              <span class="comment">#将采集数据从CACHE同步到数据库线程数量，视数据库服务器I/O繁忙情况，和数据库写能力调整。数值越大，写能力越强。对数据库服务器I/O压力越大。</span></span><br><span class="line">HistoryCacheSize=8M           <span class="comment">#说明：用于设置划分多少系统共享内存用于存储采集的历史数据，此数值越大，数据库读压力越小</span></span><br><span class="line">TrendCacheSize=4M             <span class="comment">#说明：用于设置划分多少系统共享内存用于存储计算出来的趋势数据，此参数值从一定程度上可影响数据库读压力</span></span><br><span class="line">HistoryTextCacheSize=16M      <span class="comment">#说明:指定划出多少系统共享内存用于存储 character, text or log history数据，若二级代理内存足够，建议可适当扩大此数值，可很大程度上解决系统I/O压力，和数据库读压力</span></span><br><span class="line">ValueCacheSize=8M   <span class="comment">#说明：划出系统多少共享内存用于已请求的存储监控项信息，若监控项较多，建议加大此数值</span></span><br><span class="line">NodeNoEvents=0                <span class="comment">#说明：若节点为子结点，是否允许本地事件（events表）发送到主节点，1为不发送，但不影响此节点以下的节点的传播能力，视ZABBIX分布式系统架构设计开启或关闭。在不明架构前提下，建议保持默认</span></span><br><span class="line">NodeNoHistory=0               <span class="comment">#说明：若节点为子结点，是否允许本地历史数据发送到主节点，1为不发送，但不影响此节点以下的节点的传播能力，视ZABBIX分布式系统架构设计开启或关闭，在不明架构前提下，建议保持默认</span></span><br><span class="line">Timeout=3                     <span class="comment">#说明：与AGNET\SNMP设备和其它外部设备通信超时设置，单位为秒；若采集数据不完整或网络繁忙，或从管理页面发现客户端状态变化频繁，可以考虑加大此数值。注意若此数值加大，应该考虑参数 StartPollers 是否有相应加大的必要。</span></span><br><span class="line">TrapperTimeout=300            <span class="comment">#说明：启用 trapper功能，用于进程等待超时设置。根据需要调整</span></span><br><span class="line">UnreachablePeriod=45          <span class="comment">#说明：当AGNET端处于不可用状态下，间隔多少秒后，尝试重新连接。建议根据具体情况设置。注意，若此数值过小，右agent端业务系统繁忙时，有可能造成报警信息误报</span></span><br><span class="line">UnavailableDelay=60           <span class="comment">#说明:当AGENT端处于可用状态下，间隔多少秒后，进行状态检查。若出现可正常采集数据，但管理页面AGENT状态不正常；若在网络，端口等均通畅情况下，AGENT状态仍不正常，可以考虑加大此数值</span></span><br><span class="line">UnreachableDelay=15           <span class="comment">#说明：当agent端处于不可达状态下，延迟多少秒后，进行重新尝试，建议保持默认，在AGENT接入调试阶段，可考虑减少此数值</span></span><br><span class="line">AlertScriptsPath=/usr/<span class="built_in">local</span>/zabbix/shell    <span class="comment">#监控报警脚本的存放路径</span></span><br><span class="line">FpingLocation=/usr/<span class="built_in">local</span>/sbin/fping         <span class="comment">#说明：IPv4 FPING命令路径，仅ROOT可用。注意使用此命令时，应该确认此命令是否存在</span></span><br><span class="line">SSHKeyLocation=               <span class="comment">#说明：在服务端需要SSH到AGENT端且采用用KEY验证方式时使用，默认为空。</span></span><br><span class="line">LogSlowQueries=3000           <span class="comment">#说明:用于服务端数据库慢查询功能，单位是毫秒；1毫秒=0.001秒，若有服务端数据库监控慢查询的需求，可以视具体情况调整此数。</span></span><br><span class="line">TmpDir=/tmp                   <span class="comment">#临时文件夹</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/etc/zabbix_server.general.conf   <span class="comment">#说明：include配置文件，可以使用正则表达式，例如：/usr/local/zabbix-2.4.4/conf/ttlsa.com/*.conf</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/etc/zabbix_server.conf.d/        <span class="comment">#子配置文件路径</span></span><br><span class="line">StartProxyPollers=1           <span class="comment">#在zabbix proxy被动模式下用此参数</span></span><br><span class="line">ProxyConfigFrequency=3600     <span class="comment">#取值范围：1-604800，默认值：3600，proxy被动模式下，server多少秒同步配置文件至proxy </span></span><br><span class="line">ProxyDataFrequency=1          <span class="comment">#取值范围：1-3600，默认值:1，被动模式下，zabbix server间隔多少秒向proxy请求历史数据</span></span><br></pre></td></tr></table></figure><h2 id="2、zabbix-agentd-conf详解"><a href="#2、zabbix-agentd-conf详解" class="headerlink" title="2、zabbix_agentd.conf详解"></a>2、zabbix_agentd.conf详解</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PidFile=/tmp/zabbix_agentd.pid    <span class="comment">#pid文件的存放位置</span></span><br><span class="line">LogFile=/tmp/zabbix_agentd.log    <span class="comment">#日志文件的位置</span></span><br><span class="line">LogFileSize=1                 <span class="comment">#当日志文件达到多大时进行轮询操作</span></span><br><span class="line">DebugLevel=3                  <span class="comment">#日志信息级别</span></span><br><span class="line">SourceIP=                     <span class="comment">#连接的源ip地址（出口），默认为空，即可</span></span><br><span class="line">EnableRemoteCommands=0        <span class="comment">#是否允许zabbix server端的远程指令，0表示不允许，1表示允许</span></span><br><span class="line">LogRemoteCommands=0           <span class="comment">#是否开启日志记录shell命令作为警告 0表示不允许，1表示允许</span></span><br><span class="line">Server=127.0.0.1              <span class="comment">#zabbix server的ip地址或主机名，可同时列出多个，需要用逗号隔开</span></span><br><span class="line">ListenPort=10050              <span class="comment">#zabbix agent监听的端口</span></span><br><span class="line">ListenIP=0.0.0.0              <span class="comment">#zabbix agent监听的ip地址</span></span><br><span class="line">StartAgents=3                 <span class="comment">#zabbix agent开启进程数</span></span><br><span class="line">ServerActive=127.0.0.1        <span class="comment">#开启主动检查</span></span><br><span class="line">Hostname=Zabbix server        <span class="comment">#在zabbix server前端配置时指定的主机名要相同，最重要的配置</span></span><br><span class="line">RefreshActiveChecks=120       <span class="comment">#主动检查刷新的时间，单位为秒数</span></span><br><span class="line">BufferSend=5                  <span class="comment">#数据缓冲的时间</span></span><br><span class="line">BufferSize=100                <span class="comment">#zabbix agent数据缓冲区的大小，当达到该值便会发送所有的数据到zabbix server</span></span><br><span class="line">MaxLinesPerSecond=100         <span class="comment">#zabbix agent发送给zabbix server最大的数据行</span></span><br><span class="line">AllowRoot=0                   <span class="comment">#是否允许zabbix agent 以root用户运行</span></span><br><span class="line">Timeout=3                     <span class="comment">#设定处理超时的时间</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/etc/zabbix_agentd.userparams.conf   <span class="comment">#子配置文件路径</span></span><br><span class="line"></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/etc/zabbix_agentd.conf.d/    <span class="comment">#包含子配置文件的路径</span></span><br><span class="line"></span><br><span class="line">UnsafeUserParameters=0   <span class="comment">#是否允许所有字符参数的传递</span></span><br><span class="line"></span><br><span class="line">UserParameter=       <span class="comment">#指定用户自定义参数</span></span><br></pre></td></tr></table></figure><h2 id="3、zabbix-proxy-conf详解"><a href="#3、zabbix-proxy-conf详解" class="headerlink" title="3、zabbix_proxy.conf详解"></a>3、zabbix_proxy.conf详解</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Server=192.168.70.133             <span class="comment">#指定zabbix server的ip地址或主机名</span></span><br><span class="line">Hostname=zabbix-proxy-1.35        <span class="comment">#定义监控代理的主机名，需和zabbix server前端配置时指定的节点名相同</span></span><br><span class="line">LogFile=/tmp/zabbix_proxy.log     <span class="comment">#指定日志文件的位置</span></span><br><span class="line">PidFile=/tmp/zabbix_proxy.pid     <span class="comment">#pid文件的位置</span></span><br><span class="line">DBName=zabbix_proxy               <span class="comment">#数据库名</span></span><br><span class="line">DBUser=zabbix                     <span class="comment">#连接数据库的用户</span></span><br><span class="line">DBPassword=123456                 <span class="comment">#连接数据库用户的密码</span></span><br><span class="line">ConfigFrequency=60                <span class="comment">#zabbix proxy从zabbix server取得配置数据的频率</span></span><br><span class="line">DataSenderFrequency=60            <span class="comment">#zabbix proxy发送监控到的数据给zabbix server的频率</span></span><br></pre></td></tr></table></figure><h1 id="三、Zabbix监控结合Grafana绘图"><a href="#三、Zabbix监控结合Grafana绘图" class="headerlink" title="三、Zabbix监控结合Grafana绘图"></a>三、Zabbix监控结合Grafana绘图</h1><h2 id="1-Zabbix概述"><a href="#1-Zabbix概述" class="headerlink" title="1. Zabbix概述"></a>1. Zabbix概述</h2><blockquote><p>Zabbix是一个企业级的开源分布式监控解决方案，由C语言编写而成的底层架构（server端和agent端），由一个国外的团队持续维护更新，软件可以自由下载使用，运作团队靠提供收费的技术支持赢利。官方网站：<a href="http://www.zabbix.com/">http://www.zabbix.com</a></p></blockquote><h2 id="2-Zabbixj架构图"><a href="#2-Zabbixj架构图" class="headerlink" title="2. Zabbixj架构图"></a>2. Zabbixj架构图</h2><blockquote><p>zabbix根据网络环境、监控规模等，分了三种架构： server-client 、server-proxy-client、master-node-client 三种 。</p></blockquote><p><strong>server-client架构</strong></p><p>也是zabbix的最简单的架构，监控机和被监控机之间不经过任何代理 ，直接由zabbix server和zabbix agentd之间进行数据交互。适用于网络比较简单，设备比较少的监控环境 。</p><p><strong>master-node-client架构</strong></p><p>该架构是zabbix最复杂的监控架构，适用于跨网络、跨机房、设备较多的大型环境 。每个node同时也是一个server端，node下面可以接proxy，也可以直接接client 。node有自已的配置文件和数据库，其要做的是将配置信息和监控数据向master同步，master的故障或损坏对node其下架构的完整性。</p><p><strong>server-proxy-client架构</strong></p><p>其中proxy是server、client之间沟通的一个桥梁，proxy本身没有前端，本身也并不存放数据，只是将agentd发来的数据暂时存放，然后再提交给server ；该架构经常是和master-node-client架构做比较的架构 ，一般适用跨机房、跨网络的中型网络架构的监控。</p><p><strong>Zabbix基本机构图如下</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribgpfxtej30yx0fjmys.jpg"></p><h2 id="3-Zabbix的优劣势"><a href="#3-Zabbix的优劣势" class="headerlink" title="3. Zabbix的优劣势"></a>3. Zabbix的优劣势</h2><p><strong>优点</strong></p><ul><li><p>支持设备多</p></li><li><p>支持分布式集中管理</p></li><li><p>开源，无软件成本投入</p></li><li><p>开放式接口，扩展性强</p></li><li><p>Server对设备性能要求低（实际测试：2个CPU 1G内存，监控5台设备，CPU使用率保持在10%以下，内存剩余400M以上）</p></li><li><p>当监控的项目比较多 服务器队列比较大的时候可以采用被动状态，被监控客户端主动从server端去下载需要监控的项目然后取数据上传到server端。这种方式对服务器的负载比较小。</p></li></ul><p><strong>缺点</strong></p><ul><li>无厂家支持，出现问题解决比较麻烦</li><li>需在被监控主机上安装agent，所有数据都存在数据库里，产生的数据据很大，瓶颈主要在数据库。</li></ul><h2 id="4-Zabbix组件说明"><a href="#4-Zabbix组件说明" class="headerlink" title="4. Zabbix组件说明"></a>4. Zabbix组件说明</h2><p>1）zabbix server：负责接收agent发送的报告信息的核心组件，所有配置、统计数据及操作数据都由它组织进行；</p><p>2）database storage：专用于存储所有配置信息，以及由zabbix收集的数据；</p><p>3）web interface：zabbix的GUI接口；</p><p>4）proxy：可选组件，常用于监控节点很多的分布式环境中，代理server收集部分数据转发到server，可以减轻server的压力；</p><p>5）agent：部署在被监控的主机上，负责收集主机本地数据如cpu、内存、数据库等数据发往server端或proxy端；</p><h2 id="5-Zabbix监控流程"><a href="#5-Zabbix监控流程" class="headerlink" title="5. Zabbix监控流程"></a>5. Zabbix监控流程</h2><blockquote><p>agentd需要安装到被监控的主机上，它负责定期收集各项数据，并发送到zabbix server端，zabbix server将数据存储到数据库中，zabbix web根据数据在前端进行展现和绘图。</p></blockquote><p><strong>这里agentd收集数据分为主动和被动两种模式：</strong></p><ul><li><p>主动：agent请求server获取主动的监控项列表，并主动将监控项内需要检测的数据提交给server/proxy</p></li><li><p>被动：server向agent请求获取监控项的数据，agent返回数据。</p></li></ul><h2 id="6-客户端守护进程"><a href="#6-客户端守护进程" class="headerlink" title="6. 客户端守护进程"></a>6. 客户端守护进程</h2><blockquote><p>此进程收集客户端数据，例如cpu负载、内存、硬盘使用情况等。</p></blockquote><p><strong>zabbix_get</strong></p><p>zabbix工具，单独使用的命令，通常在server或者proxy端执行获取远程客户端信息的命令。通常用户排错。例如在server端获取不到客户端的内存数据，我们可以使用zabbix_get获取客户端的内容的方式来做故障排查。</p><p><strong>zabbix_sender</strong></p><p>zabbix工具，用于发送数据给server或者proxy，通常用于耗时比较长的检查。很多检查非常耗时间，导致zabbix超时。于是我们在脚本执行完毕之后，使用sender主动提交数据。</p><p><strong>zabbix_server</strong></p><p>zabbix服务端守护进程。zabbix_agentd、zabbix_get、zabbix_sender、zabbix_proxy、zabbix_java_gateway的数据最终都是提交到server。(备注：当然不是数据都是主动提交给zabbix_server，也有的是server主动去取数据)</p><p><strong>zabbix_proxy</strong></p><p>zabbix代理守护进程。功能类似server，唯一不同的是它只是一个中转站，它需要把收集到的数据提交/被提交到server里。为什么要用代理？代理是做什么的？卖个关子，请继续关注运维生存时间zabbix教程系列。</p><p><strong>zabbix_java_gateway</strong></p><p>zabbix2.0之后引入的一个功能。顾名思义：Java网关，类似agentd，但是只用于Java方面。需要特别注意的是，它只能主动去获取数据，而不能被动获取数据。它的数据最终会给到server或者proxy。</p><h2 id="7-Zabbix项目实战"><a href="#7-Zabbix项目实战" class="headerlink" title="7. Zabbix项目实战"></a>7. Zabbix项目实战</h2><p><strong>环境：</strong></p><table><thead><tr><th>主机</th><th>操作系统</th><th>ip地址</th><th>主要软件</th></tr></thead><tbody><tr><td>server.zabbix</td><td>Centos 7.4.1708 64</td><td>192.168.2.1/24</td><td>Lamp、mailx、zabbix-4.2.7、grafana-4.6.1-1</td></tr><tr><td>agent01.zabbix</td><td>Centos 7.4.1708 64</td><td>192.168.2.2/24</td><td>zabbix-4.2.7</td></tr><tr><td>agent02.zabbix</td><td>Centos 7.4.1708 64</td><td>192.168.2.3/24</td><td>zabbix-4.2.7</td></tr></tbody></table><p><strong>环境配置</strong></p><blockquote><p>修改三台主机名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname server.zabbix &amp;&amp; <span class="built_in">logout</span></span><br><span class="line">hostnamectl set-hostname agent01.zabbix &amp;&amp; <span class="built_in">logout</span></span><br><span class="line">hostnamectl set-hostname agent02.zabbix &amp;&amp; <span class="built_in">logout</span></span><br></pre></td></tr></table></figure><blockquote><p>在 hosts文件里追加以下配置(配置相同)</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">END&gt;&gt; /etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.1 server.zabbix</span></span><br><span class="line"><span class="string">192.168.2.2 agent01.zabbix</span></span><br><span class="line"><span class="string">192.168.2.3 agent02.zabbix</span></span><br><span class="line"><span class="string">END</span></span><br></pre></td></tr></table></figure><blockquote><p>时间同步</p></blockquote> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntpdate</span><br><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ntpdate ntp1.aliyun.com&quot;</span> &gt;&gt;/etc/rc.local</span><br><span class="line">chmod u+x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><blockquote><p>关闭防火墙 及 selinux配置</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p><strong>实施步骤：</strong></p><table><thead><tr><th>步骤</th><th>说明</th></tr></thead><tbody><tr><td>第一步</td><td>1.安装zabbix server服务端</td></tr><tr><td>第二步</td><td>2.配置优化zabbix服务的web页面</td></tr><tr><td>第三步</td><td>3.实现监控server.zabbix端自身的OS、mysql、httpd</td></tr><tr><td>第四步</td><td>4.自定义Zabbix监控项（重点）</td></tr><tr><td>第五步</td><td>5.实现Zabbix邮件报警功能</td></tr><tr><td>第六步</td><td>6.自动发现—自动添加服务器监控</td></tr><tr><td>第七步</td><td>7.Zabbix聚合图形</td></tr><tr><td>第八步</td><td>8.安装并配置Grafana的web界面（呈现效果）</td></tr></tbody></table><h3 id="7-1-安装zabbix-server服务端"><a href="#7-1-安装zabbix-server服务端" class="headerlink" title="7.1 安装zabbix server服务端"></a>7.1 安装zabbix server服务端</h3><blockquote><p>上传Lamp和Zabbix相关依赖的软件包</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribgwc5mcj30qx03bweh.jpg" alt="image-20200619120232323"></p><blockquote><p>配置 server 端的本地 lamp yum源</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/yum.repos.d/yum.repo </span></span><br><span class="line">[zabbix]</span><br><span class="line">baseurl=file:///opt/zabbix</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">END</span><br></pre></td></tr></table></figure><blockquote><p>server端上安装lamp和依赖包；<strong>注：最好多安几遍，包太多，可能安不全</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># yum -y install net-snmp net-snmp-devel libxml2 libxml2-devel libcurl-devel libevent libevent libevent-devel curl curl-devel mysql-devel snmp perl-DBI php-xml php-bcmath php-mbstring php-ldap php-xmlrpc httpd php php-mysql php-common php-gd php-odbc php-pear gcc* net-snmp libssh2 libssh2-devel mariadb-server mariadb mariadb-devel</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribgzzpyfj30wk02h74s.jpg" alt="image-20200619121029385"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribh3c5r9j30p302pglj.jpg" alt="image-20200619120850161"></p><blockquote><p>启动 mariadb、httpd 服务 并 设置mariadb数据库密码</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># for i in mariadb httpd;do systemctl start $i;done</span></span><br><span class="line">[root@server ~]<span class="comment"># for i in mariadb httpd;do systemctl enable $i;done</span></span><br><span class="line">[root@server ~]<span class="comment"># mysqladmin -u root -p password &quot;123123&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>源码安装Zabbix服务端</p></blockquote> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建zabbix运行用户</span></span><br><span class="line">[root@server ~]<span class="comment"># useradd zabbix -M -s /sbin/nologin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建zabbix日志存放目录</span></span><br><span class="line">[root@server ~]<span class="comment"># mkdir -p /usr/local/zabbix/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更改属主数组</span></span><br><span class="line">[root@server ~]<span class="comment"># chown -R zabbix:zabbix /usr/local/zabbix/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">[root@server ~]<span class="comment"># tar xf zabbix-4.2.7.tar.gz -C /usr/src/ &amp;&amp; cd /usr/src/zabbix-4.2.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置</span></span><br><span class="line">[root@server zabbix-4.2.7]<span class="comment"># ./configure --prefix=/usr/local/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译、安装</span></span><br><span class="line">[root@server zabbix-4.2.7]<span class="comment"># make &amp;&amp; make install &amp;&amp; cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置解释</span></span><br><span class="line">--enable-server      //启动服务端</span><br><span class="line">--enable-agent       //启动客户端</span><br><span class="line">--enable-ipv6        //启动ipv6</span><br><span class="line">--with-net-snmp      //路由交换</span><br></pre></td></tr></table></figure><blockquote><p>登陆数据库创建保存监控模板的数据库，并导入数据模板以及授权zabbix用户连接数据库</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># mysql -uroot -p123123</span></span><br><span class="line">create database <span class="keyword">if</span> not exists zabbix default character <span class="built_in">set</span> utf8 collate utf8_general_ci;</span><br><span class="line">use zabbix;</span><br><span class="line"><span class="built_in">source</span> /usr/src/zabbix-4.2.7/database/mysql/schema.sql;</span><br><span class="line"><span class="built_in">source</span> /usr/src/zabbix-4.2.7/database/mysql/images.sql;</span><br><span class="line"><span class="built_in">source</span> /usr/src/zabbix-4.2.7/database/mysql/data.sql;</span><br><span class="line">grant all on zabbix.* to zabbix@<span class="string">&#x27;192.168.2.1&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>修改服务zabbix_server.conf 端及客户端zabbix_agentd.conf的配置文件</p></blockquote><p><strong>zabbix_server.conf</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 备份</span></span><br><span class="line">[root@server ~]<span class="comment"># cp /usr/local/zabbix/etc/zabbix_server.conf /opt/zabbix_server.conf.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编辑配置文件</span></span><br><span class="line">[root@server ~]<span class="comment"># vim /usr/local/zabbix/etc/zabbix_server.conf</span></span><br><span class="line">:%g/^<span class="comment">#/d</span></span><br><span class="line">:%g/^$/d</span><br><span class="line"></span><br><span class="line">LogFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_server.log</span><br><span class="line">PidFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_server.pid</span><br><span class="line">Timeout=4</span><br><span class="line">DBHost=192.168.2.1</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br><span class="line">DBSocket=/var/lib/mysql/mysql.sock</span><br><span class="line">Include=/usr/<span class="built_in">local</span>/zabbix/etc/zabbix_server.conf.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置解释</span></span><br><span class="line">DBHost=192.168.2.1                    <span class="comment"># 指定数据库的ip地址</span></span><br><span class="line">DBName=zabbix                         <span class="comment"># 数据库的名字</span></span><br><span class="line">DBUser=zabbix                         <span class="comment"># 指定连接数据库的用户名</span></span><br><span class="line">DBPassword=zabbix                     <span class="comment"># 用户连接数据库需要的密码</span></span><br><span class="line">DBSocket=/var/lib/mysql/mysql.sock    <span class="comment"># 指定mysql mysql.sock文件路径；ps -aux|grep mysql</span></span><br></pre></td></tr></table></figure><p><strong>zabbix_agentd.conf</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 备份</span></span><br><span class="line">[root@server ~]<span class="comment"># cp /usr/local/zabbix/etc/zabbix_agentd.conf /opt/zabbix_agentd.conf.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编辑配置文件</span></span><br><span class="line">[root@server ~]<span class="comment"># vim /usr/local/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line">:%g/^<span class="comment">#/d</span></span><br><span class="line">:%g/^$/d</span><br><span class="line"></span><br><span class="line">LogFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agentd.log</span><br><span class="line">PidFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agentd.pid</span><br><span class="line">Server=192.168.2.1</span><br><span class="line">ServerActive=192.168.2.1</span><br><span class="line">Hostname=server.zabbix                  <span class="comment"># 这里一定要和本机的名称一致</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/zabbix/etc/zabbix_agentd.conf.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置解释</span></span><br><span class="line">PidFile=/tmp/zabbix_agentd.pid          <span class="comment"># 运行的PID文件</span></span><br><span class="line">Server=127.0.0.1,192.168.2.1            <span class="comment"># 输入zabbix_server主机的ip地址，可以指定多个</span></span><br><span class="line">ServerActive=192.168.2.1                <span class="comment"># 输入agent主机采集到数据发送到的server端&#123;主动&#125;</span></span><br><span class="line">Hostname=server.zabbix                  <span class="comment"># 输入agent本机的主机名</span></span><br><span class="line">LogFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agentd.log             <span class="comment"># 指定日志文件</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/zabbix/etc/zabbix_agentd.conf.d/*.conf    <span class="comment"># 开启附加配置文件目录</span></span><br></pre></td></tr></table></figure><blockquote><p>启动server(监控端) 及 agent(被监控端)</p></blockquote> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 加入开机启动项</span></span><br><span class="line">[root@server ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/rc.local</span></span><br><span class="line">/usr/<span class="built_in">local</span>/zabbix/sbin/zabbix_server</span><br><span class="line">/usr/<span class="built_in">local</span>/zabbix/sbin/zabbix_agentd</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动server</span></span><br><span class="line">[root@server ~]<span class="comment"># /usr/local/zabbix/sbin/zabbix_server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动agent</span></span><br><span class="line">[root@server ~]<span class="comment"># /usr/local/zabbix/sbin/zabbix_agentd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查是否启动</span></span><br><span class="line">[root@server ~]<span class="comment"># netstat -utpln |grep 1005</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*            LISTEN      12454/zabbix_agentd </span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*            LISTEN      12387/zabbix_server </span><br><span class="line">tcp6       0      0 :::10050                :::*                 LISTEN      12454/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10051                :::*                 LISTEN      12387/zabbix_server</span><br></pre></td></tr></table></figure><blockquote><p>将Zabbix自带的web页面添加到httpd的网页存放目录中，并修改php的配置文件，然后重启httpd服务</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 拷贝Zabbix自带的php页面到apache网站存放目录中</span></span><br><span class="line">[root@server ~]<span class="comment"># cp -r /usr/src/zabbix-4.2.7/frontends/php/ /var/www/html/zabbix</span></span><br><span class="line">[root@server ~]<span class="comment"># chown -R apache:apache /var/www/html/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编辑php配置文件</span></span><br><span class="line">[root@server ~]<span class="comment"># vim /etc/php.ini</span></span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">max_execution_time = 300</span><br><span class="line">max_input_time = 300</span><br><span class="line">post_max_size = 32M</span><br><span class="line">memory_limit = 128M</span><br><span class="line">extension = bcmath.so</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置解释</span></span><br><span class="line">date.timezone = Asia/Shanghai     <span class="comment"># 时区</span></span><br><span class="line">max_execution_time = 300          <span class="comment"># 单位秒，通过POST、GET以及PUT方式接收数据时间进行限制</span></span><br><span class="line">max_input_time = 300              <span class="comment"># php程序上传文件解析数据时的时间限制</span></span><br><span class="line">post_max_size = 32M               <span class="comment"># POST 方式请求数据所允许的最大大小</span></span><br><span class="line">memory_limit = 128M               <span class="comment"># 设置php程序的内存限制</span></span><br><span class="line">extension=bcmath.so               <span class="comment"># 加载zabbix程序需要加载的扩展模块bcmath.so</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启apache</span></span><br><span class="line">[root@server ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">[root@server ~]<span class="comment"># netstat -anptu|grep httpd</span></span><br><span class="line">tcp6       0      0 :::80            :::*           LISTEN      31106/httpd</span><br></pre></td></tr></table></figure><h3 id="7-2-配置优化zabbix服务的web页面"><a href="#7-2-配置优化zabbix服务的web页面" class="headerlink" title="7.2 配置优化zabbix服务的web页面"></a>7.2 配置优化zabbix服务的web页面</h3><blockquote><p>访问安装 <a href="http://192.168.2.1/zabbix/">http://192.168.2.1/zabbix/</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribhftjq1j30p60foaai.jpg" alt="image-20200619125158344"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribhnjai1j30p90fqt9g.jpg" alt="image-20200619125237448"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribhufxy9j30op0f83z3.jpg" alt="image-20200619125349757"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribhzlae6j30od0fegm2.jpg" alt="image-20200619125601330"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribi643qtj30op0fbjs4.jpg" alt="image-20200619125634128"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribiacvozj30ol0fdwez.jpg" alt="image-20200619125711508"></p><blockquote><p>登陆Zabbix页面并进行一些简单优化，默认用户名admin，密码zabbix</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribiflu1ej30rf0czjrg.jpg" alt="image-20200619130143925"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribim3vpwj313r0f1taf.jpg" alt="image-20200619130337305"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribiqd7j3j30tp0c90t2.jpg" alt="image-20200619130437102"></p><p><strong>解决zabbix显示图像下边文字乱码情况：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribitzgvij31420lamyn.jpg" alt="image-20200619130638409"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># mv simkai.ttf /var/www/html/zabbix/assets/fonts/</span></span><br><span class="line">[root@server ~]<span class="comment"># cd /var/www/html/zabbix/assets/fonts/ &amp;&amp; ls</span></span><br><span class="line">DejaVuSans.ttf  simkai.ttf</span><br><span class="line"></span><br><span class="line">[root@server fonts]<span class="comment"># mv DejaVuSans.ttf DejaVuSans.ttf.bak</span></span><br><span class="line">[root@server fonts]<span class="comment"># mv simkai.ttf DejaVuSans.ttf</span></span><br><span class="line">[root@server fonts]<span class="comment"># chown -R apache:apache ./ &amp;&amp; ll</span></span><br><span class="line">总用量 12252</span><br><span class="line">-rw-r--r-- 1 apache apache 11785184 6月  19 12:05 DejaVuSans.ttf</span><br><span class="line">-rw-r--r-- 1 apache apache   756072 6月  19 12:41 DejaVuSans.ttf.bak</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribixcvzcj31480lamyu.jpg" alt="image-20200619130834248"></p><h3 id="7-3-实现监控server-zabbix端自身的OS、mysql、httpd"><a href="#7-3-实现监控server-zabbix端自身的OS、mysql、httpd" class="headerlink" title="7.3 实现监控server.zabbix端自身的OS、mysql、httpd"></a>7.3 实现监控server.zabbix端自身的OS、mysql、httpd</h3><blockquote><p>添加主机：配置—主机—创建主机</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribj14shij31480msq4v.jpg" alt="image-20200619135116794"></p><ul><li><strong>选择OS、mysql、httpd模板</strong></li></ul><blockquote><p>这些模板都是官方默认提供的，里面包含了所有，比如：监控项、触发器、触发器、图形、自动发现等所有的配置，不需要再手动编写，但是一般在公司都是自己编写这些个配置。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribj6a2tyj30s909i3yu.jpg" alt="image-20200619135826322"></p><p><strong>勾选以下三个监控模板，点击选择按钮</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribjadbkqj30r907gjru.jpg" alt="image-20200619135446081"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribjgl5j8j30u10a374q.jpg" alt="image-20200619140058514"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribjl7v0zj30u80btaam.jpg" alt="image-20200619140128762"></p><blockquote><p><strong>他们的对应关系：</strong></p><ul><li>应用集 针对 监控项</li><li>监控项 针对 触发器</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribjxjrltj31480hstaj.jpg" alt="image-20200619140310324"></p><ul><li><strong>创建MySQL图形</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribk0nf8pj314605jgmd.jpg" alt="image-20200619141052844"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribk6dwxcj61480d6wfs02.jpg" alt="image-20200619141210596"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribk9marpj31480j175e.jpg" alt="image-20200619141354833"></p><p><strong>选择监控项，点击选择</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribkddg23j30pv03djrd.jpg" alt="image-20200619141506204"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribkjg7ifj61480k3q4602.jpg" alt="image-20200619141607265"></p><p><strong>查看监控主机的图形；</strong></p><p><strong>但是意外出现了，关于Mysql数据库的所有监控项没有图形，如图所示；</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribko53brj31460lbgnb.jpg" alt="image-20200619141733803"></p><p><strong>经过查看，问题如下图，监控Mysql服务器的键值不支持</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribktb0nvj31310b7ach.jpg" alt="image-20200619141835550"></p><p><strong>解决方案如下；</strong></p><ul><li>打开zabbix_server服务器，同时在此也是被监控端，设置MySQL监控项失效的键值</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 注意：下面标红的$1要手写进去，直接粘贴，粘不进去的！！！</span></span><br><span class="line">[root@server ~]<span class="comment"># cat &lt;&lt;END&gt;&gt;/usr/local/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line">UnsafeUserParameters=1</span><br><span class="line">UserParameter=mysql.version,mysql -V</span><br><span class="line">UserParameter=mysql.status[*],/usr/<span class="built_in">local</span>/zabbix/etc/chk_mysql.sh <span class="variable">$1</span></span><br><span class="line">UserParameter=mysql.ping, mysqladmin -uroot -p123123 -P3306 ping | grep -c alive</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 内容解释</span></span><br><span class="line"><span class="comment">#允许key键能够接收任何类型的value值；必写！</span></span><br><span class="line">UnsafeUserParameters=1</span><br><span class="line"><span class="comment">#定义键值, mysql.version键, 以及键的值mysql –V; 会将mysql –V赋值给mysql.version键&#123;MySQL版本&#125;</span></span><br><span class="line">UserParameter=mysql.version,mysql –V   </span><br><span class="line"><span class="comment">#定义键mysql.status[*]，值/usr/local/zabbix/etc/chk_mysql.sh $1；&#123;脚本&#125;</span></span><br><span class="line">UserParameter=mysql.status[*],/usr/<span class="built_in">local</span>/zabbix/etc/chk_mysql.sh <span class="variable">$1</span></span><br><span class="line"><span class="comment">#定义键mysql.ping，值mysqladmin -uroot -p123123 -P3306 ping | grep -c alive；&#123;mysql存活&#125;</span></span><br><span class="line">UserParameter=mysql.ping, mysqladmin -uroot -p123123 -P3306 ping | grep -c alive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在脚本中指定agent端的mysql 的ip地址，连接的用户名密码等</span></span><br><span class="line">[root@server ~]<span class="comment"># vim /usr/local/zabbix/etc/chk_mysql.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">MYSQL_USER=<span class="string">&#x27;root&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">MYSQL_PWD=<span class="string">&#x27;123123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">MYSQL_PORT=<span class="string">&#x27;3306&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据连接</span></span><br><span class="line">MYSQL_CONN=<span class="string">&quot;/usr/bin/mysqladmin -u<span class="variable">$&#123;MYSQL_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> -P<span class="variable">$&#123;MYSQL_PORT&#125;</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数是否正确</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne <span class="string">&quot;1&quot;</span> ];<span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arg error!&quot;</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line">    Uptime) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status|cut -f2 -d<span class="string">&quot;:&quot;</span>|cut -f1 -d<span class="string">&quot;T&quot;</span>` </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">        ;; </span><br><span class="line">    Com_update) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_update&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">        ;; </span><br><span class="line">    Slow_queries) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status |cut -f5 -d<span class="string">&quot;:&quot;</span>|cut -f1 -d<span class="string">&quot;O&quot;</span>` </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">        ;; </span><br><span class="line">    Com_select) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_select&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Com_rollback) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_rollback&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Questions) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status|cut -f4 -d<span class="string">&quot;:&quot;</span>|cut -f1 -d<span class="string">&quot;S&quot;</span>` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Com_insert) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_insert&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Com_delete) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_delete&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Com_commit) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_commit&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Bytes_sent) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Bytes_sent&quot;</span> |cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Bytes_received) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Bytes_received&quot;</span> |cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">    Com_begin) </span><br><span class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">&quot;Com_begin&quot;</span>|cut -d<span class="string">&quot;|&quot;</span> -f3` </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </span><br><span class="line">                ;; </span><br><span class="line">                        </span><br><span class="line">    *) </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Usage:<span class="variable">$0</span>(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)&quot;</span> </span><br><span class="line">        ;; </span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 给予脚本执行权限</span></span><br><span class="line">[root@server ~]<span class="comment"># chmod a+x /usr/local/zabbix/etc/chk_mysql.sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启zabbix_agentd服务</span></span><br><span class="line">[root@server ~]<span class="comment"># yum -y install psmisc                 #安装killall命令</span></span><br><span class="line">[root@server ~]<span class="comment"># killall -9 zabbix_agentd</span></span><br><span class="line">[root@server ~]<span class="comment"># /usr/local/zabbix/sbin/zabbix_agentd</span></span><br><span class="line">[root@server ~]<span class="comment"># netstat -utpln |grep 10050</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*         LISTEN      32092/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10050                :::*              LISTEN      32092/zabbix_agentd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查MySQL是否激活</span></span><br><span class="line">[root@server ~]<span class="comment"># mysqladmin -uroot -p123123 -P 3306 ping</span></span><br><span class="line">mysqld is alive</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------</span><br><span class="line">检测mysql状态时会使用zabbix_get命令：在此可以通过zabbix_get命令进行获取服务器监控项的具体键值，mysql.ping是在zabbix_agentd.conf配置文件中的键值名称，通过此名称可以查看键值，通常能够获取到键值，获取监控数据就是没问题的；只要zabbix_get能获取到的数据，那图形也就一定能获取并显示，否则图形绝对获取不到数据并显示。</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用zabbix_get工具测试脚本中的键值</span></span><br><span class="line">[root@server ~]<span class="comment"># ln -s /usr/local/zabbix/bin/* /usr/local/bin/        # 为zabbix_get的命令做软链接</span></span><br><span class="line"></span><br><span class="line">[root@server ~]<span class="comment"># zabbix_get -s 192.168.2.1 -k mysql.ping</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">[root@server ~]<span class="comment"># zabbix_get -s 192.168.2.1 -k mysql.status[Com_update]</span></span><br><span class="line">588</span><br><span class="line"></span><br><span class="line">[root@server ~]<span class="comment"># zabbix_get -s 192.168.2.1 -k mysql.version</span></span><br><span class="line">mysql  Ver 15.1 Distrib 5.5.65-MariaDB, <span class="keyword">for</span> Linux (x86_64) using readline 5.1</span><br></pre></td></tr></table></figure><p><strong>再次打开zabbix的web界面，查看mysql监控项界面</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribkyyih5j31320c4q5e.jpg" alt="image-20200619143939270"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribl2nt1ej61430l840b02.jpg" alt="image-20200619143849601"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribl4x5ofj31430l876c.jpg" alt="image-20200619144050951"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribl88jx5j31430n476u.jpg" alt="image-20200619144118893"></p><ul><li><strong>创建httpd服务的图形</strong></li></ul><blockquote><p>这和MySQL的过程是一样的，而且它比MySQL还要省事，因为OS和HTTPD模板的键值默认就是支持的，不需要在取值了</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griblddg0nj31430k3wfq.jpg" alt="image-20200619150724807"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griblgm2arj31430letaw.jpg" alt="image-20200619150757318"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griblldubkj31430lbwg8.jpg" alt="image-20200619150847855"></p><h3 id="7-4-自定义Zabbix监控项（重点）"><a href="#7-4-自定义Zabbix监控项（重点）" class="headerlink" title="7.4 自定义Zabbix监控项（重点）"></a>7.4 自定义Zabbix监控项（重点）</h3><blockquote><ul><li><p>以上关联的 Template OS Linux 模板基本涵盖了所有系统层面的监控，包括了我们最关注的几项：ping、load、cpu使用率、memory、disk、网卡流量等等，当然有些触发器的阀值可能需要根据服务器的自身情况进行修改。</p></li><li><p>下面添加自定义服务器内存使用检测项，在此配置一个监控项为：内存使用70M进行警告提醒：</p></li><li><p>修改客户端zabbix_agentd.conf配置文件，最后一行添加：</p><ul><li>UserParameter=memory_used,free -m|grep Mem|awk ‘{print $3}’</li></ul></li><li><p>语法：UserParameter=key,shell command</p><ul><li>监控key值：memory_userd，key值可以随意编写，但是一会需要在web页面创建监控项时指定key值</li><li>Shell命令或脚本：free -m|grep Mem|awk ‘{print $3}’</li></ul></li><li><p>注：在zabbix_server端可以使用zabbix_get -s agent端ip地址 -p 10050 -k key名通过此命令可以查看agent端key的监控值</p></li></ul></blockquote><p><strong>在此之前，先将agent01.zabbix主机的zabbix客户端软件安装好，并加入至Linux Servers组中</strong></p><p>1、安装并配置zabbix客户端，只安装agent端，不装server端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装所需依赖包</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># yum -y install libxml2-devel libcurl-devel pcre-devel</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建zabbix运行用户</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># useradd zabbix -M -s /sbin/nologin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建zabbix日志存放目录</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># mkdir -p /usr/local/zabbix/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更改属主数组</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># chown -R zabbix:zabbix /usr/local/zabbix/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># tar xf zabbix-4.2.7.tar.gz -C /usr/src/ &amp;&amp; cd /usr/src/zabbix-4.2.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置</span></span><br><span class="line">[root@agent01 zabbix-4.2.7]<span class="comment"># ./configure --prefix=/usr/local/zabbix --enable-agent --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译、安装</span></span><br><span class="line">[root@agent01 zabbix-4.2.7]<span class="comment"># make &amp;&amp; make install &amp;&amp; cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 备份文件</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># cp /usr/local/zabbix/etc/zabbix_agentd.conf /opt/zabbix_agentd.conf.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编辑配置文件</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># vim /usr/local/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line">LogFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agent.log</span><br><span class="line">PidFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agent.pid</span><br><span class="line">Server=192.168.2.1</span><br><span class="line">ServerActive=192.168.2.1</span><br><span class="line">Hostname=agent01.zabbix          <span class="comment"># 这里一定要和本机的名称一致</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/zabbix/etc/zabbix_agentd.conf.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动agent端</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># /usr/local/zabbix/sbin/zabbix_agentd</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># netstat -utpln |grep zabbix</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*         LISTEN      27693/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10050                :::*              LISTEN      27693/zabbix_agentd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 加入开机启动项</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># chmod a+x /etc/rc.d/rc.local</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># echo &#x27;/usr/local/zabbix/sbin/zabbix_agentd&#x27; &gt;&gt; /etc/rc.local</span></span><br></pre></td></tr></table></figure><p>2、将其agent01主机加入至Linux Servers组中，至于模板的话就选择一个Template OS Linux系统的就行了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griblq1d77j30td0mut9o.jpg" alt="image-20200619155353287"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribltsr41j30tv0a9gm0.jpg" alt="image-20200619155555878"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griblwlaoaj31430mf0vc.jpg" alt="image-20200619155614944"></p><p><strong>自定义监控具体实现方式如下，在agent.zabbix主机的配置文件中来定义监控项</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 定义系统所用的物理内存大小</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># vim /usr/local/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line">UserParameter=memory_used,free -m|grep Mem|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">## 重启zabbix_agent端</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># killall -9 zabbix_agentd</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># /usr/local/zabbix/sbin/zabbix_agentd</span></span><br><span class="line">[root@agent01 ~]<span class="comment"># netstat -anptu|grep &quot;agentd&quot;</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*          LISTEN      27789/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10050                :::*               LISTEN      27789/zabbix_agentd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 再去server.zabbix.com主机上测试能否查看其监控项键值</span></span><br><span class="line">[root@server ~]<span class="comment"># zabbix_get -s 192.168.2.2 -k memory_used</span></span><br><span class="line">129</span><br></pre></td></tr></table></figure><p><strong>使用web界面添加此监控项</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribm0c0nlj31430hz40m.jpg" alt="image-20200619160519496"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribm43vd1j31430btjsg.jpg" alt="image-20200619160627909"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribm6doawj313i0n7abw.jpg" alt="image-20200619161155740"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribmdfrt5j313i06k3yf.jpg" alt="image-20200619161233426"></p><p><strong>监控项添加完成后，创建触发器（根据条件进行触发某个告警操作）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribmg8zx6j313k0drdh1.jpg" alt="image-20200619161434762"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribmj3hjnj31430liq46.jpg" alt="image-20200619161633476"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribmp6c62j30j1075dfu.jpg" alt="image-20200619161713696"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribmtxlboj30ik05ut92.jpg" alt="image-20200619161748261"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribmyzoqdj30j3076q30.jpg" alt="image-20200619161922879"></p><p>插入后，手动修改表达式为 &gt;200 作为条件，然后添加就行了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribn3ox4fj31430lnwfr.jpg" alt="image-20200619162135220"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribn6xn7qj613k0je40t02.jpg" alt="image-20200619162327374"></p><p><strong>触发器创建完成后，创建监控显示的图形</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnbne07j31430fp0uf.jpg" alt="image-20200619162417014"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnevlnlj31430k33zr.jpg" alt="image-20200619162531482"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnhpxy3j314308eaat.jpg" alt="image-20200619162649078"></p><p><strong>查看这个图形</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnkypk1j31430l940f.jpg" alt="image-20200619162737392"></p><p><strong>模拟内存使用超过200M触动触发器</strong></p><p>[root@agent01 ~]# dd if=/dev/zero of=/opt/lemon.txt bs=1G count=5 &amp;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnr32m8j31430lbdhu.jpg" alt="image-20200619162958307"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnurwiej31430ixjte.jpg" alt="image-20200619163030339"></p><h3 id="7-5-实现Zabbix邮件报警功能"><a href="#7-5-实现Zabbix邮件报警功能" class="headerlink" title="7.5 实现Zabbix邮件报警功能"></a>7.5 实现Zabbix邮件报警功能</h3><p><strong>首先配置server.zabbix端的邮件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装邮箱应用</span></span><br><span class="line">[root@server ~]<span class="comment"># yum -y install mailx dos2unix</span></span><br><span class="line">[root@server ~]<span class="comment"># mailx -V</span></span><br><span class="line">12.5 7/5/10</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置mail.rc</span></span><br><span class="line">[root@server ~]<span class="comment"># vim /etc/mail.rc   //在此文件末尾添加，指定接收邮件邮箱地址，指定邮箱服务器地址，指定接收邮件邮箱地址的授权码，并非163邮箱的密码，而是授权码，登陆163邮箱地址后，--设置--开启smtp和pop3--点击客户端生成授权码--使用此授权码进行指定到此配置文件。</span></span><br><span class="line"><span class="built_in">set</span> from=lemon_row@163.com smtp=smtp.163.com</span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=lemon_row@163.com smtp-auth-password=TZVLGNYMVOEWCIHR</span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试</span></span><br><span class="line">[root@server ~]<span class="comment"># echo &quot;测试1&quot; |mail -s &quot;good1&quot; lemon_row@163.com         //测试邮件接收情况</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribnz269zj311e0pi0zu.jpg" alt="image-20200619164159730"></p><p><strong>配置zabbix_server.conf配置文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># vim /usr/local/zabbix/etc/zabbix_server.conf</span></span><br><span class="line">AlertScriptsPath=/usr/<span class="built_in">local</span>/zabbix/share/zabbix/alertscripts       //邮件报警的脚本存放位置</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编写报警邮件脚本，调整mail命令语法位置，使用dos2unix命令转换字符，避免收到邮件不显示正常邮件内容而出现ATT00001.bin的错误；</span></span><br><span class="line">[root@server ~]<span class="comment"># vim /usr/local/zabbix/share/zabbix/alertscripts/mailbox.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#export.UTF-8</span></span><br><span class="line">bt=<span class="variable">$2</span>      <span class="comment">#邮件标题</span></span><br><span class="line">sjr=<span class="variable">$1</span>     <span class="comment">#发送给谁</span></span><br><span class="line">FILE=/tmp/mailtmp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$3</span>&quot;</span> &gt;<span class="variable">$FILE</span></span><br><span class="line">/usr/bin/dos2unix -k <span class="variable">$FILE</span></span><br><span class="line">/bin/mail -s <span class="string">&quot;<span class="variable">$bt</span>&quot;</span> <span class="string">&quot;<span class="variable">$sjr</span>&quot;</span> &lt;<span class="variable">$FILE</span></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="comment">## 注意文件以及报警脚本的归属以及权限，注：脚本文件和存放邮件消息文件属主必须是zabbix</span></span><br><span class="line">[root@server ~]<span class="comment"># chmod a+x /usr/local/zabbix/share/zabbix/alertscripts/mailbox.sh </span></span><br><span class="line">[root@server ~]<span class="comment"># chown zabbix:zabbix /usr/local/zabbix/share/zabbix/alertscripts/mailbox.sh </span></span><br><span class="line">[root@server ~]<span class="comment"># touch /tmp/mailtmp.txt &amp;&amp; chmod a+x /tmp/mailtmp.txt</span></span><br><span class="line">[root@server ~]<span class="comment"># chown zabbix:zabbix /tmp/mailtmp.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试脚本邮件接收情况</span></span><br><span class="line">[root@server ~]<span class="comment"># /usr/local/zabbix/share/zabbix/alertscripts/mailbox.sh lemon_row@163.com &quot;good2&quot; &quot;测试2&quot;</span></span><br><span class="line">dos2unix: converting file /tmp/mailtmp.txt to Unix format ...     </span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribo2s2qvj311e0pr0z7.jpg" alt="image-20200619164749416"></p><p><strong>配置zabbix web网站进行监控项的邮件报警，每一张图片后附带解释和注意事项，大体步骤分为 监控–创建报警媒介类型–更新用户使用的报警媒介类型–创建动作（根据触发器触发）–验证</strong></p><blockquote><p><strong>创建报警媒介类型：</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribo7fe98j313m0f2405.jpg" alt="image-20200619165010104"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griboaqi75j31430brt9o.jpg" alt="image-20200619165048174"></p><p><strong>输入创建的报警媒介类型的名称，指定类型为脚本的方式，并且输入zabbix_server端/usr/local/zabbix/share/zabbix/alertscripts目录下的脚本名称，确保脚本的归属是zabbix，并且脚本的权限是777，下边设置脚本参数，也就是发送邮件的语法：脚本收件人标题内容，必须严格按照此标准填写；</strong></p><p>脚本参数： {ALERT.SENDTO}                         {ALERT.SUBJECT}                             {ALERT.MESSAGE}</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribohsk4rj30up0eit9p.jpg" alt="image-20200619165804032"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griboklgtdj61430ett9y02.jpg" alt="image-20200619165917407"></p><p><strong>配置zabbix中的用户所使用的报警媒介类型以及接收邮件的邮箱</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribopsn61j31430bv75a.jpg" alt="image-20200619170022217"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griboucnaxj30t807jq39.jpg" alt="image-20200619170311840"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griboy62xdj30io0a9jrk.jpg" alt="image-20200619173024229"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribp49odsj30tq0893yz.jpg" alt="image-20200619173046667"></p><p><strong>创建动作，也就是发送邮件的动作</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribp6xpw1j31430b33z8.jpg" alt="image-20200619170557684"></p><p><strong>输入动作名，动作名最好为英文，可以选择触发这个动作的条件（可以选择触发器=触发器的名称或者选择触发器似触发器名称），作为条件，如若如图不选择触发器的条件，那么任何消息都会提示到邮箱</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpbv0tpj30ty0c4aan.jpg" alt="image-20200619170759716"></p><p><strong>添加报警动作，一旦此触发器添加触发，添加报警邮件的标题和内容，默认操作步骤持续时间（修改持续时间为60秒 (一分钟发送一次邮件)），添加操作（添加接收邮件的用户）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">故障&#123;TRIGGER.STATUS&#125;,服务器:&#123;HOSTNAME1&#125;发生: &#123;TRIGGER.NAME&#125;故障!</span><br><span class="line"></span><br><span class="line">告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line"></span><br><span class="line">告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line"></span><br><span class="line">告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line"></span><br><span class="line">告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line"></span><br><span class="line">告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line"></span><br><span class="line">问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line"></span><br><span class="line">当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line"></span><br><span class="line">事件ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpfzi0yj31430egq46.jpg" alt="image-20200619171145098"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpl384dj313k0gdgmc.jpg" alt="image-20200619171327264"></p><p><strong>添加恢复操作（指故障恢复之后发送邮件的动作），具体步骤和添加操作相同；</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpi7arjj31430f4jsk.jpg" alt="image-20200619171618945"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpptijoj31430dcjsf.jpg" alt="image-20200619171822179"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribptk6urj31430d0759.jpg" alt="image-20200619171847166"></p><p><strong>开始模拟内存使用超过200M后邮件报警</strong></p><p><strong>测试：agent01.zabbix主机测试邮件报警情况</strong></p><p>[root@agent01 ~]# dd if=/dev/zero of=/opt/lemon.txt bs=1G count=10 &amp;</p><p><strong>这时会超过在上面表达式中写的200M，接着就会邮件警报、向<a href="mailto:&#108;&#101;&#x6d;&#x6f;&#110;&#95;&#114;&#x6f;&#x77;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#108;&#101;&#x6d;&#x6f;&#110;&#95;&#114;&#x6f;&#x77;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a>发送邮件警报信息，每隔60秒发送一次，直到故障修复完成</strong></p><ul><li>故障报警邮件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpxbhjrj311e0f7q4j.jpg" alt="image-20200619222346519"></p><ul><li>恢复报警邮件</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribpypl5hj311e0f6jt0.jpg" alt="image-20200619222554131"></p><h3 id="7-6-自动发现—自动添加服务器监控"><a href="#7-6-自动发现—自动添加服务器监控" class="headerlink" title="7.6 自动发现—自动添加服务器监控"></a>7.6 自动发现—自动添加服务器监控</h3><blockquote><p><strong>什么是自动发现？</strong></p><ul><li>会自动添加主机或监控项等等的规则动作</li></ul></blockquote><p>1、配置自动发现</p><p>配置–&gt;自动发现–&gt;创建发现规则</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribq2ehq7j311o0b8wf5.jpg" alt="image-20200619223035841"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribq57kfoj311o0m575h.jpg" alt="image-20200619223456878"></p><p>2、添加动作：发现主机后需要执行的操作</p><p>配置–&gt;动作–&gt;事件源选：自动发现–&gt;创建动作：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribq9yg51j311o0bydgp.jpg" alt="image-20200619223621979"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqf2ijyj311o0ffjsa.jpg" alt="image-20200619224021925"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqca9b0j30s60esmyc.jpg" alt="image-20200619224642774"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqk7hqtj311o0f0q4a.jpg" alt="image-20200619225315284"></p><p>3、在agent02.zabbix主机上安装zabbix.agentd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装所需依赖包</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># yum -y install libxml2-devel libcurl-devel pcre-devel</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建zabbix运行用户</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># useradd zabbix -M -s /sbin/nologin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建zabbix日志存放目录</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># mkdir -p /usr/local/zabbix/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更改属主数组</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># chown -R zabbix:zabbix /usr/local/zabbix/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># tar xf zabbix-4.2.7.tar.gz -C /usr/src/ &amp;&amp; cd /usr/src/zabbix-4.2.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置</span></span><br><span class="line">[root@agent02 zabbix-4.2.7]<span class="comment"># ./configure --prefix=/usr/local/zabbix --enable-agent --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译、安装</span></span><br><span class="line">[root@agent02 zabbix-4.2.7]<span class="comment"># make &amp;&amp; make install &amp;&amp; cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 备份文件</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># cp /usr/local/zabbix/etc/zabbix_agentd.conf /opt/zabbix_agentd.conf.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编辑配置文件</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># vim /usr/local/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line">LogFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agent.log</span><br><span class="line">PidFile=/usr/<span class="built_in">local</span>/zabbix/logs/zabbix_agent.pid</span><br><span class="line">Server=192.168.2.1</span><br><span class="line">ServerActive=192.168.2.1</span><br><span class="line">Hostname=agent02.zabbix          <span class="comment"># 这里一定要和本机的名称一致</span></span><br><span class="line">Include=/usr/<span class="built_in">local</span>/zabbix/etc/zabbix_agentd.conf.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动agent端</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># /usr/local/zabbix/sbin/zabbix_agentd</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># netstat -utpln |grep zabbix</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*          LISTEN      24736/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10050                :::*               LISTEN      24736/zabbix_agentd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 加入开机启动项</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># chmod a+x /etc/rc.d/rc.local</span></span><br><span class="line">[root@agent02 ~]<span class="comment"># echo &#x27;/usr/local/zabbix/sbin/zabbix_agentd&#x27; &gt;&gt; /etc/rc.local</span></span><br></pre></td></tr></table></figure><p>4、耐心等待一段时间验证就OK了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqnuo7tj311e0cvq46.jpg" alt="image-20200619231534483"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqqbuguj311o0i476c.jpg" alt="image-20200619230335497"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqt60kzj311o0latal.jpg" alt="image-20200619230516373"></p><h3 id="7-7-Zabbix聚合图形"><a href="#7-7-Zabbix聚合图形" class="headerlink" title="7.7 Zabbix聚合图形"></a>7.7 Zabbix聚合图形</h3><p>检测–&gt;聚合图形–&gt;创建聚合图形</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribqxrqmsj312a0ay74w.jpg" alt="image-20200619231148577"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribr1frzhj30rr09o74n.jpg" alt="image-20200619231234106"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribr7nokqj312a0c5dgm.jpg" alt="image-20200619231329998"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribrbizf0j312a0bywfi.jpg" alt="image-20200619231425604"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribre5bchj312a06lmxm.jpg" alt="image-20200619232128949"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribrh0rm2j312a0fjdgt.jpg" alt="image-20200619232240570"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribries3hj312a0f7gnk.jpg" alt="image-20200619232254439"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribrm60c9j311t0n9tc2.jpg" alt="image-20200619232521828"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribrqe3r1j315a0po77j.jpg" alt="image-20200619232714454"></p><h3 id="7-8-安装并配置Grafana的web界面"><a href="#7-8-安装并配置Grafana的web界面" class="headerlink" title="7.8 安装并配置Grafana的web界面"></a>7.8 安装并配置Grafana的web界面</h3><blockquote><p><strong>Grafana简介</strong></p><p><strong>官网：</strong><a href="https://grafana.com/">https://grafana.com</a></p><p>Grafana是一个可视化面板（Dashboard）有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器，支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源。以InfluxDB（由go语言编写，是一个开源，分布式，时间序列，事件，可度量和无外部依赖的数据库）作为底层数据库；</p><p>Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；多个数据源。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># yum -y install fontconfig freetype* urw-fonts               //安装grafana依赖</span></span><br><span class="line">[root@server ~]<span class="comment"># wget https://dl.grafana.com/oss/release/grafana-7.0.1-1.x86_64.rpm</span></span><br><span class="line">[root@server ~]<span class="comment"># yum install grafana-7.0.1-1.x86_64.rpm                      //安装grafana</span></span><br><span class="line">[root@server ~]<span class="comment"># grafana-cli plugins install alexanderzobnin-zabbix-app      //安装zabbix驱动插件;很慢</span></span><br><span class="line">installing alexanderzobnin-zabbix-app @ 3.12.2</span><br><span class="line">from url: https://grafana.com/api/plugins/alexanderzobnin-zabbix-app/versions/3.12.2/download</span><br><span class="line">into: /var/lib/grafana/plugins</span><br><span class="line"></span><br><span class="line">✔ Installed alexanderzobnin-zabbix-app successfully </span><br><span class="line"></span><br><span class="line">Restart grafana after installing plugins . &lt;service grafana-server restart&gt;</span><br><span class="line">[root@server ~]<span class="comment"># mkdir -p /opt/grafana/data/plugins/</span></span><br><span class="line">[root@server ~]<span class="comment"># cp -r /var/lib/grafana/plugins/alexanderzobnin-zabbix-app/ /opt/grafana/data/plugins/</span></span><br><span class="line">[root@server ~]<span class="comment"># ls /opt/grafana/data/plugins/</span></span><br><span class="line">alexanderzobnin-zabbix-app</span><br><span class="line">[root@server ~]<span class="comment"># chmod 777 /opt/grafana/data/plugins/ -R</span></span><br><span class="line">[root@server ~]<span class="comment"># systemctl start grafana-server</span></span><br><span class="line">[root@server ~]<span class="comment"># systemctl enable grafana-server</span></span><br><span class="line">[root@server ~]<span class="comment"># netstat -utpln |grep 3000</span></span><br><span class="line">tcp6       0      0 :::3000        :::*          LISTEN      42924/grafana-serve</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问测试<a href="http://192.168.2.1:3000，默认用户名admin，密码admin，在此是谷歌浏览器翻译过后的界面，大家可以自行下载谷歌浏览器，下载翻译插件，在此不做过多介绍；安装grafana；http://192.168.2.1:3000/login">http://192.168.2.1:3000，默认用户名admin，密码admin，在此是谷歌浏览器翻译过后的界面，大家可以自行下载谷歌浏览器，下载翻译插件，在此不做过多介绍；安装grafana；http://192.168.2.1:3000/login</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribrv1v6aj311m0np3zr.jpg" alt="image-20200619234606770"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribrxw7ehj311m0nmgni.jpg" alt="image-20200619234700036"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribs0jquwj311m0nnta7.jpg" alt="image-20200619234812921"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribs3votjj30wa0f2myi.jpg" alt="image-20200929143318582"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribs7p6yhj30wa0j442g.jpg" alt="image-20200929143339590"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribsbfpqwj30wa0j2q47.jpg" alt="image-20200929143357541"></p><p><strong>添加数据源</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribsfnaw9j30wd0hk764.jpg" alt="image-20200929143425562"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribsjdyu9j30ur0mqjv7.jpg" alt="image-20200929143444556"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribsm6exkj30ol0o9go0.jpg" alt="image-20200929143518789"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribsrxi9hj30q70bwjsc.jpg" alt="image-20200929143545762"></p><p><strong>创建仪表盘</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribswjceyj30t50d9ab0.jpg" alt="image-20200929143634589"></p><p><strong>创建仪表盘时指定显示的图形</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribszc4uvj30t80fydgr.jpg" alt="image-20200929143715473"></p><p><strong>选择数据源和图中需要显示的主机和主机的监控项</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribt23ixnj30wc0ktwhk.jpg" alt="image-20200929143752184"></p><p><strong>创建完，保存此仪表盘，输入仪表盘的名称</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribt4ypc7j30t60fq0uj.jpg" alt="image-20200929143840271"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gribt8n4wlj30wa0ad0tm.jpg" alt="image-20200929143856933"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Keepalived</title>
      <link href="/2021/06/15/Keepalived/"/>
      <url>/2021/06/15/Keepalived/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="keepalived讲解"><a href="#keepalived讲解" class="headerlink" title="keepalived讲解"></a>keepalived讲解</h1><h2 id="一、keepalived概述"><a href="#一、keepalived概述" class="headerlink" title="一、keepalived概述"></a>一、keepalived概述</h2><blockquote><p><strong>概述：</strong></p><p>keepalived起初为Lvs设计的一款强大的辅助工具，保证LB负载调度器的故障切换以及RS节点的健康状态检查，后续被应用到很多需要容错的场景下，keepalived自身基于VRRP协议–虚拟路由冗余协议，思科公有协议。</p></blockquote><h2 id="二、keepalived设计原理"><a href="#二、keepalived设计原理" class="headerlink" title="二、keepalived设计原理"></a>二、keepalived设计原理</h2><h3 id="2-1-为什么keepalived能够实现高可用呢？"><a href="#2-1-为什么keepalived能够实现高可用呢？" class="headerlink" title="2.1 为什么keepalived能够实现高可用呢？"></a>2.1 为什么keepalived能够实现高可用呢？</h3><ul><li>因为他用到了<strong>虚拟路由冗余协议(VRRP)</strong></li></ul><h3 id="2-2-keepalived有哪些设计模块？"><a href="#2-2-keepalived有哪些设计模块？" class="headerlink" title="2.2 keepalived有哪些设计模块？"></a>2.2 keepalived有哪些设计模块？</h3><blockquote><ol><li><strong>core模块</strong>           //为keepalived的核心组件，负责主进程的启动、维护以及全局配置文件的加载和解析</li><li><strong>check模块</strong>        //负责real server 节点池内的节点的健康检测</li><li><strong>VRRP模块</strong>        //在master与backup之间执行心跳检测</li></ol></blockquote><h3 id="2-3-keepalived的热备实现过程"><a href="#2-3-keepalived的热备实现过程" class="headerlink" title="2.3 keepalived的热备实现过程"></a>2.3 keepalived的热备实现过程</h3><ul><li><strong>将多个主机以软件的方式组成一个热备组，通过共有的虚拟ip（VIP）地址对外提供服务，同一时刻，热备组中只有一台主机在工作，别的主机冗余状态，当当前在线的主机失效时，其他冗余的主机会自动接替虚拟ip地址，继续提供服务，以保证架构的稳定性。</strong></li></ul><h2 id="三、VRRP协议"><a href="#三、VRRP协议" class="headerlink" title="三、VRRP协议"></a>三、VRRP协议</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><ul><li><p>VRRP(Virtual Router Redundancy Protocol)协议是用于实现路由器冗余的协议。</p></li><li><p>VRRP协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器IP(一个或多个)，而在路由器组内部，如果实际拥有这个对外IP的路由器如果工作正常的话就是MASTER，或者是通过算法选举产生，MASTER实现针对虚拟路由器IP的各种网络功能，如ARP请求，ICMP，以及数据的转发等；其他设备不拥有该IP，状态是BACKUP，除了接收MASTER的VRRP状态通告信息外，不执行对外的网络功能。当主机失效时，BACKUP将接管原先MASTER的网络功能。</p></li><li><p>配置VRRP协议时需要配置每个路由器的虚拟路由器ID(VRID)和优先权值，使用VRID将路由器进行分组，具有相同VRID值的路由器为同一个组，VRID是一个0～255的正整数；同一组中的路由器通过使用优先权值来选举MASTER，优先权大者为MASTER，优先权也是一个0～255的正整数。</p></li><li><p>VRRP协议使用多播数据来传输VRRP数据，VRRP数据使用特殊的虚拟源MAC地址发送数据而不是自身网卡的MAC地址，VRRP运行时只有MASTER路由器定时发送VRRP通告信息，表示MASTER工作正常以及虚拟路由器IP(组)，BACKUP只接收VRRP数据，不发送数据，如果一定时间内没有接收到MASTER的通告信息，各BACKUP将宣告自己成为MASTER，发送通告信息，重新进行MASTER选举状态。</p></li><li><p><strong>VRRP的工作过程为：</strong></p></li></ul><ol><li><p>虚拟路由器中的路由器根据优先级选举出Master。Master 路由器通过发送免费ARP 报文，将自己的虚拟MAC 地址通知给与它连接的设备或者主机，从而承担报文转发任务；</p></li><li><p>Master 路由器周期性发送VRRP 报文，以公布其配置信息（优先级等）和工作状况；</p></li><li><p>如果Master 路由器出现故障，虚拟路由器中的Backup 路由器将根据优先级重新选举新的Master；</p></li><li><p>虚拟路由器状态切换时，Master 路由器由一台设备切换为另外一台设备，新的Master 路由器只是简单地发送一个携带虚拟路由器的MAC  地址和虚拟IP地址信息的免费ARP 报文，这样就可以更新与它连接的主机或设备中的ARP 相关信息。网络中的主机感知不到Master  路由器已经切换为另外一台设备。</p></li><li><p>Backup 路由器的优先级高于Master 路由器时，由Backup 路由器的工作方式（抢占方式和非抢占方式）决定是否重新选举Master。</p></li></ol><h3 id="3-2-VRRP的几个术语"><a href="#3-2-VRRP的几个术语" class="headerlink" title="3.2 VRRP的几个术语"></a>3.2 VRRP的几个术语</h3><ul><li><strong>虚拟路由器：</strong>由一个Master路由器和多个Backup路由器组成。主机将虚拟路由器当作默认网关。</li><li><strong>虚拟路由器标识 VRID：</strong>虚拟路由器的标识。由相同VRID的一组路由器构成一个虚拟路由器。</li><li><strong>Master路由器：</strong>虚拟路由器中承担报文转发任务的路由器。</li><li><strong>Backup路由器：Master路由器出现故障时，能够代替Master路由器工作的路由器。</strong></li><li><strong>虚拟IP地址：</strong>虚拟路由器的IP地址。一个虚拟路由器可以拥有一个或多个IP地址。</li><li><strong>优先级：</strong>VRRP根据优先级来确定虚拟路由器中每台路由器的地位。</li><li><strong>虚拟MAC地址：</strong>一个虚拟路由器拥有一个虚拟MAC地址。虚拟MAC地址的格式为00-00-5E-00-01-{VRID}。通常情况下，虚拟路由器回应ARP请求使用的是虚拟MAC地址，只有虚拟路由器做特殊配置的时候，才回应接口的真实MAC地址。</li></ul><h2 id="四、keepalived架构图"><a href="#四、keepalived架构图" class="headerlink" title="四、keepalived架构图"></a>四、keepalived架构图</h2><h3 id="4-1-示图"><a href="#4-1-示图" class="headerlink" title="4.1 示图"></a>4.1 示图</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griazebulhj30m90f6dkt.jpg" alt="image-20200516151732540"></p><h3 id="4-2-各组件说明"><a href="#4-2-各组件说明" class="headerlink" title="4.2 各组件说明"></a>4.2 各组件说明</h3><table><thead><tr><th>组件说明</th><th></th></tr></thead><tbody><tr><td>checkers</td><td>检查后端RS的健康状态，并且也能管理后端RS，该组件使用独立的子进程负责，由父进程管理。</td></tr><tr><td>VRRPstack</td><td>基于VRRP协议实现高可用的组件，它能够提供故障转移功能，并且能单独使用，即不对后端做健康检查，运行为一个独立的子进程由父进程管理</td></tr><tr><td>System Call</td><td>提供读取自定义脚本的功能</td></tr><tr><td>IPVS wrapper</td><td>能够读取配置文件的规则，通过系统调用直接管理ipvs</td></tr><tr><td>NetlinkReflector</td><td>用于管理和检查VIP地址</td></tr><tr><td>Watch Dog</td><td>用于检查Checkers和VRRPstack进程</td></tr></tbody></table><h2 id="五、Keepalived-实现双机热备"><a href="#五、Keepalived-实现双机热备" class="headerlink" title="五、Keepalived 实现双机热备"></a>五、Keepalived 实现双机热备</h2><ul><li><strong>案例环境</strong></li></ul><table><thead><tr><th>系统类型</th><th>IP地址</th><th>主机名</th><th>软件包</th></tr></thead><tbody><tr><td>Centos7</td><td>192.168.2.1</td><td>keep01</td><td>keepalived-1.2.13.tar.gz</td></tr><tr><td>Centos7</td><td>192.168.2.2</td><td>keep02</td><td>keepalived-1.2.13.tar.gz</td></tr></tbody></table><h3 id="5-1-两台节点上部署httpd服务"><a href="#5-1-两台节点上部署httpd服务" class="headerlink" title="5.1 两台节点上部署httpd服务"></a>5.1 两台节点上部署httpd服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//keep01节点</span><br><span class="line">[root@keep01 ~]<span class="comment"># yum -y install httpd</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># systemctl start httpd;systemctl enable httpd</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># netstat -utpln |grep 80</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># cat &lt;&lt;END &gt; /var/www/html/index.html</span></span><br><span class="line">&lt;h1&gt; 192.168.2.1 &lt;/h1&gt;</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">//keep02节点</span><br><span class="line">[root@keep02 ~]<span class="comment"># yum -y install httpd</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># systemctl start httpd;systemctl enable httpd</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># netstat -utpln |grep 80</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># cat &lt;&lt;END &gt; /var/www/html/index.html</span></span><br><span class="line">&lt;h1&gt; 192.168.2.2 &lt;/h1&gt;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><ul><li><strong>访问查看一下</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griazlgdi6j30q402paa0.jpg" alt="image-20200516172503960"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griazu0vdhj30pi02rwej.jpg" alt="image-20200516172530625"></p><h3 id="5-2-两台节点上安装keepalived（操作相同）"><a href="#5-2-两台节点上安装keepalived（操作相同）" class="headerlink" title="5.2 两台节点上安装keepalived（操作相同）"></a>5.2 两台节点上安装keepalived（操作相同）</h3><h4 id="5-2-1-下载官方的软件包并解压"><a href="#5-2-1-下载官方的软件包并解压" class="headerlink" title="5.2.1 下载官方的软件包并解压"></a>5.2.1 下载官方的软件包并解压</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># wget http://www.keepalived.org/software/keepalived-1.2.13.tar.gz</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># tar -xf keepalived-1.2.13.tar.gz -C /usr/src/</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># cd /usr/src/keepalived-1.2.13/</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-YUM安装依赖包"><a href="#5-2-2-YUM安装依赖包" class="headerlink" title="5.2.2 YUM安装依赖包"></a>5.2.2 YUM安装依赖包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//安装内核开发包，popt支持库等工具；如果安装不上，请使用阿里的yum源</span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; yum makecache</span></span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># yum -y install kernel-devel openssl-devel popt-devel</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-配置、编译、安装"><a href="#5-2-3-配置、编译、安装" class="headerlink" title="5.2.3 配置、编译、安装"></a>5.2.3 配置、编译、安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># ./configure --prefix=/usr/local/keepalived</span></span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># make &amp;&amp;make install &amp;&amp; cd</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1griazzora6j30sb0c5q3j.jpg" alt="image-20200516155220730"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib01zaldj30s806nwf1.jpg" alt="image-20200516155306716"></p><h4 id="5-2-4-安装后产生的目录"><a href="#5-2-4-安装后产生的目录" class="headerlink" title="5.2.4 安装后产生的目录"></a>5.2.4 安装后产生的目录</h4><ul><li>安装完成后会在keepalived家目录生成这 bin  etc  sbin  share 这 4 个目录。</li><li>其中一个是主配置文件(keepalived.conf)在 /usr/local/keepalived/etc/keepalived/ 这个路径下</li><li>还有一个是启动文件(keepalived)在 /usr/local/keepalived/etc/rc.d/init.d/ 这个路径下</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib061pdxj30po02jt8n.jpg" alt="image-20200516155534540"></p><h4 id="5-2-5-将上面相关的文件拷贝到对应目录下"><a href="#5-2-5-将上面相关的文件拷贝到对应目录下" class="headerlink" title="5.2.5 将上面相关的文件拷贝到对应目录下"></a>5.2.5 将上面相关的文件拷贝到对应目录下</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//创建keepalived主配置文件目录</span><br><span class="line">[root@keep01 ~]<span class="comment"># mkdir -p /etc/keepalived</span></span><br><span class="line">//主配置文件</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span></span><br><span class="line">//启动时需要加载的配置文件</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span></span><br><span class="line">//服务的控制脚本</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</span></span><br><span class="line">//优化keepalived的命令</span><br><span class="line">[root@keep01 ~]<span class="comment"># ln -s /usr/local/keepalived/sbin/* /usr/bin/</span></span><br><span class="line">//给启动脚本指定权限</span><br><span class="line">[root@keep01 ~]<span class="comment"># chmod 755 /etc/init.d/keepalived</span></span><br><span class="line">//查看一下keepalived版本</span><br><span class="line">[root@keep02 ~]<span class="comment"># keepalived -v</span></span><br><span class="line">Keepalived v1.2.13 (05/16,2020)</span><br></pre></td></tr></table></figure><h4 id="5-2-6-配置文件详解"><a href="#5-2-6-配置文件详解" class="headerlink" title="5.2.6 配置文件详解"></a>5.2.6 配置文件详解</h4><ul><li><p>默认的配置文件中，使用第三方smtp服务器，但这在现实中几乎没有意义（需要验证的原因），我们将其指定为localhost, 将通知信息的发送交给本地sendmail服务处理。查阅说明文档得知route_id配置是为了标识当前节点，我将其设置为NodeA。当然两个节点的此项设置可相同，也可不相同。</p></li><li><p>Keepalived的配置文件分为3部分：</p><ul><li>全局定义本分</li><li>VRRPD部分</li><li>virtual_server部分</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;                                   <span class="comment">#全局定义部分</span></span><br><span class="line">    notification_email &#123;                        <span class="comment">#设置报警邮件地址，可设置多个</span></span><br><span class="line">        acassen@firewall.loc                    <span class="comment">#接收通知的邮件地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from test0@163.com       <span class="comment">#设置 发送邮件通知的地址</span></span><br><span class="line">    smtp_server smtp.163.com                    <span class="comment">#设置 smtp server 地址，可是ip或域名.可选端口号 （默认25）</span></span><br><span class="line">    smtp_connect_timeout 30                     <span class="comment">#设置 连接 smtp server的超时时间</span></span><br><span class="line">    router_id LVS_DEVEL                         <span class="comment">#主机标识，用于邮件通知</span></span><br><span class="line">    vrrp_skip_check_adv_addr                   </span><br><span class="line">    vrrp_strict                                 <span class="comment">#严格执行VRRP协议规范，此模式不支持节点单播</span></span><br><span class="line">    vrrp_garp_interval 0                       </span><br><span class="line">    vrrp_gna_interval 0     </span><br><span class="line">    script_user keepalived_script               <span class="comment">#指定运行脚本的用户名和组。默认使用用户的默认组。如未指定，默认为keepalived_script 用户，如无此用户，则使用root</span></span><br><span class="line">    enable_script_security                      <span class="comment">#如过路径为非root可写，不要配置脚本为root用户执行。</span></span><br><span class="line">&#125;       </span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx_service &#123;                 <span class="comment">#VRRP 脚本声明</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/chk_nginx.sh&quot;</span>       <span class="comment">#周期性执行的脚本</span></span><br><span class="line">    interval 3                                  <span class="comment">#运行脚本的间隔时间，秒</span></span><br><span class="line">    weight -20                                  <span class="comment">#权重，priority值减去此值要小于备服务的priority值</span></span><br><span class="line">    fall 3                                      <span class="comment">#检测几次失败才为失败，整数</span></span><br><span class="line">    rise 2                                      <span class="comment">#检测几次状态为正常的，才确认正常，整数</span></span><br><span class="line">    user keepalived_script                      <span class="comment">#执行脚本的用户或组</span></span><br><span class="line">&#125;                                             </span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;                            <span class="comment">#vrrp 实例部分定义，VI_1自定义名称</span></span><br><span class="line">    state MASTER                                <span class="comment">#指定 keepalived 的角色，必须大写 可选值：MASTER|BACKUP</span></span><br><span class="line">    interface ens33                             <span class="comment">#网卡设置，lvs需要绑定在网卡上，realserver绑定在回环口。区别：lvs对访问为外，realserver为内不易暴露本机信息</span></span><br><span class="line">    virtual_router_id 51                        <span class="comment">#虚拟路由标识，是一个数字，同一个vrrp 实例使用唯一的标识，MASTER和BACKUP 的 同一个 vrrp_instance 下 这个标识必须保持一致</span></span><br><span class="line">    priority 100                                <span class="comment">#定义优先级，数字越大，优先级越高。</span></span><br><span class="line">    advert_int 1                                <span class="comment">#设定 MASTER 与 BACKUP 负载均衡之间同步检查的时间间隔，单位为秒，两个节点设置必须一样</span></span><br><span class="line">    authentication &#123;                            <span class="comment">#设置验证类型和密码，两个节点必须一致</span></span><br><span class="line">        auth_type PASS                        </span><br><span class="line">        auth_pass 1111                        </span><br><span class="line">    &#125;                                         </span><br><span class="line">    virtual_ipaddress &#123;                         <span class="comment">#设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个</span></span><br><span class="line">        192.168.119.130                       </span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;                              <span class="comment">#脚本监控状态</span></span><br><span class="line">        chk_nginx_service                       <span class="comment">#可加权重，但会覆盖声明的脚本权重值。chk_nginx_service weight -20</span></span><br><span class="line">    &#125;</span><br><span class="line">        notify_master <span class="string">&quot;/etc/keepalived/shell.sh start&quot;</span>     <span class="comment">#当前节点成为master时，通知脚本执行任务</span></span><br><span class="line">        notify_backup <span class="string">&quot;/etc/keepalived/shell.sh stop&quot;</span>      <span class="comment">#当前节点成为backup时，通知脚本执行任务</span></span><br><span class="line">        notify_fault  <span class="string">&quot;/etc/keepalived/shell.sh stop&quot;</span>      <span class="comment">#当当前节点出现故障，执行的任务; </span></span><br><span class="line">&#125;                                             </span><br><span class="line"></span><br><span class="line">virtual_server 192.168.119.130 80  &#123;     <span class="comment">#定义RealServer对应的VIP及服务端口，IP和端口之间用空格隔开</span></span><br><span class="line">    delay_loop 6                         <span class="comment">#每隔6秒查询realserver状态</span></span><br><span class="line">    lb_algo rr                           <span class="comment">#后端调试算法（load balancing algorithm）</span></span><br><span class="line">    lb_kind DR                           <span class="comment">#LVS调度类型NAT/DR/TUN</span></span><br><span class="line">    <span class="comment">#persistence_timeout 60              #同一IP的连接60秒内被分配到同一台realserver</span></span><br><span class="line">    protocol TCP                         <span class="comment">#用TCP协议检查realserver状态</span></span><br><span class="line">    real_server 192.168.119.120 80 &#123;          </span><br><span class="line">        weight 1                         <span class="comment">#权重，最大越高，lvs就越优先访问</span></span><br><span class="line">        TCP_CHECK &#123;                      <span class="comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span></span><br><span class="line">            connect_timeout 10           <span class="comment">#10秒无响应超时</span></span><br><span class="line">            retry 3                      <span class="comment">#重连次数3次</span></span><br><span class="line">            delay_before_retry 3         <span class="comment">#重连间隔时间</span></span><br><span class="line">            connect_port 80              <span class="comment">#健康检查realserver的端口</span></span><br><span class="line">        &#125;                                     </span><br><span class="line">    &#125;                                         </span><br><span class="line">    real_server 192.168.119.121 80 &#123;          </span><br><span class="line">        weight 1                         <span class="comment">#权重，最大越高，lvs就越优先访问</span></span><br><span class="line">        TCP_CHECK &#123;                      <span class="comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span></span><br><span class="line">            connect_timeout 10           <span class="comment">#10秒无响应超时</span></span><br><span class="line">            retry 3                      <span class="comment">#重连次数3次</span></span><br><span class="line">            delay_before_retry 3         <span class="comment">#重连间隔时间</span></span><br><span class="line">            connect_port 80              <span class="comment">#健康检查realserver的端口</span></span><br><span class="line">        &#125;                                     </span><br><span class="line">    &#125;                                         </span><br><span class="line">&#125;                                             </span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;                     <span class="comment">#vrrp 实例部分定义，VI_1自定义名称</span></span><br><span class="line">    state   BACKUP                       <span class="comment">#指定 keepalived 的角色，必须大写 可选值：MASTER|BACKUP 分别表示（主|备）</span></span><br><span class="line">    interface ens33                      <span class="comment">#网卡设置，绑定vip的子接口，lvs需要绑定在网卡上，realserver绑定在回环口。区别：lvs对访问为外，realserver为内不易暴露本机信息</span></span><br><span class="line">    virtual_router_id 52                 <span class="comment">#虚拟路由标识，是一个数字，同一个vrrp 实例使用唯一的标识，MASTER和BACKUP 的 同一个 vrrp_instance 下 这个标识必须保持一致</span></span><br><span class="line">    priority 90                          <span class="comment">#定义优先级，数字越大，优先级越高。</span></span><br><span class="line">    advert_int 1                         <span class="comment">#设定 MASTER 与 BACKUP 负载均衡之间同步检查的时间间隔，单位为秒，两个节点设置必须一样</span></span><br><span class="line">    authentication &#123;                     <span class="comment">#设置验证类型和密码，两个节点必须一致</span></span><br><span class="line">        auth_type PASS                        </span><br><span class="line">        auth_pass 1111                        </span><br><span class="line">    &#125;                                         </span><br><span class="line">    virtual_ipaddress &#123;                  <span class="comment">#设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个</span></span><br><span class="line">        192.168.119.131                       </span><br><span class="line">    &#125;                                         </span><br><span class="line">&#125;                                             </span><br><span class="line"></span><br><span class="line">virtual_server 192.168.119.131 80 &#123;      <span class="comment">#定义RealServer对应的VIP及服务端口，IP和端口之间用空格隔开</span></span><br><span class="line">    delay_loop 6                         <span class="comment">#每隔6秒查询realserver状态</span></span><br><span class="line">    lb_algo rr                           <span class="comment">#后端调试算法（load balancing algorithm）</span></span><br><span class="line">    lb_kind DR                           <span class="comment">#LVS调度类型NAT/DR/TUN</span></span><br><span class="line">    <span class="comment">#persistence_timeout 60              #同一IP的连接60秒内被分配到同一台realserver</span></span><br><span class="line">    protocol TCP                         <span class="comment">#用TCP协议检查realserver状态</span></span><br><span class="line">    real_server 192.168.119.120 80 &#123;          </span><br><span class="line">        weight 1                         <span class="comment">#权重，最大越高，lvs就越优先访问</span></span><br><span class="line">        TCP_CHECK &#123;                      <span class="comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span></span><br><span class="line">            connect_timeout 10           <span class="comment">#10秒无响应超时</span></span><br><span class="line">            retry 3                      <span class="comment">#重连次数3次</span></span><br><span class="line">            delay_before_retry 3         <span class="comment">#重连间隔时间</span></span><br><span class="line">            connect_port 80              <span class="comment">#健康检查realserver的端口</span></span><br><span class="line">        &#125;                                     </span><br><span class="line">    &#125;                                         </span><br><span class="line">    real_server 192.168.119.121 80 &#123;          </span><br><span class="line">        weight 1                         <span class="comment">#权重，最大越高，lvs就越优先访问</span></span><br><span class="line">        TCP_CHECK &#123;                      <span class="comment">#keepalived的健康检查方式HTTP_GET | SSL_GET | TCP_CHECK | SMTP_CHECK | MISC</span></span><br><span class="line">            connect_timeout 10           <span class="comment">#10秒无响应超时</span></span><br><span class="line">            retry 3                      <span class="comment">#重连次数3次</span></span><br><span class="line">            delay_before_retry 3         <span class="comment">#重连间隔时间</span></span><br><span class="line">            connect_port 80              <span class="comment">#健康检查realserver的端口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-配置keep01的master主节点"><a href="#5-3-配置keep01的master主节点" class="headerlink" title="5.3 配置keep01的master主节点"></a>5.3 配置keep01的master主节点</h3><ul><li>修改keepalived.conf配置文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id kp01                   <span class="comment">#本服务器的名称，若环境中有多个keepalived时，此名称不能一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;                <span class="comment">#定义VRRP热备实例，每一个keep组都不同</span></span><br><span class="line">    state MASTER                    <span class="comment">#指定keepalived的角色，MASTER表示此主机是主服务器，BACKUP表示此主机是备用服务器</span></span><br><span class="line">    interface ens32                 <span class="comment">#承载VIP地址的物理接口</span></span><br><span class="line">    virtual_router_id 51            <span class="comment">#虚拟路由器的ID号，每一个keep组都不同</span></span><br><span class="line">    priority 100                    <span class="comment">#优先级，数值越大优先级越高，MASTER的优先级必须大于BACKUP的优先级</span></span><br><span class="line">    advert_int 1                    <span class="comment">#设定MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line">    authentication &#123;                <span class="comment">#认证信息</span></span><br><span class="line">        auth_type PASS              <span class="comment">#设置验证类型，主要有PASS和AH两种</span></span><br><span class="line">        auth_pass 123123            <span class="comment">#设置验证密码，在同一个vrrp_instance下，MASTER与BACKUP必须使用相同的密码才能正常通信</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;             <span class="comment">#设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个</span></span><br><span class="line">        192.168.2.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.2.100 80 &#123;   <span class="comment">#设置虚拟服务器，需要指定虚拟IP地址和服务端口</span></span><br><span class="line">    delay_loop 3                    <span class="comment">#每隔3秒检查一次real_server状态</span></span><br><span class="line">    lb_algo wrr                     <span class="comment">#指定lvs的调度算法（如若不结合LVS请删掉此两个配置）</span></span><br><span class="line">    lb_kind DR                      <span class="comment">#设置LVS实现负载均衡的机制，有NAT、TUN、DR三个模式可选</span></span><br><span class="line">    persistence_timeout 60          <span class="comment">#会话保持时间，单位是秒。这个选项对动态网页是非常有用的，为集群系统中的session共享提供了一个很好的解决方案。有了这个会话保持功能，用户的请求会被一直分发到某个服务节点，直到超过这个会话的保持时间。注意:这个会话保持时间是最大无响应超时时间，也就是说，用户在操作动态页面时，如果50秒内没有执行任何操作,那么接下来的操作会被分发到另外的节点,但是如果用户一直在操作动态页面，则不受50秒的时间限制。</span></span><br><span class="line">    protocol TCP                    <span class="comment">#指定转发协议类型，有TCP和UDP两种</span></span><br><span class="line"></span><br><span class="line">    real_server 192.168.2.1 80 &#123;    <span class="comment">#配置服务节点，需要指定real server的真实IP地址和端口</span></span><br><span class="line">        weight 3                    <span class="comment">#配置服务节点的权值,权值大小用数字表示,数字越大,权值越高,设置权值大小可以为不同性能的服务器分配不同的负载,可以为性能高的服务器设置较高的权值，而为性能较低的服务器设置相对较低的权值，这样才能合理地利用和分配系统资源。</span></span><br><span class="line">        notify_down /etc/keepalived/check.sh     <span class="comment">#指定节点失效后，采用的脚本，notify_up表示节点正常后，采用的脚本；##健康检查方式一共有|HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK|这些。</span></span><br><span class="line">        TCP_CHECK &#123;                 <span class="comment">#realserver的状态检测设置部分，单位是秒</span></span><br><span class="line">            connect_timeout 10      <span class="comment">#连接超时时间</span></span><br><span class="line">            nb_get_retry 3          <span class="comment">#重连次数</span></span><br><span class="line">            delay_before_retry 3    <span class="comment">#重连间隔时间</span></span><br><span class="line">            connect_port 80         <span class="comment">#健康检查端口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写配置文件中指定的check.sh采用脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vim /etc/keepalived/check.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/etc/init.d/keepalived stop</span><br><span class="line">IPV4=`ip a|grep ens32|grep inet|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$IPV4</span> (httpd) is down on <span class="subst">$(date +%F-%T)</span>&quot;</span> &gt;&gt;/root/check_httpd.log</span><br><span class="line">:wq</span><br><span class="line">[root@keep01 ~]<span class="comment"># chmod 777 /etc/keepalived/check.sh</span></span><br></pre></td></tr></table></figure><ul><li>启动主keepalived 并 检查虚拟VIP是否在他这里</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># /etc/init.d/keepalived startStarting keepalived (via systemctl):                       [  确定  ][root@keep01 ~]# ip a |grep 192.168.2.100    inet 192.168.2.100/32 scope global ens32</span></span><br></pre></td></tr></table></figure><h3 id="5-4-配置keep02上backup从节点"><a href="#5-4-配置keep02上backup从节点" class="headerlink" title="5.4 配置keep02上backup从节点"></a>5.4 配置keep02上backup从节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@keep02 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id kp02&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens32    virtual_router_id 51    priority 99    advert_int 1    authentication &#123;        auth_type PASS        auth_pass 123123    &#125;    virtual_ipaddress &#123;        192.168.2.100    &#125;&#125;virtual_server 192.168.2.100 80 &#123;    delay_loop 3    lb_algo wrr    lb_kind DR    persistence_timeout 60    protocol TCP    real_server 192.168.2.2 80 &#123;        weight 3        notify_down /etc/keepalived/check.sh        TCP_CHECK &#123;            connect_timeout 10            nb_get_retry 3            delay_before_retry 3            connect_port 80        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>编写配置文件中指定的check.sh采用脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@keep02 ~]<span class="comment"># vim /etc/keepalived/check.sh#!/bin/bash/etc/init.d/keepalived stopIPV4=`ip a|grep ens32|grep inet|awk &#x27;&#123;print $2&#125;&#x27;|awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;`echo &quot;$IPV4 (httpd) is down on $(date +%F-%T)&quot; &gt;&gt;/root/check_httpd.log:wq[root@keep02 ~]# chmod 777 /etc/keepalived/check.sh</span></span><br></pre></td></tr></table></figure><ul><li>启动主keepalived 并 检查虚拟VIP是否在他这里</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@keep02 ~]<span class="comment"># /etc/init.d/keepalived startReloading systemd:                                         [  确定  ]Starting keepalived (via systemctl):                       [  确定  ][root@keep02 ~]# ip a |grep 192.168.2.100#因为他是备的身份，所以只要在主没出现问题的时候，VIP都不会到他这里来</span></span><br></pre></td></tr></table></figure><ul><li>启动之后会有三个进程</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib0emgwaj60t103bt8x02.jpg" alt="image-20200516224640086"></p><h3 id="5-5-客户端访问测试双机热备的效果"><a href="#5-5-客户端访问测试双机热备的效果" class="headerlink" title="5.5 客户端访问测试双机热备的效果"></a>5.5 客户端访问测试双机热备的效果</h3><ul><li><a href="http://192.168.2.100/">http://192.168.2.100/</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib0icjc3j30ra02naa0.jpg" alt="image-20200516181739403"></p><ul><li><strong>当master的httpd服务down掉后</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib0qa1k6j30ra06gt94.jpg" alt="image-20200516181852798"></p><ul><li><strong>查看keep01的keepalived的状态</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib0vvqhjj30t804ht8w.jpg" alt="image-20200516182320911"></p><ul><li><strong>查看有没有root下有没有生产check_httpd.log日志文件</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib11hsssj30pn02hdft.jpg" alt="image-20200516182502149"></p><ul><li><strong>此时再回到keep02从主机上查看VIP是否会自动漂移过来</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib16q2v1j30pf02mdfu.jpg" alt="image-20200516181926847"></p><ul><li>在访问 <a href="http://192.168.2.100/">http://192.168.2.100/</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib1cwctgj30ro02uaa0.jpg" alt="image-20200516182545178"></p><p><strong>可以看到，这里已经实现了双机热备的功能~~~</strong></p><ul><li><strong>将keep01节点的http和keepalived服务重新启动</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># /etc/init.d/keepalived</span></span><br><span class="line">startStarting keepalived (via systemctl):                       [  确定  ]</span><br></pre></td></tr></table></figure><ul><li><strong>验证虚拟VIP在主keepalived恢复后是否还会飘过来</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib1kb2oej30o802h74a.jpg" alt="image-20200516183004016"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib1pebvdj30o901t746.jpg" alt="image-20200516183015779"></p><p><strong>可以看到，当主keepalived恢复后，VIP会自动再回到他的上面来，下面再来访问一下浏览器</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib1u53y4j30px02paa0.jpg" alt="image-20200516183133962"></p><ul><li><strong>上述步骤实现了keepalived在real server节点池中进行了四层健康监测(传输层，基于协议或者端口号)，下面展示keepalived如何对节点池中进行七层健康监测(应用层)</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id r1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script_check_apache &#123;</span><br><span class="line">   script/etc/keepalived/check_apache.sh</span><br><span class="line">   interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123123</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.100</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_apache</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.2.100 80 &#123;</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.2.1 80 &#123;</span><br><span class="line">        weight 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@keep01 ~]<span class="comment"># vi /etc/keepalived/check_apache.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">Count1= `netstat -anpt|grep -v grep|grep httpd|wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$Count1</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">       /etc/init.d/keepalived stop</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务就行了</span></span><br></pre></td></tr></table></figure><h2 id="六、脑裂是什么？【重点】"><a href="#六、脑裂是什么？【重点】" class="headerlink" title="六、脑裂是什么？【重点】"></a>六、脑裂是什么？【重点】</h2><ul><li><strong>脑裂：经常会出现在高可用软件身上，什么是脑裂？也就是主从上都有vip，那是怎么导致<br>的这种情况？网络波动、抖动导致的。</strong></li><li><strong>怎么解决这种问题？</strong><ul><li>直接重启keepalived服务【不建议】</li><li>给中从做一个机制策略，仲裁，给中从写入一个脚本，让他俩定时ping自己的网关，以但一方ping不通的时候，就把这一方的keepalived服务停掉。【建议】</li></ul></li></ul><h1 id="keepalived实战案例"><a href="#keepalived实战案例" class="headerlink" title="keepalived实战案例"></a>keepalived实战案例</h1><h2 id="案例（一）"><a href="#案例（一）" class="headerlink" title="案例（一）"></a>案例（一）</h2><ul><li><p><strong>LVS+Keepalived实现高可用负载均衡</strong></p></li><li><p><strong>架构图如下：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib22je2cj60k80bbmzu02.jpg" alt="image-20200516200300178"></p><ul><li><strong>环境准备</strong></li></ul><table><thead><tr><th>主机名 / 角色</th><th>操作系统</th><th>IP地址</th><th>软件包</th></tr></thead><tbody><tr><td>keep01 / LB-MASTER</td><td>Centos7.4_3.10 X86</td><td>192.168.1.1</td><td>keepalived-1.2.13.tar.gz</td></tr><tr><td>keep02 / LB-BACKUP</td><td>Centos7.4_3.10 X86</td><td>192.168.1.2</td><td>keepalived-1.2.13.tar.gz</td></tr><tr><td>web01 / RS-WEBSERVER</td><td>Centos7.4_3.10 X86</td><td>192.168.1.3</td><td>apache或者nginx</td></tr><tr><td>web02 / RS-WEBSERVER</td><td>Centos7.4_3.10 X86</td><td>192.168.1.4</td><td>apache或者nginx</td></tr><tr><td>client01 / 测试</td><td>Centos7.4_3.10 X86</td><td>192.168.1.5</td><td>curl 或者 wget</td></tr></tbody></table><h3 id="1-在两台web主机上安装httpd服务"><a href="#1-在两台web主机上安装httpd服务" class="headerlink" title="1. 在两台web主机上安装httpd服务"></a>1. 在两台web主机上安装httpd服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd</span><br><span class="line">systemctl start httpd;systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">[root@web01 ~]<span class="comment"># echo &#x27;&lt;h1&gt; RS-web01_192.168.2.3 &lt;/h1&gt;&#x27; &gt; /var/www/html/index.html</span></span><br><span class="line">[root@web02 ~]<span class="comment"># echo &#x27;&lt;h1&gt; RS-web02_192.168.2.4 &lt;/h1&gt;&#x27; &gt; /var/www/html/index.html</span></span><br></pre></td></tr></table></figure><h3 id="2-在两台keep主机上安装keepalived和ipvsadm管理工具（相同配置）"><a href="#2-在两台keep主机上安装keepalived和ipvsadm管理工具（相同配置）" class="headerlink" title="2. 在两台keep主机上安装keepalived和ipvsadm管理工具（相同配置）"></a>2. 在两台keep主机上安装keepalived和ipvsadm管理工具（相同配置）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># wget http://www.keepalived.org/software/keepalived-1.2.13.tar.gz</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># tar -xf keepalived-1.2.13.tar.gz -C /usr/src/</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># cd /usr/src/keepalived-1.2.13/</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//安装内核开发包，popt支持库等工具；如果安装不上，请使用阿里的yum源</span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; yum makecache</span></span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># yum -y install kernel-devel openssl-devel popt-devel</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># ./configure --prefix=/usr/local/keepalived</span></span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># make &amp;&amp;make install &amp;&amp; cd</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//创建keepalived主配置文件目录</span><br><span class="line">[root@keep01 ~]<span class="comment"># mkdir -p /etc/keepalived</span></span><br><span class="line">//主配置文件</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span></span><br><span class="line">//启动时需要加载的配置文件</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span></span><br><span class="line">//服务的控制脚本</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</span></span><br><span class="line">//优化keepalived的命令</span><br><span class="line">[root@keep01 ~]<span class="comment"># ln -s /usr/local/keepalived/sbin/* /usr/bin/</span></span><br><span class="line">//给启动脚本指定权限</span><br><span class="line">[root@keep01 ~]<span class="comment"># chmod 755 /etc/init.d/keepalived</span></span><br><span class="line">//查看一下keepalived版本</span><br><span class="line">[root@keep02 ~]<span class="comment"># keepalived -v</span></span><br><span class="line">Keepalived v1.2.13 (05/16,2020)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在LVS集群环境中应用时，也需要用到ipvsadm管理工具</span><br><span class="line">[root@keep01 ~]<span class="comment"># yum install -y ipvsadm</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br></pre></td></tr></table></figure><h3 id="3-配置MASTER调度器（keep01）"><a href="#3-配置MASTER调度器（keep01）" class="headerlink" title="3. 配置MASTER调度器（keep01）"></a>3. 配置MASTER调度器（keep01）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id kp01_2.1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123123</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.100 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.2.100 80 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    <span class="comment">#persistence_timeout 60      #这里就不要开启持久连接了，为了更方便的查看负载均和的效果</span></span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.2.3 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.2.4 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-配置BACKUP调度器（keep02）"><a href="#4-配置BACKUP调度器（keep02）" class="headerlink" title="4. 配置BACKUP调度器（keep02）"></a>4. 配置BACKUP调度器（keep02）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># scp /etc/keepalived/keepalived.conf 192.168.2.2:/etc/keepalived/</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2ajcgpj30uv0gaaas.jpg" alt="image-20200516190822068"></p><h3 id="5-接下来启动lvs-和-keepalived"><a href="#5-接下来启动lvs-和-keepalived" class="headerlink" title="5. 接下来启动lvs 和 keepalived"></a>5. 接下来启动lvs 和 keepalived</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//启动keep01的lvs和keepalived</span><br><span class="line">[root@keep01 ~]<span class="comment"># modprobe ip_vs                          //#加载ip_vs模块（启动lvs）</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># lsmod |grep ip_vs                       //查看加载的模块是否成功</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># echo &quot;modprobe ip_vs&quot; &gt;&gt;/etc/rc.local   //加入开机启动项</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># chmod +x /etc/rc.d/rc.local</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># /etc/init.d/keepalived start            //启动keepalived</span></span><br><span class="line"></span><br><span class="line">//启动keep02的lvs和keepalived</span><br><span class="line">[root@keep02 ~]<span class="comment"># modprobe ip_vs</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># lsmod |grep ip_vs</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># echo &quot;modprobe ip_vs&quot; &gt;&gt;/etc/rc.local</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># chmod +x /etc/rc.d/rc.local</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># /etc/init.d/keepalived start</span></span><br></pre></td></tr></table></figure><h3 id="6-在两台keep节点上查看一下虚拟VIP"><a href="#6-在两台keep节点上查看一下虚拟VIP" class="headerlink" title="6. 在两台keep节点上查看一下虚拟VIP"></a>6. 在两台keep节点上查看一下虚拟VIP</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2f2r9zj30qi02ndfu.jpg" alt="image-20200516191216485"></p><ul><li><strong>以上图中可以看到vip地址已经承载到了这块网卡上，接下来启动从服务器查看IP地址</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2jbq66j30qf01va9y.jpg" alt="image-20200516191228116"></p><ul><li><strong>以上图中可以看到从服务器上面没有vip地址的，那么就是正常的，因为它是老二，是一个备用服务器，啥时候等主服务器挂了那么它就会自动继承主服务器该做的事情。</strong></li></ul><h3 id="7-在两台keep节点上查看一下LVS集群转发情况"><a href="#7-在两台keep节点上查看一下LVS集群转发情况" class="headerlink" title="7. 在两台keep节点上查看一下LVS集群转发情况"></a>7. 在两台keep节点上查看一下LVS集群转发情况</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2pzbjmj30rm06raag.jpg" alt="image-20200516212435164"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2u6humj30t006rmxk.jpg" alt="image-20200516212451664"></p><h3 id="8-在两台RS上编写realserver-sh脚本"><a href="#8-在两台RS上编写realserver-sh脚本" class="headerlink" title="8. 在两台RS上编写realserver.sh脚本"></a>8. 在两台RS上编写realserver.sh脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在两台RS上编写以下脚本文件realserver.sh</span></span><br><span class="line">vim /opt/realserver.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">VIP=192.168.2.100</span><br><span class="line"></span><br><span class="line"><span class="comment">#/etc/rc.d/init.d/functions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">       /sbin/ifconfig lo:0 <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask 255.255.255.255 up</span><br><span class="line">       /sbin/route add -host <span class="variable">$VIP</span> dev lo:0</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">       sysctl -p &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;RealServer Start OK&quot;</span></span><br><span class="line">       ;;</span><br><span class="line">stop)</span><br><span class="line">       /sbin/ifconfig lo:0 down</span><br><span class="line">       /sbin/route del <span class="variable">$VIP</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;RealServer Stoped&quot;</span></span><br><span class="line">       ;;</span><br><span class="line">*)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop&#125;&quot;</span></span><br><span class="line">       <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h3 id="9-在两台RS上分别执行脚本"><a href="#9-在两台RS上分别执行脚本" class="headerlink" title="9. 在两台RS上分别执行脚本"></a>9. 在两台RS上分别执行脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># bash /opt/realserver.sh start</span></span><br><span class="line">RealServer Start OK</span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># bash /opt/realserver.sh start</span></span><br><span class="line">RealServer Start OK</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2yc7j6j30ty0cbzl3.jpg" alt="image-20200516213813759"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib2zsdz2j30t50c93zc.jpg" alt="image-20200516213926308"></p><h3 id="10-客户端测试负载均衡"><a href="#10-客户端测试负载均衡" class="headerlink" title="10. 客户端测试负载均衡"></a>10. 客户端测试负载均衡</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib340ibkj30se06kwew.jpg" alt="image-20200516220803009"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib36rc0rj30qz02sq2z.jpg" alt="image-20200516220824058"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib3axli1j30qm02tmx7.jpg" alt="image-20200516221425935"></p><h3 id="11-查看两台web服务的访问日志"><a href="#11-查看两台web服务的访问日志" class="headerlink" title="11. 查看两台web服务的访问日志"></a>11. 查看两台web服务的访问日志</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib3ix6jij310605qdgc.jpg" alt="image-20200516221354515"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib3jss2pj310u05ojrw.jpg" alt="image-20200516221408788"></p><h3 id="12-模拟主服务器down掉后是否还能正常访问"><a href="#12-模拟主服务器down掉后是否还能正常访问" class="headerlink" title="12. 模拟主服务器down掉后是否还能正常访问"></a>12. 模拟主服务器down掉后是否还能正常访问</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># /etc/init.d/keepalived stop</span></span><br><span class="line">Stopping keepalived (via systemctl):                       [  确定  ]</span><br><span class="line"></span><br><span class="line">[root@keep02 ~]<span class="comment"># ip a|grep 192.168.2.100         //去从上面查看vip是否飘了过来</span></span><br><span class="line">    inet 192.168.2.100/32 scope global ens32</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib3pg61ij30om02lt8t.jpg" alt="image-20200516221749432"></p><h3 id="13-验证主服务器恢复之后vip是否还会回来"><a href="#13-验证主服务器恢复之后vip是否还会回来" class="headerlink" title="13. 验证主服务器恢复之后vip是否还会回来"></a>13. 验证主服务器恢复之后vip是否还会回来</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># /etc/init.d/keepalived start</span></span><br><span class="line">Starting keepalived (via systemctl):                       [  确定  ]</span><br><span class="line">[root@keep01 ~]<span class="comment"># </span></span><br><span class="line">[root@keep01 ~]<span class="comment"># ip a|grep 192.168.2.100</span></span><br><span class="line">    inet 192.168.2.100/32 scope global ens32</span><br><span class="line"><span class="comment">#可以看到，将主恢复后，vip会自动回到主keepalived上</span></span><br><span class="line"></span><br><span class="line">[root@keep02 ~]<span class="comment"># ip a|grep 192.168.2.100</span></span><br><span class="line">[root@keep02 ~]<span class="comment"># 而此时从上vip已然消失</span></span><br></pre></td></tr></table></figure><p><strong>至此，nginx + keepalived高可用负载均衡已经完成~~~</strong></p><h2 id="案例（二）"><a href="#案例（二）" class="headerlink" title="案例（二）"></a>案例（二）</h2><ul><li><strong>Nginx+Keepalived实现高可用负载均衡</strong></li><li><strong>架构图如下：</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib3x0b0tj30si0jx3zt.jpg" alt="image-20200516150127538"></p><p><strong>环境准备</strong></p><table><thead><tr><th>主机名 / 角色</th><th>操作系统</th><th>IP地址</th><th>软件包</th></tr></thead><tbody><tr><td>keep01 / LB-MASTER</td><td>Centos7.4_3.10</td><td>192.168.1.1</td><td>keepalived-1.2.13.tar.gz、nginx-1.12.2.tar.gz</td></tr><tr><td>keep02 / LB-BACKUP</td><td>Centos7.4_3.10</td><td>192.168.1.2</td><td>keepalived-1.2.13.tar.gz、nginx-1.12.2.tar.gz</td></tr><tr><td>web01 / RS-WEBSERVER</td><td>Centos7.4_3.10</td><td>192.168.1.3</td><td>jdk-8u181-linux-x64.tar.gz、apache-tomcat-8.5.32.tar.gz</td></tr><tr><td>web02 / RS-WEBSERVER</td><td>Centos7.4_3.10</td><td>192.168.1.4</td><td>jdk-8u181-linux-x64.tar.gz、apache-tomcat-8.5.32.tar.gz</td></tr><tr><td>client01 / 测试</td><td>Centos7.4_3.10</td><td>192.168.1.5</td><td>curl 或者 wget</td></tr></tbody></table><h3 id="1-安装Tomcat"><a href="#1-安装Tomcat" class="headerlink" title="1. 安装Tomcat"></a>1. 安装Tomcat</h3><h4 id="1-1-安装JDK（配置相同）"><a href="#1-1-安装JDK（配置相同）" class="headerlink" title="1.1 安装JDK（配置相同）"></a>1.1 安装JDK（配置相同）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># tar xf jdk-8u181-linux-x64.tar.gz</span></span><br><span class="line">[root@web01 ~]<span class="comment"># mv jdk1.8.0_181 /usr/local/java</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line">[root@web01 ~]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@web01 ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_181&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="1-2-安装tomcat（配置相同）"><a href="#1-2-安装tomcat（配置相同）" class="headerlink" title="1.2 安装tomcat（配置相同）"></a>1.2 安装tomcat（配置相同）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装tomcat</span></span><br><span class="line">[root@web01 ~]<span class="comment"># tar xf apache-tomcat-8.5.32.tar.gz</span></span><br><span class="line">[root@web01 ~]<span class="comment"># mv apache-tomcat-8.5.32 /usr/local/tomcat</span></span><br><span class="line"><span class="comment"># 在/usr/local/tomcat/bin/catalina.sh这个文件的注释下追加一下两条配置</span></span><br><span class="line">[root@web01 ~]<span class="comment"># sed -i &#x27;1a # JDK&#x27; /usr/local/tomcat/bin/catalina.sh</span></span><br><span class="line">[root@web01 ~]<span class="comment"># sed -i &#x27;2a JAVA_HOME=/usr/local/java&#x27; /usr/local/tomcat/bin/catalina.sh</span></span><br><span class="line"><span class="comment">#备份主配置及删除配置文件注释</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cp /usr/local/tomcat/conf/server.xml /usr/local/tomcat/conf/server.xml.bak &amp;&amp; perl -lne &#x27;print unless (/&lt;!--/../--&gt;/)&#x27; /usr/local/tomcat/conf/server.xml.bak &gt; /usr/local/tomcat/conf/server.xml &amp;&amp; sed -i /^$/d /usr/local/tomcat/conf/server.xml</span></span><br><span class="line"><span class="comment">#启动tomcat服务</span></span><br><span class="line">[root@web01 ~]<span class="comment"># /usr/local/tomcat/bin/startup.sh</span></span><br><span class="line"><span class="comment">#查看tomcat是否启动成功</span></span><br><span class="line">[root@web01 ~]<span class="comment"># netstat -anptu|grep 8080</span></span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      16297/java</span><br></pre></td></tr></table></figure><h4 id="1-3-修改两台tomcat的默认页面"><a href="#1-3-修改两台tomcat的默认页面" class="headerlink" title="1.3 修改两台tomcat的默认页面"></a>1.3 修改两台tomcat的默认页面</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//web01</span><br><span class="line">[root@web01 ~]<span class="comment"># vim /usr/local/tomcat/webapps/ROOT/index.jsp</span></span><br><span class="line"> 52                     &lt;h2&gt;RS_web01-192.168.2.3&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">//web02</span><br><span class="line">[root@web02 ~]<span class="comment"># vim /usr/local/tomcat/webapps/ROOT/index.jsp</span></span><br><span class="line"> 52                     &lt;h2&gt;RS_web02-192.168.2.4&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h4 id="1-4-访问两台web服务"><a href="#1-4-访问两台web服务" class="headerlink" title="1.4 访问两台web服务"></a>1.4 访问两台web服务</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib41p4paj30wo093jsy.jpg" alt="image-20200516233830950"></p><p><img src="keepalived%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0.assets/image-20200516233859010.png" alt="image-20200516233859010"></p><h3 id="2-安装-keepalived-Nginx"><a href="#2-安装-keepalived-Nginx" class="headerlink" title="2. 安装 keepalived + Nginx"></a>2. 安装 keepalived + Nginx</h3><h4 id="2-1-安装keepalived"><a href="#2-1-安装keepalived" class="headerlink" title="2.1 安装keepalived"></a>2.1 安装keepalived</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># wget http://www.keepalived.org/software/keepalived-1.2.13.tar.gz</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># tar -xf keepalived-1.2.13.tar.gz -C /usr/src/</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># cd /usr/src/keepalived-1.2.13/</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//安装内核开发包，popt支持库等工具；如果安装不上，请使用阿里的yum源</span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; yum makecache</span></span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># yum -y install kernel-devel openssl-devel popt-devel nmap</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># ./configure --prefix=/usr/local/keepalived</span></span><br><span class="line">[root@keep01 keepalived-1.2.13]<span class="comment"># make &amp;&amp;make install &amp;&amp; cd</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//创建keepalived主配置文件目录</span><br><span class="line">[root@keep01 ~]<span class="comment"># mkdir -p /etc/keepalived</span></span><br><span class="line">//主配置文件</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span></span><br><span class="line">//启动时需要加载的配置文件</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span></span><br><span class="line">//服务的控制脚本</span><br><span class="line">[root@keep01 ~]<span class="comment"># cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</span></span><br><span class="line">//优化keepalived的命令</span><br><span class="line">[root@keep01 ~]<span class="comment"># ln -s /usr/local/keepalived/sbin/* /usr/bin/</span></span><br><span class="line">//给启动脚本指定权限</span><br><span class="line">[root@keep01 ~]<span class="comment"># chmod 755 /etc/init.d/keepalived</span></span><br><span class="line">//查看一下keepalived版本</span><br><span class="line">[root@keep02 ~]<span class="comment"># keepalived -v</span></span><br><span class="line">Keepalived v1.2.13 (05/16,2020)</span><br></pre></td></tr></table></figure><h4 id="2-2-分别配置两台keepalived"><a href="#2-2-分别配置两台keepalived" class="headerlink" title="2.2 分别配置两台keepalived"></a>2.2 分别配置两台keepalived</h4><h5 id="2-2-1-主Keepalived配置"><a href="#2-2-1-主Keepalived配置" class="headerlink" title="2.2.1 主Keepalived配置"></a>2.2.1 主Keepalived配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vi /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"><span class="comment">#全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id nginx-master</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本配置</span></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    <span class="comment">#脚本所在路径</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span><br><span class="line">    <span class="comment">#脚本执行间隔时间，单位为秒</span></span><br><span class="line">    interval 2</span><br><span class="line">    <span class="comment">#优先级</span></span><br><span class="line">    weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#keepalived实例配置</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#指定实例的初始状态，MASTER或BACKUP两种状态，并且需要大写</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment">#实例绑定的网卡</span></span><br><span class="line">    interface ens32</span><br><span class="line">    <span class="comment">#虚拟路由标识，是一个数字，整个VRRP内唯一，如果keepalived配置了主备，需要相同</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment">#优先级，数值越大，优先级越高</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment">#MASTER与BACKUP之间同步检查的时间间隔，单位为秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#通信验证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#追踪外围脚本</span></span><br><span class="line">    track_script &#123;</span><br><span class="line">        <span class="comment">#这里配置vrrp_script的名称</span></span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#虚拟vip配置，可配置多个</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-备Keepalived配置"><a href="#2-2-2-备Keepalived配置" class="headerlink" title="2.2.2 备Keepalived配置"></a>2.2.2 备Keepalived配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@keep02 ~]<span class="comment"># vi /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"><span class="comment">#全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment">#Keepalived的机器标识，一个网络内保持唯一</span></span><br><span class="line">   router_id nginx-backup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本配置</span></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    <span class="comment">#脚本所在路径</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span><br><span class="line">    <span class="comment">#脚本执行间隔时间，单位为秒</span></span><br><span class="line">    interval 2</span><br><span class="line">    <span class="comment">#优先级</span></span><br><span class="line">    weight 2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#keepalived实例配置</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#指定实例的初始状态，MASTER或BACKUP两种状态，并且需要大写</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment">#实例绑定的网卡</span></span><br><span class="line">    interface ens32</span><br><span class="line">    <span class="comment">#虚拟路由标识，是一个数字，整个VRRP内唯一，如果keepalived配置了主备，需要相同</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment">#优先级，数值愈大，优先级越高</span></span><br><span class="line">    priority 99</span><br><span class="line">    <span class="comment">#MASTER与BACKUP之间同步检查的时间间隔，单位为秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#通信验证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#追踪外围脚本</span></span><br><span class="line">    track_script &#123;</span><br><span class="line">        <span class="comment">#这里配置vrrp_script的名称</span></span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#虚拟ip配置，可配置多个</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-Nginx状态检查脚本创建-内容相同"><a href="#2-2-3-Nginx状态检查脚本创建-内容相同" class="headerlink" title="2.2.3 Nginx状态检查脚本创建(内容相同)"></a>2.2.3 Nginx状态检查脚本创建(内容相同)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vim /etc/keepalived/check_nginx.sh</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">NGINX=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">PORT=80</span><br><span class="line">IPV4=`ip a|grep ens32|grep inet|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">nmap localhost -p <span class="variable">$PORT</span> | grep <span class="string">&quot;<span class="variable">$PORT</span>/tcp open&quot;</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="variable">$NGINX</span> -s stop</span><br><span class="line">    sleep 5</span><br><span class="line">    <span class="variable">$NGINX</span></span><br><span class="line">    nmap localhost -p <span class="variable">$PORT</span> | grep <span class="string">&quot;<span class="variable">$PORT</span>/tcp open&quot;</span> &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">        killall -9 keepalived</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$IPV4</span> (nginx) is down on <span class="subst">$(date +%F-%T)</span>&quot;</span> &gt;&gt; /etc/keepalived/check_nginx.log</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># chmod 777 /etc/keepalived/check_nginx.sh</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># scp /etc/keepalived/check_nginx.sh root@192.168.2.2:/etc/keepalived/</span></span><br></pre></td></tr></table></figure><h4 id="2-3-安装Nginx"><a href="#2-3-安装Nginx" class="headerlink" title="2.3 安装Nginx"></a>2.3 安装Nginx</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel</span></span><br><span class="line"></span><br><span class="line">[root@keep01 ~]<span class="comment"># tar xf nginx-1.12.2.tar.gz -C /usr/src/ &amp;&amp; cd /usr/src/nginx-1.12.2/</span></span><br><span class="line"></span><br><span class="line">[root@keep01 nginx-1.12.2]<span class="comment"># ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx &amp;&amp; make &amp;&amp; make install &amp;&amp; cd</span></span><br><span class="line"></span><br><span class="line">[root@keep01 ~]<span class="comment"># useradd -s /sbin/nologin -M nginx &amp;&amp; chown -R nginx:nginx /usr/local/nginx/</span></span><br><span class="line"></span><br><span class="line">[root@keep01 ~]<span class="comment"># ln -s /usr/local/nginx/sbin/* /usr/local/bin/</span></span><br></pre></td></tr></table></figure><h4 id="2-4-分别配置两台服务器的Nginx-内容相同"><a href="#2-4-分别配置两台服务器的Nginx-内容相同" class="headerlink" title="2.4 分别配置两台服务器的Nginx(内容相同)"></a>2.4 分别配置两台服务器的Nginx(内容相同)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="comment">#nginx运行用户</span></span><br><span class="line">user  nginx;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#单个进程最大连接数</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#http服务器配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    <span class="comment">#upstream负载均衡配置，配置路由到tomcat的服务地址以及权重</span></span><br><span class="line">    upstream tomcat &#123;</span><br><span class="line">       server 192.168.2.3:8080 weight=2;</span><br><span class="line">       server 192.168.2.4:8080 weight=2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        listen       80;</span><br><span class="line">         <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            proxy_connect_timeout 3;</span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            proxy_send_timeout 30;</span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            proxy_read_timeout 30;</span><br><span class="line">            proxy_pass http://tomcat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page  500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@keep01 ~]<span class="comment"># cd /usr/local/nginx/conf/</span></span><br><span class="line">[root@keep01 conf]<span class="comment"># scp nginx.conf root@192.168.2.2:$PWD</span></span><br></pre></td></tr></table></figure><h3 id="3-启动nginx-和-keepalived"><a href="#3-启动nginx-和-keepalived" class="headerlink" title="3. 启动nginx 和 keepalived"></a>3. 启动nginx 和 keepalived</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s start/etc/init.d/keepalived start</span><br></pre></td></tr></table></figure><ul><li><strong>查看虚拟VIP</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib49ld0kj30ow02naa2.jpg" alt="image-20200517003405993"></p><h3 id="4-模拟主服务器的nginx宕机后VIP自动漂移"><a href="#4-模拟主服务器的nginx宕机后VIP自动漂移" class="headerlink" title="4. 模拟主服务器的nginx宕机后VIP自动漂移"></a>4. 模拟主服务器的nginx宕机后VIP自动漂移</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># echo &#x27;error&#x27; &gt;&gt; /usr/local/nginx/conf/nginx.conf     #注释：这上面必须要先在nginx配置文件中插入一条错误配置，不然就算是你关闭了nginx，他之后也会靠着check_nginx.sh脚本将nginx起来！！</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># nginx -s stop</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib4euar2j30or02e74a.jpg" alt="image-20200517021213560"></p><ul><li><strong>验证是否还能够正常访问</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib4jww3uj30xs097gn6.jpg" alt="image-20200517003818421"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib4l9b9aj30xx097dhe.jpg" alt="image-20200517003541807"></p><ul><li><strong>可以看到，这里已经实现了双机热备的功能~~~</strong></li></ul><h3 id="5-将主节点的nginx和keepalived恢复"><a href="#5-将主节点的nginx和keepalived恢复" class="headerlink" title="5. 将主节点的nginx和keepalived恢复"></a>5. 将主节点的nginx和keepalived恢复</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@keep01 ~]<span class="comment"># sed -i &#x27;/^error/d&#x27; /usr/local/nginx/conf/nginx.conf      #将刚才插入到nginx中的配置给其删掉</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># nginx -s start</span></span><br><span class="line">[root@keep01 ~]<span class="comment"># /etc/init.d/keepalived start</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib4q0groj30qt02ldfu.jpg" alt="image-20200517022634632"></p><p><strong>可以看到，当主keepalived恢复后，VIP会自动再回到他的上面来，下面再来访问一下浏览器</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib4vosn2j30xl095abm.jpg" alt="image-20200517022836365"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grib4y1kh6j30xs094gn6.jpg" alt="image-20200517022927181"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/06/15/Docker/"/>
      <url>/2021/06/15/Docker/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h1><blockquote><p><strong>Docker是基于Go语言实现的云开源项目</strong></p><p><strong>官方网站：<a href="https://www.docker.com/">https://www.docker.com/</a></strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo1fk5sgj30u60gwgna.jpg" alt="image-20200808155004282"></p><h2 id="1-what-什么是Docker-？"><a href="#1-what-什么是Docker-？" class="headerlink" title="1. what - 什么是Docker ？"></a>1. what - 什么是Docker ？</h2><blockquote><p><strong>为什么会有Docker出现？</strong></p></blockquote><p>一款产品从开发到上线, 从操作系统, 到运行环境, 再到应用配置。作为开发 + 运维之间的协作就需要关心很多东西, 这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验。</p><p>环境配置如此麻烦, 换一台机器, 就要重来一次, 费力费时。很多人想到, 能不能从根本上解决问题, 软件能否可以带环境安装? 也就是说, 安装的时候, 把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p><p>传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件 + 所有软件环境；不过，即便如此，仍然常常发生部署失败的状况。Docker镜像的设计使得Docker可以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</p><blockquote><p><strong>Docker 的理念是什么？</strong></p></blockquote><p>Docker的主要目标 <strong>“构建、发布和运行任何应用程序在任何地方”，</strong>也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到 <strong>“一次封装，到处运行”。</strong></p><h2 id="2-why-为什么使用Docker？"><a href="#2-why-为什么使用Docker？" class="headerlink" title="2. why - 为什么使用Docker？"></a>2. why - 为什么使用Docker？</h2><blockquote><p>时光倒流</p></blockquote><p><strong>传统部署时代：</strong> 早期，组织在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况，结果，其他应用程序的性能将下降。一个解决方案是在不同的物理服务器上运行每个应用程序。但这并没有随着资源利用不足而扩展，并且组织维护许多物理服务器的成本很高。</p><p><strong>虚拟化部署时代：</strong> 作为解决方案，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许在VM之间隔离应用程序，并提供安全级别，因为一个应用程序的信息不能被另一应用程序自由访问。</p><p>虚拟化可以更好地利用物理服务器中的资源，并可以实现更好的可伸缩性，因为可以轻松地添加或更新应用程序，降低硬件成本等等。借助虚拟化，您可以将一组物理资源呈现为一组一次性虚拟机。</p><p>每个VM都是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。</p><p><strong>容器部署时代：</strong> 容器类似于VM，但是它们具有轻松的隔离属性，可以在应用程序之间共享操作系统（OS）。因此，容器被认为是轻质的。与VM相似，容器具有自己的文件系统，CPU，内存，进程空间等。由于它们与基础架构分离，因此可以跨云和OS分发进行移植。</p><p>容器之所以受欢迎，是因为它们提供了额外的好处，例如：</p><ul><li>敏捷的应用程序创建和部署：与使用VM映像相比，容器映像创建的简便性和效率更高。</li><li>持续的开发，集成和部署：通过快速简便的回滚（由于图像不可更改），提供可靠且频繁的容器映像构建和部署。</li><li>开发和运营的关注点分离：在构建/发布时间而不是部署时间创建应用程序容器映像，从而将应用程序与基础架构分离。</li><li>可观察性不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他信号。</li><li>跨开发，测试和生产的环境一致性：在便携式计算机上与在云中相同地运行。</li><li>云和操作系统分发的可移植性：可在Ubuntu，RHEL，CoreOS，本地，主要公共云以及其他任何地方运行。</li><li>以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行操作系统到使用逻辑资源在操作系统上运行应用程序。</li><li>松散耦合，分布式，弹性，解放的微服务：应用程序被分解成较小的独立部分，并且可以动态部署和管理–而不是在一台大型单机上运行的整体堆栈。</li><li>资源隔离：可预测的应用程序性能。</li><li>资源利用：高效率和高密度。</li></ul><blockquote><p><strong>Docker与集装箱的对比</strong></p></blockquote><table><thead><tr><th>特性</th><th>集装箱</th><th>Docker</th></tr></thead><tbody><tr><td>打包对象</td><td>几乎任何货物</td><td>任何软件及依赖</td></tr><tr><td>硬件依赖</td><td>标准形状和接口允许集装箱被装卸到各种交通工具上</td><td>容器无需修改便可运行在几乎所有平台</td></tr><tr><td>隔离性</td><td>集装箱可以重叠起来一起运输，🍌再也不会被铁桶压烂了</td><td>资源、网络、库都是隔离的，不会出现依赖性问题</td></tr><tr><td>自动化</td><td>标准接口使集装箱很容易自动装卸和移动</td><td>提供 run、start、stop等标准化操作</td></tr><tr><td>高效性</td><td>无需开箱，可在各种交通工具间快速搬运</td><td>轻量级，能够快速启动和迁移</td></tr><tr><td>指责分工</td><td>货主只需考虑把什么放到集装箱中；承运方只需关心怎样运输集装箱</td><td>开发人员只需考虑怎么写代码，运维人员只需关心如何解决配置基础环境</td></tr><tr><td></td><td><strong>一句话：容器使软件具备了超强的可移植能力。</strong></td><td></td></tr></tbody></table><blockquote><p><strong>为什么Docker 比 KVM快</strong></p></blockquote><p>1、docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>2、docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p><p>3、如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo1mj7zij30oj0m9gwd.jpg" alt="image-20200808163813483"></p><h2 id="3-How-to-install-–-怎么安装-？"><a href="#3-How-to-install-–-怎么安装-？" class="headerlink" title="3. How to install – 怎么安装 ？"></a>3. How to install – 怎么安装 ？</h2><blockquote><p><strong>Docker安装要求</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo1uk85zj30ou0d3mz5.jpg" alt="image-20200808164116047"></p><blockquote><p><strong>本次介绍 Docker CE 的安装使用</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//安装docker所需依赖包</span><br><span class="line">[root@docker ~]<span class="comment"># yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"></span><br><span class="line">//下载docker软件源</span><br><span class="line">[root@docker ~]<span class="comment"># yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line">//安装docker-ce</span><br><span class="line">[root@docker ~]<span class="comment"># yum -y install containerd.io docker-ce docker-ce-cli</span></span><br><span class="line"></span><br><span class="line">注：在生产环境一般使用固定版本号，并且在此版本上经过了充分的测试，推荐版本号安装，下面列出所有版本：版本号由高到低排序</span><br><span class="line">[root@docker ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo22yt6dj30t508vjs2.jpg" alt="image-20200808164249401"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//安装指定版本的命令：</span><br><span class="line">[root@docker ~]<span class="comment"># yum install containerd.io docker-ce-18.09.6 docker-ce-cli-18.09.6</span></span><br><span class="line"></span><br><span class="line">//启动docker并查看安装版本</span><br><span class="line">[root@docker ~]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@docker ~]<span class="comment"># systemctl enable docker</span></span><br><span class="line">[root@docker ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 18.09.6, build 481bc77156</span><br><span class="line"></span><br><span class="line">//下载最小的镜像来验证安装是否正确</span><br><span class="line">[root@docker ~]<span class="comment"># docker run hello-world</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo27ztlij60ur08sjw002.jpg" alt="image-20200808164433578"></p><p><strong>执行这条命令过程如下图：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo2c7b6uj30ug0ehac2.jpg" alt="image-20200808164602463"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看本地镜像</span><br><span class="line">[root@docker ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              fce289e99eb9        13 months ago       1.84kB</span><br></pre></td></tr></table></figure><blockquote><p><strong>更换Docker镜像源</strong></p></blockquote><p>//去阿里上拿加速器地址，注：要先登入阿里才能复制地址</p><p>阿里地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//修改文件使用阿里加速地址</span><br><span class="line">[root@docker ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://p8hkkij9.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//重启docker</span><br><span class="line">[root@docker ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@docker ~]<span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line">//体验飞一样的感觉</span><br><span class="line">[root@docker ~]<span class="comment"># docker pull nginx</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo2uzrwlj30up0auaec.jpg" alt="image-20200808165232338"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查看nginx镜像是否下载到本地</span><br><span class="line">[root@docker ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              207330bcb60e        2 weeks ago         127MB</span><br><span class="line">hello-world         latest              fce289e99eb9        13 months ago       1.84kB</span><br></pre></td></tr></table></figure><p><strong>至此Docker安装完成</strong></p><h1 id="二、Docker架构"><a href="#二、Docker架构" class="headerlink" title="二、Docker架构"></a>二、Docker架构</h1><blockquote><p><strong>整体架构图如下：</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo311y8gj30t50kxn1k.jpg" alt="image-20200808170718835"></p><h2 id="1-Docker-的核心组件"><a href="#1-Docker-的核心组件" class="headerlink" title="1. Docker 的核心组件"></a>1. Docker 的核心组件</h2><ul><li><p>Docker 客户端 - Client</p></li><li><p>Docker 服务器 - Docker daemon</p></li><li><p>Docker 镜像 - Image</p></li><li><p>Registry 仓库 – Registry</p></li><li><p>Docker 容器 - Container</p></li></ul><h2 id="2-Docker客户端"><a href="#2-Docker客户端" class="headerlink" title="2. Docker客户端"></a>2. Docker客户端</h2><p><strong>最常用的 Docker 客户端就是 <code>docker</code> 命令。通过 <code>docker</code>命令 我们可以方便地在 Host 上构建和运行容器。</strong></p><p><strong>除了docker 命令行工具，用户也可以通过 REST API 与服务器通信。</strong></p><p><strong>具体命令参考：</strong><a href="https://blog.csdn.net/top_explore/article/details/100057199"><strong>https://blog.csdn.net/top_explore/article/details/100057199</strong></a></p><p><strong>Docker 支持很多操作（子命令）：</strong></p><blockquote><p><strong>容器生命周期管理</strong></p></blockquote><ul><li><a href="https://www.runoob.com/docker/docker-run-command.html">run</a></li><li><a href="https://www.runoob.com/docker/docker-start-stop-restart-command.html">start/stop/restart</a></li><li><a href="https://www.runoob.com/docker/docker-kill-command.html">kill</a></li><li><a href="https://www.runoob.com/docker/docker-rm-command.html">rm</a></li><li><a href="https://www.runoob.com/docker/docker-pause-unpause-command.html">pause/unpause</a></li><li><a href="https://www.runoob.com/docker/docker-create-command.html">create</a></li><li><a href="https://www.runoob.com/docker/docker-exec-command.html">exec</a></li></ul><blockquote><p><strong>容器操作</strong></p></blockquote><ul><li><a href="https://www.runoob.com/docker/docker-ps-command.html">ps</a></li><li><a href="https://www.runoob.com/docker/docker-inspect-command.html">inspect</a></li><li><a href="https://www.runoob.com/docker/docker-top-command.html">top</a></li><li><a href="https://www.runoob.com/docker/docker-attach-command.html">attach</a></li><li><a href="https://www.runoob.com/docker/docker-events-command.html">events</a></li><li><a href="https://www.runoob.com/docker/docker-logs-command.html">logs</a></li><li><a href="https://www.runoob.com/docker/docker-wait-command.html">wait</a></li><li><a href="https://www.runoob.com/docker/docker-export-command.html">export</a></li><li><a href="https://www.runoob.com/docker/docker-port-command.html">port</a></li></ul><blockquote><p><strong>容器rootfs命令</strong></p></blockquote><ul><li><a href="https://www.runoob.com/docker/docker-commit-command.html">commit</a></li><li><a href="https://www.runoob.com/docker/docker-cp-command.html">cp</a></li><li><a href="https://www.runoob.com/docker/docker-diff-command.html">diff</a></li></ul><blockquote><p><strong>镜像仓库</strong></p></blockquote><ul><li><a href="https://www.runoob.com/docker/docker-login-command.html">login</a></li><li><a href="https://www.runoob.com/docker/docker-pull-command.html">pull</a></li><li><a href="https://www.runoob.com/docker/docker-push-command.html">push</a></li><li><a href="https://www.runoob.com/docker/docker-search-command.html">search</a></li></ul><blockquote><p><strong>本地镜像管理</strong></p></blockquote><ul><li><a href="https://www.runoob.com/docker/docker-images-command.html">images</a></li><li><a href="https://www.runoob.com/docker/docker-rmi-command.html">rmi</a></li><li><a href="https://www.runoob.com/docker/docker-tag-command.html">tag</a></li><li><a href="https://www.runoob.com/docker/docker-build-command.html">build</a></li><li><a href="https://www.runoob.com/docker/docker-history-command.html">history</a></li><li><a href="https://www.runoob.com/docker/docker-save-command.html">save</a></li><li><a href="https://www.runoob.com/docker/docker-load-command.html">load</a></li><li><a href="https://www.runoob.com/docker/docker-import-command.html">import</a></li></ul><blockquote><p><strong>info|version</strong></p></blockquote><ul><li><a href="https://www.runoob.com/docker/docker-info-command.html">info</a></li><li><a href="https://www.runoob.com/docker/docker-version-command.html">version</a></li></ul><h2 id="3-Docker服务端"><a href="#3-Docker服务端" class="headerlink" title="3. Docker服务端"></a>3. Docker服务端</h2><blockquote><p><strong>Docker daemon 是服务器组件，以 Linux 后台服务的方式运行。</strong></p><p><strong>Docker daemon运行在Docker host上,负责创建、运行、监控容器,构建、存储镜像。</strong></p></blockquote><p>默认配置下，Docker daemon 只能响应来自本地 Host 的客户端请求。如果要允许远程客户端请求，需要在配置文件中打开 TCP 监听，步骤如下：</p><ul><li>编辑配置文件/usr/lib/systemd/system/docker.service，在环境变量 ExecStart 后面添加 -H tcp://0.0.0.0，允许来自任意 IP 的客户端连接：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo3ae4iuj30oh0200tr.jpg" alt="image-20200726173002324"></p><ul><li>如果，还想要在本地连接，还要添加如下：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo3gmbbej30of01zgmo.jpg" alt="image-20200726173035752"></p><ul><li>重启 Docker daemon：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo3le61rj30oh01ejrx.jpg" alt="image-20200726173140354"></p><ul><li>从 IP 为192.168.1.2的客户端中在命令行里加上 -H 参数，即可与远程服务器通信。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo3o3xizj30og04g0tw.jpg" alt="image-20200726173404813"></p><h2 id="4-Docker-镜像"><a href="#4-Docker-镜像" class="headerlink" title="4. Docker 镜像"></a>4. Docker 镜像</h2><blockquote><p><strong>可将 Docker 镜像看作为只读模板，通过它可以创建 Docker 容器。</strong></p></blockquote><h3 id="镜像有多种生成方法"><a href="#镜像有多种生成方法" class="headerlink" title="镜像有多种生成方法"></a>镜像有多种生成方法</h3><p>①  可以从无到有开始创建镜像（从0开始，白手起家）【开发】</p><p>②  也可以下载并使用别人创建好的现成的镜像（伸手党）【运维】</p><p>③  还可以在现有镜像上创建新的镜像（用别人写好的镜像进行二次开发）【运维开发】</p><p>我们可以将镜像的内容和创建步骤描述在一个文本文件中，这个文件被称作 <strong>Dockerfile</strong>，还可以通过执行 <code>docker build &lt;docker-file&gt;</code> 命令构建出 Docker 镜像。</p><h2 id="5-Docker-容器"><a href="#5-Docker-容器" class="headerlink" title="5. Docker 容器"></a>5. Docker 容器</h2><blockquote><p><strong>Docker 容器就是 Docker 镜像的运行实例。</strong></p></blockquote><p>用户可以通过 CLI（docker）命令使 API 启动、停止、移动或删除容器。可以这么认为，对于应用软件，镜像是软件生命周期的构建和打包阶段，而容器则是启动和运行阶段。 </p><blockquote><p><strong>存放 Docker 镜像的仓库，Registry 分 私有 和 公有两种。</strong></p></blockquote><p><a href="https://hub.docker.com/">Docker Hub</a> 是默认的 Registry，由 Docker 公司维护，上面有数以万计的镜像，用户可以自由下载和使用。</p><p>出于对速度或安全的考虑，用户也可以创建自己的私有 Registry。后面会学习如何搭建私有 Registry。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull        命令可以从 Registry 下载镜像。</span><br><span class="line"></span><br><span class="line">docker run         命令则是先下载镜像（如果本地没有），然后再启动容器。</span><br></pre></td></tr></table></figure><h2 id="6-Docker-组件如何协作？"><a href="#6-Docker-组件如何协作？" class="headerlink" title="6. Docker 组件如何协作？"></a>6. Docker 组件如何协作？</h2><blockquote><p><strong>还记得在上面运行的第一个最小的容器吗？现在通过它来体会一下 Docker 各个组件是如何协作的。</strong></p></blockquote><h3 id="容器的启动过程"><a href="#容器的启动过程" class="headerlink" title="容器的启动过程"></a>容器的启动过程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-d       后台运行容器，并返回容器ID</span><br><span class="line">-p       指定要映射的端口，一个指定端口只能绑定一个容器</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo3y7yykj30og07n0wa.jpg" alt="image-20200726174418895"></p><p>1、Docker 客户端执行 docker run 命令。</p><p>2、Docker daemon 发现本地没有 httpd 镜像。</p><p>3、daemon 从 Docker Hub 下载镜像。</p><p>4、下载完成，镜像 httpd 被保存到本地。</p><p>5、Docker daemon 启动容器。</p><p><em><strong>现在 docker images 可以查看到 httpd 已经下载到本地。</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo4nuctsj30oh0360u0.jpg" alt="image-20200726174750224"></p><p><em><strong>docker ps 或者 docker container ls 显示正在运行的容器。</strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo4s92wbj30oi01tmy8.jpg" alt="image-20200726174914085"></p><p><em><strong>访问：<a href="http://192.168.1.1/">http://192.168.1.1/</a></strong></em></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo50bwykj30ow027q32.jpg" alt="image-20200726174951656"></p><h2 id="7-镜像内部的浅度剖析"><a href="#7-镜像内部的浅度剖析" class="headerlink" title="7. 镜像内部的浅度剖析"></a>7. 镜像内部的浅度剖析</h2><blockquote><p><strong>镜像是 Docker 容器的基石，容器是镜像的运行实例，有了镜像才能启动容器。</strong></p></blockquote><h3 id="最小的镜像（了解即可）"><a href="#最小的镜像（了解即可）" class="headerlink" title="最小的镜像（了解即可）"></a>最小的镜像（了解即可）</h3><p><em>hello-world 是 Docker 官方提供的一个镜像，通常用来验证 Docker 是否安装成功。</em></p><p>通过 docker pull 从 Docker Hub 下载它。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo53gyefj30un02lmxu.jpg" alt="image-20200808172240559"></p><p>在用 docker images 命令查看镜像的信息；会发现hello-world连2KB都不到 !!!</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo56tx4jj30up03zdhf.jpg" alt="image-20200808172325554"></p><p>通过 docker run 运行。 运行之后会自动退出</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo5a3oyqj30uo03edgq.jpg" alt="image-20200808172420024"></p><p>通过 docker ps -a 运行查看所有容器，包括未运行的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo5dr51vj30ur02w75h.jpg" alt="image-20200808172453907"></p><p>如果想删除下面未运行的容器则使用 docker  rm  容器ID   例如：删除hello-world</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo5fsbatj30uo037my7.jpg" alt="image-20200808172548748"></p><p>如果想删除正在运行的容器使用单纯的 rm 是不行的；需要加上 -f 选项，但是不推荐，建议先停止容器，然后在删除容器。</p><p>例如：删除正在运行的httpd容器</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo5j2y64j30uq056taa.jpg" alt="image-20200808172632532"></p><p>其实我们更关心 hello-world 镜像包含哪些内容。</p><p>Dockerfile 是镜像的描述文件，定义了如何构建 Docker 镜像。</p><p>Dockerfile 的语法简洁且可读性强，后面我们会专门讨论如何编写 Dockerfile。 </p><blockquote><p><strong>hello-world 镜像 的 Dockerfile 内容如下：</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo5m9tr6j30bv06b0tg.jpg" alt="image-20200808172918829"></p><p>只有短短三条指令： <a href="https://www.cnblogs.com/lingfengblogs/p/11093246.html">https://www.cnblogs.com/lingfengblogs/p/11093246.html</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line">此镜像是从白手起家，从 <span class="number">0</span> 开始构建。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hello /</span></span><br><span class="line">将文件“hello”复制到镜像的根目录。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/hello&quot;</span>]</span></span><br><span class="line">容器启动时，执行 /hello </span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像 hello-world 中就只有一个可执行文件 “hello”，其功能就是打印出 “Hello from Docker ......” 等信息。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /hello 就是文件系统的全部内容，连最基本的 /bin，/usr, /lib, /dev 都没有。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hello-world 虽然是一个完整的镜像，但它并没有什么实际用途。通常来说，我们希望镜像能提供一个基本的操作系统环境，用户可以根据需要安装和配置软件。这样的镜像我们称作 base 镜像。 </span></span><br></pre></td></tr></table></figure><h3 id="base-镜像（重点知识）"><a href="#base-镜像（重点知识）" class="headerlink" title="base 镜像（重点知识）"></a>base 镜像（重点知识）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo5zgak2j30vq0993za.jpg" alt="image-20200808173249470"></p><blockquote><p><strong>下面以 CentOS 为例考察 base 镜像包含哪些内容</strong></p></blockquote><p>下载镜像：docker pull centos</p><p>查看镜像：docker images</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo652y81j30un04u40i.jpg" alt="image-20200808173431007"></p><p>一个 CentOS 才 200MB ？平时安装一个 CentOS 至少都有几个 GB，怎么可能才 200MB !  这是为什么呢 ？</p><p>在此之前我们先了解一下Linux系统的组成，Linux 操作系统由内核空间 和 用户空间组成。</p><ul><li><p>Rootfs  —&gt;（用户空间） </p></li><li><p>Bootfs  —&gt;（内核空间）</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo699ojhj30v908cdgb.jpg" alt="image-20200808174019952"></p><p><img src="Docker.assets/image-20200808173933068.png" alt="image-20200808173933068"></p><p><strong>重点如下：</strong></p><ul><li><p>对于 base 镜像来说，底层直接用 Host真机 的 kernel，自己只需要提供 rootfs 就行了。 </p></li><li><p>而对于一个精简的OS，rootfs可以很小，只需要有最基本的命令、工具和程序库就可以了。</p></li><li><p>平时安装的 CentOS 除了 rootfs 还会选装很多软件、服务、图形桌面等，需要好几个 GB 也就不足为奇了。 </p></li><li><p>所有容器都是共享宿主真机也就是我们的docker服务器系统内核；也就是说所有的容器都是没有bootfs内核空间这一层的。</p></li></ul><p><strong>base 镜像提供的是最小安装的 Linux 发行版</strong></p><p>下面是 CentOS 镜像的 Dockerfile 的内容：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo6nvj8gj30mv065mya.jpg" alt="image-20200808174427486"></p><p>第二行 ADD 指令添加到镜像的 tar 包就是 CentOS 7 的 rootfs。</p><p>在制作镜像时，这个 tar 包会自动解压到镜像的 / 目录下，生成 /dev, /proc, /bin 等目录。</p><p><strong>简述COPY 与 ADD的区别</strong></p><ul><li><p>COPY指令是直接将源文件拷贝到给予的目标位置；不会有任何别的操作。</p></li><li><p>ADD指令是直接将源文件拷贝到给予的目标位置；但如果是压缩包文件的话，它会自动解压。</p></li><li><p>注：可在 Docker Hub 的镜像描述页面中查看 Dockerfile 。 </p></li></ul><p><strong>支持运行多种 Linux OS</strong></p><ul><li><p>不同 Linux 发行版的区别主要就是 rootfs。 </p></li><li><p>比如 Ubuntu 14.04 使用 upstart 管理服务，apt 管理软件包；而 CentOS 7 使用 systemd 和 yum。这些都是用户空间上的区别，Linux kernel 差别不大。 </p></li><li><p>所以 Docker 可以同时支持多种 Linux 镜像，模拟出多种操作系统环境。 </p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo702o1sj30su0kl7c4.jpg" alt="image-20200808175135240"></p><p>上图 Debian 和 BusyBox（一种嵌入式 Linux）上层提供各自的 rootfs，底层共用 Docker Host 的 kernel。 </p><p><strong>这里需要说明的是：base 镜像只是在用户空间与发行版一致，kernel 版本与发行版是不同的 ！！！</strong></p><p>例如：使用Ubuntu.x.x 的 kernel镜像容器, 如果 Docker Host 是 CentOS 7.4, 那么在 Ubuntu 容器中使用的实际上是 Host 3.10.0-693的 kernel。</p><p>1、下载ubuntu镜像</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo75g6uhj30uq08rn0q.jpg" alt="image-20200808175536925"></p><p>2、查看 宿主Docker Host 系统、内核</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo78s5a6j30up055abl.jpg" alt="image-20200808175603506"></p><p>3、启动并进入Ubuntu容器，并验证上面所述是否正确</p><ul><li><p>Host kernel 为 3.10.0-693</p></li><li><p>启动并进入 Ubuntu 容器</p></li><li><p>验证容器是 Ubuntu</p></li><li><p>验证Ubuntu容器的 kernel 版本与 Host版本 一致 </p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选项解释：        -i            以交互模式运行容器，通常与 -t 同时使用；        -t            为容器重新分配一个伪输入终端，通常与 -i 同时使用</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo7cku8xj30un06gmzg.jpg" alt="image-20200808175708832"></p><p><strong>小结：</strong></p><p>容器只能使用 Host 的 kernel，并且不能修改。</p><p>所有容器都共用 host 的 kernel，在容器中没办法对 kernel 升级。如果容器对 kernel 版本有要求（比如应用只能在某个 kernel 版本下运行），则不建议用容器，这种场景虚拟机可能更合适。 </p><h1 id="三、Docker-镜像的分层结构"><a href="#三、Docker-镜像的分层结构" class="headerlink" title="三、Docker 镜像的分层结构"></a>三、Docker 镜像的分层结构</h1><blockquote><p><strong>Docker 支持通过现有镜像来创建新的镜像</strong></p></blockquote><p>实际上，Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。比如我们现在构建一个新的镜像，Dockerfile 如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo7j0svkj30un05t0u4.jpg" alt="image-20200808181510374"></p><p>① 新镜像不再是从 scratch 开始，而是直接在 Centos base 镜像上构建。<br>② 安装 emacs编辑器<br>③ 安装 apache服务。<br>④ 容器启动时运行 bash 给予容器运行终端。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo7mvamwj30tj09jwjl.jpg" alt="image-20200808181654303"></p><p>可以看到，新镜像是从 基础base 镜像一层一层 叠加生成的;  每安装一个软件，就在现有镜像的基础上增加一层。</p><blockquote><p><strong>为什么 Docker 镜像要采用这种分层结构呢 ？</strong></p></blockquote><p>最大的一个好处就是  -  <strong>共享资源</strong>。</p><p>比如：</p><p>有多个镜像都从相同的 base 镜像构建而来, 那么 Docker Host 只需在磁盘上保存一份 base 镜像; 同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了，而且镜像的每一层都可以被共享。后面会更深入地讨论这个特性。</p><p>那如果多个容器共享一份基础镜像, 当某个容器修改了基础镜像的内容, 比如 /etc 下的文件, 这时其他容器的 /etc 是否也会被修改？ </p><p>答案是不会的！修改会被限制在单个容器内。这就是接下来要学习的容器 <strong>Copy-on-Write</strong> 特性。</p><h2 id="1-可写的容器层-（copy-on-Write）"><a href="#1-可写的容器层-（copy-on-Write）" class="headerlink" title="1. 可写的容器层 （copy-on-Write）"></a>1. 可写的容器层 （copy-on-Write）</h2><p>当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo807swkj60fe0e7q5w02.jpg" alt="image-20200808182339527"></p><p>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。</p><p>只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><p>镜像 与 容器 的关系就有点类似于Python里面的 类 与 对象。</p><blockquote><p><strong>下面继续深入讨论容器层的细节（重点）</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo86kb2ij30o8098jrh.jpg" alt="image-20200808182611643"></p><p>1、添加文件 在容器中创建文件时，新文件被添加到容器层中。 </p><p>2、读取文件 在容器中读取某个文件时，Docker 会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后打开并读入内存。 </p><p>3、修改文件 在容器中修改已存在的文件时，Docker 会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后修改之。 </p><p>4、删除文件 在容器中删除文件时，Docker 也是从上往下依次在镜像层中查找此文件。找到后，会在容器层中记录下此删除操作。 </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有当需要修改时才复制一份数据，这种特性被称作 <span class="keyword">Copy</span>-<span class="keyword">on</span>-<span class="keyword">Write</span>。可见，容器层保存的是镜像变化的部分，不会对镜像本身进行任何修改。这样就解释了我们前面提出的问题：容器层记录对镜像的修改，所有镜像层都是只读的，不会被容器修改，所以镜像可以被多个容器共享共用。</span><br></pre></td></tr></table></figure><h1 id="四、Docker-的镜像构建详解"><a href="#四、Docker-的镜像构建详解" class="headerlink" title="四、Docker 的镜像构建详解"></a>四、Docker 的镜像构建详解</h1><blockquote><p><strong>Docker镜像概述：</strong></p><p>对于 Docker 用户来说, 最好的情况是不需要自己创建镜像。几乎所有常用的数据库、中间件、应用软件等 都有现成的 Docker 官方镜像或其他人和组织创建的镜像，我们只需要稍作配置就可以直接使用。</p><p>使用现成镜像的好处除了省去自己做镜像的工作量外, 更重要的是可以利用前人的经验。特别是使用那些官方镜像，因为 Docker 的工程师知道如何更好的在容器中运行软件。</p><p><strong>但在某些情况下我们也不得不自己构建镜像，比如：</strong></p><ul><li><p>找不到现成的镜像，比如自己开发的应用程序。</p></li><li><p>需要在镜像中加入特定的功能，比如官方镜像几乎都不提供 ssh。</p></li></ul><p><strong>官方不提供ssh的主要原因：</strong></p><ul><li><p>不想让镜像变得笨重，构建镜像的原则（用啥装啥，其它多余的一个不装）</p></li><li><p>不能把容器当作KVM来用（最主要的原因）</p></li><li><p>容器在公司里最好的使用图景：对容器的所有操作，一律都在容器外部。（也就是宿主机上面）</p></li></ul><p><strong>Docker 提供了两种构建镜像的方法</strong></p><p>  ① docker commit 命令</p><p>  ② Dockerfile 构建文件</p></blockquote><h2 id="1-docker-commit（构建镜像）"><a href="#1-docker-commit（构建镜像）" class="headerlink" title="1. docker commit（构建镜像）"></a>1. docker commit（构建镜像）</h2><blockquote><p>docker commit 命令是创建新镜像最直观的方法，其过程包含三个步骤：</p><ul><li>运行容器 </li><li>修改容器 </li><li>将修改完的容器保存为新的镜像</li></ul></blockquote><p>例如：在 Centos base 镜像中安装 net-tools包生成 ifconfig命令 并保存为新镜像。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、第一步， 运行容器</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo8v1xwpj30t503r76o.jpg" alt="image-20200808183829599"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2、安装 net-tools后，验证ifconfig命令是否存在</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo8yp4z3j30t503nwft.jpg" alt="image-20200808183904511"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfo8947sgj30t7044abd.jpg" alt="image-20200808183928151"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3、<span class="built_in">exit</span>退出容器后，在新窗口中使用docker ps -a查看容器的随机名。</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo91clkjj30t80320tr.jpg" alt="image-20200808183953502"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4、执行 docker commit 命令将容器保存为镜像。新镜像命名为 centos-ifconfig。</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo953vjhj30t603lmzy.jpg" alt="image-20200808184023169"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5、查看新镜像的属性。注：尽可能地不要安装跟自己服务非必须的软件</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo98zbfrj30t706ojuq.jpg" alt="image-20200808184058939"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6、使用新镜像启动容器，验证 ifconfig命令 已经可以使用。</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo9c9qdjj30t307kgov.jpg" alt="image-20200808184123553"></p><p>以上演示了如何用 docker commit 创建新镜像。然而，Docker 并不建议用户通过这种方式构建镜像。原因如下： </p><ul><li>这是一种手工创建镜像的方式，容易出错，效率低且可重复性弱。比如要在 debian base 镜像中也加入 ifconfig，还得重复前面的所有步骤。</li><li>更重要的：使用者并不知道镜像是如何创建出来的，里面是否有恶意程序。也就是说无法对镜像进行审计，存在安全隐患。</li></ul><p>既然 docker commit 不是推荐的方法，那干嘛还要花时间学习呢？ </p><p>原因是：即便是用 Dockerfile（推荐方法）构建镜像，底层也是 docker commit 一层一层构建新镜像的。学习 docker commit 能够更加深入地理解构建过程和镜像的分层结构。</p><h2 id="2-Dockerfile（构建镜像）"><a href="#2-Dockerfile（构建镜像）" class="headerlink" title="2. Dockerfile（构建镜像）"></a>2. Dockerfile（构建镜像）</h2><blockquote><p><strong>Dockerfile 就是一个文本文件，记录了镜像构建的所有步骤。</strong></p></blockquote><p>第一个 Dockerfile,  用 Dockerfile 创建 centos-vim，其内容则为:</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo9gxhnij30t703jq3o.jpg" alt="image-20200808184719233"></p><p>下面运行 docker build 命令构建镜像并详细分析每个细节。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker build -f /root/Dockerfile -t centos-vim:v1 .</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo9k5gqxj30w90i10xo.jpg" alt="image-20200808184834132"></p><p><strong>解释：</strong></p><p>① 当前目录为 /root。 </p><p>② Dockerfile 准备就绪。 </p><p>③ 运行 docker build 命令，-t 将新镜像命名为 centos-vim，标签为 v1；-f 参数指定 Dockerfile 的位置；命令末尾的 . 指明 build context 为当前目录。Docker 默认会从 build context 中查找 Dockerfile 文件。 </p><p>④ 从这步开始就是镜像真正的构建过程。 首先 Docker 将 build context 中的所有文件发送给 Docker daemon。</p><p>⑤ Step 1：执行 FROM，将 centos 作为 base 镜像。<br>centos 镜像 ID 为 470671670cac。 </p><p>⑥ Step 2：执行 RUN，安装 vim，具体步骤为 ⑦、⑧、⑨。 </p><p>⑦ 启动 ID 为 039b8246396d 的临时容器，在容器中通过 yum 安装 vim。 </p><p>⑧ 删除临时容器ID 039b8246396d。</p><p>⑨ 然后将容器保存为镜像，其 ID 为 1ed89da6cc67。</p><p>⑩ 其镜像名centos-vim，标签名v1；镜像构建成功。 </p><p><strong>通过 docker images 查看镜像信息。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgo9ofol5j30wa089q7d.jpg" alt="image-20200808185004196"></p><p>在上面的构建过程中, 我们要特别注意指令 RUN 的执行过程 ⑦、⑧、⑨。Docker 会在启动的临时容器中执行操作，并通过 commit 保存为新的镜像。</p><blockquote><p><strong>查看镜像分层结构</strong></p></blockquote><p>centos-vim 是通过在 base 镜像的顶部添加一个新的镜像层而得到的。 </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoa9n6m9j30w50hun0e.jpg" alt="image-20200808185133222"></p><p>这个新镜像层的内容由 RUN yum -y install vim 生成。这一点我们可以通过 docker history 命令验证。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoae508xj30w704ejtj.jpg" alt="image-20200808185203521"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">history</span> 会显示镜像的构建历史，也就是 Dockerfile 的执行过程。</span><br><span class="line"></span><br><span class="line">centos-<span class="keyword">vim</span>与centos镜像相比，确实只是多了顶部的一层 <span class="number">1</span>ed89da6cc67，由 yum命令创建，大小为 <span class="number">62.9</span>MB。 docker <span class="keyword">history</span> 也向我们展示了镜像的分层结构，每一层由上至下排列。</span><br><span class="line"></span><br><span class="line">注：表示无法获取 IMAGE ID，通常从 Docker Hub 下载的镜像会有这个问题。 </span><br></pre></td></tr></table></figure><h2 id="3-Docker-镜像的缓存特性"><a href="#3-Docker-镜像的缓存特性" class="headerlink" title="3. Docker 镜像的缓存特性"></a>3. Docker 镜像的缓存特性</h2><blockquote><p><strong>Docker 会缓存已有镜像的镜像层，构建新镜像时，如果某镜像层已经存在，就直接使用，无需重新创建。</strong></p></blockquote><p><strong>举例说明：</strong></p><p>在上面的 Dockerfile 中添加一点新内容，往镜像中复制一个文件： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoi08qefj30wa05f0u5.jpg" alt="image-20200808185556338"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># echo &#x27;lemon is a very good!!!&#x27; &gt; testfile</span></span><br><span class="line"></span><br><span class="line">[root@docker ~]<span class="comment"># docker build -f /root/Dockerfile -t centos-vim:v2 .</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoi3ijjyj30wa0ce42l.jpg" alt="image-20200808185650875"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line">[root@docker ~]<span class="comment"># docker run -it centos-vim:v2 cat testfile</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoi7h001j30w708d42j.jpg" alt="image-20200808185722577"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoiavltjj30w703o75j.jpg" alt="image-20200808185900673"></p><p>① 确保 testfile文件 已存在。</p><p>② 之前已经运行过相同的 RUN 指令，这次直接使用缓存中的镜像层1ed89da6cc67（重点）</p><p>③ 执行 COPY 指令。</p><p>其过程就是启动临时容器，复制 testfile，提交新的镜像层f8537385149f。 </p><p>在 centos-vim:v1 镜像上直接添加一层就得到了新的镜像 centos-vim:v2</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoiezpm1j30ud0dxq69.jpg" alt="image-20200808190207380"></p><p>如果希望在构建镜像时不使用缓存，可以在 docker build 命令中加上 –no-cache 参数。</p><p>Dockerfile 中每一个指令都会创建一个镜像层，上层是依赖于下层的。无论什么时候，只要某一层发生变化，其上面所有层的缓存都会失效。</p><p>就是说，如果我们改变 Dockerfile 指令的执行顺序，或者修改、添加指令，都会使缓存失效。 </p><p>举例说明，比如交换前面 RUN 和 COPY 的顺序： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoiitd63j30xo05c0u0.jpg" alt="image-20200808190408170"></p><p>虽然在逻辑上这种改动对镜像的内容没有影响，但由于分层的结构特性，Docker 必须重建受影响的镜像层。（v2 和 v3 镜像的内容不会因为RUN顺序从而改变）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker build -f /root/Dockerfile -t centos-vim:v3 .</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoilz8yrj30xo0ahadr.jpg" alt="image-20200808190737367"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoiqnl2tj30xq02umy8.jpg" alt="image-20200808190758524"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfodvq3u3j30xs03o3zp.jpg" alt="image-20200808190810062"></p><p>从上面的输出可以看到生成了新的镜像层ff380803fa57，缓存已经失效。</p><p>除了构建时使用缓存，Docker 下载镜像时也会使用。例如我们在下载一次 httpd 镜像</p><h2 id="4-Dockerfile-排错方法"><a href="#4-Dockerfile-排错方法" class="headerlink" title="4. Dockerfile 排错方法"></a>4. Dockerfile 排错方法</h2><blockquote><p><strong>包括 Dockerfile 在内的任何脚本和程序都会出错。有错并不可怕，但必须有办法排查!!!</strong></p></blockquote><p>直接上案例，Dockerfile 内容如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoivxdv0j30xr072768.jpg" alt="image-20200808191506444"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker build -f /root/Dockerfile -t image-debug .</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoiyr88xj30xr0cfjx8.jpg" alt="image-20200808191547297"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看一下构建时出现问题的镜像[root@docker ~]# docker images</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoj1l4e6j30xr0b7dlm.jpg" alt="image-20200808191728791"></p><p>Dockerfile 在执行第三步 RUN 指令时失败。我们可以利用第二步创建的镜像 29c3a5a08640 进行调试，方式是通过 docker run -it 启动镜像的一个容器。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgoj68lmnj30xt06s40h.jpg" alt="image-20200808191757335"></p><p>手工执行 RUN 指令很容易定位失败的，报错的原因是 busybox 镜像中没有 /bin/bash解释器。虽然这是个极其简单的例子，但它很好地展示了调试 Dockerfile 的方法。</p><h1 id="五、Dockerfile-指令使用详解"><a href="#五、Dockerfile-指令使用详解" class="headerlink" title="五、Dockerfile 指令使用详解"></a>五、Dockerfile 指令使用详解</h1><h2 id="1-认识-DockerFile"><a href="#1-认识-DockerFile" class="headerlink" title="1. 认识 DockerFile"></a>1. 认识 DockerFile</h2><blockquote><p><code>Dockerfile</code> 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建，最终通过读取Dockerfile中的指令自动生成映像。</p><p><code>docker build</code>命令用于从 Dockerfile 构建映像。可以在<code>docker build</code>命令中使用<code>-f</code>标志指向文件系统中任何位置的 Dockerfile。</p></blockquote><h2 id="2-Dockerfile常用指令"><a href="#2-Dockerfile常用指令" class="headerlink" title="2. Dockerfile常用指令"></a>2. Dockerfile常用指令</h2><ul><li>FROM</li><li>MAINTAINER</li><li>COPY</li><li>ADD</li><li>WORKDIR</li><li>VOLUME</li><li>EXPOSE</li><li>ENV</li><li>RUN</li><li>CMD</li><li>ENTRYPOINT</li><li>HEALTHCHECK</li><li>ONBUILD</li><li>USER</li><li>ARG</li><li>SHELL</li><li>STOPSIGNAL</li><li><strong>…………</strong></li></ul><h2 id="3-如何编写DockerFile"><a href="#3-如何编写DockerFile" class="headerlink" title="3. 如何编写DockerFile"></a>3. 如何编写DockerFile</h2><h3 id="3-1-Dockerfile-编写的基本结构"><a href="#3-1-Dockerfile-编写的基本结构" class="headerlink" title="3.1 Dockerfile 编写的基本结构"></a>3.1 Dockerfile 编写的基本结构</h3><blockquote><p>Dockerfile 一般分为四部分：<code>基础镜像信息</code>、<code>维护者信息</code>、<code>镜像操作指令</code> 和 <code>容器启动时执行指令</code>；<code>’#’ 为注释</code></p></blockquote><p>1、要指定基于哪一个镜像来构建新的镜像，所以dockerfile的第一层必须是FROM</p><p>2、维护者信息，此镜像是由谁构建的，不是非必须，用到的指令是MAINTAINER</p><p>3、镜像操作指令，在基础镜像之上，你要运行哪些命令，用到的指令：RUN等……    </p><p>4、容器启动时执行的命令，用到的指令：CMD、ENTRY POINT</p><h3 id="3-2-一台主机可以有多个Dockerfile"><a href="#3-2-一台主机可以有多个Dockerfile" class="headerlink" title="3.2 一台主机可以有多个Dockerfile"></a>3.2 一台主机可以有多个Dockerfile</h3><blockquote><p>想使用多个Dockerfile创建镜像, 可以在不同目录编写Dockerfile，然后在Dockerfile 所在的目录下构建新的镜像</p></blockquote><p><em>注意：Dockerfile 中所包含的需要的内容；如COPY的文件、目录等，都需要在Dockerfile 同级目录下存在；</em></p><h3 id="3-3-使用-build-基于Dockerfile制作镜像的命令"><a href="#3-3-使用-build-基于Dockerfile制作镜像的命令" class="headerlink" title="3.3 使用 build 基于Dockerfile制作镜像的命令"></a>3.3 使用 build 基于Dockerfile制作镜像的命令</h3><p><strong>① 格式：</strong></p><ul><li>docker build [OPTIONS] PATH | URL | -</li></ul><p><strong>② 选项：</strong></p><ul><li>-t：打标签</li><li>-f：指定Dockerfile文件路径</li><li>-c，- cpu-shares int ：CPU份额（相对权重）</li><li>-m，- memory bytes：内存限制</li><li>–build-arg：设置构建时变量，就是构建的时候修改ARG指令的参数</li></ul><p><strong>注意：在使用 docker build 时在最后一定要加上 ‘  . ’</strong></p><h2 id="4-DockerFile使用案例"><a href="#4-DockerFile使用案例" class="headerlink" title="4. DockerFile使用案例"></a>4. DockerFile使用案例</h2><h3 id="4-1-FROM-指令"><a href="#4-1-FROM-指令" class="headerlink" title="4.1 FROM 指令"></a>4.1 FROM 指令</h3><blockquote><p><strong>FROM指令介绍</strong></p></blockquote><ul><li>指令格式:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;repository&gt;[:&lt;tag&gt;]  或  <span class="keyword">FROM</span> &lt;repository&gt;@&lt;digest&gt;</span><br><span class="line">注：</span><br><span class="line">   - &lt;repository&gt;   指定作为base image的名称</span><br><span class="line">   - &lt;tag&gt;          base image的标签，省略时默认latest</span><br><span class="line">   - &lt;digest&gt;       是镜像的哈希码；使用哈希码会更安全一点</span><br></pre></td></tr></table></figure><ul><li><p>FROM 指令必须是 Dockerfile 中 非注释行的第一个指令，即一个 Dockerfile 从FROM语句；</p></li><li><p>FROM 指令用于 为镜像文件构建过程指定基础镜像，后续的指令运行于此基础镜像所提供的运行环境；</p></li><li><p>FROM可以在一个 Dockerfile 中出现多次，如果有需求在一个 Dockerfile 中创建多个镜像。</p></li><li><p>如果FROM语句没有指定镜像标签，则默认使用latest标签。</p></li><li><p>实践中，基准镜像可以是任何可用镜像文件, 默认情况下, docker build会在docker主机上查找指定的镜像文件, 在其不存在时, 则会自动从Docker的公共库 pull 镜像下来。如果找不到指定的镜像文件，docker build 会返回一个错误信息；</p></li></ul><blockquote><p><strong>FROM使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Description: test image</span></span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br></pre></td></tr></table></figure><h3 id="4-2-MAINTAINER-指令"><a href="#4-2-MAINTAINER-指令" class="headerlink" title="4.2 MAINTAINER 指令"></a>4.2 MAINTAINER 指令</h3><blockquote><p><strong>MAINTAINER 指令介绍</strong></p></blockquote><ul><li>指令格式:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;&lt;authtors detail&gt;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>用于让dockerfile制作者提供本人的详细信息</p></li><li><p>dockerfile 并不限制 MAINTAINER 指令可在出现的位置，但推荐将其放置于FROM指令之后</p></li></ul><blockquote><p><strong>MAINTAINER 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-COPY-指令"><a href="#4-3-COPY-指令" class="headerlink" title="4.3 COPY 指令"></a>4.3 COPY 指令</h3><blockquote><p><strong>COPY 指令介绍</strong></p></blockquote><ul><li>指令格式:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> &lt;src&gt;... &lt;dest&gt;  或者  COPY [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br><span class="line">注：</span><br><span class="line">   - 在路径中有空白字符时，通常使用第二种格式</span><br><span class="line">   - &lt;src&gt;：要复制的源文件或目录，支持使用通配符</span><br><span class="line">   - &lt;dest&gt;：目标路径，即正在创建的image的文件系统路径；建议&lt;dest&gt;使用绝对路径，否则，<span class="keyword">COPY</span><span class="bash">指定以WORKDIR为起始路径</span></span><br></pre></td></tr></table></figure><ul><li>文件复制准则<ul><li>&lt;src&gt;的文件或目录必须是build上下文中的路径，不能是父目录中的文件，意思就是&lt;src&gt;的文件或目录必须是在dockerfile文件所在的目录中；</li><li>如果&lt;src&gt;是目录，则其内部文件或子目录会被递归复制，但&lt;src&gt;目录自身不会被复制；如果想将&lt;src&gt;目录自身及子目录子文件都复制过去的话，需要在&lt;dest&gt;结尾上也写上&lt;src&gt;的目录名。</li><li>如果指定了多个&lt;src&gt;，或在&lt;src&gt;中使用了通配符，则&lt;dest&gt;必须是一个目录，且必须以 / 结尾；</li><li>如果&lt;dest&gt;目录不存在，他将会被自动创建，这包括父目录路径。</li></ul></li></ul><blockquote><p><strong>COPY 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例一 : COPY 文件</span></span><br><span class="line">（<span class="number">1</span>）编写Dockerfile文件；要确保dockerfile 同级路径下有这两个.html文件</span><br><span class="line"><span class="comment"># Description: test image</span></span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;index.html&quot;</span>, <span class="string">&quot;tools&quot;</span>, <span class="string">&quot;/data/web/html/&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）在dockerfile同级目录下准备好.html文件</span><br><span class="line">[root@docker lemon]<span class="comment"># mkdir -p tools/swarm</span></span><br><span class="line">[root@docker lemon]<span class="comment"># echo &#x27;&lt;h1&gt;Busybox httpd server-1&lt;/h1&gt;&#x27; &gt; index.html</span></span><br><span class="line">[root@docker lemon]<span class="comment"># echo &#x27;&lt;h1&gt;Busybox httpd server-2&lt;/h1&gt;&#x27; &gt; tools/test.html</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.1 .</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxo3kzw0j30t60dydlh.jpg" alt="image-20200815150114125"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">4</span>）基于此新建镜像运行容器，进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 --rm busyboxhttpd:v0.1 ls /data/web/html/</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxo80u3oj30t5044mys.jpg" alt="image-20200815150152964"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例二 : COPY 目录</span></span><br><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.html /data/web/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> yum.repos.d /etc/yum.repos.d/     <span class="comment">#需要把复制目录名字也写在容器中要复制的路径下！</span></span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）在dockerfile同级目录下准备好yum.repos.d 目录</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxobap55j30t205h403.jpg" alt="image-20200815150302481"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">3</span>）使用build 制作镜像</span><br><span class="line">[root@along img1]<span class="comment"># docker build -t busyboxhttpd:v0.2 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）基于此新建镜像运行容器，进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --rm busyboxhttpd:v0.2 ls /etc/yum.repos.d/</span></span><br><span class="line">yum.repo</span><br></pre></td></tr></table></figure><h3 id="4-4-ADD-指令"><a href="#4-4-ADD-指令" class="headerlink" title="4.4 ADD 指令"></a>4.4 ADD 指令</h3><blockquote><p><strong>ADD 指令介绍</strong></p></blockquote><ul><li>指令格式:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> &lt;src&gt; .. &lt;dest&gt;  或    ADD [<span class="string">&quot;&lt;src&gt;&quot;</span>.. <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li><p>ADD 指令类似于COPY指令，但ADD支持&lt;src&gt;使用TAR文件和URL路径</p></li><li><p>操作准则</p><ul><li>同COPY指令</li><li>如果&lt;src&gt;为URL且&lt;dest&gt;不以 / 结尾，则&lt;src&gt;指定的文件将被下载并直接被创建为&lt;dest&gt;;  如果&lt;dest&gt;以 / 结尾，则文件名URL指定的文件将被直接下载并保存为&lt;dest&gt;/ &lt;filename&gt;</li><li>如果&lt;src&gt;是一个本地系统上的压缩格式的tar文件，它将被展开为一个目录，其行为类似于”tar-x”命令；然而，通过URL获取到的tar文件将不会自动展开；</li><li>如果&lt;src&gt;有多个，或其间接或直接使用了通配符，则&lt;dest&gt;必须是一个以/结尾的目录路径 ;如果&lt;dest&gt;不以/结尾，则其被视作一个普通文件，&lt;src&gt;的内容将被直接写入到&lt;dest&gt;；</li></ul></li></ul><blockquote><p><strong>ADD 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">案例一 : <span class="keyword">COPY</span><span class="bash"> 网上路径（URL）的tar包</span></span><br><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="comment"># 注：ADD 的&lt;src&gt; 是网上的nginx下载路径；docker服务器要有网！COPY是当前本地路径</span></span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> httpd-2.4.18.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> http://nginx.org/download/nginx-0.1.12.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）确保dockerfile其目录下有httpd包</span><br><span class="line">httpd-<span class="number">2.4</span>.<span class="number">18</span>.tar.gz</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.3 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）基于此新建镜像运行容器，验证两种复制指令的不同之处</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --rm busyboxhttpd:v0.3 ls /usr/local/src</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxofp8icj30t303t77n.jpg" alt="image-20200815151138647"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@docker lemon]<span class="comment"># echo &#x27;net.ipv4.ip_forward = 1&#x27;&gt;&gt;/usr/lib/sysctl.d/00-system.conf</span></span><br><span class="line">[root@docker lemon]<span class="comment"># systemctl restart network</span></span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --rm busyboxhttpd:v0.3 ls /usr/local/src</span></span><br><span class="line">httpd-<span class="number">2.4</span>.<span class="number">18</span>.tar.gz       <span class="comment">#可以看到上面的警告已经没有了</span></span><br><span class="line">nginx-<span class="number">0.1</span>.<span class="number">12</span>.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例二 : COPY 本地的路径的tar包</span></span><br><span class="line"><span class="comment"># 这次我们在“ADD”指令中使用本地的压缩包，验证我上面所说的是否正确</span></span><br><span class="line">（<span class="number">1</span>）修改dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> httpd-2.4.18.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-0.1.12.tar.gz /usr/<span class="built_in">local</span>/src/      <span class="comment"># 将&lt;src&gt;改成本地</span></span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）在dockerfile同级目录下准备好压缩包</span><br><span class="line">[root@docker lemon]<span class="comment"># ls httpd-2.4.18.tar.gz nginx-0.1.12.tar.gz</span></span><br><span class="line">httpd-<span class="number">2.4</span>.<span class="number">18</span>.tar.gz nginx-<span class="number">0.1</span>.<span class="number">12</span>.tar.gz</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）使用build 制作镜像，然后再基于此镜像启动容器来验证两种复制指令的不同之处</span><br><span class="line"><span class="comment">#在构建之前先将之前构建v0.3镜像删除</span></span><br><span class="line">[root@docker lemon]<span class="comment"># docker rmi 61f741f13035</span></span><br><span class="line"><span class="comment">#从新构建一次v0.3镜像</span></span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.3 .</span></span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">[root@tx_lemon ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busyboxhttpd        v0.<span class="number">3</span>              f5927a4727cb       <span class="number">19</span> seconds ago         <span class="number">9.59</span>MB</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --rm busyboxhttpd:v0.3 ls -lh /usr/local/src</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxol58nkj30t503j40j.jpg" alt="image-20200815152128173"></p><p>看到此图，证明我上面在案例一中所说是正确的，“ADD”指令只针对本地压缩包才会先解压再拷贝到容器；但是针对网路URL的压缩包不生效！</p><h3 id="4-5-WORKDIR-指令"><a href="#4-5-WORKDIR-指令" class="headerlink" title="4.5 WORKDIR 指令"></a>4.5 WORKDIR 指令</h3><blockquote><p><strong>WORKDIR 指令介绍</strong></p></blockquote><ul><li>指令格式：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;dirpath&gt;</span></span><br></pre></td></tr></table></figure><ul><li>用于为Dockerfile中所有的RUN、CMD、ENTRYPOINT、COPY和ADD指定设定工作目录（就相当于linux系里的“ cd ”命令）</li><li>在Dockerfile文件中，WORKDIR指令可出现多次，其路径可以为相对路径也可以为绝对路径；另外，WORKDIR也可调用由ENV指定定义的变量。</li></ul><blockquote><p><strong>WORKDIR 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）修改dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-0.1.12.tar.gz ./src/</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.4 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）运行容器</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run -it --rm busyboxhttpd:v0.4 sh</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxopd8r2j30t5034aax.jpg" alt="image-20200815152636161"></p><h3 id="4-6-VOLUME-指令"><a href="#4-6-VOLUME-指令" class="headerlink" title="4.6 VOLUME 指令"></a>4.6 VOLUME 指令</h3><blockquote><p><strong>VOLUME 指令介绍</strong></p></blockquote><ul><li>指令格式：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;mountpoint&gt;   或    VOLUME [<span class="string">&quot;&lt;mountpoint&gt;&quot;</span>]</span></span><br><span class="line">注：如果挂载点目录路径下此前文件存在，docker <span class="keyword">run</span><span class="bash">命令会在卷挂载完成后将此前的所有文件复制到新挂载的卷中</span></span><br></pre></td></tr></table></figure><ul><li>用于在image中创建一个挂载点目录，以挂载Docker host.上的卷或其它容器上的卷</li><li>意思就是将docker宿主机目录挂载到容器的目录；宿主机目录有什么，容器目录就有什么。</li><li>抽象比喻：宿主目录  块设备    容器目录 挂载点</li></ul><blockquote><p><strong>VOLUME 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/mysql</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /data/mysql</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.5 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于此新建镜像运行容器，进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 --rm -it busyboxhttpd:v0.5 /bin/sh</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxot42erj30t602b3zv.jpg" alt="image-20200815153322179"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">4</span>）打开一个终端，用下面命令查看宿主机挂载的目录；inspect：查看容器详细信息</span><br><span class="line">[root@docker ~]<span class="comment"># docker inspect -f &#123;&#123;.Mounts&#125;&#125; web1</span></span><br><span class="line">[&#123;<span class="keyword">volume</span><span class="bash"> 58e3db45096afd5008d4d8c19aae35ea7504a867c3429e00f7f667bce816e741 /var/lib/docker/volumes/58e3db45096afd5008d4d8c19aae35ea7504a867c3429e00f7f667bce816e741/_data /data/mysql <span class="built_in">local</span>  <span class="literal">true</span> &#125;]</span></span><br><span class="line"></span><br><span class="line">（<span class="number">5</span>）进入上面的<span class="keyword">volume</span><span class="bash">目录，然后创建一个1.txt文件</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxowbdy8j30t702cq3z.jpg" alt="image-20200815153453718"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">6</span>）再回到容器中，ls查看一次 /data/mysql/ 目录</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxoy9sezj30t307ftb3.jpg" alt="image-20200815153538722"></p><h3 id="4-7-EXPOSE-指令"><a href="#4-7-EXPOSE-指令" class="headerlink" title="4.7 EXPOSE 指令"></a>4.7 EXPOSE 指令</h3><blockquote><p><strong>EXPOSE 指令介绍</strong></p></blockquote><ul><li>指令格式：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt;[/ &lt;protocol&gt;] [&lt;port&gt;[/ &lt;protocol&gt;] ....</span><br><span class="line">注：</span><br><span class="line">   - &lt;protocol&gt;用于指定传输层协议，可为tcp或udp二者之一，默认为TCP协议</span><br><span class="line">   - <span class="keyword">EXPOSE</span>指令可一次指定多个端口，例如：<span class="keyword">EXPOSE</span> <span class="number">11211</span>/udp <span class="number">11211</span>/tcp</span><br></pre></td></tr></table></figure><ul><li>用于为容器<strong>打开指定要监听的端口</strong>以实现与外部通信</li></ul><blockquote><p><strong>EXPOSE 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> test.html /data/web/html/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.6 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于此新建镜像运行容器，进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 -P --rm -itd busyboxhttpd:v0.6 /bin/httpd -f -h /data/web/html  </span></span><br><span class="line"><span class="comment"># 启动httpd服务，在启动时指定网页存放路径；</span></span><br><span class="line"><span class="comment"># -P将容器内部开放的网络端口随机映射到宿主机的一个端口上；</span></span><br><span class="line"><span class="comment"># -p指定要映射的端口，一个指定端口上只可以绑定一个容器；</span></span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）另打开一个终端，验证httpd 服务的<span class="number">80</span>端口</span><br><span class="line">[root@docker ~]<span class="comment"># docker inspect -f &#123;&#123;.NetworkSettings.IPAddress&#125;&#125; web1</span></span><br><span class="line"><span class="number">172.17</span>.<span class="number">0.2</span>                                        <span class="comment"># 查看容器的ip地址</span></span><br><span class="line">[root@docker ~]<span class="comment"># docker port web1                 # 只查看web1容器的PORTS信息</span></span><br><span class="line"><span class="number">80</span>/tcp -&gt; <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">32768</span></span><br><span class="line">[root@docker ~]<span class="comment"># curl 172.17.0.2:80/test.html     # 通过容器的端口访问httpd 服务</span></span><br><span class="line">&lt;h1&gt;Busybox httpd server-<span class="number">2</span>&lt;/h1&gt; </span><br><span class="line">[root@docker ~]<span class="comment"># curl 127.0.0.1:32768/test.html   # 通过宿主机的端口访问httpd 服务</span></span><br><span class="line">&lt;h1&gt;Busybox httpd server-<span class="number">2</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxp4lnl2j30t80650u6.jpg" alt="image-20200815154829318"></p><h3 id="4-8-ENV-指令"><a href="#4-8-ENV-指令" class="headerlink" title="4.8 ENV 指令"></a>4.8 ENV 指令</h3><blockquote><p><strong>ENV 指令介绍</strong></p></blockquote><ul><li>指令格式：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;  或    <span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; . .</span><br><span class="line">注：</span><br><span class="line">   - 第一种格式中，&lt;key&gt;之后的所有内容均会被视作其&lt;value&gt;的组成部分， 因此，一次只能设置一个变量;</span><br><span class="line">   - 第二种格式可用一次设置多个变量，每个变量为一个”&lt;key&gt;=&lt;value&gt;<span class="string">&quot;的键值对，如果&lt;value&gt;中包含空格，可以以反斜线（\）进行转义，也可通过对&lt;value&gt;加引号进行标识；另外，反斜线也可用于续行;</span></span><br><span class="line"><span class="string">   - 定义多个变量时，建议使用第二种方式，以便在同一层中完成所有功能</span></span><br></pre></td></tr></table></figure><ul><li>用于为镜像定义所需的环境变量，并可被Dockerfile文件中位于其后的其它指令(ENV、ADD、COPY等)所调用</li><li>调用格式为$variable_ name 或 ${variable_ name}</li></ul><blockquote><p><strong>ENV 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> DOC_ROOT=/data/web/html/ \</span><br><span class="line">    WEB_SERVER_PACKAGE=<span class="string">&quot;nginx-0.1.12&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.html <span class="variable">$&#123;DOC_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="variable">$&#123;WEB_SERVER_PACKAGE&#125;</span>.tar.gz ./src/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span>:<span class="number">80</span>/tcp</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.7 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于此新建镜像运行容器，进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --rm -it busyboxhttpd:v0.7 ls /usr/local/src /data/web/html</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxp8l4e0j30t605jgm5.jpg" alt="image-20200815155946327"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- 也可以使用printenv 查看变量验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 --rm -it busyboxhttpd:v0.7 printenv</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxpbwnqnj30t405x0un.jpg" alt="image-20200815160017504"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- 在启动容器时，使用docker <span class="keyword">run</span><span class="bash"> -e 添加或修改变量</span></span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 -e TOOLS=&quot;lemon&quot; --rm -it busyboxhttpd:v0.7 printenv</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxpflje6j30t206y768.jpg" alt="image-20200815160047328"></p><h3 id="4-9-RUN-指令"><a href="#4-9-RUN-指令" class="headerlink" title="4.9 RUN 指令"></a>4.9 RUN 指令</h3><blockquote><p><strong>RUN 指令介绍</strong></p></blockquote><ul><li>指令格式:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;  或    RUN [<span class="string">&quot;&lt;executable&gt;&quot;</span>, <span class="string">&quot;&lt;param1&gt;&quot;</span>, <span class="string">&quot;&lt;param2&gt;&quot;</span>]</span></span><br><span class="line">注：</span><br><span class="line">   - 第一种格式中，&lt;command&gt;通常是一个<span class="keyword">shell</span><span class="bash">命令， 且以“/bin/sh -c”来运行它，这意味着此进程在容器中的PID不为1,不能接收Unix信号，因此，当使用docker stop &lt;container&gt;命令停止容器时，此进程接收不到SIGTERM信号；</span></span><br><span class="line">   - 第二种语法格式中的参数是一个JSON格式的数组，其中&lt;executable&gt;为要运行的命令，后面的 &lt;paramN&gt;为传递给命令的选项或参数；然而，此种格式指定的命令不会以“/bin/sh -c”来发起，因此常见的<span class="keyword">shell</span><span class="bash">操作如变量替换以及通配符(?,*等)替换将不会进行；不过，如果要运行的命令依赖于此shell特性的话，可以将其替换为类似下面的格式。比如：RUN [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;&lt;executable&gt;&quot;</span>, <span class="string">&quot;&lt;param1&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>RUN 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写dockerfile文件：使用<span class="keyword">RUN</span><span class="bash"> 执行解压命令</span></span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> DOC_ROOT=/data/web/html/ \</span><br><span class="line">    WEB_SERVER_PACKAGE=<span class="string">&quot;nginx-0.1.12&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.html <span class="variable">$&#123;DOC_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="variable">$&#123;WEB_SERVER_PACKAGE&#125;</span>.tar.gz ./src/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span>:<span class="number">80</span>/tcp</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ./src &amp;&amp; \</span></span><br><span class="line"><span class="bash">    tar -xf <span class="variable">$&#123;WEB_SERVER_PACKAGE&#125;</span>.tar.gz</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.8 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于此新建镜像运行容器，进行验证：已经执行了解压命令</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 -P --rm -it busyboxhttpd:v0.8 ls /usr/local/src</span></span><br><span class="line">nginx-<span class="number">0.1</span>.<span class="number">12</span>       nginx-<span class="number">0.1</span>.<span class="number">12</span>.tar.gz</span><br></pre></td></tr></table></figure><h3 id="4-10-CMD-指令"><a href="#4-10-CMD-指令" class="headerlink" title="4.10 CMD 指令"></a>4.10 CMD 指令</h3><blockquote><p><strong>CMD 指令介绍</strong></p></blockquote><ul><li>指令格式</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;  或  CMD [<span class="string">&quot;&lt;executable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>]</span></span><br><span class="line">注：</span><br><span class="line">   - 前两种语法格式的意义同<span class="keyword">RUN</span><span class="bash"></span></span><br><span class="line"><span class="bash">   - 第三种则用于为ENTRYPOINT指令提供默认参数</span></span><br><span class="line">   - json数组中，要使用双引号，单引号会出错</span><br></pre></td></tr></table></figure><ul><li>在Dockerfile中也可以存在多个CMD指令，但仅最后一个会生效</li><li>类似于RUN指令，CMD指令也可用于运行任何命令或应用程序，不过，二者的运行时间点不同</li><li>RUN指令运行于映像文件构建过程中，而CMD指令运行于基于Dockerfile构建出的新映像文件启动一个容器时</li><li>CMD指令的首要目的在于为启动的容器指定默认要运行的程序，且其运行结束后，容器也将终止；不过，CMD指定的命令其可以被docker run的命令行选项所覆盖</li></ul><blockquote><p><strong>CMD 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> WEB_DOC_ROOT=<span class="string">&quot;/data/web/html/&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.html <span class="variable">$&#123;WEB_DOC_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/httpd -f -h <span class="variable">$&#123;WEB_DOC_ROOT&#125;</span></span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v0.9 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于此新建镜像运行容器，进行验证，httpd正常运行</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 --rm -d -p 80:80 busyboxhttpd:v0.9</span></span><br><span class="line">[root@docker lemon]<span class="comment"># curl 192.168.1.1</span></span><br><span class="line">&lt;h1&gt;Busybox httpd server-<span class="number">1</span>&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">--- 可以使用exec 进入web1容器内进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker exec -it web1 /bin/sh</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxqpsrz0j30t003z759.jpg" alt="image-20200815161058384"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- 也可以使用<span class="keyword">CMD</span><span class="bash">定义的命令，在启动容器时，会被后面追加的指令覆盖</span></span><br><span class="line">[root@docker lemon]<span class="comment"># docker kill web1</span></span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web1 --rm busyboxhttpd:v0.9 ls /</span></span><br><span class="line">bin</span><br><span class="line">data</span><br><span class="line">……</span><br><span class="line">[root@docker lemon]<span class="comment"># curl 172.17.0.2  # 被ls /覆盖，所以没有执行httpd服务</span></span><br><span class="line">curl: (<span class="number">7</span>) Failed connect to <span class="number">172.17</span>.<span class="number">0.2</span>:<span class="number">80</span>; 没有到主机的路由</span><br></pre></td></tr></table></figure><h3 id="4-11-ENTRYPOINT-指令"><a href="#4-11-ENTRYPOINT-指令" class="headerlink" title="4.11 ENTRYPOINT 指令"></a>4.11 ENTRYPOINT 指令</h3><blockquote><p><strong>ENTRYPOINT 指令介绍</strong></p></blockquote><ul><li>指令格式</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;  或  ENTRYPOINT [<span class="string">&quot;&lt;executable&gt;&quot;</span>, <span class="string">&quot;&lt;param1&gt;&quot;</span>, <span class="string">&quot;&lt;param2&gt;&quot;</span>]</span></span><br><span class="line">注：</span><br><span class="line">  - docker <span class="keyword">run</span><span class="bash">命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用</span></span><br><span class="line">  - Dockerfile文件中也可以存在多个<span class="keyword">ENTRYPOINT</span><span class="bash">指令，但仅有最后一个会生效</span></span><br></pre></td></tr></table></figure><ul><li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使得容器像是一个单独的可执行程序</li><li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序；但docker run命令的 <code>--entrypoint</code>选项能覆盖ENTRYPOINT 指令指定的程序</li></ul><blockquote><p><strong>ENTRYPOINT 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写dockerfile文件</span><br><span class="line"><span class="keyword">FROM</span> busybox:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> WEB_DOC_ROOT=<span class="string">&quot;/data/web/html/&quot;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.html <span class="variable">$&#123;WEB_DOC_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /bin/httpd -f -h <span class="variable">$&#123;WEB_DOC_ROOT&#125;</span></span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）使用build 制作镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v1.1 .</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于此新建镜像运行容器，进行验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web2 --rm busyboxhttpd:v1.1 ls /</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxqu78c2j30t002xta0.jpg" alt="image-20200815161534197"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">4</span>）打开一个终端，验证</span><br><span class="line">[root@docker ~]<span class="comment"># curl 172.17.0.2    # httpd服务仍然执行，没有被ls / 指令覆盖</span></span><br><span class="line">&lt;h1&gt;Busybox httpd server-<span class="number">1</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="4-12-ONBUILD-指令"><a href="#4-12-ONBUILD-指令" class="headerlink" title="4.12 ONBUILD 指令"></a>4.12 ONBUILD 指令</h3><blockquote><p><strong>ONBUILD 指令介绍</strong></p></blockquote><ul><li>指令格式</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> &lt; Instruction&gt;</span><br><span class="line">注：</span><br><span class="line">   - 尽管任何指令都可注册成为触发器指令，但<span class="keyword">ONBUILD</span>不能自我嵌套，且不会触发<span class="keyword">FROM</span>和<span class="keyword">MAINTAINER</span>指令</span><br><span class="line">   - 使用包含<span class="keyword">ONBUILD</span>指令的Dockerfile构建的镜像应该使用特殊的标签，例如ruby:<span class="number">2.0</span>-onbuil</span><br><span class="line">   - 在<span class="keyword">ONBUILD</span>指令中使用<span class="keyword">ADD</span><span class="bash">或COPY指令应该格外小心，因为新构建过程的上下文在缺少指定的源文件时会失败</span></span><br></pre></td></tr></table></figure><ul><li>用于在Dockerfile中定义一个触发器</li><li>Dockerfile用于build映像文件，此映像文件亦可作为base image被另一个Dockerfile用作FROM指令的参数，并以之构建新的映像文件</li><li>在后面的这个Dockerfile中的FROM指令在build过程中被执行时，将会“触发”创建其base image的Dockerfile文件中的ONBUILD指令定义的触发器</li></ul><blockquote><p><strong>ONBUILD 使用示例</strong></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）编写第一个Dockerfile文件，准备作为第二个Dockerfile文件的<span class="keyword">FROM</span>基础镜像</span><br><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;Lemon &lt;lemon_row@163.com&gt;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> WEB_DOC_ROOT=<span class="string">&quot;/data/web/html&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;WEB_DOC_ROOT&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;Busybox httpd server1&lt;/h1&gt;&quot;</span> &gt; <span class="variable">$&#123;WEB_DOC_ROOT&#125;</span>/index.html</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;Busybox httpd server2&lt;/h1&gt;&quot;</span> &gt;&gt; /data/web/html/index.html</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）编写第<span class="number">2</span>个Dockerfile文件，<span class="keyword">FROM</span> 基于第<span class="number">1</span>个Dockerfile</span><br><span class="line"><span class="keyword">FROM</span> busyboxhttpd:v1.<span class="number">3</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）基于两个Dockerfile文件新建镜像，并运行容器，进行验证</span><br><span class="line">① 基于第<span class="number">1</span>个Dockerfile文件新建镜像</span><br><span class="line">[root@docker lemon]<span class="comment"># docker build -t busyboxhttpd:v1.3 .</span></span><br><span class="line">② 基于第<span class="number">2</span>个Dockerfile文件新建镜像</span><br><span class="line">[root@docker tom]<span class="comment"># docker build -t busyboxhttpd:v1.4 .</span></span><br><span class="line">③ 基于上面两个新镜像启动容器验证</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web2 --rm busyboxhttpd:v1.3 cat /data/web/html/index.html</span></span><br><span class="line">&lt;h1&gt;Busybox httpd server1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">--- 证明<span class="keyword">ONBUILD</span>指令，只在第<span class="number">2</span>个Dockerfile文件中生效</span><br><span class="line">[root@docker lemon]<span class="comment"># docker run --name web2 --rm busyboxhttpd:v1.4 cat /data/web/html/index.html</span></span><br><span class="line">&lt;h1&gt;Busybox httpd server1&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;Busybox httpd server2&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h1 id="六、Docker-容器的操作控制"><a href="#六、Docker-容器的操作控制" class="headerlink" title="六、Docker 容器的操作控制"></a>六、Docker 容器的操作控制</h1><h2 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1. 运行容器"></a>1. 运行容器</h2><blockquote><p><strong><code>docker run</code> 启动容器的方法</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式 : docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">OPTIONS说明：</span><br><span class="line">    -i: 以交互模式运行容器，通常与 -t 同时使用</span><br><span class="line">    -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</span><br><span class="line">    -d: 后台运行容器，并返回容器ID</span><br><span class="line">    -v: 挂在绑定一个数据卷</span><br><span class="line">    -P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><span class="line">    -p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">    -h: 指定容器的hostname</span><br><span class="line">    -m:设置容器使用内存最大值</span><br><span class="line">    --name=&quot;nginx-lb&quot;: 为容器指定一个名称</span><br><span class="line">    --cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行</span><br><span class="line">    --net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型</span><br></pre></td></tr></table></figure><blockquote><p><strong>示例</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -it centos:latest pwd</span></span><br><span class="line">/         <span class="comment"># 容器启动时执行 pwd，返回的 / 是容器中的当前目录。 </span></span><br><span class="line"></span><br><span class="line">[root@docker ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID    IMAGE         COMMAND       CREATED       STATUS       PORTS       NAMES</span><br><span class="line"><span class="comment"># 咦，怎么没有容器？用 docker ps -a 或 docker container ls -a 看看。</span></span><br><span class="line"></span><br><span class="line">[root@docker ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID     IMAGE       COMMAND      CREATED     STATUS        PORTS         NAMES</span><br><span class="line">8c736027fc53  centos:latest   <span class="string">&quot;pwd&quot;</span>   3 minutes ago   Exited (0) 3      amazing_lederberg</span><br><span class="line"><span class="comment"># -a 会显示所有状态的容器，可以看到，之前的容器已经退出了，状态为Exited。</span></span><br></pre></td></tr></table></figure><p>这种“一闪而过”的容器通常不是我们想要的结果，我们希望容器能够保持 runing 状态，这样才能被我们使用。</p><h2 id="2-让容器长期运行"><a href="#2-让容器长期运行" class="headerlink" title="2. 让容器长期运行"></a>2. 让容器长期运行</h2><blockquote><p>因为容器的生命周期依赖于启动时执行的命令，<strong>只要该命令不结束，容器也就不会退出</strong>。</p></blockquote><p>理解了这个原理，我们就可以通过执行一个长期运行的命令来保持容器的运行状态。</p><p>例如执行下面的命令：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrb4tzfj30rk02tjrq.jpg" alt="image-20200815213412988"></p><p>while 语句让 bash 不会退出。我们可以打开另一个终端查看容器的状态：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxreev6ij30w902fgmd.jpg" alt="image-20200815213437292"></p><p>可见容器仍处于运行状态。不过这种方法有个缺点：它占用了一个终端。</p><p>我们可以加上参数 <code>-d</code> 以后台方式启动容器。先删除掉之前运行的容器 <code>docker rm -f -v $(docker ps -qa)</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrh3p4kj30w902hweh.jpg" alt="image-20200815213529673"></p><p>容器启动后回到了 docker host 的终端。这里看到 docker 返回了一串字符，这是容器的 ID。</p><p>通过 <code>docker ps</code> 查看容器：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrjxll7j30wa035wfp.jpg" alt="image-20200815213613109"></p><p><strong>现在有了两个正在运行的容器。这里注意一下容器的 CONTAINER ID 和 NAMES 这两个字段：</strong></p><ul><li>CONTAINER ID 是容器的 “短ID”，前面启动容器时返回的是 “长ID”。短ID是长ID的前12个字符。</li><li>NAMES 字段显示容器的名字，在启动容器时可以通过 –name 参数显示地为容器命名，如果不指定，docker 会自动为容器分配名字。</li></ul><p>上面通过 while 启动的容器虽然能够保持运行，但实际上没有干什么有意义的事情。容器常见的用途是运行后台服务，例如前面已经看到的 http server：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrn81h0j30up05sgob.jpg" alt="image-20200815213822361"></p><p><code>docker history httpd</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd- <span class="built_in">foreground</span>：是用来启动httpd的， 而且这个命令会在容器的前台运行，占用当前终端，因此httpd镜像在启动成容器时，容器并不会退出，你要把容器当做linux系统中的一个进程来看。</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrqdbqgj30um04i76j.jpg" alt="image-20200815213847557"></p><h2 id="3-两种进入容器的方法"><a href="#3-两种进入容器的方法" class="headerlink" title="3. 两种进入容器的方法"></a>3. 两种进入容器的方法</h2><blockquote><p><strong>有时候经常需要进到容器里去做一些工作，比如查看日志、调试、启动其他进程等。</strong></p></blockquote><p>有两种方法进入容器：</p><ul><li>docker  attach  container     （不推荐使用）</li><li>docker  exec   container      （推荐使用）</li></ul><p><strong>通过 docker attach 进入容器：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrusvrej30uo06zjtm.jpg" alt="image-20200815214803777"></p><p>这次我们通过 “长ID” attach 到了容器的启动命令终端，之后看到的是echo 每隔一秒打印的信息；使用attach进入容器后就意味着只要你退出或关闭当前这个终端的话，容器就会停止运行。（所以不推荐使用这个方法）</p><p><strong>通过 docker exec 进入容器：</strong></p><p><code>docker exec -it &lt;container&gt; bash|sh 是执行 exec 最常用的方式</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxrxhpyvj30w908dn06.jpg" alt="image-20200815215147955"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">说明如下</span><br><span class="line">① -it 以交互模式打开 pseudo-TTY，执行 bash，其结果就是打开了一个 bash 终端。</span><br><span class="line">② 进入到容器中，容器的 hostname 就是其 “短ID”。</span><br><span class="line">③ 可以像在普通 Linux 中一样执行命令。ps -elf 显示了容器启动进程<span class="keyword">while</span> 以及当前的 bash 进程。</span><br><span class="line">④ 执行 <span class="keyword">exit</span> 退出容器，回到 docker host。</span><br></pre></td></tr></table></figure><p>当然，如果只是为了查看容器启动命令的输出，可以使用 docker logs 命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-f</span> 的作用与 tail <span class="operator">-f</span> 类似，能够持续打印输出。</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxs1ow0oj30w8086jst.jpg" alt="image-20200815215414822"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxs5wtqdj30r10kvjsq.jpg" alt="image-20200815215649223"></p><h2 id="4-常用的容器操作"><a href="#4-常用的容器操作" class="headerlink" title="4. 常用的容器操作"></a>4. 常用的容器操作</h2><blockquote><p><strong>stop / start / restart 容器</strong></p></blockquote><p>通过 docker stop 可以停止运行的容器。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxsa44fpj30t607lwhg.jpg" alt="image-20200815221428343"></p><p>容器在 docker host 中实际上是一个进程，docker stop 命令本质上是向该进程发送一个 SIGTERM 信号。如果想快速停止容器，可使用 <code>docker kill</code> 命令，其作用是向容器进程发送 SIGKILL 信号。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxsdv6c2j30t7043wfb.jpg" alt="image-20200815221523123"></p><p>对于处于停止状态的容器，可以通过 docker start 重新启动。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grgxsgmzotj30t604875e.jpg" alt="image-20200815221556967"></p><p>docker start 会保留容器第一次启动时的所有参数。</p><p>docker restart 可以重启容器，其作用就是依次执行 docker stop 和docker start。</p><p>容器可能会因某种错误而停止运行。对于服务类容器，我们通常希望在这种情况下容器能够自动重启。启动容器时设置 <code>--restart</code> 就可以达到这个效果。</p><p><code>--restart=always</code> 意味着无论容器因何种原因退出（包括正常退出），就立即重启。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh04qnc10j30wa09l798.jpg" alt="image-20200815221725924"></p><blockquote><p><strong>pause / unpause 容器</strong></p></blockquote><p>有时我们只是希望暂时让容器暂停工作一段时间，比如要对容器的文件系统打个快照，或者 dcoker host 需要使用 CPU，这时可以执行 <code>docker pause</code>。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh04rt6xpj30w805n0un.jpg" alt="image-20200815221948204"></p><p>处于暂停状态的容器不会占用 CPU 资源，直到通过 <code>docker unpause</code> 恢复运行。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh04wgixtj30w904vwfu.jpg" alt="image-20200815222028084"></p><blockquote><p><strong>删除容器</strong></p></blockquote><p>使用 docker 一段时间后，host 上可能会有大量已经退出了的容器。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh04ybi9qj30wa05twhs.jpg" alt="image-20200815222053651"></p><p>这些容器依然会占用 host 的文件系统资源，如果确认不会再重启使用此类容器，可以通过 docker rm 删除。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh0513lkcj60w703qta102.jpg" alt="image-20200815222141369"></p><p>如果希望批量删除所有已经退出的容器，可以执行如下命令：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh052k0dij30xs066763.jpg" alt="image-20200815222218154"></p><p>顺便说一句：<code>docker rm</code> 是删除容器，而 <code>docker rmi</code> 是删除镜像。</p><h2 id="5-限制容器的操作"><a href="#5-限制容器的操作" class="headerlink" title="5. 限制容器的操作"></a>5. 限制容器的操作</h2><blockquote><p><strong>限制容器对内存的使用</strong></p></blockquote><p>一个 docker host 上会运行若干个容器，每个容器都需要 CPU、内存和 IO 等资源。对于 KVM，VMware 等虚拟化技术，用户可以控制分配多少 CPU、内存资源给每个虚拟机。对于容器，Docker 也提供了类似的机制避免某个容器因占用太多资源而影响其他容器乃至整个 host 的性能。</p><p><strong>内存限额</strong></p><p>与操作系统类似，容器可使用的内存包括两部分：物理内存 和 swap。 Docker 通过下面两组参数来控制容器内存的使用量。</p><ul><li><p><code>-m</code> 或 <code>--memory</code>：设置 内存的使用限额，例如 100M, 2G。</p></li><li><p><code>--memory-swap</code>：设置 内存 + swap 的使用限额。</p></li></ul><p>当执行命令：<code>docker run -m 200M --memory-swap=300M centos:latest</code></p><p>其含义是允许该容器最多使用 200M 的物理内存和 100M 的 swap。默认情况下，上面两组参数为 -1，即对容器内存 和 swap 的使用没有限制。</p><p>下面使用 progrium/stress 镜像来学习如何为容器分配内存。该镜像可用于对容器执行压力测试。</p><p>执行如下命令：</p><p><code>docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 280M</code></p><p><strong>解释：</strong></p><ul><li>–vm 1：启动 1 个内存工作线程。</li><li>–vm-bytes 280M：每个线程分配 280M 内存。</li><li>注：在真正分配内存时，是没必要使用 –vm 和 –vm-bytes参数的</li></ul><p><strong>运行结果如下：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh0569ja5j30ro09haer.jpg" alt="image-20200815222937376"></p><p><strong>因为 280M 在可分配的范围（300M）内，所以工作线程能够正常工作，其过程是：</strong></p><p>分配 280M 内存。</p><p>释放 280M 内存。</p><p>再分配 280M 内存。</p><p>再释放 280M 内存。</p><p>一直循环……</p><p><strong>如果让工作线程分配的内存超过 300M，结果如下：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh059iqiej30rm06zjul.jpg" alt="image-20200815223056580"></p><p>分配的内存超过限额，stress 线程报错，容器退出。</p><p>如果在启动容器时只指定 -m 而不指定 –memory-swap，那么 –memory-swap 默认为 -m 的两倍，比如：<code>docker run -it -m 200M ubuntu</code>，此时容器最多使用 200M 物理内存 和 400M swap。</p><blockquote><p><strong>限制容器对CPU的使用</strong></p></blockquote><p>默认设置下，所有容器可以平等地使用 host CPU 资源并且没有限制。</p><p>Docker 可以通过 <code>-c</code> 或 <code>--cpu-shares</code> 设置容器使用 CPU 的权重。如果不指定，默认值为 1024。</p><p>与内存限额不同，通过 <code>-c</code> 设置的 cpu share 并不是 CPU 资源的绝对数量，而是一个相对的权重值。</p><p>某个容器最终能分配到的 CPU 资源取决于它的 cpu share 占所有容器 cpu share 总和比例。</p><p><strong>换句话说：通过 cpu share 可以设置容器使用 CPU 的优先级</strong>。</p><p>比如在 docker host 中启动了两个容器：</p><ul><li><p><code>docker run --name &quot;container_A&quot; -c 1024 centos</code></p></li><li><p><code>docker run --name &quot;container_B&quot; -c 512 centos</code></p></li></ul><p>此时container_A 的 cpu share 1024，是 container_B 的两倍。当两个容器都需要 CPU 资源时，container_A 可以得到的 CPU 是 container_B 的两倍。 </p><p>需要特别注意的是, 这种按权重分配 CPU 只会发生在 CPU 资源紧张的情况下, 如果 container_A 处于空闲状态, 这时, 为了充分利用 CPU 资源, container_B 也可以分配到全部可用的 CPU。</p><p><strong>下面继续用 progrium/stress 做实验。</strong></p><p>1、启动 lemon1，cpu share 为 1024</p><p><code>docker run --name lemon1 -it -c 1024 progrium/stress --cpu 4</code></p><p><code>--cpu</code> 用来设置工作线程的数量。因为当前 host 有 4 颗 CPU，所以需要4个工作线程才能将 CPU 压满。如果 host 有多颗 CPU，则需要相应增加 –cpu 的数量。</p><p>注：在真正环境中 <code>--cpu</code> 选项是不需要使用的，这里使用是为了方便实验测试</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05ddildj30rl08mjv6.jpg" alt="image-20200815223919949"></p><p>2、启动 lemon2，cpu share 为 512</p><p><code>docker run --name lemon2 -it -c 512 progrium/stress --cpu 4</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05h20ztj30ro08wjvb.jpg" alt="image-20200815224114666"></p><p>3、在 host 中执行 top，查看容器对 CPU 的使用情况</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05jw7t1j30rp06tq6g.jpg" alt="image-20200815224157243"></p><p>4、现在暂停 lemon1</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05n5txlj30rm04cab1.jpg" alt="image-20200815224217943"></p><p>5、top 显示 lemon2 在 lemon1 空闲的情况下是能够用满整颗 CPU</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05pytkrj30rp041dhu.jpg" alt="image-20200815224315796"></p><blockquote><p><strong>限制容器的 Block IO</strong></p></blockquote><p>Block IO 是另一种可以限制容器使用的资源。Block IO 指的是磁盘的读 / 写，docker 可通过设置权重、限制 bps 和 iops 的方式控制容器读写磁盘的带宽。</p><p>注：目前 Block IO 限额只对 direct IO（不使用文件缓存）有效。</p><p><strong>block IO 权重</strong></p><p>默认情况下，所有容器能平等地读写磁盘，可以通过设置 <code>--blkio-weight</code> 参数来改变容器 block IO 的优先级。</p><p><code>--blkio-weight</code> 与 <code>--cpu-shares</code> 类似，设置的是相对权重值，默认为 500。在下面的例子中，lemon1读写磁盘的带宽是 lemon2 的两倍。</p><ul><li><p><code>docker run -it --name lemon1 --blkio-weight 600 ubuntu</code></p></li><li><p><code>docker run -it --name lemon2 --blkio-weight 300 ubuntu</code></p></li></ul><p><strong>……</strong></p><p><strong>限制 bps 和 iops</strong></p><ul><li><p>bps 是 byte per second，每秒读写的数据量。</p></li><li><p>iops 是 io per second，每秒 IO 的次数。 </p></li></ul><p>可通过以下参数控制容器的 bps 和 iops：</p><ul><li>–device-read-bps，限制读某个设备的 bps。</li><li>–device-write-bps，限制写某个设备的 bps。</li><li>–device-read-iops，限制读某个设备的 iops。</li><li>–device-write-iops，限制写某个设备的 iops。 </li></ul><p>下面这个例子限制容器写 /dev/sda 的速率为20 MB/s</p><p><code>docker run -it --device-write-bps /dev/sda:20MB centos</code></p><p><code>time dd if=/dev/zero of=test.out bs=1M count=800 oflag=direct</code></p><p>来看看实验结果:</p><p>通过 dd 测试在容器中写磁盘的速度, 因为容器的文件系统是在 host /dev/sda 上的, 在容器中写文件相当于对 host /dev/sda 进行写操作。另外，oflag=direct 指定用 direct IO 方式写文件，这样 –device-write-bps 才能生效。 </p><p>结果表明，bps 21.0 MB/s  </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05wya73j30ro07c40x.jpg" alt="image-20200815225042976"></p><p>作为对比测试，如果不限速，结果如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05wirw6j30rn07gtav.jpg" alt="image-20200815225320436"></p><blockquote><p><strong>为什么要限制容器？</strong></p></blockquote><p>比如：我现在有两个正在运行的容器 “web1” 和 “web2”</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grh05zsksbj60wa02t75g02.jpg" alt="image-20200815225354612"></p><p>此处的 web1 和 web2 都会占用系统资源，甚至会和系统抢占资源（CPU  内存  网络  硬盘），所以我们要限制容器，不然就会出现我上面所说的情况！！</p><h1 id="七、Docker-隔离及限制的底层技术"><a href="#七、Docker-隔离及限制的底层技术" class="headerlink" title="七、Docker 隔离及限制的底层技术"></a>七、Docker 隔离及限制的底层技术</h1><blockquote><p><strong>cgroup</strong> 和 <strong>namespace</strong> 是最重要的两种技术。<strong>cgroup</strong> 实现系统资源限额， <strong>namespace</strong> 实现资源隔离。 </p></blockquote><h2 id="1-cgroup"><a href="#1-cgroup" class="headerlink" title="1. cgroup"></a>1. cgroup</h2><p><strong>cgroup 全称 Control Group。</strong></p><ul><li><p>Linux 操作系统就是通过 cgroup 可以设置进程使用 CPU、内存 和 IO 资源的限额。</p></li><li><p>前面用到的 <code>--cpu-shares</code>、<code>-m</code>、<code>--device-write-bps</code> 实际上就是在配置 cgroup。 </p></li></ul><p><strong>cgroup 到底长什么样子呢？可以在 /sys/fs/cgroup 中找到它。</strong></p><ul><li>还是用例子来说明，启动一个容器，设置 –cpu-shares=512： </li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9o3i0r8j30t408ln0w.jpg" alt="image-20200815225935375"></p><ul><li>查看容器的 ID：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9o50mngj30t702tgmf.jpg" alt="image-20200815230103588"></p><ul><li>在 <code>/sys/fs/cgroup/cpu/docker</code> 目录中，Linux 会为每个容器创建一个 cgroup 目录，以容器长ID 命名：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9o8ada2j30wa06o41t.jpg" alt="image-20200815230156399"></p><p>目录中包含所有与 cpu 相关的 cgroup 配置，cpu.shares 文件保存的就是 –cpu-shares 的配置，值为 512</p><p>同样, /sys/fs/cgroup/memory/docker 和 /sys/fs/cgroup/blkio/docker 中保存的是内存以及 Block IO 的 cgroup 配置</p><h2 id="2-namespace"><a href="#2-namespace" class="headerlink" title="2. namespace"></a>2. namespace</h2><blockquote><p><strong>在每个容器中, 都能看到文件系统, 网卡等资源, 这些资源看上去就好像是容器自己的, 拿网卡来说, 每个容器都会认为自己有一块独立的网卡, 即使 host 上只有一块物理网卡, 这种方式非常好, 它使得容器更像一个独立的计算机。</strong></p><p><strong>Linux 使用了六种 namespace，分别对应六种资源：Mount、UTS、IPC、PID、Network 和 User，下面分别介绍。</strong> </p></blockquote><h3 id="Mount-namespace（文件系统的资源隔离）"><a href="#Mount-namespace（文件系统的资源隔离）" class="headerlink" title="Mount namespace（文件系统的资源隔离）"></a>Mount namespace（文件系统的资源隔离）</h3><p>Mount namespace 让容器看上去拥有整个文件系统。 </p><p>容器有自己的 / 目录，可以执行 mount 和 umount 命令。当然我们知道这些操作只在当前容器中生效，不会影响到 host 和其他容器。 </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9oceppaj30w904f75p.jpg" alt="image-20200815230901489"></p><h3 id="UTS-namespace-（主机名称的资源隔离）"><a href="#UTS-namespace-（主机名称的资源隔离）" class="headerlink" title="UTS namespace （主机名称的资源隔离）"></a>UTS namespace （主机名称的资源隔离）</h3><p>简单的说，UTS namespace 让容器有自己的 hostname。 默认情况下，容器的 hostname 是它的短ID，可以通过 -h 或 –hostname 参数设置。 </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ofakdrj30w604j75f.jpg" alt="image-20200815230941297"></p><h3 id="PID-namespace-（进程号的资源隔离）"><a href="#PID-namespace-（进程号的资源隔离）" class="headerlink" title="PID namespace （进程号的资源隔离）"></a>PID namespace （进程号的资源隔离）</h3><p>前面提到过，容器在 host 中以进程的形式运行。</p><p>例如当前 host 中运行了两个容器： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9oho0i4j310u08jwl0.jpg" alt="image-20200815231053040"></p><h3 id="IPC-namespace-（内存的资源隔离）"><a href="#IPC-namespace-（内存的资源隔离）" class="headerlink" title="IPC namespace （内存的资源隔离）"></a>IPC namespace （内存的资源隔离）</h3><p>IPC namespace 让容器拥有自己的共享内存和信号量（semaphore）来实现进程间通信，而不会与 host 和其他容器的 IPC 混在一起。 </p><h3 id="Network-namespace（网络的资源隔离）"><a href="#Network-namespace（网络的资源隔离）" class="headerlink" title="Network namespace（网络的资源隔离）"></a>Network namespace（网络的资源隔离）</h3><p>Network namespace 让容器拥有自己独立的网卡、IP、路由等资源。这个在下面网络章节详细讨论。</p><h3 id="User-namespace-（用户的资源隔离）"><a href="#User-namespace-（用户的资源隔离）" class="headerlink" title="User namespace （用户的资源隔离）"></a>User namespace （用户的资源隔离）</h3><p>User namespace 让容器能够管理自己的用户，host 不能看到容器中创建的用户。 </p><h1 id="八、Docker-单主机网络"><a href="#八、Docker-单主机网络" class="headerlink" title="八、Docker 单主机网络"></a>八、Docker 单主机网络</h1><blockquote><p>本章开始讨论 Docker 网络；首先学习 Docker 提供的几种原生网络，以及如何创建自定义网络；然后探讨容器之间如何通信，以及容器与外界如何交互。</p></blockquote><p>Docker 安装时会自动在 host 上创建三个网络，我们可用 <code>docker network ls</code> 命令查看</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9oluw32j30ri04e3zt.jpg" alt="image-20200815233138247"></p><p>在安装完docker之后，默认有3个原生网络bridge、host、none,运行容器时可以使用–network选项来指定你要运行的网络模式、如若不指定默认容器运行的是bridge网络模式。</p><h2 id="1-none-网络"><a href="#1-none-网络" class="headerlink" title="1. none 网络"></a>1. none 网络</h2><blockquote><p>故名思议，none 网络就是什么都没有的网络；挂在这个网络下的容器除了 lo，没有其他任何网卡。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9op2p53j30rn09w0vn.jpg" alt="image-20200815233336004"></p><p><strong>这样一个封闭的网络有什么用呢？</strong></p><ul><li><p>其实还真有应用场景。封闭意味着隔离，一些对安全性要求高并且不需要联网的应用可以使用 none 网络。</p></li><li><p>比如某个容器的唯一用途是生成随机密码，就可以放到 none 网络中避免密码被窃取。</p></li><li><p>当然大部分容器是需要网络的，我们接着看 host 网络。</p></li></ul><h2 id="2-host-网络"><a href="#2-host-网络" class="headerlink" title="2. host 网络"></a>2. host 网络</h2><blockquote><p>连接到 host 网络的容器共享 Docker host 的网络栈，容器的网络配置与 host 完全一样。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9orwek7j60ur0jltie02.jpg" alt="image-20200815233543341"></p><p>在容器中可以看到 host 的所有网卡，并且就连 hostname 也是 host 的。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ow7y0bj30uq0mvgw9.jpg" alt="image-20200815233645357"></p><p><strong>那 host 网络的使用场景又是什么呢？</strong></p><ul><li><p>直接使用 Docker host 的网络最大的好处就是性能，如果容器对网络传输效率有较高要求，则可以选择 host 网络。当然不便之处就是牺牲一些灵活性，比如要考虑端口冲突问题，Docker host 上已经使用的端口在容器上就不能再用了。</p></li><li><p>Docker host 的另一个用途是让容器可以直接配置 host 网路。比如某些跨 host 的网络解决方案，其本身也是以容器方式运行的，这些方案需要对网络进行配置，比如管理 iptables 。</p></li></ul><h2 id="3-Bridge网络（重点）"><a href="#3-Bridge网络（重点）" class="headerlink" title="3. Bridge网络（重点）"></a>3. Bridge网络（重点）</h2><blockquote><p>Docker 安装时会在host上创建一个命名为 docker0 的 linux bridge。如果不指定 –network，创建的容器默认都会挂到 docker0 上。</p><p><strong>本小节比较重要，所以这里就是用阿里云服务器来演示了</strong></p></blockquote><p>查看 host 全部网卡</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ozdslpj30th0h7tah.jpg" alt="image-20200816000543757"></p><p>查看 host 的网桥列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bridge-utils        <span class="comment"># 安装工具包</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9p2bbozj30qg03f749.jpg" alt="image-20200816000917527"></p><p>可以看到当前 docker0网桥上没有任何其他网络设备，我们创建一个容器看看有什么变化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]# docker run -itd -P --name tomcat01 tomcat</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9p5f142j30pi037q2x.jpg" alt="image-20200816001540344"></p><p>然后再查看一下host 和 容器的网卡</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9pa893oj315y0iz0uv.jpg" alt="image-20200816002044594"></p><p>如此可见一个新的网络接口 <code>veth9342b26</code> 被挂到了 docker0 上，<code>veth9342b26</code> 就是新创建容器的虚拟网卡或者也可以说是虚拟接口。</p><blockquote><p><strong>原理</strong></p></blockquote><p>每启动一个容器，docker就会给容器非配一个ip地址，只要安装了docker，host上就会有一个docker0网卡（网桥），这里使用的技术是 <code>veth-pair</code> （重点）！！！</p><p>再来看一下 host 上新出来的那块网卡</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9pdytjpj30tt0bfab4.jpg" alt="image-20200816003835045"></p><p>再来启动一个容器，会发现又多了一对网卡！！！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd -P --name tomcat02 tomcat</span></span><br></pre></td></tr></table></figure><p>再来看一下host 和 容器的网卡，相信现在应该可以察觉到了吧，我每创建一个容器docker都会生产一对网卡！！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9pqqkgoj30ty0ctta0.jpg" alt="image-20200816004031360"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9putk1dj60xr07cwf002.jpg" alt="image-20200816004133275"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会发现我每创建运行一个容器，都会生成一对网卡，host上一个，容器上一个。</span></span><br><span class="line"><span class="comment"># veth-pair就是一对的虚拟设备接口，她都是成对出现的，host上的那块网卡你可以把它理解为交换机或接口。</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>tomcat01 和 tomcat02 之间能不能相互通信？</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it tomcat01 ping -c 3 172.18.0.3</span></span><br><span class="line">PING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.069 ms</span><br><span class="line">64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.061 ms</span><br><span class="line">64 bytes from 172.18.0.3: icmp_seq=3 ttl=64 time=0.069 ms</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it tomcat02 ping -c 3 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.075 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.065 ms</span><br></pre></td></tr></table></figure><p>原理模型图</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9py4ttyj30n80f9t96.jpg" alt="image-20200816011347449"></p><p>结论: tomcat01 和 tomcat02 是共用的一个路由器（docker0）,  所以只要用的是同一个网络的容器就可以通信。</p><blockquote><p><strong>容器能不能与外界通信？</strong></p></blockquote><p>测试一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it tomcat01 ping -c 3 www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (220.181.38.149) 56(84) bytes of data.</span><br><span class="line">64 bytes from 220.181.38.149 (220.181.38.149): icmp_seq=1 ttl=53 time=5.24 ms</span><br><span class="line">64 bytes from 220.181.38.149 (220.181.38.149): icmp_seq=2 ttl=53 time=5.34 ms</span><br><span class="line">64 bytes from 220.181.38.149 (220.181.38.149): icmp_seq=3 ttl=53 time=5.33 ms</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it tomcat02 ping -c 3 www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (220.181.38.150) 56(84) bytes of data.</span><br><span class="line">64 bytes from 220.181.38.150 (220.181.38.150): icmp_seq=1 ttl=53 time=5.66 ms</span><br><span class="line">64 bytes from 220.181.38.150 (220.181.38.150): icmp_seq=2 ttl=53 time=5.69 ms</span><br><span class="line">64 bytes from 220.181.38.150 (220.181.38.150): icmp_seq=3 ttl=53 time=5.65 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：是可以访问的</span></span><br></pre></td></tr></table></figure><p>原理模型图</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9q28a7zj30sa0ii74x.jpg" alt="image-20200816023126642"></p><p><strong>这个问题一会还会在下小节 容器如何访问的外部世界 中继续深度探究~~</strong></p><blockquote><p><strong>删除上面的两个容器那这个veth-pair接口会不会消失？</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker rm -f -v $(docker ps -qa)</span></span><br><span class="line">a66599b3cbc1</span><br><span class="line">e93b04812bb3</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9qa5heyj30sz09kgmb.jpg" alt="image-20200816013438444"></p><p>结论：这些个成对的 <code>veth-pair</code> 网桥是会随着容器的消失而消失！！！</p><h2 id="4-自定义网络（重点）"><a href="#4-自定义网络（重点）" class="headerlink" title="4. 自定义网络（重点）"></a>4. 自定义网络（重点）</h2><blockquote><p>Docker 提供三种 user-defined 网络驱动：bridge, overlay 和 macvlan。overlay 和 macvlan 用于创建跨主机的网络，这个后面有章节单独讨论。</p></blockquote><p>直接可通过 bridge 驱动创建类似前面默认的 bridge 网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">1、若要解决使用ifconfig命令可以看到docker1的问题，可以执行以下几步命令</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">7641b78b9c7e        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">1fb28082d011        host                host                <span class="built_in">local</span></span><br><span class="line">6df43af5872b        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">2、查看bridge的信息，确认能在ifconfig中显示网桥名称的选项，com.docker.network.bridge.name</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker network inspect bridge</span></span><br><span class="line"><span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">3、创建docker1网桥</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker network create my_net01 \</span></span><br><span class="line">--driver=bridge --subnet=192.168.10.0/24 --gateway=192.168.10.254 \</span><br><span class="line">-o com.docker.network.bridge.name=docker1</span><br><span class="line"></span><br><span class="line">4、查看一下当前 docker host 的网络</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">7641b78b9c7e        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">1fb28082d011        host                host                <span class="built_in">local</span></span><br><span class="line">7f75481e2278        my_net01            bridge              <span class="built_in">local</span></span><br><span class="line">6df43af5872b        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">5、查看一下当前 docker host 的网桥</span><br><span class="line">[root@al_lemon ~]<span class="comment"># brctl show</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242ef0cd663no</span><br><span class="line">docker18000.0242f0fb530fno</span><br><span class="line"></span><br><span class="line">6、查看一下 docker host 的docker1 网卡信息</span><br><span class="line">[root@al_lemon ~]<span class="comment"># ifconfig docker1</span></span><br><span class="line">docker1: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.10.254  netmask 255.255.255.0  broadcast 192.168.10.255</span><br><span class="line">        ether 02:42:f0:fb:53:0f  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">7、查看一下 my_net01 网络的配置信息</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker network inspect my_net01</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my_net01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;7f75481e2278c85a205baad5df88bb863d72a7e712dfce2f69fbc6b31b49331b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-08-16T12:28:03.368583315+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.10.0/24&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.10.254&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker1&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p><strong>容器要使用新的网络，需要在启动时通过 <code>--network</code> 指定：</strong></p></blockquote><p><code>docker run -it --name web01 --network=my_net01 busybox:latest</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9qjkcsjj30tj07xmxn.jpg" alt="image-20200816124012644"></p><p>容器分配到的 IP 为 192.168.10.1。 </p><blockquote><p><strong>目前为止，容器的IP都是docker自动从subnet中分配，我们能否指定一个静态 IP 呢？</strong> </p><p><strong>答案是：可以，通过 <code>--ip</code> 指定。</strong> </p></blockquote><p><code>docker run -it --name web02 --network=my_net01 --ip=192.168.10.111 busybox:latest</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9qmg0vmj310g07waal.jpg" alt="image-20200816124248078"></p><p>注：只有使用 <code>--subnet</code> 创建的网络才能指定静态 IP。</p><h2 id="5-不同网络的容器之间如何通信"><a href="#5-不同网络的容器之间如何通信" class="headerlink" title="5. 不同网络的容器之间如何通信"></a>5. 不同网络的容器之间如何通信</h2><blockquote><p><strong>网络拓扑结构：</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9qqnz7bj30q00hwgmp.jpg" alt="image-20200816135518994"></p><blockquote><p><strong>模拟上图网络扩展</strong></p></blockquote><p>1、查看 docker host 网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:2e:28:70 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.196.108/20 brd 172.17.207.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 308060958sec preferred_lft 308060958sec</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ef:0c:d6:63 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">27: docker1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:f0:fb:53:0f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.254/24 brd 192.168.10.255 scope global docker1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>2、基于两个网络创建 三个容器 <code>web01、web02、web03</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name web01 --network=bridge busybox:latest</span></span><br><span class="line">76b5b2aafc829a0a21fad02b23f3b301571dbb007b478c98f701b40c8e720eea</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name web02 --network=my_net01 busybox:latest</span></span><br><span class="line">c06fc02d0a666b1e6ca9dce5f73c090ca57da642cd41c13f8685772729dea49b</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name web03 --network=my_net01 busybox:latest</span></span><br><span class="line">e3e5b535f2f5c3ee64b2a37027020e275a5daccc71795340e90a8e98b661fbb5</span><br></pre></td></tr></table></figure><p>3、查看这三个容器的 IP 地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ip a|grep &quot;eth0&quot;</span></span><br><span class="line">33: eth0@if34: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">    </span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web02 ip a|grep &quot;eth0&quot;</span></span><br><span class="line">35: eth0@if36: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    inet 192.168.10.1/24 brd 192.168.10.255 scope global eth0</span><br><span class="line">    </span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web03 ip a|grep &quot;eth0&quot;</span></span><br><span class="line">37: eth0@if38: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    inet 192.168.10.2/24 brd 192.168.10.255 scope global eth0</span><br></pre></td></tr></table></figure><blockquote><p><strong>开始测试网络的连通性</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">1、web02 能否与 web03 互相通信？</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web02 ping -c 3 192.168.10.2</span></span><br><span class="line">PING 192.168.10.2 (192.168.10.2): 56 data bytes</span><br><span class="line">64 bytes from 192.168.10.2: seq=0 ttl=64 time=0.120 ms</span><br><span class="line">64 bytes from 192.168.10.2: seq=1 ttl=64 time=0.089 ms</span><br><span class="line">64 bytes from 192.168.10.2: seq=2 ttl=64 time=0.101 ms</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web03 ping -c 3 192.168.10.1</span></span><br><span class="line">PING 192.168.10.1 (192.168.10.1): 56 data bytes</span><br><span class="line">64 bytes from 192.168.10.1: seq=0 ttl=64 time=0.101 ms</span><br><span class="line">64 bytes from 192.168.10.1: seq=1 ttl=64 time=0.101 ms</span><br><span class="line">64 bytes from 192.168.10.1: seq=2 ttl=64 time=0.108 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答案 : 是可以的。因为他们两个是用的同一个网络创建出来的！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、思考 : web01 能否与 web02、web03通信呢？</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ping -c 3 192.168.10.1</span></span><br><span class="line">PING 192.168.10.1 (192.168.10.1): 56 data bytes</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ping -c 3 192.168.10.2</span></span><br><span class="line">PING 192.168.10.2 (192.168.10.2): 56 data bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答案 : 是不可以的。因为web01是基于my_net01创建的，而web02 和 web03 是基于默认的bridge创建的！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、那为什么会这样呢？来看看iptables</span><br><span class="line">[root@al_lemon ~]<span class="comment"># iptables-save</span></span><br><span class="line">……</span><br><span class="line">-A DOCKER -i docker1 -j RETURN</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原因就在这里了：iptables DROP 掉了网桥 docker0 与 docker1 之间双向的流量。 </span></span><br><span class="line"><span class="comment"># 从规则的命名 DOCKER-ISOLATION 可知 docker 在设计时就是要隔离不同的 netwrok。 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、那么接下来的问题是：怎样才能让 172.18.0.0 与 192.168.10.0不同的网段通信呢？ </span><br><span class="line"><span class="comment"># 答案 : 给 172.18.0.0 的容器里（web01）也添加一块 my_net01 的网卡。</span></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker network connect my_net01 web01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到容器中查看一下网络配置</span></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">33: eth0@if34: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">39: eth1@if40: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:c0:a8:0a:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.3/24 brd 192.168.10.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到多了一块网卡eth1@if40，现在再试试与另外两个容器通信看</span></span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ping -c 3 192.168.10.1</span></span><br><span class="line">PING 192.168.10.1 (192.168.10.1): 56 data bytes</span><br><span class="line">64 bytes from 192.168.10.1: seq=0 ttl=64 time=0.120 ms</span><br><span class="line">64 bytes from 192.168.10.1: seq=1 ttl=64 time=0.120 ms</span><br><span class="line">64 bytes from 192.168.10.1: seq=2 ttl=64 time=0.095 ms</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ping -c 3 192.168.10.2</span></span><br><span class="line">PING 192.168.10.2 (192.168.10.2): 56 data bytes</span><br><span class="line">64 bytes from 192.168.10.2: seq=0 ttl=64 time=0.117 ms</span><br><span class="line">64 bytes from 192.168.10.2: seq=1 ttl=64 time=0.101 ms</span><br><span class="line">64 bytes from 192.168.10.2: seq=2 ttl=64 time=0.090 ms</span><br><span class="line"><span class="comment"># 完美解决</span></span><br><span class="line"></span><br><span class="line">5、但是思考一个问题，另外两个容器能否可以与web01通信呢？</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web02 ping -c 3 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2): 56 data bytes</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web03 ping -c 3 172.18.0.3</span></span><br><span class="line">PING 172.18.0.3 (172.18.0.3): 56 data bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答案 : 是不能的。因为这两个容器是没有bridge这个网络的，所以无法通信！！！</span></span><br><span class="line"><span class="comment"># 想要通信的话，就按照上面的操作再把bridge的网络加入的这两个容器中就可以了！！！</span></span><br></pre></td></tr></table></figure><h2 id="6-容器通信的两种方式"><a href="#6-容器通信的两种方式" class="headerlink" title="6. 容器通信的两种方式"></a>6. 容器通信的两种方式</h2><blockquote><p><strong>IP 通信</strong></p></blockquote><p>两个容器要能通信，必须要有属于同一个网络的网卡。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name web01 busybox:latest</span></span><br><span class="line">f1cfbd4daf3e72307cb4e8191a915f75f260c2a37913d3e69faff80ef1bbd0fa</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name web02 busybox:latest</span></span><br><span class="line">03f1b728dc770121b7a9fe3474aa7fa6be5ef1ed1eb05fc9629e847e3334eca5</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ip a|grep eth0</span></span><br><span class="line">22: eth0@if23: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">    </span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web02 ip a|grep eth0</span></span><br><span class="line">24: eth0@if25: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">    </span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web01 ping -c 3 172.18.0.3</span></span><br><span class="line">PING 172.18.0.3 (172.18.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.111 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.106 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.098 ms</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it web02 ping -c 3 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.103 ms</span><br><span class="line">64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.098 ms</span><br><span class="line">64 bytes from 172.18.0.2: seq=2 ttl=64 time=0.103 ms</span><br></pre></td></tr></table></figure><blockquote><p>DNS Server 通信</p></blockquote><p>通过 IP 访问容器虽然满足了通信的需求，但还是不够灵活。</p><p>因为在部署应用之前可能无法确定 IP，部署之后再指定要访问的 IP 会比较麻烦。</p><p>对于这个问题，可以通过 docker 自带的 DNS 服务解决。</p><p>从 Docker 1.10 版本开始，docker daemon 实现了一个内嵌的 DNS server，使容器可以直接通过“容器名”通信。</p><p>方法很简单，只要在启动时用 <code>--name</code> 为容器命名就可以了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、启动两个容器 bbox1 和 bbox2</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --network=my_net01 --name=bbox1 busybox:latest</span></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --network=my_net01 --name=bbox2 busybox:latest</span></span><br><span class="line"></span><br><span class="line">2、测试能否使用hostname进行通信</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it bbox1 ping -c 2 bbox2</span></span><br><span class="line">PING bbox2 (192.168.10.5): 56 data bytes</span><br><span class="line">64 bytes from 192.168.10.5: seq=0 ttl=64 time=0.096 ms</span><br><span class="line">64 bytes from 192.168.10.5: seq=1 ttl=64 time=0.113 ms</span><br><span class="line"></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it bbox2 ping -c 2 bbox1</span></span><br><span class="line">PING bbox1 (192.168.10.4): 56 data bytes</span><br><span class="line">64 bytes from 192.168.10.4: seq=0 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from 192.168.10.4: seq=1 ttl=64 time=0.102 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答案 : 是可以的！！！</span></span><br><span class="line"></span><br><span class="line">3、原理其实将对应的容器IP/ID加入到了hosts文件</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it bbox1 cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">192.168.10.44b72d8bc0bee</span><br></pre></td></tr></table></figure><p>但是注意：</p><ul><li>使用 docker DNS 有个限制，<strong>只能在 user-defined 网络中使用</strong>。</li><li>也就是说，默认的 bridge 网络是无法使用 DNS 的 ！！！</li></ul><p>下面验证一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、使用docker默认的bridge网络创建bbox3、bbox4容器</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name=bbox3 --network=bridge busybox:latest</span></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker run -itd --name=bbox4 --network=bridge busybox:latest</span></span><br><span class="line"></span><br><span class="line">2、测试docker默认的bridge网络能否使用hostname进行通信</span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it bbox3 ping -c 2 bbox4</span></span><br><span class="line">ping: bad address <span class="string">&#x27;bbox4&#x27;</span></span><br><span class="line">[root@al_lemon ~]<span class="comment"># docker exec -it bbox4 ping -c 2 bbox3</span></span><br><span class="line">ping: bad address <span class="string">&#x27;bbox3&#x27;</span></span><br><span class="line"><span class="comment">#答案 : 是不能的</span></span><br></pre></td></tr></table></figure><h2 id="7-容器如何访问的外部世界"><a href="#7-容器如何访问的外部世界" class="headerlink" title="7. 容器如何访问的外部世界"></a>7. 容器如何访问的外部世界</h2><blockquote><p><strong>容器访问外部世界（nat的源地址转换）</strong></p><p><strong>注意：这里说的是同一台主机不同容器之间的通信；而不是跨主机的容器通信！</strong></p></blockquote><p>在当前的实验环境下，docker host 是可以访问外网的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># ping -c 3 www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (220.181.38.149) 56(84) bytes of data.</span><br><span class="line">64 bytes from 220.181.38.149 (220.181.38.149): icmp_seq=1 ttl=54 time=5.26 ms</span><br><span class="line">64 bytes from 220.181.38.149 (220.181.38.149): icmp_seq=2 ttl=54 time=5.24 ms</span><br><span class="line">64 bytes from 220.181.38.149 (220.181.38.149): icmp_seq=3 ttl=54 time=5.26 ms</span><br></pre></td></tr></table></figure><p>现在来看一下容器是否也能访问外网呢？</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@al_lemon ~]<span class="comment"># docker run -it busybox:latest</span></span><br><span class="line">/ <span class="comment"># ping -c 3 www.baidu.com</span></span><br><span class="line">PING www.baidu.com (220.181.38.150): 56 data bytes</span><br><span class="line">64 bytes from 220.181.38.150: seq=0 ttl=53 time=5.671 ms</span><br><span class="line">64 bytes from 220.181.38.150: seq=1 ttl=53 time=5.734 ms</span><br><span class="line">64 bytes from 220.181.38.150: seq=2 ttl=53 time=5.720 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可见，容器默认就能访问外网！！！</span></span><br><span class="line"><span class="comment"># 这里外网指的是容器网络以外的网络环境，并非特指 internet。 </span></span><br></pre></td></tr></table></figure><p>现象很简单，但更重要的是应该理解现象下的本质。 </p><p>在上面的例子中，busybox 位于 docker0 这个私有 bridge 网络中（172.18.0.0/16），当 busybox 从容器向外 ping 时，数据包是怎样到达 baidu.com 的呢？ </p><p>这里的关键就是 NAT。我们查看一下 docker host 上的 iptables 规则： </p><p><code>[root@al_lemon ~]# iptables -t nat -S</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9qzv3uaj30nz07474m.jpg" alt="image-20200816112426448"></p><p>在 NAT 表中，有这么一条规则： </p><p><code>-A POSTROUTING -s 172.18.0.0/16 ! -o docker0 -j MASQUERADE </code></p><p>其含义是：来自 172.18.0.0/16 网段的包, 如果目标地址是外网 (! -o docker0) , 就把它交给 MASQUERADE 处理。</p><p>而 MASQUERADE 的处理方式是将包的源地址替换成 host 的地址发送出去, 即做了一次网络地址转换（NAT）。 </p><ul><li><p>SNAT：用于外网IP固定不变的</p></li><li><p>MASQUERADE：用于外网IP地址不固定的</p></li></ul><p>下面通过 tcpdump 查看地址是如何转换的。</p><p>首先来查看 docker host 的路由表： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9r6m0tdj30ot03nq37.jpg" alt="image-20200816111817256"></p><p>默认路由通过 eth0 发出去，所以要同时监控 eth0 和 docker0 上的 icmp（ping）数据包。 </p><p>当 busybox ping baidu.com 时，tcpdump 输出如下： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping baidu.com</span></span><br><span class="line">PING baidu.com (220.181.38.148): 56 data bytes</span><br><span class="line">64 bytes from 220.181.38.148: seq=0 ttl=53 time=4.745 ms</span><br><span class="line">64 bytes from 220.181.38.148: seq=1 ttl=53 time=4.726 ms</span><br><span class="line">64 bytes from 220.181.38.148: seq=2 ttl=53 time=4.697 ms</span><br><span class="line">……………………</span><br></pre></td></tr></table></figure><p><code>[root@al_lemon ~]# tcpdump -i docker0 -n icmp</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ra94ouj30y2051q3f.jpg" alt="image-20200816110816482"></p><p>docker0 收到 busybox 的 ping 包，源地址为容器 IP 172.18.0.2，这没问题，交给 MASQUERADE 处理。</p><p>而这时，在 eth0 上看到了变化：</p><p><code>[root@al_lemon ~]# tcpdump -i eth0 -n icmp</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rdgqitj30ze0530t8.jpg" alt="image-20200816111013790"></p><p>ping 包的源地址变成了 eth0 的 IP 172.17.196.108 ！！！</p><p>这就是 iptable NAT 规则处理的结果，从而保证数据包能够到达外网。</p><p>下面用一张网络图来说明这个过程：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rgfym4j30rd0e0jup.jpg" alt="image-20200816112045549"></p><p>busybox 发送 ping 包：172.17.0.2 &gt; <a href="http://www.bing.com./">www.bing.com。</a> </p><p>docker0 收到包，发现是发送到外网的，交给 NAT 处理。 </p><p>NAT 将源地址换成 enp0s3 的 IP：10.0.2.15 &gt; <a href="http://www.bing.com./">www.bing.com。</a> </p><p>ping 包从 enp0s3 发送出去，从而到达 <a href="http://www.bing.com./">www.bing.com。</a> </p><p>所以容器是通过 NAT，docker 实现了容器对外网的访问。 </p><h2 id="8-外部世界如何访问的容器"><a href="#8-外部世界如何访问的容器" class="headerlink" title="8. 外部世界如何访问的容器"></a>8. 外部世界如何访问的容器</h2><blockquote><p><strong>外部世界访问容器（docker-proxy的端口映射）</strong></p><p><strong>注意：这里说的是同一台主机不同容器之间的通信；而不是跨主机的容器通信！</strong></p></blockquote><p>docker 可将容器对外提供服务的端口映射到 host 的某个端口，外网通过该端口访问容器。</p><p>容器启动时通过 <code>-p</code> 或者 <code>-P</code> 参数映射端口： </p><p><code>[root@al_lemon ~]# docker run -d --name web -p 88:80 httpd:latest</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rk3rxnj31dr091wft.jpg" alt="image-20200816113714171"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rncr8qj30pc048glr.jpg" alt="image-20200816113846601"></p><p>除了指定映射端口，也可在  <code>-p</code> 中不指定映射host port到 host 某个特定端口，这种就属于动态映射端口。例如：</p><p><code>[root@al_lemon ~]# docker run -itd --name lemon -p 80 httpd:latest</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rq8lhbj31eu06k0tb.jpg" alt="image-20200816114954969"></p><p>每一个映射的端口，host 都会启动一个 <code>docker-proxy</code> 进程来处理访问容器的流量：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rt39dtj31gs05uaap.jpg" alt="image-20200816115145370"></p><p>下面用一张网络图来说明这个过程：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9rwo6ejj30tx0fagr6.jpg" alt="image-20200816115244844"></p><p>docker-proxy 监听 host 的 32773 端口。 </p><p>当 curl 访问 10.0.2.15:32773 时，docker-proxy 会通过 docker0 转发给容器 172.17.0.2:80。 </p><p>最终 httpd 容器响应请求并返回结果。 </p><h1 id="九、Docker-跨主机网络"><a href="#九、Docker-跨主机网络" class="headerlink" title="九、Docker 跨主机网络"></a>九、Docker 跨主机网络</h1><blockquote><p>前面已经学习了 Docker 的几种网络方案：none、host、bridge 和 joined 容器，它们解决了单个 Docker Host 内容器通信的问题。本章的重点则是讨论跨主机容器间通信的方案。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ryrohyj30w90ge7ju.jpg" alt="image-20200816144049001"></p><p>Overlay 和 macvlan属于不同主机之间的容器互相访问</p><blockquote><p><strong>跨主机网络方案包括</strong></p></blockquote><ul><li><p>docker 原生的 overlay 和 macvlan。</p></li><li><p>第三方常用的包括 flannel、weave 和 calico。</p></li></ul><blockquote><p><strong>docker 网络是一个非常活跃的技术领域，不断有新的方案开发出来，那么要问个非常重要的问题了</strong></p></blockquote><ul><li>如此众多的方案是如何与 docker 集成在一起的？</li><li>答案是：libnetwork 以及 CNM。</li></ul><h2 id="1-libnetwork-amp-CNM"><a href="#1-libnetwork-amp-CNM" class="headerlink" title="1. libnetwork &amp; CNM"></a>1. libnetwork &amp; CNM</h2><blockquote><p><strong>libnetwork 是 docker 容器网络库，最核心的内容是其定义的 Container Network Model (CNM)，这个模型对容器网络进行了抽象，由以下三类组件组成：</strong></p></blockquote><p><strong>Sandbox（虚拟机交换机）</strong></p><p>Sandbox 是容器的网络栈，包含容器的 interface、路由表和 DNS 设置。 Linux Network Namespace 是 Sandbox 的标准实现。Sandbox 可以包含来自不同 Network 的 Endpoint。</p><p><strong>Endpoint（容器的网络驱动）</strong></p><p>Endpoint 的作用是将 Sandbox 接入 Network。Endpoint 的典型实现是 veth pair，后面我们会举例。一个 Endpoint 只能属于一个网络，也只能属于一个 Sandbox。</p><p><strong>Network（docker网络驱动）</strong></p><p>Network 包含一组 Endpoint，同一 Network 的 Endpoint 可以直接通信。Network 的实现可以是 Linux Bridge、VLAN 等。</p><p><strong>下面是 CNM 的示例：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9s2vbbsj30ti0fcjvm.jpg" alt="image-20200823131514702"></p><p>如图所示两个容器, 一个容器一个 Sandbox, 每个 Sandbox 都有一个 Endpoint 连接到 Network 1，第一个容器的第二个 Sandbox 的 Endpoint 将其接入 Network 2。</p><p>libnetwork CNM 定义了 docker 容器的网络模型，按照该模型开发出的 driver 就能与 docker daemon 协同工作，实现容器网络。</p><p>docker 原生的 driver 包括 none、bridge、host、overlay 和 macvlan，第三方 driver 包括 flannel、weave、calico 等。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9s7iv9ej30sk0de76n.jpg" alt="image-20200823131849986"></p><h2 id="2-overlay网络"><a href="#2-overlay网络" class="headerlink" title="2. overlay网络"></a>2. overlay网络</h2><blockquote><p>概述：为支持容器跨主机通信，Docker 提供了 overlay driver，使用户可以创建基于 VxLAN 的 overlay 网络。VXLAN 可将二层数据封装到 UDP 进行传输，VXLAN 提供与 VLAN 相同的以太网二层服务，但是拥有更强的扩展性和灵活性。</p><p>overlay 网络驱动程序在多个 Docker 守护进程主机之间创建一个分布式网络。这个网络在允许容器连接并进行安全通信的主机专用网络之上（overlay 覆盖在上面）。Docker 透明地处理每个 Docker 守护进程与目标容器之间的数据包的路由。</p></blockquote><p><strong>Docker通过Overlay网络驱动程序支持多主机容器网络通信。要想使用Docker原生Overlay网络，需要满足以下任意条件：</strong></p><ul><li>Docker运行在Swarm模式</li><li>使用键值存储的Docker主机集群</li></ul><p><strong>这里我选择第二种方式，需满足以下条件：</strong></p><p>1）集群中主机连接到键值存储，Docker支持Consul、Etcd和Zookeeper</p><p>2）集群中主机运行一个Docker守护进程</p><p>3）集群中主机必须具有唯一的主机名，因为键值存储使用主机名来标识集群成员</p><p>4）集群中Linux主机内核版本3.10+，支持VXLAN数据包处理，否则可能无法通信</p><p><strong>环境准备：</strong></p><ul><li>节点1：host01   192.168.2.1     键值存储</li><li>节点2：host02   192.168.2.2   </li></ul><p><strong>整体架构</strong></p><blockquote><p>按道理是应该单独使用一个机器运行consul的，但这里为了节省机器，所以就和host01上部署了</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9scdmpsj30ry0ie3zd.jpg" alt="image-20200823144439097"></p><p><strong>实现过程：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1）在节点1上下载并安装consul</span><br><span class="line">[root@host01 ~]<span class="comment"># wget https://releases.hashicorp.com/consul/1.4.4/consul_1.4.4_linux_amd64.zip</span></span><br><span class="line">[root@host01 ~]<span class="comment"># unzip consul_1.4.4_linux_amd64.zip</span></span><br><span class="line">[root@host01 ~]<span class="comment"># mv consul /usr/bin/</span></span><br><span class="line">[root@host01 ~]<span class="comment"># chmod +x /usr/bin/consul</span></span><br><span class="line"></span><br><span class="line">2）在节点1上启动consul服务</span><br><span class="line">[root@host01 ~]<span class="comment"># setsid consul agent -server -bootstrap -ui -data-dir /var/lib/consul \</span></span><br><span class="line">-client=192.168.2.1 -<span class="built_in">bind</span>=192.168.2.1 &amp;&gt;/var/<span class="built_in">log</span>/consul.log</span><br><span class="line"></span><br><span class="line">3）查看是否在后台运行</span><br><span class="line">[root@host01 ~]<span class="comment"># netstat -anptu|grep LISTEN|grep consul</span></span><br><span class="line">tcp        0      0 192.168.2.1:8300        0.0.0.0:*               LISTEN      1449/consul         </span><br><span class="line">tcp        0      0 192.168.2.1:8301        0.0.0.0:*               LISTEN      1449/consul         </span><br><span class="line">tcp        0      0 192.168.2.1:8302        0.0.0.0:*               LISTEN      1449/consul         </span><br><span class="line">tcp        0      0 192.168.2.1:8500        0.0.0.0:*               LISTEN      1449/consul         </span><br><span class="line">tcp        0      0 192.168.2.1:8600        0.0.0.0:*               LISTEN      1449/consul</span><br><span class="line">[root@host01 ~]<span class="comment"># ps -aux|grep consul</span></span><br><span class="line">root     1449    0.1   3.5   175596   35304 ?        Ssl  13:57   0:00 consul agent -server -bootstrap -ui -data-dir /var/lib/consul -client=192.168.2.1 -<span class="built_in">bind</span>=192.168.2.1</span><br><span class="line"></span><br><span class="line">4）修改集群上的docker守护进程（配置相同）</span><br><span class="line">[root@host01 ~]<span class="comment"># cat /usr/lib/systemd/system/docker.service|grep ExecStart</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --containerd=/run/containerd/containerd.sock --cluster-store=consul://192.168.2.1:8500 --cluster-advertise=ens32:2376</span><br><span class="line">[root@host02 ~]<span class="comment"># cat /usr/lib/systemd/system/docker.service|grep ExecStart</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --containerd=/run/containerd/containerd.sock --cluster-store=consul://192.168.2.1:8500 --cluster-advertise=ens32:2376</span><br><span class="line"></span><br><span class="line">5）重启docker daemon</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">ps -ef|grep docker</span><br><span class="line">root      16159      1 13 14:13 ?        00:00:00 /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --containerd=/run/containerd/containerd.sock --cluster-store=consul://192.168.2.1:8500 --cluster-advertise=ens32:2376</span><br><span class="line"></span><br><span class="line">6）到consul的UI界面查看节点是否添加</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9shqo4yj31080rc0u9.jpg" alt="image-20200823141528680"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9sknpg2j31080rcabs.jpg" alt="image-20200823142841527"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line">7）在docker主机上创建overlay网络</span><br><span class="line"><span class="comment"># 在 host01 中创建 overlay 网络 ov_net1：-d overlay 指定 driver 为 overaly。</span></span><br><span class="line">[root@host01 ~]<span class="comment"># docker network create -d overlay ov_net01</span></span><br><span class="line">a83a1be396d606e5726bd69640465e1c473b18ab6dbb3d5e20d049e0bb6c9075</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只需在集群中的其中一台docker主机上创建overlay网络即可，它会自动同步到另外一个节点上。</span></span><br><span class="line"><span class="comment"># 如果尝试到另外一个节点创建overlay网络，就会出现如下错误：</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker network create -d overlay ov_net01</span></span><br><span class="line">Error response from daemon: network with name ov_net01 already exists</span><br><span class="line"></span><br><span class="line">8）查看docker网络驱动</span><br><span class="line"><span class="comment"># local : 本地的</span></span><br><span class="line"><span class="comment"># global : 全球的</span></span><br><span class="line">[root@host01 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">34b14fdbd9a4        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">5eace2ef6bca        host                host                <span class="built_in">local</span></span><br><span class="line">f4b2e8b03d3b        none                null                <span class="built_in">local</span></span><br><span class="line">a83a1be396d6        ov_net01            overlay             global</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">26846ddafd85        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">761eec3c9f6f        host                host                <span class="built_in">local</span></span><br><span class="line">388d9ea974c1        none                null                <span class="built_in">local</span></span><br><span class="line">a83a1be396d6        ov_net01            overlay             global</span><br><span class="line"></span><br><span class="line">9）查看 ov_net01 的详细信息</span><br><span class="line">[root@host01 ~]<span class="comment"># docker network inspect ov_net01</span></span><br><span class="line"><span class="comment"># IPAM 是指 IP Address Management，docker 自动为 ov_net01 分配的 IP 空间为 10.0.0.0/24</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ov_net01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;a83a1be396d606e5726bd69640465e1c473b18ab6dbb3d5e20d049e0bb6c9075&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-08-23T14:48:41.746822712+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;global&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;10.0.0.0/24&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;10.0.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">10）基于ov_net01网络创建容器</span><br><span class="line">[root@host01 ~]<span class="comment"># docker run -it -d --name bbox1 --network ov_net01 busybox</span></span><br><span class="line"></span><br><span class="line">11）查看bbox1容器的网络信息</span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:00:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth1@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析：</span></span><br><span class="line">bbox1 有两个网络接口 eth0 和 eth1。eth0 IP 为 10.0.0.2，连接的是 overlay 网络 ov_net01。eth1 IP 172.18.0.2，容器的默认路由是走 eth1，eth1 是哪儿来的呢？</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答案：</span></span><br><span class="line">其实，docker 会创建一个 bridge 网络 “docker_gwbridge”，为所有连接到 overlay 网络的容器提供访问外网的能力。说白了就是访问外网时用的是docker_gwbridge网络，容器互相访问时就是用的overlay网络。</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># docker network inspect docker_gwbridge</span></span><br><span class="line"><span class="comment"># 从输出可确认 docker_gwbridge 的 IP 地址范围是 172.18.0.0/16，当前连接的容器就是 bbox1（172.18.0.2）。</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;docker_gwbridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;8407946e9aae50ec3473854aa8e2e75b7b45e2fcdeabc97375f7433a956aa8ae&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-08-23T15:00:08.278899583+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.18.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;afa9bd135a3c61736a8a92a95dbe1f85a3b886bffcb4f467ef87b5e80de91b6d&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;gateway_47294494fa93&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;37b03272bf9a0e3daf64ec325d38f5d9eff7d1f01a06a95e2ddd7304b7fdf72b&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker_gwbridge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">11）测试能否跨主机通信</span><br><span class="line"><span class="comment"># 在 host02 中运行容器 bbox2</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker run -it -d --name bbox2 --network ov_net01 busybox</span></span><br><span class="line">54ac14b698c9ba9cb4f79496341549470ee0d984678ae4c9b1b04cb16867b4f7</span><br><span class="line"><span class="comment"># 查看bbox2网络信息</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox2 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:00:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.3/24 brd 10.0.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth1@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="comment"># bbox2 IP 为 10.0.0.3，可以直接 ping bbox1</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox2 ping -c 3 10.0.0.2</span></span><br><span class="line">PING 10.0.0.2 (10.0.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.2: seq=0 ttl=64 time=6.454 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=1 ttl=64 time=0.639 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=2 ttl=64 time=0.253 ms</span><br><span class="line"></span><br><span class="line">--- 10.0.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.253/2.448/6.454 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># bbox1 IP 为 10.0.0.2，可以直接 ping bbox2</span></span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ping -c 3 10.0.0.3</span></span><br><span class="line">PING 10.0.0.3 (10.0.0.3): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.3: seq=0 ttl=64 time=6.093 ms</span><br><span class="line">64 bytes from 10.0.0.3: seq=1 ttl=64 time=0.701 ms</span><br><span class="line">64 bytes from 10.0.0.3: seq=2 ttl=64 time=0.733 ms</span><br><span class="line"></span><br><span class="line">--- 10.0.0.3 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.701/2.509/6.093 ms</span><br><span class="line"></span><br><span class="line">12）测试能否和外网通信</span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ping -c 3 www.baidu.com</span></span><br><span class="line">PING www.baidu.com (182.61.200.6): 56 data bytes</span><br><span class="line">64 bytes from 182.61.200.6: seq=0 ttl=50 time=31.233 ms</span><br><span class="line">64 bytes from 182.61.200.6: seq=1 ttl=50 time=32.877 ms</span><br><span class="line">64 bytes from 182.61.200.6: seq=2 ttl=50 time=30.466 ms</span><br><span class="line"></span><br><span class="line">--- www.baidu.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 30.466/31.525/32.877 ms</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox2 ping -c 3 www.baidu.com</span></span><br><span class="line">PING www.baidu.com (182.61.200.6): 56 data bytes</span><br><span class="line">64 bytes from 182.61.200.6: seq=0 ttl=50 time=39.688 ms</span><br><span class="line">64 bytes from 182.61.200.6: seq=1 ttl=50 time=33.263 ms</span><br><span class="line">64 bytes from 182.61.200.6: seq=2 ttl=50 time=33.584 ms</span><br><span class="line"></span><br><span class="line">--- www.baidu.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 33.263/35.511/39.688 ms</span><br></pre></td></tr></table></figure><p><strong>overlay 网络的具体实现</strong></p><p>docker 会为每个 overlay 网络创建一个独立的 network namespace，其中会有一个 linux bridge br0，endpoint 还是由 veth-pair 实现，一端连接到容器中（即 eth0），另一端连接到 namespace 的 br0 上。</p><p>br0 除了连接所有的 endpoint，还会连接一个 vxlan 设备，用于与其他 host 建立 vxlan tunnel。容器之间的数据就是通过这个 tunnel 通信的。</p><p>逻辑网络拓扑结构如图所示：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9suqr08j30u70nfdjj.jpg" alt="image-20200823152353810"></p><p>要查看 overlay 网络的 namespace 可以在 host01 和 host02 上执行 <code>ip netns</code>(请确保在此之前执行过 <code>ln -s /var/run/docker/netns /var/run/netns</code>)，可以看到两个 host 上有一个相同的 <code>namespace “1-a83a1be396”</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># ip netns</span></span><br><span class="line">47294494fa93 (id: 1)</span><br><span class="line">1-a83a1be396 (id: 0)</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># ip netns</span></span><br><span class="line">f9a284c0f94e (id: 1)</span><br><span class="line">1-a83a1be396 (id: 0)</span><br></pre></td></tr></table></figure><p>这就是 ov_net01 的 namespace，查看 namespace 中的 br0 上的设备。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># ip netns exec 1-a83a1be396 brctl show</span></span><br><span class="line">bridge name bridge id   STP    enabled  interfaces</span><br><span class="line">br0        8000.82eda6360e4d        no  veth0</span><br><span class="line">                          vxlan0</span><br></pre></td></tr></table></figure><p><strong>overlay 是如何隔离的？</strong></p><blockquote><p>不同的 overlay 网络是相互隔离的。我们创建第二个 overlay 网络 ov_net02 并在host02上使用ov_net02网络运行容器 bbox3。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@host02 ~]<span class="comment"># docker network create -d overlay ov_net02</span></span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker network create -d overlay ov_net02</span></span><br><span class="line">f11ddee04e3a3204dfdf545e5ec5674625a1c95c4b4cda974c280f599998068b</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">26846ddafd85        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">e2be38b12708        docker_gwbridge     bridge              <span class="built_in">local</span></span><br><span class="line">761eec3c9f6f        host                host                <span class="built_in">local</span></span><br><span class="line">388d9ea974c1        none                null                <span class="built_in">local</span></span><br><span class="line">a83a1be396d6        ov_net01            overlay             global</span><br><span class="line">f11ddee04e3a        ov_net02            overlay             global</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker run -it -d --name bbox3 --network ov_net02 busybox</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bbox3 分配到的 IP 是 10.0.1.2，尝试 ping bbox1（10.0.0.2）。</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox3 ip a|grep 10.0.1</span></span><br><span class="line">    inet 10.0.1.2/24 brd 10.0.1.255 scope global eth0</span><br><span class="line">    </span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox3 ping -c 3 10.0.0.2</span></span><br><span class="line">PING 10.0.0.2 (10.0.0.2): 56 data bytes</span><br><span class="line"></span><br><span class="line">--- 10.0.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 0 packets received, 100% packet loss</span><br><span class="line"><span class="comment"># ping 失败，可见不同 overlay 网络之间是隔离的。即便是通过 docker_gwbridge 也不能通信。注：但可以与外网通信</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要实现 bbox3 与 bbox1 通信，可以将 bbox3 也连接到 ov_net1。</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker network connect ov_net01 bbox3</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox3 ip a|grep 10.0</span></span><br><span class="line">    inet 10.0.1.2/24 brd 10.0.1.255 scope global eth0</span><br><span class="line">    inet 10.0.0.4/24 brd 10.0.0.255 scope global eth2</span><br></pre></td></tr></table></figure><p><strong>overlay IPAM</strong></p><blockquote><p>docker 默认为 overlay 网络分配 24 位掩码的子网（10.0.X.0/24），所有主机共享这个 subnet，容器启动时会顺序从此空间分配 IP。当然我们也可以通过–subnet指定 IP 空间。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">docker network create -d overlay --subnet 192.168.10.0/24 --gateway 192.168.10.254 ov_net03</span><br><span class="line"></span><br><span class="line">docker network inspect ov_net03</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ov_net03&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;b3abd53f700440af71d9e0cbb347ea9658acd66d263087ac08a904fd2a4cddd2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-08-23T15:37:27.660703548+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;global&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.10.0/24&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.10.254&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>综上，overlay网络的拓补如下：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9t04bmbj60p80iwmzu02.jpg" alt="image-20200823154610186"></p><p>这里数据包的发送流程如下（以从左侧的容器发送到右侧的容器为例）：</p><ol><li>容器Container1会通过Container eth0 将这个数据包发送到 10.0.0.1 的网关。</li><li>网关将数据包发送出去后到达br0网桥。</li><li>br0网桥针对VXLAN设备，主要用于捕获对外的数据包通过VETP进行数据包封装。</li><li>封装好将VXLAN格式数据包交给eth0，通过UDP方式交给Container2的eth0。</li><li>Container2收到数据包后通过VETP将数据包解封装。</li><li>网桥通过网关将解封装的数据包转发给Container eth0，完毕通信。</li></ol><p>因此，Docker容器的overlay网络的实现原理是：</p><ol><li><p>docker会为每个overlay网络创建个单独的命名空间，在这个命名空间里创建了个br0的bridge。</p></li><li><p>在这个命名空间内创建两张网卡并挂载到br0上，创建一对veth pair端口 和vxlan设备。</p></li><li><p>veth pair一端接在namespace的br0上，另一端接在container上。</p></li><li><p>vxlan设备用于建立vxlan tunnel，vxlan端口的vni由docker-daemon在创建时分配，具有相同vni的设备才能通信。</p></li><li><p>docker主机集群通过key/value存储（我们这里用的是consul)共享数据，在7946端口上，相互之间通过gossip协议学习各个宿主机上运行了哪些容器。守护进程根据这些数据来在vxlan设备上生成静态MAC转发表。</p></li><li><p>vxlan设备根据静态mac转发表，通过host上的4789端口将数据发到目标节点。</p></li><li><p>根据流量包中的vxlan隧道ID，将流量转发到对端宿主机的overlay网络的网络命名空间中。</p></li><li><p>对端宿主机的overlay网络的网络命名空间中br0网桥，起到虚拟交换机的作用，将流量根据MAC地址转发到对应容器内部。</p></li></ol><p>上述原理分析部分参考：<a href="https://www.bladewan.com/2017/11/17/docker_network_overlay/">https://www.bladewan.com/2017/11/17/docker_network_overlay/</a></p><p>补充：如需详细了解docker overlay网络的实现过程，可以参考：<a href="http://chenchun.github.io/docker/2015/12/29/km-docker-overlay">http://chenchun.github.io/docker/2015/12/29/km-docker-overlay</a></p><h2 id="3-flannel网络"><a href="#3-flannel网络" class="headerlink" title="3. flannel网络"></a>3. flannel网络</h2><blockquote><p>flannel 是 CoreOS 开发的容器网络解决方案。flannel 为每个 host 分配一个 subnet，容器从此 subnet 中分配 IP，这些 IP 可以在 host 间路由，容器间无需 NAT 和 port mapping 就可以跨主机通信。flannel 没有提供隔离。 </p></blockquote><p>Flannel实质上是一种“覆盖网络(overlay network)”，也就是将TCP数据包装在另一种网络包里面进行路由转发和通信，目前已经支持UDP、VxLAN、AWS VPC和GCE路由等数据转发方式。</p><p>数据从源容器中发出后，经由所在主机的docker0虚拟网卡转发到flannel0虚拟网卡，这是个P2P的虚拟网卡，flanneld服务监听在网卡的另外一端。</p><p>Flannel通过Etcd服务维护了一张节点间的路由表，详细记录了各节点子网网段 。</p><p>源主机的flanneld服务将原本的数据内容UDP封装后根据自己的路由表投递给目的节点的flanneld服务，数据到达以后被解包，然后直接进入目的节点的flannel0虚拟网卡，然后被转发到目的主机的docker0虚拟网卡，最后就像本机容器通信一下的有docker0路由到达目标容器。</p><p>默认的节点间数据通信方式是UDP转发。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9t5cwarj30rc0il0wp.jpg" alt="image-20200823160618131"></p><p><strong>接下来就开始实践 flannel。</strong></p><p>环境准备：</p><table><thead><tr><th align="center">主机名</th><th align="center">IP地址</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">host01</td><td align="center">192.168.2.1</td><td align="center">docker，flannel</td></tr><tr><td align="center">host02</td><td align="center">192.168.2.2</td><td align="center">docker，flannel</td></tr><tr><td align="center">etcd</td><td align="center">192.168.2.3</td><td align="center">etcd</td></tr></tbody></table><p>在此之前，先将之前ovelay的环境清理一下（host2也要执行）</p><ul><li><p>docker rm -f $(docker ps -qa)</p></li><li><p>docker network rm docker_gwbridge</p></li><li><p>将–cluster-store= 和 –cluster-advertise=删除 然后重启docker daemon</p></li></ul><p>1、安装配置 etcd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@etcd ~]<span class="comment"># mkdir -p /tmp/test-etcd</span></span><br><span class="line">[root@etcd ~]<span class="comment"># tar xf etcd-v2.3.7-linux-amd64.tar.gz -C /tmp/test-etcd/ --strip-components=1</span></span><br><span class="line"><span class="comment"># 该脚本从 github 上下载 etcd 的可执行文件并保存到 /usr/local/bin/，启动 etcd 并打开 2379 监听端口。</span></span><br><span class="line">[root@etcd ~]<span class="comment"># cp /tmp/test-etcd/etcd* /usr/local/bin/</span></span><br><span class="line"></span><br><span class="line">[root@etcd ~]<span class="comment"># setsid etcd -listen-client-urls http://192.168.2.3:2379 -advertise-client-urls http://192.168.2.3:2379</span></span><br><span class="line"></span><br><span class="line">[root@etcd ~]<span class="comment"># netstat -anptu|grep 2379</span></span><br><span class="line">tcp        0      0 192.168.2.3:2379        0.0.0.0:*               LISTEN      1407/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 etcd 是否可用：</span></span><br><span class="line">[root@etcd ~]<span class="comment"># etcdctl --endpoints=192.168.2.3:2379 set foo &quot;bar&quot;</span></span><br><span class="line">bar</span><br><span class="line">[root@etcd ~]<span class="comment"># etcdctl --endpoints=192.168.2.3:2379 get foo</span></span><br><span class="line">bar</span><br><span class="line"></span><br><span class="line">可以正常在 etcd 中存取数据了,  接下来需要安装和配置 flannel。</span><br></pre></td></tr></table></figure><p>2、在两台host上安装配置 flannel</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 安装flannel（host2相同操作）</span><br><span class="line"><span class="comment"># flannel同样托管在github，现在已经提供二进制安装包，一般不用自己编译。</span></span><br><span class="line">[root@host1 ~]<span class="comment"># wget https://github.com/coreos/flannel/releases/download/v0.10.0/flannel-v0.10.0-linux-amd64.tar.gz</span></span><br><span class="line">[root@host1 ~]<span class="comment"># tar -zxvf flannel-v0.10.0-linux-amd64.tar.gz</span></span><br><span class="line">[root@host1 ~]<span class="comment"># mv flanneld /usr/bin/</span></span><br><span class="line"></span><br><span class="line">// 配置flannel</span><br><span class="line">flannel默认会读取etcd数据库上key为/coreos.com/network/config的值，也可以通过--etcd-prefix指定key。该key保存的是一个json配置，支持的选项有：</span><br><span class="line">Network (string)：CIDR形式的网络地址。必须设置</span><br><span class="line">SubnetLen (<span class="built_in">integer</span>)：子网尺寸，默认为24。可选项</span><br><span class="line">SubnetMin (string)：开始分配的最小子网。可选项</span><br><span class="line">SubnetMax (string)：可分配的最大子网。可选项</span><br><span class="line">Backend (dictionary)：指定数据转发的后端。</span><br><span class="line"></span><br><span class="line">// 配置文件示例：在etcd主机上写好 flannel 网络的配置信息后保存到 etcd </span><br><span class="line"><span class="comment"># 先将配置信息写到文件 config.json 中，内容为：</span></span><br><span class="line">[root@etcd ~]<span class="comment"># vim config.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.10.0.0/16&quot;</span>,   <span class="comment"># Network 定义该网络的 IP 池为 10.10.0.0/16。 </span></span><br><span class="line">    <span class="string">&quot;SubnetLen&quot;</span>: 24,             <span class="comment"># SubnetLen 指定每个主机分配到的 subnet 大小为 24 位，即10.10.X.0/24。 </span></span><br><span class="line">    <span class="string">&quot;Backend&quot;</span>: &#123;                 <span class="comment"># Backend 为 vxlan，即主机间通过 vxlan 通信，后面我们还会讨论host-gw。 </span></span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将写好的配置存入 etcd</span><br><span class="line">[root@etcd ~]<span class="comment"># etcdctl --endpoints=192.168.2.3:2379 set /docker-test/network/config &lt; config.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.10.0.0/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SubnetLen&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 启动 flannel，在 host1 和 host2 上执行如下命令</span><br><span class="line">flanneld -etcd-endpoints=http://192.168.2.3:2379 -iface=ens32 -etcd-prefix=/docker-test/network</span><br></pre></td></tr></table></figure><p>Host1 上输出如下：【想看输出的话，就使用<code>setsid</code>】</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9tag8x3j31560co40h.jpg" alt="image-20200823163703832"></p><p>3、flanneld 启动后，host 内部网络会发生一些变化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个新的 interface flannel.1 被创建，而且配置上 subnet 的第一个 IP为 10.10.44.0。</span></span><br><span class="line">[root@host01 ~]<span class="comment"># ifconfig flannel.1</span></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.10.44.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::e4ab:5ff:fe72:2cb9  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether e6:ab:05:72:2c:b9  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 8 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># host1 添加了一条路由去往10.10.4.0/24的数据包从flannel.1出去</span></span><br><span class="line">[root@host01 ~]<span class="comment"># ip route</span></span><br><span class="line">default via 192.168.1.1 dev ens34 proto static metric 100 </span><br><span class="line">10.10.4.0/24 via 10.10.4.0 dev flannel.1 onlink </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.1.0/24 dev ens34 proto kernel scope link src 192.168.1.101 metric 100 </span><br><span class="line">192.168.2.0/24 dev ens32 proto kernel scope link src 192.168.2.1 metric 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再看host2主机，发现其IP为：10.10.4.0</span></span><br><span class="line">[root@host02 ~]<span class="comment"># ifconfig flannel.1</span></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.10.4.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::8c4c:b5ff:fe7a:d1f5  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 8e:4c:b5:7a:d1:f5  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 8 overruns 0  carrier 0  collisions 0</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 再看host2的路由，果然也添加了一条路由：10.10.44.0</span></span><br><span class="line">[root@host02 ~]<span class="comment"># ip route</span></span><br><span class="line">default via 192.168.1.1 dev ens34 proto static metric 100 </span><br><span class="line">10.10.44.0/24 via 10.10.44.0 dev flannel.1 onlink </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.1.0/24 dev ens34 proto kernel scope link src 192.168.1.102 metric 100 </span><br><span class="line">192.168.2.0/24 dev ens32 proto kernel scope link src 192.168.2.2 metric 100</span><br></pre></td></tr></table></figure><p>4、当前环境网络拓扑如图所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9tgdwg1j30so0l2q4v.jpg" alt="image-20200823165308287"></p><p>5、在 Docker 中使用 flannel</p><blockquote><p>配置 Docker 连接 flannel</p><p>编辑 host1 的 Docker 配置文件 /usr/lib/systemd/system/docker.service，设置 –bip 和 –mtu。</p><p>这两个参数的值必须与 /run/flannel/subnet.env 中 FLANNEL_SUBNET 和FLANNEL_MTU 一致。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9tkd10aj30qb04gjrf.jpg" alt="image-20200823165831527"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9togry1j31gv039glp.jpg" alt="image-20200823170318460"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 Docker daemon。</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 会将 10.10.44.1 配置到 Linux bridge docker0 上，并添加 10.10.744.0/24 的路由。</span></span><br><span class="line">[root@host01 ~]<span class="comment"># ifconfig docker0 | grep netmask</span></span><br><span class="line">        inet 10.10.44.1  netmask 255.255.255.0  broadcast 10.10.44.255</span><br><span class="line">[root@host01 ~]<span class="comment"># ifconfig flannel.1|grep netmask</span></span><br><span class="line">        inet 10.10.44.0  netmask 255.255.255.255  broadcast 0.0.0.0  </span><br><span class="line">[root@host01 ~]<span class="comment"># ip route</span></span><br><span class="line">default via 192.168.1.1 dev ens34 proto static metric 100 </span><br><span class="line">10.10.4.0/24 via 10.10.4.0 dev flannel.1 onlink </span><br><span class="line">10.10.44.0/24 dev docker0 proto kernel scope link src 10.10.44.1 </span><br><span class="line">192.168.1.0/24 dev ens34 proto kernel scope link src 192.168.1.101 metric 100 </span><br><span class="line">192.168.2.0/24 dev ens32 proto kernel scope link src 192.168.2.1 metric 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># host02的配置与上面同理</span></span><br><span class="line">在此省略……</span><br></pre></td></tr></table></figure><p>6、当前环境网络拓扑如图所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9trt412j30q50kxq4u.jpg" alt="image-20200823170847791"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可见：flannel 没有创建新的 docker 网络，而是直接使用默认的 bridge docker0 网络。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同一主机的容器通过 docker0 连接，跨主机的容器通过 flannel.1 转发。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结：flannel.1用于容器之间通信；docker0用于容器访问外网。</span></span><br></pre></td></tr></table></figure><p>4、基于flannel网络创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 host1 中运行容器 bbox1：</span></span><br><span class="line">docker run -itd --name bbox1 busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 host2 中运行容器 bbox2：</span></span><br><span class="line">docker run -itd --name bbox2 busybox</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9twnx2cj30sn078aag.jpg" alt="image-20200823171245664"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ty81vvj30sc0763yw.jpg" alt="image-20200823172008740"></p><p>5、flannel 的连通与隔离</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// flannel 网络连通性 </span><br><span class="line"><span class="comment"># 测试 bbox1 和 bbxo2 的连通性</span></span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ping 10.10.4.2</span></span><br><span class="line">PING 10.10.4.2 (10.10.4.2): 56 data bytes</span><br><span class="line">64 bytes from 10.10.4.2: seq=0 ttl=62 time=5.525 ms</span><br><span class="line">64 bytes from 10.10.4.2: seq=1 ttl=62 time=1.147 ms</span><br><span class="line">64 bytes from 10.10.4.2: seq=2 ttl=62 time=0.382 ms</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox2 ping 10.10.44.2</span></span><br><span class="line">PING 10.10.44.2 (10.10.44.2): 56 data bytes</span><br><span class="line">64 bytes from 10.10.44.2: seq=0 ttl=62 time=5.771 ms</span><br><span class="line">64 bytes from 10.10.44.2: seq=1 ttl=62 time=0.679 ms</span><br><span class="line">64 bytes from 10.10.44.2: seq=2 ttl=62 time=0.435 ms</span><br></pre></td></tr></table></figure><p>6、测试同一主机运行的容器能否通信，并验证上面所说的在同一主机运行的容器通信用的是不是docker0连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># docker run -itd --name bbox3 busybox</span></span><br><span class="line">d1e24edb54b1b080359ea9aa570f92f18f0be4340604f7e313b77c85270ba7d1</span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox3 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">19: eth0@if20: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:0a:2c:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.44.3/24 brd 10.10.44.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox3 ping 10.10.44.2     # 下面可以看到，同一主机之间的容器是能通信的。</span></span><br><span class="line">PING 10.10.44.2 (10.10.44.2): 56 data bytes</span><br><span class="line">64 bytes from 10.10.44.2: seq=0 ttl=64 time=0.106 ms</span><br><span class="line">64 bytes from 10.10.44.2: seq=1 ttl=64 time=0.046 ms</span><br><span class="line">64 bytes from 10.10.44.2: seq=2 ttl=64 time=0.048 ms</span><br></pre></td></tr></table></figure><p>7、使用 traceroute分析一下 bbox1 到 bbox3</p><p><code>[root@host01 ~]# docker exec -it bbox1 traceroute 10.10.4.3</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9u2dmf9j30qt03m3yl.jpg" alt="image-20200823173855786"></p><p><code>[root@host01 ~]# docker exec -it bbox3 ip route         #查看容器的默认路由是谁</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9u76n45j30nx037t8o.jpg" alt="image-20200823174008594"></p><p><code>[root@host01 ~]# ifconfig docker0|grep netmask          #查看docker0网络</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9uaf9xpj30uw02vaa0.jpg" alt="image-20200823174100166"></p><p>可以看到，每个容器的默认路由都是docker0，所以这就可以证明上面所说是正确的。</p><p>另外，flannel 是没有 DNS 服务的，容器无法通过 hostname 通信。</p><p>8、数据流向如图所示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ue6zdkj30qo0m741h.jpg" alt="image-20200823174212293"></p><p>9、flannel与外网连通性</p><p>因为 flannel 网络利用的是默认的 bridge 网络，所以容器与外网的连通方式与 bridge 网络一样，即： </p><ul><li><p>容器通过 docker0 NAT 访问外网 </p></li><li><p>通过主机端口映射，外网可以访问容器 </p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9uhfqzij30qf06umxl.jpg" alt="image-20200823174647156"></p><p>10、总结 flannel 实现的功能</p><ul><li>单主机容器之间互相通信</li><li>多主机容器之间互相通信</li><li>Flannel网络容器访问外网源地址转换</li><li>Flannel网络外部访问容器内部端口映射</li></ul><p>11、如何使用 flannel backend host-gw（推荐使用）</p><blockquote><p>flannel 支持多种 backend，前面我们讨论的是 vxlan，host-gw 是 flannel 的另一个 backend，这次会将前面的 vxlan backend 切换成 host-gw。</p><p>与 vxlan 不同，host-gw 不会封装数据包，而是在主机的路由表中创建到其他主机 subnet 的路由条目，从而实现容器跨主机通信。 </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要使用 host-gw 首先修改 flannel 的配置 config.json</span></span><br><span class="line">[root@etcd ~]<span class="comment"># vim config.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.10.0.0/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SubnetLen&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;host-gw&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Type 用 host-gw 替换原先的 vxlan。更新 etcd 数据库</span></span><br><span class="line">[root@etcd ~]<span class="comment"># etcdctl --endpoints=192.168.2.3:2379 set /docker-test/network/config &lt; config.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.10.0.0/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SubnetLen&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;host-gw&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将之前 host1 和 host2 的容器删除 并把放在后台的flanneld 进程杀死</span></span><br><span class="line">docker rm -f $(docker ps -qa)</span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动host01 和 host02 flannel</span></span><br><span class="line">[root@host01 ~]<span class="comment"># setsid flanneld -etcd-endpoints=http://192.168.2.3:2379 -iface=ens32 -etcd-prefix=/docker-test/network</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9umn3q2j318109ndh7.jpg" alt="image-20200823180701459"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9uqfy9hj61go0bcmys02.jpg" alt="image-20200823181331793"></p><p>与之前 vxlan backend 启动时有几点不同： </p><p>① flanneld 检查到原先已分配的 subnet 10.10.44.0/24，重用之。 </p><p>② flanneld 从 etcd 数据库中检索到 host1 的 subnet 10.10.44.0/24，但因为其 type=vxlan，立即忽略。 </p><p>③ 两分钟后，再次发现 subnet 10.10.4.0/24，将其加到路由表中。这次没有忽略 subnet 的原因是此时我们在 host2 上重启了 flanneld，根据当前 etcd 的配置使用 host-gw backend。 </p><p>查看 host1 的路由表，增加了一条到 10.10.44.0/24 的路由，网关为 host2 的IP 192.168.2.2。 类似的，host2 启动 flanneld 时会重用 subnet 10.10.4.0/24，并将 host1的subnet 10.10.44.0/24 添加到路由表中，网关为 host1 IP 192.168.2.1。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9utnhuij30sr050glv.jpg" alt="image-20200823181756223"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9uxf6doj30s6053mxf.jpg" alt="image-20200823181825542"></p><p>从 /run/flannel/subnet.env 可以看到 host-gw 使用的 MTU 为 1500：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /run/flannel/subnet.env|grep FLANNEL_MTU</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9v1jv9sj60rx02et8m02.jpg" alt="image-20200823182028864"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9v2y0bdj30q502d0sn.jpg" alt="image-20200823182043247"></p><p>这与 vxlan MTU=1450 不同，所以应该修改 docker 启动参数 –mtu=1500并重启 docker daemon：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9v74qplj31gv0323yk.jpg" alt="image-20200823182244562"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9vay523j31gv036aa4.jpg" alt="image-20200823182257836"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload <span class="meta">&amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>在host01 和 host02 启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># docker run -itd --name bbox1 busybox</span></span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">21: eth0@if22: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:0a:2c:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.44.2/24 brd 10.10.44.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line">[root@host02 ~]<span class="comment"># docker run -itd --name bbox2 busybox</span></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox2 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">26: eth0@if27: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:0a:04:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.4.2/24 brd 10.10.4.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>测试通信</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ping www.baidu.com</span></span><br><span class="line">PING www.baidu.com (182.61.200.7): 56 data bytes</span><br><span class="line">64 bytes from 182.61.200.7: seq=0 ttl=49 time=38.791 ms</span><br><span class="line">64 bytes from 182.61.200.7: seq=1 ttl=49 time=35.257 ms</span><br><span class="line">64 bytes from 182.61.200.7: seq=2 ttl=49 time=32.473 ms</span><br><span class="line"></span><br><span class="line">[root@host01 ~]<span class="comment"># docker exec -it bbox1 ping 10.10.4.2</span></span><br><span class="line">PING 10.10.4.2 (10.10.4.2): 56 data bytes</span><br><span class="line">64 bytes from 10.10.4.2: seq=0 ttl=62 time=5.756 ms</span><br><span class="line">64 bytes from 10.10.4.2: seq=1 ttl=62 time=0.358 ms</span><br><span class="line">64 bytes from 10.10.4.2: seq=2 ttl=62 time=0.337 ms</span><br><span class="line"></span><br><span class="line">[root@host02 ~]<span class="comment"># docker exec -it bbox2 ping 10.10.44.2</span></span><br><span class="line">PING 10.10.44.2 (10.10.44.2): 56 data bytes</span><br><span class="line">64 bytes from 10.10.44.2: seq=0 ttl=62 time=6.262 ms</span><br><span class="line">64 bytes from 10.10.44.2: seq=1 ttl=62 time=0.365 ms</span><br><span class="line">64 bytes from 10.10.44.2: seq=2 ttl=62 time=0.385 ms</span><br></pre></td></tr></table></figure><p>12、下面对 host-gw 和 vxlan 这两种 backend 做个简单比较</p><ul><li><p>host-gw 把每个主机都配置成网关，主机知道其他主机的 subnet 和转发地址。vxlan 则在主机间建立隧道，不同主机的容器都在一个大的网段内（比如 10.2.0.0/16）。 </p></li><li><p>虽然 vxlan 与 host-gw 使用不同的机制建立主机之间连接，但对于容器则无需任何改变，bbox1 仍然可以与 bbox2 通信。 </p></li><li><p>由于 vxlan 需要对数据进行额外打包和拆包，性能会稍逊于 host-gw。 </p></li></ul><h1 id="十、Docker-的两类存储类型"><a href="#十、Docker-的两类存储类型" class="headerlink" title="十、Docker 的两类存储类型"></a>十、Docker 的两类存储类型</h1><p>Docker 为容器提供了两种存放数据的资源：</p><ul><li>storage driver  存储驱动 管理的镜像层和容器层。</li><li>Data Volume   数据卷  挂载点</li></ul><h2 id="1-storage-driver"><a href="#1-storage-driver" class="headerlink" title="1. storage driver"></a>1. storage driver</h2><p>下面是ubuntu:15.04的镜像分层.一共是4层,每一层都由一些只读并且描绘系统区别的文件组成. 也可以使用命令 docker history ubuntu:15.04查看。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9vihjnmj30rb0iagq0.jpg" alt="image-20200828151917115"></p><p>容器由最上面一个可写的容器层，以及若干只读的镜像层组成，容器的数据就存放在这些层中。</p><p>这样的分层结构最大的特性是 Copy-on-Write：</p><ul><li>新数据会直接存放在最上面的容器层。</li><li>如果多个层中有命名相同的文件，用户只能看到最上面那层中的文件。</li><li>修改现有数据会先从镜像层将数据复制到容器层，修改后的数据直接保存在容器层中，镜像层保持不变。</li></ul><p>分层结构使镜像和容器的创建、共享以及分发变得非常高效，而这些都要归功于 Docker storage driver。正是 storage driver 实现了多层数据的堆叠并为用户提供一个单一的合并之后的统一视图。</p><p>Docker 支持多种 storage driver，有 AUFS、Device Mapper、Btrfs、OverlayFS、VFS 和 ZFS。它们都能实现分层的架构，同时又有各自的特性。对于 Docker 用户来说，具体选择使用哪个 storage driver 是一个难题，因为：</p><ul><li>没有哪个 driver 能够适应所有的场景。</li><li>driver 本身在快速发展和迭代。</li></ul><p>不过 Docker 官方给出了一个简单的答案：</p><ul><li>优先使用 Linux 发行版默认的 storage driver。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9vltkakj30t70g778t.jpg" alt="image-20200828152307083"></p><p>Centos7 用的 overlay2，底层文件系统是 xfs，各层数据存放在 /var/lib/docker。</p><p>对于某些容器，直接将数据放在由 storage driver 维护的层中是很好的选择，比如那些无状态的应用。无状态意味着容器没有需要持久化的数据，随时可以从镜像直接创建。</p><p><strong>一句话描述：storage driver 就是将应用或数据打包到镜像层里，从而启动容器后直接使用。</strong></p><p>比如 busybox镜像，它是一个工具箱，我们启动 busybox 是为了执行诸如 wget，ping 之类的命令，不需要保存数据供以后使用，使用完直接退出，容器删除时存放在容器层中的工作数据也一起被删除，这没问题，下次再启动新容器即可。</p><p>但对于另一类应用这种方式就不合适了，它们有持久化数据的需求，容器启动时需要加载已有的数据，容器销毁时希望保留产生的新数据，也就是说，这类容器是有状态的。</p><p><strong>一句话描述：就是容器中的数据不会随着容器的删除而被删除，这一类数据需要持久化</strong></p><p>这就要用到 Docker 的另一种存储机制：Data Volume</p><h2 id="2-Data-Volume"><a href="#2-Data-Volume" class="headerlink" title="2. Data Volume"></a>2. Data Volume</h2><blockquote><p>storage driver 和 data volume 是容器存放数据的两种方式，上一节学习了 storage driver，本节开始讨论 Data Volume。</p></blockquote><p>Data Volume 本质上是 Docker Host 文件系统中的目录或文件，能够直接被 mount 到容器的文件系统中。</p><p>Data Volume 有以下特点： </p><ul><li><p>Data Volume 是目录或文件，<strong>是格式化的磁盘（块设备）。</strong> </p></li><li><p>容器可以读写 volume 中的数据。 </p></li><li><p>volume 数据可以被永久的保存，即使使用它的容器已经销毁。 </p></li></ul><p><strong>思考：现在有driver 和 volume 都可以用来存放数据，具体使用的时候要怎样选择呢？考虑下面几个场景：</strong></p><ul><li>Database 软件 vs Database 数据</li><li>Web 应用 vs 应用产生的日志 </li><li>数据分析软件 vs input/output 数据 </li><li>Apache Server vs 静态 HTML 文件 </li></ul><p><strong>相信大家会做出这样的选择：</strong> </p><ul><li><strong>前者</strong>放在driver中。因为这部分内容是无状态的，应该作为镜像的一部分。 </li><li><strong>后者</strong>放在 Data Volume 中。这是需要持久化的数据，并且应该与镜像分开存放。</li></ul><p><strong>还有个比较关心的问题：如何设置 voluem 的容量？</strong> </p><ul><li>因为 volume 实际上是 docker host 文件系统的一部分，所以 volume 的容量取决于文件系统当前未使用的空间，目前还没有方法设置 volume 的容量。 </li></ul><p>docker 提供了两种类型的 </p><ul><li><strong>volume：bind mount</strong></li><li><strong>docker managed volume</strong>。 </li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9vreedmj30uv0d0n1n.jpg" alt="image-20200828153411370"></p><p><strong>这两种类型最大的区别就是：bind mount是将宿主机的目录数据共享给容器，而docker managed volume是相反的</strong></p><h3 id="bind-mount"><a href="#bind-mount" class="headerlink" title="bind mount"></a>bind mount</h3><blockquote><p>bind mount 是将 host 上已存在的目录或文件 mount 到容器。 </p></blockquote><p>例如 docker host 上有目录 /htdocs： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9vv4kctj30uo03xgn3.jpg" alt="image-20200828153726786"></p><p>通过 <code>-v</code> 将其 mount 到 httpd 容器的网页存放路径：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9vzpnsij30ze01m74v.jpg" alt="image-20200828153814307"></p><p><code>-v</code> 的格式为 <code>&lt;host path&gt;:&lt;container path&gt;</code>。/usr/local/apache2/htdocs 就是 apache server 存放静态文件的地方。</p><p>由于 /usr/local/apache2/htdocs 已经存在，原有数据会被隐藏起来，取而代之的是 host /htdocs/ 中的数据，这与 linux <code>mount</code> 命令的行为是一致的。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9w2i2l9j30zc02pjsb.jpg" alt="image-20200828153843594"></p><p>curl 显示当前的主页确实是 /htdocs/index.html 中的内容。</p><p>更新一下，看是否能生效：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9w5wjk9j30zh05mtb5.jpg" alt="image-20200828153944224"></p><p>host 中的修改确实生效了，bind mount 可以让 host 与容器共享数据。这在管理上是非常方便的。 </p><p>下面将容器销毁，看看对 bind mount 有什么影响： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wb2hp3j30zf09ldjd.jpg" alt="image-20200828154034796"></p><p>可见，即使容器没有了，bind mount 也还在。这也合理，bind mount 是 host 文件系统中的数据，只是借给容器用用，哪能随便就删了啊。 </p><p>另外，bind mount 时还可以指定数据的读写权限，默认是可读可写，可指定为只读：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wcw439j315j075gpz.jpg" alt="image-20200828154149824"></p><p><code>ro</code> 设置了只读权限，在容器中是无法对 bind mount 数据进行修改的。只有 host 有权修改数据，提高了安全性。</p><p>除了 bind mount 目录，还可以单独指定一个文件： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9whluvnj315h07t41z.jpg" alt="image-20200828154434920"></p><p>使用 bind mount 单个文件的场景：只需要向容器添加文件，不希望覆盖整个目录。在上面的例子中，将  html  文件加到 apache 中，同时也保留了容器原有的数据。 </p><p><strong>使用单一文件有一点要注意</strong>：host 中的源文件必须要存在，不然会当作一个新目录 bind mount 给容器。 </p><p>mount point 有很多应用场景，比如我们可以将源代码目录 mount 到容器中，在 host 中修改代码就能看到应用的实时效果。再比如将 mysql 容器的数据放在 bind mount 里，这样 host 可以方便地备份和迁移数据。 </p><p>bind mount 的使用直观高效，易于理解，但它也有不足的地方：bind mount 需要指定 host 文件系统的特定路径，这就限制了容器的可移植性，当需要将容器迁移到其他 host，而该 host 没有要 mount 的数据或者数据不在相同的路径时，操作会失败。</p><h3 id="docker-managed-volume"><a href="#docker-managed-volume" class="headerlink" title="docker managed volume"></a>docker managed volume</h3><blockquote><p>docker managed volume 与 bind mount 在使用上的最大区别是不需要指定 mount 源，指明 mount point 就行了。</p><p>他分为两种挂在：</p><ul><li>匿名挂载  —&gt; 格式： <code>docker run -itd -v volumePath image:latest</code></li><li>具名挂在  —&gt; 格式： <code>docker run -itd -v 目录名称:volumePath image:latest</code></li></ul></blockquote><p>还是以 httpd 容器为例：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wolcxyj310x01wta9.jpg" alt="image-20200828154922718"></p><p>通过 <code>-v</code> 告诉 docker 需要一个 data volume，并将其 mount 到 /usr/local/apache2/htdocs。那么这个 data volume 具体在哪儿呢？这个答案可以在容器的配置信息中找到，执行 <code>docker inspect</code> 命令：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wq0d2cj314409e76y.jpg" alt="image-20200828160015204"></p><p><code>docker inspect</code> 的输出很多，现在 只看 <code>Mounts</code> 这部分，这里会显示容器当前使用的所有 data volume，包括 bind mount 和 docker managed volume。 </p><p><code>Source</code> 就是该 volume 在 host 上的目录。</p><p>每当容器申请 mount manged volume时, docker 都会在<code>/var/lib/docker/volumes</code>下生成一个目录，这个目录就是 mount 源。</p><p>下面继续研究这个 volume，看看里面有些什么东西：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wsufmpj312i041dio.jpg" alt="image-20200828160410582"></p><p>volume 的内容跟容器原有 /usr/local/apache2/htdocs 完全一样，这是怎么回事呢？</p><p>这是因为：如果 mount point 指向的是已有目录，原有数据会被复制到 volume 中。 </p><p>但要明确一点：此时的 /usr/local/apache2/htdocs 已经不再是由 storage driver 管理的层数据了，它已经是一个 data volume。</p><p>现在可以像 bind mount 一样对数据进行操作，例如更新数据：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wwlwlgj312g071ju0.jpg" alt="image-20200828160522159"></p><p><strong>简单回顾一下 docker managed volume 的创建过程：</strong> </p><ul><li><p>容器启动时，简单的告诉 docker “我需要一个 volume 存放数据，帮我 mount 到目录 /abc”。 </p></li><li><p>docker 在 /var/lib/docker/volumes 中生成一个随机目录作为 mount 源。 </p></li><li><p>如果 /abc 已经存在，则将数据复制到 mount 源， </p></li><li><p>将 volume mount 到 /abc </p></li></ul><p><strong>除了通过 <code>docker inspect</code> 查看 volume，我们也可以用 <code>docker volume</code> 命令：</strong> </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9wyh9uij312f0czn1w.jpg" alt="image-20200829130523502"></p><p>目前，<code>docker volume</code> 只能查看 docker managed volume，还看不到 bind mount；同时也无法知道 volume 对应的容器，这些信息还得靠<code>docker inspect</code>。 </p><p><strong>上面的就属于匿名挂在，能看到宿主机的目录名是很长的字串，非常不好记，那么就可以具名挂在volume了（推荐使用）</strong></p><p>很简单，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -itd --name web2 -p 88:80 -v html:/usr/local/apache2/htdocs httpd:latest</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9x51mtgj30xv0fet9x.jpg" alt="image-20200829131112053"></p><h2 id="3-如何共享数据？"><a href="#3-如何共享数据？" class="headerlink" title="3. 如何共享数据？"></a>3. 如何共享数据？</h2><blockquote><p>数据共享是 volume 的关键特性，本节会详细讨论通过 volume 如何在容器与 host 之间，容器与容器之间共享数据。</p></blockquote><h3 id="bind-mount-共享数据"><a href="#bind-mount-共享数据" class="headerlink" title="bind mount 共享数据"></a>bind mount 共享数据</h3><p>第一种方法是将共享数据放在 bind mount 中，然后将其 mount 到多个容器。</p><p>还是以 httpd 为例，不过这次的场景复杂些，我们要创建由三个 httpd 容器组成的 web server 集群，它们使用相同的 html 文件。</p><p>操作如下：</p><p>1、将 /htdocs mount 到三个 httpd 容器。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9x7dapbj310u0877ak.jpg" alt="image-20200829180053837"></p><p>2、查看当前主页内容。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xa6u1bj315h0ccq8i.jpg" alt="image-20200829180130204"></p><p>3、修改 volume 中的主页文件，再次查看并确认所有容器都使用了新的主页。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xc2hchj315i0b979t.jpg" alt="image-20200829180140229"></p><h3 id="volume-container-共享数据（容器卷）"><a href="#volume-container-共享数据（容器卷）" class="headerlink" title="volume container 共享数据（容器卷）"></a>volume container 共享数据（容器卷）</h3><p>第二种方法是 volume container ，专门为其他容器提供 volume 的容器，它提供的卷可以是 bind mount，也可以是 docker managed volume。</p><p>下面创建一个 volume container：</p><p><code>docker create --name vc_data  -v /htdocs:/usr/local/apache2/htdocs  -v /other/useful/tools  busybox</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xhnmegj30xr05rdiv.jpg" alt="image-20200829180642837"></p><p>这里将容器命名为 <code>vc_data</code>（vc 是 volume container 的缩写）。</p><p>这里执行的 <code>docker create</code> 命令，是因为 volume container 的作用只是提供数据，它本身不需要处于运行状态。</p><p>容器 mount 了两个 volume：</p><ul><li>bind mount，存放 web server 的静态文件。</li><li>docker managed volume，存放一些实用工具（当然现在是空的，这只是做个示例）。</li></ul><p>通过 <code>docker inspect</code> 可以查看到这两个 volume。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xjjqt5j312g0fun0s.jpg" alt="image-20200829180822017"></p><p>其他容器可以通过 <code>--volumes-from</code> 使用 <code>vc_data</code> 这个 volume container：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name web4 -d -p 80 --volumes-from vc_data httpd</span><br><span class="line"></span><br><span class="line">docker run --name web5 -d -p 80 --volumes-from vc_data httpd</span><br><span class="line"></span><br><span class="line">docker run --name web6 -d -p 80 --volumes-from vc_data httpd</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xntizjj30xo07wgre.jpg" alt="image-20200829180855573"></p><p><code>docker inspect web4</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xokcjrj312d0g1q7l.jpg" alt="image-20200829180926891"></p><p>web4 容器使用的就是 vc_data 的 volume，而且连 mount point 都是一样的。</p><p>验证一下数据共享的效果：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9xunwcrj315h0atq9g.jpg" alt="image-20200829181007134"></p><p>可见，三个容器已经成功共享了 volume container 中的 volume。</p><p><strong>下面我们讨论一下 volume container 的特点：</strong> </p><ul><li><p>与 bind mount 相比，不必为每一个容器指定 host path，所有 path 都在 volume container 中定义好了，容器只需与 volume container 关联，实现了容器与 host 的解耦。</p></li><li><p>使用 volume container 的容器其 mount point 是一致的，有利于配置的规范和标准化，但也带来一定的局限，使用时需要综合考虑。 </p></li></ul><h3 id="data-packed-volume-container-共享数据"><a href="#data-packed-volume-container-共享数据" class="headerlink" title="data-packed volume container 共享数据"></a>data-packed volume container 共享数据</h3><blockquote><p>上面的两个方法其实都是宿主机和容器之间的volume共享，而这次的方法就属于容器与容器之间的容器共享</p></blockquote><p>上面例子中 volume container 的数据归根到底还是在 host 里，有没有办法将数据完全放到 volume container 中，同时又能与其他容器共享呢？</p><p>当然可以!  通常简称这种容器为 data-packed volume container。</p><p>其原理是将数据打包到镜像中，然后通过 docker managed volume 共享。</p><p>用下面的 Dockfile 构建镜像：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9y0dlu8j310s0c7q83.jpg" alt="image-20200829181923380"></p><p><code>ADD</code> 将静态文件添加到容器目录 /usr/local/apache2/htdocs。</p><p><code>VOLUME</code> 的作用与 <code>-v</code> 等效，用来创建 docker managed volume，mount point 为 /usr/local/apache2/htdocs，因为这个目录就是 <code>ADD</code> 添加的目录，所以会将已有数据拷贝到 volume 中。 </p><p>build 新镜像 datapacked： </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9y1sh8oj310u0fbn5h.jpg" alt="image-20200829182003324"></p><p>用新镜像创建 data-packed volume container：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9y7rhl6j310u02ignu.jpg" alt="image-20200829182017247"></p><p>因为在 Dockerfile 中已经使用了 <code>VOLUME</code> 指令，这里就不需要指定 volume 的 mount point 了。启动 httpd 容器并使用 data-packed volume container：</p><p><code>docker run -d -p 80 --name web7 --volumes-from vc_data2 httpd</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9y8do0mj315j0ao10f.jpg" alt="image-20200829182045528"></p><p><code>docker inspect web7</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ya8orpj315k09jdim.jpg" alt="image-20200829182104712"></p><p>容器能够正确读取 volume 中的数据。data-packed volume container 是自包含的，不依赖 host 提供数据，具有很强的移植性，非常适合只使用静态数据的场景，比如应用的配置信息、web server 的静态文件等。</p><h2 id="4-volume-生命周期管理"><a href="#4-volume-生命周期管理" class="headerlink" title="4. volume 生命周期管理"></a>4. volume 生命周期管理</h2><blockquote><p>Data Volume 中存放的是重要的应用数据，如何管理 volume 对应用至关重要。前面主要关注的是 volume 的创建、共享和使用，本节将讨论如何备份、恢复、迁移和销毁 volume。</p></blockquote><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9yfc8lej30ww09ojsc.jpg" alt="image-20200829182520820"></p><h3 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a>2. 恢复</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ylewz9j30wv059wen.jpg" alt="image-20200829182609254"></p><h3 id="3-迁移"><a href="#3-迁移" class="headerlink" title="3. 迁移"></a>3. 迁移</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9yo9mbsj30x00addgr.jpg" alt="image-20200829182654359"></p><h3 id="4-销毁"><a href="#4-销毁" class="headerlink" title="4. 销毁"></a>4. 销毁</h3><blockquote><p>可以删除不再需要的 volume，但一定要确保知道自己正在做什么，volume 删除后数据是找不回来的！！！</p></blockquote><p>Docker不会销毁 bind mount，删除数据的工作只能由host负责。对于 docker managed volume，在执行 <code>docker rm</code> 删除容器时可以带上 <code>-v</code> 参数，docker 会将容器使用到的 volume一并删除，但前提是没有其他容器 mount 该 volume，目的是保护数据。</p><p>如果删除容器时没有带 <code>-v</code> 呢？</p><p>这样就会产生孤儿 volume，好在 docker 提供了 volume 子命令可以对 docker managed volume 进行维护。</p><p>请看下面的例子：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9ysfpldj312d0e1nan.jpg" alt="image-20200829182932834"></p><p>容器 bbox 使用的docker managed volume可以通过<code>docker volume ls</code> 查看到。</p><p>删除 bbox：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9z0gu5xj312f0a6tf6.jpg" alt="image-20200829183010125"></p><p>因为没有使用 <code>-v</code>，volume 遗留了下来。对于这样的孤儿 volume，可以用 <code>docker volume rm</code> 删除：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gri9z4nd75j312h083gou.jpg" alt="image-20200829183026038"></p><p>如果想批量删除孤儿 volume，可以执行： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm $(docker volume ls -q)</span><br></pre></td></tr></table></figure><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p><strong>本章学习了以下内容：</strong> </p><ul><li><p>docker 为容器提供了两种存储资源：数据层和 Data Volume。 </p></li><li><p>数据层包括镜像层和容器层，由 storage driver 管理。</p></li><li><p>Data Volume 有两种类型：bind mount 和 docker managed volume。 </p></li><li><p>bind mount 可实现容器与 host 之间，容器与容器之间共享数据。 </p></li><li><p>volume container 是一种具有更好移植性的容器间数据共享方案，特别是 data-packed volume container。 </p></li><li><p>最后学习了如何备份、恢复、迁移和销毁 Data Volume。</p></li></ul><p>这章我们学习的只是单个 docker host 中的存储方案。</p><p>而跨主机存储也是一个重要的主题，当然也更复杂，我们会在容器进阶技术章节详细讨论。</p><h1 id="十一、Docker-仓库搭建和使用"><a href="#十一、Docker-仓库搭建和使用" class="headerlink" title="十一、Docker 仓库搭建和使用"></a>十一、Docker 仓库搭建和使用</h1><p><a href="https://blog.csdn.net/qq_40378034/article/details/90752212">有兴趣的话点击此链接</a></p><h1 id="十二、Docker-单机编排-Compose"><a href="#十二、Docker-单机编排-Compose" class="headerlink" title="十二、Docker 单机编排 Compose"></a>十二、Docker 单机编排 Compose</h1><p><a href="https://www.cnblogs.com/linuxk/p/9287129.html">有兴趣的话点击此链接</a></p><h1 id="十三、Docker-集群编排-Swarm"><a href="#十三、Docker-集群编排-Swarm" class="headerlink" title="十三、Docker 集群编排 Swarm"></a>十三、Docker 集群编排 Swarm</h1><p><a href="https://www.cnblogs.com/vinsent/p/11691562.html">有兴趣的话点击此链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JenKins</title>
      <link href="/2021/06/06/JenKins/"/>
      <url>/2021/06/06/JenKins/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="GitLab-Jenkins-基本过程"><a href="#GitLab-Jenkins-基本过程" class="headerlink" title="GitLab + Jenkins 基本过程"></a>GitLab + Jenkins 基本过程</h1><h2 id="一、持续集成、持续交付、持续部署"><a href="#一、持续集成、持续交付、持续部署" class="headerlink" title="一、持续集成、持续交付、持续部署"></a>一、持续集成、持续交付、持续部署</h2><h3 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h3><ul><li>软件开发周期中需要一些可以帮助开发者提升速度的自动化工具。其中工具最重要的目的是促进软件项目的持续集成与交付。通过CI/CD工具，开发团队可以保持软件更新并将其迅速的投入实践中。CI/CD也被认为是敏捷开发的最重要实践。</li></ul><h3 id="2-持续集成-CI"><a href="#2-持续集成-CI" class="headerlink" title="2. 持续集成(CI)"></a>2. 持续集成(CI)</h3><p><strong>概述：【持续集成指的是，频繁地（一天多次）将代码集成到主干】</strong></p><ul><li><p>持续集成（Continuous integration，简称CI），一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建 (包括推送代码，自动化集成，自动化测试，返回结果) 来验证，从而尽早地发现集成错误。</p></li><li><p>整体流程：推送代码  – &gt; 集成代码 – &gt; 构建 –&gt; 代码测试 – &gt; 反馈结果</p></li><li><p>持续集成的最终目的就是 让产品可以快速迭代，同时还能保持高质量，简化工作流程</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vv7weaqj30m308ymyv.jpg" alt="image-20200519112017013"></p><h3 id="3-持续交付-CD"><a href="#3-持续交付-CD" class="headerlink" title="3. 持续交付(CD)"></a>3. 持续交付(CD)</h3><p><strong>概述：【持续 将通过持续集成后的代码进行手动部署】</strong></p><ul><li><p>持续交付（Continuous Delivery, CD）是一种软件工程的手段，让软件在短周期内产出，确保软件随时可以被可靠地发布。其目的在于更快、更频繁地构建、测试以及发布软件。通过加强对生产环境的应用进行渐进式更新，这种手段可以降低交付变更的成本与风险。一个简单直观的与可重复的部署过程对于持续交付来说是很重要的。</p></li><li><p>整体流程：推送代码 – &gt; 集成代码 – &gt; 构建 –&gt; 代码测试 — &gt; 反馈结果  –&gt; 测试 –&gt; 手动 –&gt; 部署到生产</p></li><li><p>持续交付指的是在持续集成后的环境基础之上，将代码部署到预生产环境上。</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vvg7grrj60ms0g7whk02.jpg" alt="image-20200519114326555"></p><h3 id="4-持续部署（CD）"><a href="#4-持续部署（CD）" class="headerlink" title="4. 持续部署（CD）"></a>4. 持续部署（CD）</h3><p><strong>概述：【基于 集成 交付之上的，部署和交付的区别在于 无论何时 代码都是可以部署的 没有问题的】</strong></p><ul><li><p>持续部署（Continuous Deployment，缩写为 CD）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境；持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p></li><li><p>持续部署指的是持续交付的下一步，指代码可以在任何时刻都是可以部署的 没问题的，最后部署到生产环境下的过程</p></li><li><p>整体流程：推送代码 – &gt; 集成代码 – &gt; 构建 –&gt; 代码测试 — &gt; 反馈结果  –&gt; 测试 –&gt; 自动 –&gt; 部署到生产</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vvkgypqj30mx0gdq60.jpg" alt="image-20200519114904256"></p><h3 id="5-集成-amp-交付软件"><a href="#5-集成-amp-交付软件" class="headerlink" title="5. 集成 &amp; 交付软件"></a>5. 集成 &amp; 交付软件</h3><p><strong>概述：</strong></p><ul><li>典型的部署流水线，CD 流水线由几个不同的阶段组成; 一个工具不能满足所有这些步骤。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vvt4e62j31530o0e81.jpg" alt="image-20200519115644610"></p><h2 id="二、Git版本控制器"><a href="#二、Git版本控制器" class="headerlink" title="二、Git版本控制器"></a>二、Git版本控制器</h2><h3 id="1-Git工作图"><a href="#1-Git工作图" class="headerlink" title="1. Git工作图"></a>1. Git工作图</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1graufd3ucej30r70ax0u9.jpg"></p><h3 id="2-四个区域和五种状态"><a href="#2-四个区域和五种状态" class="headerlink" title="2. 四个区域和五种状态"></a>2. 四个区域和五种状态</h3><h5 id="1-四个区域"><a href="#1-四个区域" class="headerlink" title="1. 四个区域"></a>1. 四个区域</h5><ul><li>工作区(Working Area)</li><li>暂存区(Stage)</li><li>本地仓库(Local Repository)</li><li>远程仓库(Remote Repository)</li></ul><h5 id="2-五种状态"><a href="#2-五种状态" class="headerlink" title="2. 五种状态"></a>2. 五种状态</h5><ul><li>未修改(Origin)</li><li>已修改(Modified)&amp;未追踪(Untracked)</li><li>已暂存(Staged)</li><li>已提交(Committed)</li><li>已推送(Pushed)</li></ul><h3 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h3><blockquote><p><strong>随便打开一台虚拟机用来练习git的使用</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># yum -y install git</span></span><br></pre></td></tr></table></figure><h3 id="4-常见的-Git-命令："><a href="#4-常见的-Git-命令：" class="headerlink" title="4. 常见的 Git 命令："></a>4. 常见的 Git 命令：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">开始一个工作区（参见：git <span class="built_in">help</span> tutorial）</span><br><span class="line">   <span class="built_in">clone</span>      克隆一个仓库到一个新目录</span><br><span class="line">   init       创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br><span class="line"></span><br><span class="line">在当前变更上工作（参见：git <span class="built_in">help</span> everyday）</span><br><span class="line">   add        添加文件内容至索引</span><br><span class="line">   mv         移动或重命名一个文件、目录或符号链接</span><br><span class="line">   reset      重置当前 HEAD 到指定状态</span><br><span class="line">   rm         从工作区和索引中删除文件</span><br><span class="line"></span><br><span class="line">检查历史和状态（参见：git <span class="built_in">help</span> revisions）</span><br><span class="line">   bisect     通过二分查找定位引入 bug 的提交</span><br><span class="line">   grep       输出和模式匹配的行</span><br><span class="line">   <span class="built_in">log</span>        显示提交日志</span><br><span class="line">   show       显示各种类型的对象</span><br><span class="line">   status     显示工作区状态</span><br><span class="line"></span><br><span class="line">扩展、标记和调校您的历史记录</span><br><span class="line">   branch     列出、创建或删除分支</span><br><span class="line">   checkout   切换分支或恢复工作区文件</span><br><span class="line">   commit     记录变更到仓库</span><br><span class="line">   diff       显示提交之间、提交和工作区之间等的差异</span><br><span class="line">   merge      合并两个或更多开发历史</span><br><span class="line">   rebase     本地提交转移至更新后的上游分支中</span><br><span class="line">   tag        创建、列出、删除或校验一个 GPG 签名的标签对象</span><br><span class="line"></span><br><span class="line">协同（参见：git <span class="built_in">help</span> workflows）</span><br><span class="line">   fetch      从另外一个仓库下载对象和引用</span><br><span class="line">   pull       获取并整合另外的仓库或一个本地分支</span><br><span class="line">   push       更新远程引用和相关的对象</span><br></pre></td></tr></table></figure><h3 id="5-配置git"><a href="#5-配置git" class="headerlink" title="5. 配置git"></a>5. 配置git</h3><ul><li> <strong>你是谁，你的邮箱是什么。这样就知道是谁提交的代码了</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># git config --global user.name &quot;lemon&quot;                     #名字</span></span><br><span class="line">[root@git ~]<span class="comment"># git config --global user.email &quot;lemon_row@163.com&quot;        #邮箱</span></span><br><span class="line">[root@git ~]<span class="comment"># git config --global color.ui true                         #颜色</span></span><br></pre></td></tr></table></figure><h3 id="6-检查配置信息"><a href="#6-检查配置信息" class="headerlink" title="6. 检查配置信息"></a>6. 检查配置信息</h3><ul><li><strong>这个 <code>.gitconfig </code> 是在你当前的家目录下的一个隐藏文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># cat .gitconfig </span></span><br><span class="line">[user]</span><br><span class="line">name = lemon</span><br><span class="line">email = lemon_row@163.com</span><br><span class="line">[color]</span><br><span class="line">ui = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="7-基本使用案例"><a href="#7-基本使用案例" class="headerlink" title="7. 基本使用案例"></a>7. 基本使用案例</h3><h4 id="实战（一）git如何快速的提交目录文件至本地仓库？"><a href="#实战（一）git如何快速的提交目录文件至本地仓库？" class="headerlink" title="实战（一）git如何快速的提交目录文件至本地仓库？"></a>实战（一）git如何快速的提交目录文件至本地仓库？</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@git ~]<span class="comment"># mkdir project &amp;&amp; cd project    #创建git工作目录</span></span><br><span class="line">[root@git project]<span class="comment"># git init                 #初始化该目录为git本地仓库</span></span><br><span class="line">初始化空的 Git 版本库于 /root/project/.git/</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># ls -a                   #初始化成功后会在该目录下生成一个.git的隐藏目录</span></span><br><span class="line">.  ..  .git</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># touch file&#123;1..3&#125;.txt     #创建三个文件</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># ls</span></span><br><span class="line">file1.txt  file2.txt  file3.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status               #查看暂存区状态</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 初始提交</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 未跟踪的文件:</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 以包含要提交的内容）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#file1.txt</span></span><br><span class="line"><span class="comment">#file2.txt</span></span><br><span class="line"><span class="comment">#file3.txt</span></span><br><span class="line">提交为空，但是存在尚未跟踪的文件（使用 <span class="string">&quot;git add&quot;</span> 建立跟踪）</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git add .                #将文件添加到暂存区</span></span><br><span class="line">[root@git project]<span class="comment"># git status               #查看暂存区状态</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 初始提交</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git rm --cached &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#新文件：    file1.txt</span></span><br><span class="line"><span class="comment">#新文件：    file2.txt</span></span><br><span class="line"><span class="comment">#新文件：    file3.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 1 add --&gt; file1 file2 file3&quot;        #将其提交至本地仓库</span></span><br><span class="line">[master（根提交） 75b88ee] NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"> 3 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 file1.txt</span><br><span class="line"> create mode 100644 file2.txt</span><br><span class="line"> create mode 100644 file3.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure><h4 id="实战（二）git-如何将文件改名并重新提交到本地仓库？"><a href="#实战（二）git-如何将文件改名并重新提交到本地仓库？" class="headerlink" title="实战（二）git 如何将文件改名并重新提交到本地仓库？"></a>实战（二）git 如何将文件改名并重新提交到本地仓库？</h4><ul><li><p><strong>分两种：</strong></p><ul><li>使用 <code>git mv</code> 命令（推荐使用）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@git project]<span class="comment"># git mv file1.txt file.txt     #修改file.txt文件名为file1.txt</span></span><br><span class="line">[root@git project]<span class="comment"># ls</span></span><br><span class="line">file2.txt  file3.txt  file.txt</span><br><span class="line">  </span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#重命名：    file1.txt -&gt; file.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#重命名：    file1.txt -&gt; file.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 2 rename file1 --&gt; file.txt&quot;</span></span><br><span class="line">[master dbff765] NOW 2 rename file1 --&gt; file.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> rename file1.txt =&gt; file.txt (100%)</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure><ul><li>使用 <code>mv</code> 命令（不推荐使用）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@git project]<span class="comment"># mv file.txt file1.txt    #修改file1.txt文件名为file.txt</span></span><br><span class="line">[root@git project]<span class="comment"># ls</span></span><br><span class="line">file2.txt  file3.txt  file.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status               #查看一下暂存区状态</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add/rm &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#删除：      file.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 未跟踪的文件:</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 以包含要提交的内容）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#file1.txt</span></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git rm file.txt</span></span><br><span class="line">rm <span class="string">&#x27;file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git add file1.txt</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#重命名：    file.txt -&gt; file1.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 3 rename file --&gt; file1.txt&quot;</span></span><br><span class="line">[master 6e97421] NOW 3 rename file --&gt; file1.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> rename file.txt =&gt; file1.txt (100%)</span><br><span class="line"> </span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure></li></ul><h4 id="实战（三）如何比对-工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？"><a href="#实战（三）如何比对-工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？" class="headerlink" title="实战（三）如何比对 工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？"></a>实战（三）如何比对 工作目录文件内容、暂存区文件内容、本地仓库文件内容之间的差役？</h4><ul><li><strong>使用 <code>git diff</code> 命令来 比对 工作目录文件内容 与 暂存区文件内容</strong></li><li><strong>使用 <code>git diff --cached</code> 命令来 比对 暂存区文件内容、本地仓库文件内容</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vywjp4tj313l0dbafh.jpg" alt="image-20200520101936824"></p><p>1.工作区 <code>file1</code> 内容 与 暂存区 <code>file1</code> 内容比较之间的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给file1.txt文件加点内容 后并 提交到本地仓库</span></span><br><span class="line">[root@git project]<span class="comment"># echo &#x27;aaaaa&#x27; &gt;&gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 4 read-in file1.txt --&gt; aaaaa&quot;</span></span><br><span class="line">[master 3485684] NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#给file1.txt文件加点内容 不提交</span></span><br><span class="line">[root@git project]<span class="comment"># echo &#x27;bbbbb&#x27; &gt;&gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#修改：      file1.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line"></span><br><span class="line"><span class="comment">#工作区与暂存区比较差役</span></span><br><span class="line">[root@git project]<span class="comment"># git diff file1.txt</span></span><br><span class="line">diff --git a/file1.txt b/file1.txt</span><br><span class="line">index ccc3e7b..be4e668 100644</span><br><span class="line">--- a/file1.txt           <span class="comment">#表示变动前的版本</span></span><br><span class="line">+++ b/file1.txt           <span class="comment">#表示变动后的版本</span></span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> aaaaa</span><br><span class="line">+bbbbb                    <span class="comment">#加入的内容</span></span><br></pre></td></tr></table></figure><p>2.暂存区 <code>file1</code> 内容 与 本地仓库 <code>file1</code> 内容比较之间的差异</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将其修改的文件添加到暂存区中</span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git diff file1.txt</span></span><br><span class="line">[root@git project]<span class="comment"># 这个时候可以看到，工作区 与 缓存区 已经保持抑一致了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暂存区与本地仓库比较差役</span></span><br><span class="line">[root@git project]<span class="comment"># git diff --cached file1.txt</span></span><br><span class="line">diff --git a/file1.txt b/file1.txt</span><br><span class="line">index ccc3e7b..be4e668 100644</span><br><span class="line">--- a/file1.txt</span><br><span class="line">+++ b/file1.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> aaaaa</span><br><span class="line">+bbbbb</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后将其所有暂存区内容提交至本地仓库</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 5 read-in file1.txt --&gt; bbbbb&quot;</span></span><br><span class="line">[master fdf30db] NOW 5 read-in file1.txt --&gt; bbbbb</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@git project]<span class="comment"># </span></span><br><span class="line">[root@git project]<span class="comment"># git diff --cached file1.txt</span></span><br><span class="line">[root@git project]<span class="comment"># 此时可以看到，暂存区 与 本地仓库 已经保持抑一致了</span></span><br></pre></td></tr></table></figure><h4 id="实战（四）如何理解git-commit-提交操作？"><a href="#实战（四）如何理解git-commit-提交操作？" class="headerlink" title="实战（四）如何理解git  commit 提交操作？"></a>实战（四）如何理解git  commit 提交操作？</h4><ul><li><p><strong>可以将其理解为虚拟机的快照功能，简单来说就是每次commit就是相当于对文件做了一次快照。</strong></p></li><li><p><strong>FQ：知道了commit相当于快照后，那如何得知该文件快照了多少次  都修改了哪些内容呢？</strong></p></li><li><p><strong>答：使用 <code>git log</code> 或者 <code>git reflog</code> 查看历史的commit快照记录</strong></p></li><li><p><strong>但是这种查看方式，输出的信息太过多余，我们可以使用 <code>--oneline</code> 选项</strong></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看历史的git commit快照</span></span><br><span class="line">[root@git project]<span class="comment"># git log</span></span><br><span class="line">commit fdf30db3870322636d06b79a74ed5feb399213ea      <span class="comment">#commit的id编号（唯一的）</span></span><br><span class="line">Author: lemon &lt;lemon_row@163.com&gt;                    <span class="comment">#是谁提交的</span></span><br><span class="line">Date:   Wed May 20 09:55:33 2020 +0800               <span class="comment">#什么时间提交的</span></span><br><span class="line"></span><br><span class="line">    NOW 5 read-in file1.txt --&gt; bbbbb                <span class="comment">#提交的信息描述</span></span><br><span class="line"></span><br><span class="line">commit 34856846ee0540482ab21a3df4bf821dd2329961</span><br><span class="line">Author: lemon &lt;lemon_row@163.com&gt;</span><br><span class="line">Date:   Wed May 20 09:51:53 2020 +0800</span><br><span class="line"></span><br><span class="line">    NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line"></span><br><span class="line">commit 2b1c545d923502f1bfd20c25a3f58ff8519a44f0</span><br><span class="line">Author: lemon &lt;lemon_row@163.com&gt;</span><br><span class="line">Date:   Wed May 20 09:50:12 2020 +0800</span><br><span class="line"></span><br><span class="line">    NOW 3 rename file --&gt; file1.txt</span><br><span class="line"></span><br><span class="line">commit 0c943fc2c68773efea85a0ed0a26dcfbf973e351</span><br><span class="line">Author: lemon &lt;lemon_row@163.com&gt;</span><br><span class="line">Date:   Wed May 20 09:49:20 2020 +0800</span><br><span class="line"></span><br><span class="line">    NOW 2 rename file1 --&gt; file.txt</span><br><span class="line"></span><br><span class="line">commit 75b88eeb1dc16a54b6da9419f5d8e872b900df0e</span><br><span class="line">Author: lemon &lt;lemon_row@163.com&gt;</span><br><span class="line">Date:   Wed May 20 09:46:46 2020 +0800</span><br><span class="line"></span><br><span class="line">    NOW 1 add --&gt; file1 file2 file3</span><br><span class="line">(END)</span><br><span class="line"></span><br><span class="line"><span class="comment">##但是这种查看方式，输出的信息太过多余，我们可以使用--oneline选项</span></span><br><span class="line">[root@git project]<span class="comment"># git log --oneline</span></span><br><span class="line">fdf30db NOW 5 read-in file1.txt --&gt; bbbbb</span><br><span class="line">3485684 NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line">2b1c545 NOW 3 rename file --&gt; file1.txt</span><br><span class="line">0c943fc NOW 2 rename file1 --&gt; file.txt</span><br><span class="line">75b88ee NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"></span><br><span class="line"><span class="comment">#还有git log -n 的方式，查看最近的n次快照</span></span><br><span class="line">[root@git project]<span class="comment"># git log --oneline -2</span></span><br><span class="line">c652338 NOW 7 read-in file1 ---&gt; ddddd</span><br><span class="line">f405afa NOW 6 read-in file1 ---&gt; ccccc</span><br></pre></td></tr></table></figure><h4 id="实战（五）git-保存了状态后，想回退怎么办？"><a href="#实战（五）git-保存了状态后，想回退怎么办？" class="headerlink" title="实战（五）git 保存了状态后，想回退怎么办？"></a>实战（五）git 保存了状态后，想回退怎么办？</h4><ul><li><strong>如果使用虚拟机的话，肯定想都不用想，直接还原快照就得了，那么 git 优势如何实现的呢？</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vz486idj30y007badx.jpg"></p><p>1.如果本地工作目录修改文件错误像回退怎么办？【工作目录 与 暂存区的撤销】</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#误操作</span></span><br><span class="line">[root@git project]<span class="comment"># &gt; file1.txt</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#修改：      file1.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line"></span><br><span class="line"><span class="comment">#丢弃工作区的改动（恢复）</span></span><br><span class="line">[root@git project]<span class="comment"># git checkout file1.txt</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># cat file1.txt </span></span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br></pre></td></tr></table></figure><p>2.工作文件误操作提交至暂存区中该怎么办？</p><blockquote><p>使用 本地仓库 —  覆盖  —  暂存区  —  覆盖   —  工作仓库</p><p>git  reset  HEAD  文件名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#误操作</span></span><br><span class="line">[root@git project]<span class="comment"># &gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#修改：      file1.txt</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git reset HEAD file1.txt     #取消这个暂存区的内容</span></span><br><span class="line">重置后撤出暂存区的变更：</span><br><span class="line">Mfile1.txt</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment">#   （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#修改：      file1.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git checkout file1.txt</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># cat file1.txt </span></span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br></pre></td></tr></table></figure><h4 id="实战（六）回滚版本，回滚之前的版本-和-回滚之后的版本"><a href="#实战（六）回滚版本，回滚之前的版本-和-回滚之后的版本" class="headerlink" title="实战（六）回滚版本，回滚之前的版本 和 回滚之后的版本"></a>实战（六）回滚版本，回滚之前的版本 和 回滚之后的版本</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vzjg8mmj30ie06wadv.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@git project]<span class="comment"># echo &#x27;ccccc&#x27; &gt;&gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 6 read-in file1 ---&gt; ccccc&quot;</span></span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># echo &#x27;ddddd&#x27; &gt;&gt; file1.txt </span></span><br><span class="line">[root@git project]<span class="comment"># git add .</span></span><br><span class="line">[root@git project]<span class="comment"># git commit -m &quot;NOW 7 read-in file1 ---&gt; ddddd&quot;</span></span><br><span class="line">[root@git project]<span class="comment"># cat file1.txt </span></span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line">ddddd</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如我就想回退到ccccc的版本（回滚之前的版本）</span></span><br><span class="line">[root@git project]<span class="comment"># git log --oneline</span></span><br><span class="line">c652338 NOW 7 read-in file1 ---&gt; ddddd</span><br><span class="line">f405afa NOW 6 read-in file1 ---&gt; ccccc            <span class="comment">#使用前面第一段commit的id进行回滚操作</span></span><br><span class="line">fdf30db NOW 5 read-in file1.txt --&gt; bbbbb</span><br><span class="line">3485684 NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line">2b1c545 NOW 3 rename file --&gt; file1.txt</span><br><span class="line">0c943fc NOW 2 rename file1 --&gt; file.txt</span><br><span class="line">75b88ee NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git reset --hard f405afa      #回滚</span></span><br><span class="line">HEAD 现在位于 f405afa NOW 6 read-in file1 ---&gt; ccccc</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否已经回到这个版本</span></span><br><span class="line">[root@git project]<span class="comment"># git rev-parse HEAD</span></span><br><span class="line">f405afac0930c1feb0ee86cfa8b4c6032afd4b69</span><br><span class="line">[root@git project]<span class="comment"># cat file1.txt</span></span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是，有个问题，此时我又想回到ddddd的版本怎么办？（回滚之后的版本）</span></span><br><span class="line">[root@git project]<span class="comment"># git log --oneline    #这次会发现ddddd的版本消失了</span></span><br><span class="line">f405afa NOW 6 read-in file1 ---&gt; ccccc</span><br><span class="line">fdf30db NOW 5 read-in file1.txt --&gt; bbbbb</span><br><span class="line">3485684 NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line">2b1c545 NOW 3 rename file --&gt; file1.txt</span><br><span class="line">0c943fc NOW 2 rename file1 --&gt; file.txt</span><br><span class="line">75b88ee NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"></span><br><span class="line"><span class="comment">#答：使用git reflog</span></span><br><span class="line">[root@git project]<span class="comment"># git reflog</span></span><br><span class="line">f405afa HEAD@&#123;0&#125;: reset: moving to f405afa</span><br><span class="line">c652338 HEAD@&#123;1&#125;: commit: NOW 7 read-in file1 ---&gt; ddddd           <span class="comment">#这次就可以找到了</span></span><br><span class="line">f405afa HEAD@&#123;2&#125;: commit: NOW 6 read-in file1 ---&gt; ccccc</span><br><span class="line">fdf30db HEAD@&#123;3&#125;: commit: NOW 5 read-in file1.txt --&gt; bbbbb</span><br><span class="line">3485684 HEAD@&#123;4&#125;: commit: NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line">2b1c545 HEAD@&#123;5&#125;: commit: NOW 3 rename file --&gt; file1.txt</span><br><span class="line">0c943fc HEAD@&#123;6&#125;: commit: NOW 2 rename file1 --&gt; file.txt</span><br><span class="line">75b88ee HEAD@&#123;7&#125;: commit (initial): NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git reset --hard c652338                       #在进行回滚</span></span><br><span class="line">HEAD 现在位于 c652338 NOW 7 read-in file1 ---&gt; ddddd</span><br><span class="line"></span><br><span class="line">[root@lemon project01]<span class="comment"># git rev-parse HEAD</span></span><br><span class="line">c652338f12a5102e9691dce3ecac4f57cf19639e</span><br><span class="line">[root@git project]<span class="comment"># cat file1.txt </span></span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line">ddddd</span><br></pre></td></tr></table></figure><h3 id="8-Git-标签的-创建-删除"><a href="#8-Git-标签的-创建-删除" class="headerlink" title="8. Git 标签的 创建 删除"></a>8. Git 标签的 创建 删除</h3><ul><li><em><strong>git 标签能起到什么作用？</strong></em><ul><li>当git仓库内的数据有改善或功能时，我们经常会打一个类似于软件版本号的tag标签，这样就能通过标签将版本库中的某个版本给记录下来，便于我们后续将特定时期的数据取出来用。</li><li>简单来说：标签也是一个版本库的一个快照，他与commit id 是绑定在一起的东西。</li></ul></li><li><em><strong>为什么要使用git标签？</strong></em><ul><li>既然都已经有了commit id了，为什么还要用tag标签？</li><li>因为commit的id号不容易使人记忆，所以，使用tag标签就是因为他好记 <code>v1.0.0</code></li><li>绝大部分公司都是基于标签进行对代码版本的管理</li></ul></li><li><em><strong>git 标签的基本使用</strong></em></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为最新提交的代码创建标签</span></span><br><span class="line">[root@git project]<span class="comment"># git tag -a &quot;v1.0.0&quot; -m &quot;latest&quot;</span></span><br><span class="line">[root@git project]<span class="comment"># git tag             #查看当前分支的所有标签</span></span><br><span class="line">v1.0.0</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git show --oneline v1.0.0     #查看这个标签是基于哪个commit快照</span></span><br><span class="line">tag v1.0.0</span><br><span class="line"></span><br><span class="line">latest</span><br><span class="line">c652338 NOW 7 read-in file1 ---&gt; ddddd</span><br><span class="line">diff --git a/file1.txt b/file1.txt</span><br><span class="line">index d0bc53a..8dd8367 100644</span><br><span class="line">--- a/file1.txt</span><br><span class="line">+++ b/file1.txt</span><br><span class="line">@@ -1,3 +1,4 @@</span><br><span class="line"> aaaaa</span><br><span class="line"> bbbbb</span><br><span class="line"> ccccc</span><br><span class="line">+ddddd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以指定的commit id 而创建标签</span></span><br><span class="line">[root@lemon project01]<span class="comment"># git log --oneline</span></span><br><span class="line">c652338 NOW 7 read-in file1 ---&gt; ddddd</span><br><span class="line">f405afa NOW 6 read-in file1 ---&gt; ccccc</span><br><span class="line">fdf30db NOW 5 read-in file1.txt --&gt; bbbbb</span><br><span class="line">3485684 NOW 4 read-in file1.txt --&gt; aaaaa</span><br><span class="line">2b1c545 NOW 3 rename file --&gt; file1.txt</span><br><span class="line">0c943fc NOW 2 rename file1 --&gt; file.txt</span><br><span class="line">75b88ee NOW 1 add --&gt; file1 file2 file3</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git tag -a &#x27;v1.0.1&#x27; f405afa -m &quot;NOW 6&quot;</span></span><br><span class="line">[root@git project]<span class="comment"># git tag</span></span><br><span class="line">v1.0.0</span><br><span class="line">v1.0.1</span><br><span class="line">[root@git project]<span class="comment"># git show v1.0.1</span></span><br><span class="line">tag v1.0.1</span><br><span class="line">Tagger: lemon &lt;lemon_row@163.com&gt;</span><br><span class="line">Date:   Wed May 20 11:16:03 2020 +0800</span><br><span class="line"></span><br><span class="line">NOW 6</span><br><span class="line"></span><br><span class="line">commit f405afac0930c1feb0ee86cfa8b4c6032afd4b69</span><br><span class="line">Author: lemon &lt;lemon_row@163.com&gt;</span><br><span class="line">Date:   Wed May 20 10:03:44 2020 +0800</span><br><span class="line"></span><br><span class="line">    NOW 6 read-in file1 ---&gt; ccccc</span><br><span class="line"></span><br><span class="line">diff --git a/file1.txt b/file1.txt</span><br><span class="line">index be4e668..d0bc53a 100644</span><br><span class="line">--- a/file1.txt</span><br><span class="line">+++ b/file1.txt</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> aaaaa</span><br><span class="line"> bbbbb</span><br><span class="line">+ccccc</span><br><span class="line"></span><br><span class="line"><span class="comment">#不小心打错了标签，怎么删除这个标签？</span></span><br><span class="line">[root@git project]<span class="comment"># git tag -d v1.0.1</span></span><br><span class="line">已删除标签 <span class="string">&#x27;v1.0.1&#x27;</span>（曾为 608f0e6）</span><br><span class="line"></span><br><span class="line">[root@git project]<span class="comment"># git tag</span></span><br><span class="line">v1.0.0</span><br></pre></td></tr></table></figure><h3 id="9-Git-分支"><a href="#9-Git-分支" class="headerlink" title="9. Git 分支"></a>9. Git 分支</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><ul><li><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p></li><li><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vzs4h4dj30rk09pdi7.jpg" alt="image-20200519200256163"></p><h4 id="2-创建与合并分支原理"><a href="#2-创建与合并分支原理" class="headerlink" title="2. 创建与合并分支原理"></a>2. 创建与合并分支原理</h4><ul><li><p>在<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即 <code>master</code> 分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p></li><li><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，<strong>以及当前分支的提交点：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vzy8xfqj30oc0710t1.jpg" alt="image-20200505152246823"></p><ul><li>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长，当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w055o5xj30oe0acgm1.jpg"></p><ul><li><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p></li><li><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，<strong>而<code>master</code>指针不变：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0avel7j30mu09zgm0.jpg"></p><ul><li>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，<strong>就完成了合并：</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0gw4avj30mx0a50t9.jpg"></p><ul><li><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p></li><li><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，<strong>我们就剩下了一条<code>master</code>分支：</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0lw9gfj30lr07cdg7.jpg"></p><h4 id="3-常见的分支命令"><a href="#3-常见的分支命令" class="headerlink" title="3. 常见的分支命令"></a>3. 常见的分支命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//创建分支</span><br><span class="line">git branch &lt;name&gt;           <span class="comment">#基于当前commit创建test分支。.git/HEAD文件中记录了当前分支名字。</span></span><br><span class="line"></span><br><span class="line">//删除分支</span><br><span class="line">git branch -d <span class="built_in">test</span>     <span class="comment">#删除本地test分支</span></span><br><span class="line">git branch -D <span class="built_in">test</span>     <span class="comment">#test分支还没有合入当前分支，所以要用-D参数才能删掉。</span></span><br><span class="line">git push origin --delete <span class="built_in">test</span>    <span class="comment">#删除远程test分支</span></span><br><span class="line"></span><br><span class="line">//查看分支</span><br><span class="line">git branch                       <span class="comment">#列出当前分支清单</span></span><br><span class="line">git branch -v                    <span class="comment">#查看各个分支最后一个提交信息</span></span><br><span class="line">git branch -a                    <span class="comment">#查看远程分支和本地分支</span></span><br><span class="line">git branch --merged              <span class="comment">#查看哪些分支被合并</span></span><br><span class="line">git branch --no-merged           <span class="comment">#查看哪些分支未被合并</span></span><br><span class="line"></span><br><span class="line">//融合及切换分支</span><br><span class="line">git merge                        <span class="comment">#融合分支</span></span><br><span class="line">git checkout -b &lt;name&gt;           <span class="comment">#创建+切换分支</span></span><br><span class="line">git checkout                     <span class="comment">#切换分支</span></span><br><span class="line"></span><br><span class="line">//拉取分支</span><br><span class="line">git fetch origin                 <span class="comment">#同步远程服务器的数据到本地</span></span><br><span class="line">git checkout -b <span class="built_in">test</span> origin/test_remote     <span class="comment">#将远程分支test_remote拉取下来到本地test分支</span></span><br><span class="line">git checkout <span class="built_in">test</span>                <span class="comment">#将远程分支test拉取下来到本地test分支</span></span><br><span class="line">git pull <span class="built_in">test</span>                    <span class="comment">#从远程分支test中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test</span></span><br></pre></td></tr></table></figure><h4 id="4-分支的使用演示"><a href="#4-分支的使用演示" class="headerlink" title="4. 分支的使用演示"></a>4. 分支的使用演示</h4><blockquote><p>创建分支,开发新功能是不能在master分支上开发</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch about            #创建about分支</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch                  #查看分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0s87nwj30mz022mx1.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git checkout about          #切换分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w0ynh18j30ml00zdfu.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git status</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w14aq1sj30mq01p3yq.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log         #查看about分支的commit记录</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w19vv3hj30n10crgok.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># echo &quot;about us&quot; &gt;&gt; about.html         #在当前分支开发新功能</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w1hdbi2j30n601o0sl.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git add .</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git commit -m &quot;about&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w1pyvbyj30mt02tmxr.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log         #查看about分支的commit记录</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w1v394pj30n00fswhx.jpg"> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git checkout master          #切换到master分支</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log                      #查看master分支的commit记录</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w26ibhnj60m10ccn0r02.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git merge about               #在master分支上合并about分支</span></span><br><span class="line">//注意：在公司中可不是这么搞的，因为你不能保证master分支的线路会一直保持在原地，所以一般开发都是先在自己的分支上重新将master分支合并（相当于同步master分支内容），然后在测试有没有问题，没有问题后才会到master分支上将其开发好的分支合并到master上面，然后在删除合并到master的分支</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2cbcmij60n603zq2y02.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git log &amp;&amp; ls</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2hz156j30mv0h6wie.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch test                  #创建test分支</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git checkout test                #切换到test分支进行开发</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># echo &quot;test&quot; &gt; test.html</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git add .</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git commit -m &quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git checkout master              #切换至master分支</span></span><br><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch --merged              #查看已经合并的分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2nnn8uj30mz01sglh.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch --no-merged            #查看未合并的分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w2vmtctj60mr00ywea02.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git <span class="built_in">test</span>]<span class="comment"># git branch -D test                #删除test分支</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w315vmzj30ow00uq2s.jpg"></p><h4 id="5-分支冲突"><a href="#5-分支冲突" class="headerlink" title="5. 分支冲突"></a>5. 分支冲突</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w379m75j30x50fk0zj.jpg"></p><h3 id="10-Git远程仓库-–-github"><a href="#10-Git远程仓库-–-github" class="headerlink" title="10. Git远程仓库 – github"></a>10. Git远程仓库 – github</h3><h4 id="1-github-是什么"><a href="#1-github-是什么" class="headerlink" title="1. github 是什么"></a>1. github 是什么</h4><ul><li><p><code>GitHub</code>是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名<code>GitHub</code>。</p></li><li><p><code>GitHub</code>于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、python 等。</p></li><li><p>对于我们个人的话，GIT服务器并不需要我们搭建，使用<code>github</code>就可以满足我们的需求。官网：<a href="https://github.com/">https://github.com/</a></p></li></ul><h4 id="2-登陆-github"><a href="#2-登陆-github" class="headerlink" title="2. 登陆 github"></a>2. 登陆 github</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3dvznzj30zw0jmjt7.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3izpebj30r50g1aab.jpg"></p><h4 id="3-创建远程仓库"><a href="#3-创建远程仓库" class="headerlink" title="3. 创建远程仓库"></a>3. 创建远程仓库</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3pzu1nj30zw0pcac6.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3ust5mj310f0pcgnh.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w3zdwccj30zx0pc40r.jpg"></p><ul><li><p><strong>说明：</strong></p><ul><li>code：代码</li><li>issues：问题</li><li>pull requests：拉取要求</li><li>Actions：动作</li><li>projects：专案</li><li>Wiki：维基</li><li>Security：安全</li><li>lnsights：见解</li><li>settings：设置</li></ul></li><li><p><strong>克隆仓库的两种协议：</strong></p><ul><li>https 协议：如果你这个仓库是私有的，克隆仓库时需要输入用户名 密码</li><li>ssh协议：需要在github上加入你机器上某个用户的ssh公钥才能使用</li></ul></li><li><p><strong>常用的git远程仓库命令</strong></p><ul><li>git  remote                                         #查看当前的远程库</li><li>git  remote  -v                                    #执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</li><li>git  remote  add  [别名]   url            #添加一个远程仓库</li><li>git  remote  rm    [别名]                   #删除远程仓库</li><li>git  push  -u  origin  master            #推送本地到远程分支</li><li>git  pull    -u  origin  master            #获取最新master代码到本地</li></ul></li></ul><h4 id="4-使用-github"><a href="#4-使用-github" class="headerlink" title="4. 使用 github"></a>4. 使用 <code>github</code></h4><ul><li><p><strong>这里 <code>https</code> 的我就不掩饰了，很简单，这里我使用ssh协议的，而且使用 <code>win10</code> 展示</strong></p></li><li><p><strong>为用户生成一个ssh的公钥 及 私钥 目录</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w46e5ksj30v60kagmz.jpg"></p><ul><li><strong>将其 公钥 拷贝到 <code>github</code> 上</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4b3htuj30v60aegn3.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4eu6hvj310c0m9abg.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4ijac3j310f0mbac4.jpg"></p><p><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520151538386.png"></p><ul><li>克隆远程仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:lemonOps/project01.git </span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4nmahfj30oa03gglq.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w4ybekxj30v60a7zky.jpg"></p><ul><li><strong>将本地仓库推送至远程仓库</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:lemonOps/project01.git    <span class="comment">#添加好推送的仓库地址</span></span><br><span class="line"></span><br><span class="line">$ git  remote  -v              <span class="comment">#查看当前的远程仓库</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfp982rd8j30ql07xdgi.jpg" alt="image-20200520152258943"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;# 第一次提交至远程仓库&quot;</span> &gt; README.md</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;NOW 1 add --&gt; README.md&quot;</span></span><br><span class="line"></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5bburej30v60j6taw.jpg"></p><ul><li>回到 <code>github</code>上查看</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5ewlldj310f0jp405.jpg"></p><ul><li>给此次提交打上标签并再次推送至 <code>github</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">$ git tag -a <span class="string">&quot;v1.0&quot;</span> 6de1296 -m <span class="string">&quot;标签 1&quot;</span></span><br><span class="line"></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line">$ git show v1.0 --oneline</span><br><span class="line"></span><br><span class="line">$ git push -u origin v1.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5j109qj30v60iitaf.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5nb5n2j30v606pmxo.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w5r00urj310f0drwfo.jpg"></p><h3 id="11-git-推送代码的整体过程"><a href="#11-git-推送代码的整体过程" class="headerlink" title="11. git 推送代码的整体过程"></a>11. git 推送代码的整体过程</h3><ul><li>创建自己的dev01分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git branch dev01</span><br></pre></td></tr></table></figure><ul><li>模拟master主分支更新</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;# NOW 2 lemon very good&quot;</span> &gt; lemon.md</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;NOW 2 add --&gt; lemon.md&quot;</span></span><br><span class="line">[master 87c2a24] NOW 2 add --&gt; lemon.md</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 lemon.md</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git reflog --oneline</span><br><span class="line">87c2a24 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: NOW 2 add --&gt; lemon.md</span><br><span class="line">94a2b68 (tag: v1.0, origin/master, origin/HEAD, dev01) HEAD@&#123;1&#125;: <span class="built_in">clone</span>: from git@github.com:devopssss/project01.git</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git tag -a <span class="string">&quot;v2.0&quot;</span> 87c2a24 -m <span class="string">&quot;第二此提交&quot;</span></span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git tag</span><br><span class="line">v1.0</span><br><span class="line">v2.0</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git remote add origin git@github.com:devopssss/project01.git</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:devopssss/project01.git (fetch)</span><br><span class="line">origin  git@github.com:devopssss/project01.git (push)</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git push -u origin v2.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w60ls62j30ri0c1wfb.jpg"></p><ul><li>进行dev01分支的开发；（现在这个分支和master上的分支内容是不一致的 !!!）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git checkout dev01</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;dev01&quot;</span> &gt; dev01.txt</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ ls</span><br><span class="line">dev01.txt  README.md</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ git commit -m <span class="string">&quot;dev01&quot;</span></span><br><span class="line">[dev01 01996d5] dev01</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 dev01.txt</span><br></pre></td></tr></table></figure><ul><li>使用git pull 在自己的分支上重新将master分支合并（相当于同步master分支内容），然后在测试有没有问题</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ ls</span><br><span class="line">dev01.txt  lemon.md  README.md</span><br></pre></td></tr></table></figure><ul><li>测试没有问题后才会到master分支上将其开发好的分支合并到master上面，然后在删除合并到master的分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (dev01)</span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git merge dev01</span><br><span class="line">Updating 87c2a24..aaed965</span><br><span class="line">Fast-forward</span><br><span class="line"> dev01.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 dev01.txt</span><br><span class="line"> </span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git branch -d dev01</span><br><span class="line">Deleted branch dev01 (was aaed965).</span><br></pre></td></tr></table></figure><ul><li>最后在推送至远程仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">aaed965 (HEAD -&gt; master) Merge branch <span class="string">&#x27;master&#x27;</span> of github.com:devopssss/project01 into dev01</span><br><span class="line">01996d5 dev01</span><br><span class="line">87c2a24 (tag: v2.0, origin/master) NOW 2 add --&gt; lemon.md</span><br><span class="line">94a2b68 (tag: v1.0) NOW 1 add --&gt; README.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git tag -a <span class="string">&quot;v3.0&quot;</span> aaed965 -m <span class="string">&quot;标签 3&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git push -u origin master</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To github.com:devopssss/project01.git</span><br><span class="line">   87c2a24..aaed965  master -&gt; master</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator@DESKTOP-HK1R5KR MINGW64 ~/Desktop/project01 (master)</span><br><span class="line">$ git push -u origin v3.0</span><br><span class="line">Enumerating objects: 8, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (8/8), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 678 bytes | 339.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">To github.com:devopssss/project01.git</span><br><span class="line"> * [new tag]         v3.0 -&gt; v3.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6724phj60sx0i2dh802.jpg"></p><h2 id="三、Gitlab-代码仓库"><a href="#三、Gitlab-代码仓库" class="headerlink" title="三、Gitlab 代码仓库"></a>三、Gitlab 代码仓库</h2><h3 id="1-简介概述"><a href="#1-简介概述" class="headerlink" title="1. 简介概述"></a>1. 简介概述</h3><blockquote><ul><li><p>与 GitHub 一样，GitLab 是一个基于Web的资源库管理器，可让团队协作处理代码，复制代码以安全地创建和编辑新项目，然后将完成的代码合并到现有项目中。</p></li><li><p>GitLab 是用Ruby编程语言编写的，包含Wiki 和问题跟踪功能。它有不同的版本：GitLab 社区版（CE），企业版（EE） 和 GitLab托管版本GitLab.com。</p></li><li><p>它拥有超过1400名贡献者，并被阿里巴巴，美国宇航局，欧洲核子研究中心等主要组织使用。</p></li></ul></blockquote><h3 id="2-什么是-Gitlab"><a href="#2-什么是-Gitlab" class="headerlink" title="2. 什么是 Gitlab"></a>2. 什么是 Gitlab</h3><ul><li><p> GitLab 是一个开源分布式版本控制系统</p></li><li><p> 开发语言: Ruby</p></li><li><p> 功能:管理项目源代码、版本控制、代码复用与查找</p></li></ul><h3 id="3-GitLab-与-GitHub-的不同"><a href="#3-GitLab-与-GitHub-的不同" class="headerlink" title="3. GitLab 与 GitHub 的不同"></a>3. GitLab 与 GitHub 的不同</h3><ul><li><strong><code>Github</code></strong> 分布式在线代码托管仓库,个人版本可直接在线免费使用,企业版本收费且需要服务器安装。</li><li><strong><code>Gitlab</code></strong> 分布式在线代码仓库托管软件,分社区免费版本与企业收费版本，都需要服务器安装。</li></ul><h3 id="4-Gitlab-的优势和应用场景"><a href="#4-Gitlab-的优势和应用场景" class="headerlink" title="4. Gitlab 的优势和应用场景"></a>4. Gitlab 的优势和应用场景</h3><ul><li><p>开源免费，适合中小型公司将代码放置在该系统中</p></li><li><p>品差异化的版本管理，离线同步以及强大分支管理功能</p></li><li><p>便捷的GUI操作界面以及强大账户权限管理功能</p></li><li><p>集成度很高，能够集成绝大多数的开发工具,支持内置HA,保证在高并发下仍旧实现高可用性</p></li></ul><h3 id="5-GitLab-主要服务构成"><a href="#5-GitLab-主要服务构成" class="headerlink" title="5. GitLab 主要服务构成"></a>5. GitLab 主要服务构成</h3><ul><li><code>Nginx</code> 静态Web服务器</li><li><code>Gitlab-workhorse</code> 轻量级的反向代理服务器</li><li><code>Gitlab-shell</code> 用于处理Git命令和修改authorized keys列表</li><li><code>Logrotate</code> 日志文件管理工具</li><li><code>Postgresql</code> 数据库</li><li><code>Redis</code> 缓存服务器</li></ul><h3 id="6-GitLab-的工作流程"><a href="#6-GitLab-的工作流程" class="headerlink" title="6. GitLab 的工作流程"></a>6. GitLab 的工作流程</h3><ul><li>创建并克隆项目</li><li>创建项目某Feature分支</li><li>编写代码并提交至该分支</li><li>推送改项目分支至远程Gitlab 服务器</li><li>进行代码检查并提交Master主分支合并申请</li><li>项目领导审查代码并确认合并申请</li></ul><h3 id="7-安装-Gitlab-仓库系统"><a href="#7-安装-Gitlab-仓库系统" class="headerlink" title="7. 安装 Gitlab 仓库系统"></a>7. 安装 Gitlab 仓库系统</h3><blockquote><p><strong>打开一台虚拟机：192.168.2.1</strong></p></blockquote><h4 id="添加hosts解析文件"><a href="#添加hosts解析文件" class="headerlink" title="添加hosts解析文件"></a>添加hosts解析文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/hosts</span></span><br><span class="line">192.168.2.1 gitlab.lemon.com</span><br><span class="line">192.168.2.2 jenkins.lemon.com</span><br><span class="line">192.168.2.3 lb.lemon.com</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="安装-Gitlab-依赖"><a href="#安装-Gitlab-依赖" class="headerlink" title="安装 Gitlab 依赖"></a>安装 Gitlab 依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># yum install -y policycoreutils openssh-server openssh-clients postfix lsof</span></span><br><span class="line">[root@gitlab ~]<span class="comment"># systemctl start postfix;systemctl enable postfix     #开启邮箱服务</span></span><br></pre></td></tr></table></figure><h4 id="安装-Gitlab-12-0-3-版本"><a href="#安装-Gitlab-12-0-3-版本" class="headerlink" title="安装 Gitlab-12.0.3 版本"></a>安装 Gitlab-12.0.3 版本</h4><p>由于国内网络偏慢，这里使用清华大学的镜像源进行安装gitlab-ce</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/yum.repos.d/gitlab-ce.repo</span></span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">\<span class="comment">#gpgkey=</span></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># yum clean all &amp;&amp; yum makecache</span></span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># yum -y install gitlab-ce-12.0.3-ce.0.el7</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6ehya8j30p80gmmx7.jpg"></p><h4 id="Gitlab-管理命令"><a href="#Gitlab-管理命令" class="headerlink" title="Gitlab 管理命令"></a>Gitlab 管理命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl stop           #关闭gitlab</span></span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl start          #启动gitlab</span></span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl restart        #重启gitlab</span></span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl status         #状态gitlab</span></span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl reconfigure    #重载配置文件并启动glitlab</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件并启动-Gitlab"><a href="#修改配置文件并启动-Gitlab" class="headerlink" title="修改配置文件并启动 Gitlab"></a>修改配置文件并启动 Gitlab</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line"><span class="comment">#配置gitlab的URL或IP地址</span></span><br><span class="line">external_url <span class="string">&#x27;http://gitlab.lemon.com&#x27;</span></span><br><span class="line"><span class="comment">#配置邮箱</span></span><br><span class="line"><span class="comment">### Email Settings</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_enabled&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;lemon_row@163.com&#x27;</span>       <span class="comment">#邮箱账号</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_display_name&#x27;</span>] = <span class="string">&#x27;Gitlab-lemon&#x27;</span>    <span class="comment">#发送人显示名称</span></span><br><span class="line"><span class="comment">### GitLab email server settings</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;lemon_row@163.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;TZVLGNYMVOEWCIHR&quot;</span>            <span class="comment">#授权码</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;163.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">:wq</span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl reconfigure          #初始化gitlab，第一次会很慢</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfpct6pz0j30qk03cq3j.jpg" alt="image-20200505123253144"></p><p><strong>注意：重新配置应用程序。修改了 <code>gitlab</code> 服务配置文件后，都需要执行一下这个命令。让各个服务的配置文件，重新加载一下配置文件。这里等个4分钟左右。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl status                   #查看gitlab状态</span></span><br></pre></td></tr></table></figure><p>提示：<code>gitlab</code> 需要使用到80端口，所以得保证80端口不被占用，或者改端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># lsof -i:80</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w6wpgn7j30qu046wer.jpg"></p><h4 id="汉化-Gitlab"><a href="#汉化-Gitlab" class="headerlink" title="汉化 Gitlab"></a>汉化 Gitlab</h4><ul><li>汉化包下载地址 ==&gt; <a href="https://gitlab.com/xhang/gitlab.git">https://gitlab.com/xhang/gitlab.git</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//查看gitlab的版本</span><br><span class="line">[root@gitlab ~]<span class="comment"># cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span></span><br><span class="line">11.2.3</span><br><span class="line"></span><br><span class="line">//下载对应版本的汉化包，解压汉化包，查看汉化包的版本</span><br><span class="line">[root@gitlab ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@gitlab src]<span class="comment"># tar xf gitlab-v12.0.3-zh.tar.gz </span></span><br><span class="line">[root@gitlab src]<span class="comment"># rm -rf gitlab-v12.0.3-zh.tar.gz </span></span><br><span class="line">[root@gitlab src]<span class="comment"># cat gitlab-v12.0.3-zh/VERSION </span></span><br><span class="line">12.0.3</span><br><span class="line"></span><br><span class="line">//先备份，避免汉化失败后gitlab瘫痪</span><br><span class="line">[root@gitlab src]<span class="comment"># mkdir gitlab.bak</span></span><br><span class="line">[root@gitlab src]<span class="comment"># cp -r /opt/gitlab/embedded/service/gitlab-rails/* /usr/local/src/gitlab.bak</span></span><br><span class="line"></span><br><span class="line">//将下载好的汉化包覆盖拷贝过去</span><br><span class="line">[root@gitlab src]<span class="comment"># \cp -rf gitlab-v12.0.3-zh/* /opt/gitlab/embedded/service/gitlab-rails/</span></span><br><span class="line">cp: 无法以目录<span class="string">&quot;gitlab-v12.0.3-zh/log&quot;</span> 来覆盖非目录<span class="string">&quot;/opt/gitlab/embedded/service/gitlab-rails/log&quot;</span></span><br><span class="line">cp: 无法以目录<span class="string">&quot;gitlab-v12.0.3-zh/tmp&quot;</span> 来覆盖非目录<span class="string">&quot;/opt/gitlab/embedded/service/gitlab-rails/tmp&quot;</span></span><br><span class="line"></span><br><span class="line">//重新配置gitlab</span><br><span class="line">[root@gitlab src]<span class="comment"># gitlab-ctl reconfigure</span></span><br><span class="line"></span><br><span class="line">//重启gitlab</span><br><span class="line">[root@gitlab src]<span class="comment"># gitlab-ctl restart</span></span><br><span class="line"></span><br><span class="line">//检查是否启动成功</span><br><span class="line">[root@gitlab src]<span class="comment"># gitlab-ctl status  </span></span><br><span class="line">[root@gitlab src]<span class="comment"># lsof -i:80</span></span><br></pre></td></tr></table></figure><h4 id="访问浏览器测试"><a href="#访问浏览器测试" class="headerlink" title="访问浏览器测试"></a>访问浏览器测试</h4><blockquote><p><strong>注释：如果后期 web 界面访问时，总报 502的话，就把防火墙清空规则，另外内存要大于4G，不然以后内存不足，也报 502！</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7293p1j30fe09hq3u.jpg" alt="image-20200505123953743"></p><blockquote><p><strong><code>Gitlab</code> 默认用户是root，拥有最高权限，密码我设置的是“abc123..”，最少八位数。</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7acrn5j30pu0b9t9j.jpg" alt="image-20200505154721731"></p><blockquote><p>登陆 <code>Gitlab</code></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7gg6q8j30pu0bgwf9.jpg" alt="image-20200519160034791"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7nh2ojj310z0hgabh.jpg" alt="image-20200519160253275"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7rpppzj311y0amwex.jpg" alt="image-20200520163224918"></p><p><strong><font color=#FF0000 >至此gitlab安装完成！</font></strong></p><h3 id="8-Gitlab-权限管理"><a href="#8-Gitlab-权限管理" class="headerlink" title="8. Gitlab 权限管理"></a>8. Gitlab 权限管理</h3><h4 id="创建Group，User，Project"><a href="#创建Group，User，Project" class="headerlink" title="创建Group，User，Project"></a>创建Group，User，Project</h4><ul><li><em>三者层级关系如下图：</em></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w7wp1u3j30my05atas.jpg"></p><h4 id="创建一个组，组名为java"><a href="#创建一个组，组名为java" class="headerlink" title="创建一个组，组名为java"></a>创建一个组，组名为java</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w823n3ej30vo0auq3p.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w86o34mj30zb0m5mye.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Gitlab中的组和项目有三种访问权限：Private、Internal、Public</span></span><br><span class="line"></span><br><span class="line">- Private：只有组成员才能看到</span><br><span class="line">- Internal：只要登录的用户就能看到,开源项目和组设置的是Internal</span><br><span class="line">- Public：所有人都能看到</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w8bsvatj315q0lltat.jpg"></p><h4 id="创建一个PM的用户作为项目管理者并加入到java组内"><a href="#创建一个PM的用户作为项目管理者并加入到java组内" class="headerlink" title="创建一个PM的用户作为项目管理者并加入到java组内"></a>创建一个PM的用户作为项目管理者并加入到java组内</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w8fy6rnj30tr07rjrr.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grauut9ulcj30yl04tjrc.jpg"></p><ul><li><strong>注意：这里的邮箱在公司里一定要写上真实的，我这里为了方便，就随便写上了一个</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w8tqzznj30qr078aa1.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w91kjsej60un0akaaa02.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grauvoa1s6j30yo01vjr6.jpg"></p><p><strong>修改pm用户秘密: abc123..</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w99hpx5j30zn05jt8s.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grauwh6felj30wt03vweb.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9f53ilj30yo01vt8i.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1graux2vbwkj30ss01bmwx.jpg"></p><h4 id="将pm管理用户加入到java组内"><a href="#将pm管理用户加入到java组内" class="headerlink" title="将pm管理用户加入到java组内"></a>将pm管理用户加入到java组内</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9kqzn7j30r008zglt.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9umg1fj30sh08p0t6.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7w9y7t5mj30yw0h13zq.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wa69ny7j30pe01bmwx.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wadp3h1j30vb05bjrr.jpg"></p><p><strong>Gitlab 权限管理：</strong></p><blockquote><p><strong>Gitlab 用户在组中有五种权限：Guest、Reporter、Developer、Master、Owner</strong></p></blockquote><ol><li><strong>Guest：</strong>可以创建issue、发表评论，不能读写版本库。</li><li><strong>Reporter：</strong>可以克隆代码，不能提交，QA、PM可以赋予这个权限。</li><li><strong>Developer：</strong>可以克隆代码、开发、提交、push，RD可以赋予这个权限。</li><li><strong>Maintainer：</strong>可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心RD负责人可以赋予这个权限。</li><li><strong>Owner：</strong>可以设置项目访问权限 Visibility Level、删除项目、迁移项目、管理组成员，开发组leader能赋予这个权限。</li></ol><h4 id="用PM用户创建一个项目app1"><a href="#用PM用户创建一个项目app1" class="headerlink" title="用PM用户创建一个项目app1"></a>用PM用户创建一个项目app1</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7waspon7j30qo0a175f.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wawzffoj30zk0b2q39.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wb75mrqj30pw0cbt9f.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wbg3lepj30x20fb0to.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wbo1y5vj30ri06zdga.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wbv5vcsj30pw0kbwfg.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wc3kn9bj30zn0cg750.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wc96s6rj30qy0jet9d.jpg"></p><h4 id="在-gitlab-登陆页面下创建-dev1-dev2-用户，并作为开发者加入到-app1-项目中"><a href="#在-gitlab-登陆页面下创建-dev1-dev2-用户，并作为开发者加入到-app1-项目中" class="headerlink" title="在 gitlab 登陆页面下创建 dev1 dev2 用户，并作为开发者加入到 app1 项目中"></a>在 gitlab 登陆页面下创建 dev1 dev2 用户，并作为开发者加入到 app1 项目中</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wcnv69wj30a40eh74c.jpg"><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wd6e4k7j30a90ejjrg.jpg"></p><p><a href=""><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520171340537.png"></a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wdly1sij312c0g63zo.jpg"></p><ul><li><p><strong>创建完了之后这两个用户很明显是看不到 <code>app1</code> 这个项目的</strong></p></li><li><p><strong>所以需要登陆pm或root用户将其创建的用户添加到 <code>java</code> 组里面中或者 <code>app1</code> 项目中（授权）</strong></p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wdsdyikj30qo09zq3n.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7we1ebfaj315r0dw0tt.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7web7kmfj30zn062jrm.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7weejxbpj30z10hvta6.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wenapjcj30s201bq2p.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wesj1k6j30gv07x0tc.jpg"></p><ul><li><strong>组成员添加完了之后 看一下 <code>app1</code> 项目中有没有添加这两个用户</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7weyyzg5j30wi087dg6.jpg"></p><p><a href=""><img src="GitLab%20+%20Jenkins%20+%20Sonar%20Qube.assets/image-20200520175513606.png"></a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wf470x6j30yv08u0tm.jpg"></p><ul><li><strong>随便登陆这两个其中一个账号验证是否能够看到app1项目</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wf75k9dj612u08ht9f02.jpg"></p><h3 id="9-gitlab-的基本使用"><a href="#9-gitlab-的基本使用" class="headerlink" title="9. gitlab 的基本使用"></a>9. gitlab 的基本使用</h3><h4 id="将-dev1-持有人的公钥放到-dev1-账号下"><a href="#将-dev1-持有人的公钥放到-dev1-账号下" class="headerlink" title="将 dev1 持有人的公钥放到 dev1 账号下"></a>将 dev1 持有人的公钥放到 dev1 账号下</h4><ul><li><strong>开启一台虚拟机，192.168.2.6</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件</span></span><br><span class="line">[root@dev1 ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/hosts</span></span><br><span class="line">192.168.2.1 gitlab.lemon.com</span><br><span class="line">192.168.2.2 jenkins.lemon.com</span><br><span class="line">192.168.2.3 lb.lemon.com</span><br><span class="line">END</span><br><span class="line">[root@dev1 ~]<span class="comment"># ssh-keygen </span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:R5PUO4f4FLhExQ6YaD6B20GMn1Fdgzw98YXtEX/jfMo root@dev1</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|     =.o.*oO=. +o|</span></span><br><span class="line"><span class="string">|    o B o.O.*o.oo|</span></span><br><span class="line"><span class="string">|     * = .+* =.o+|</span></span><br><span class="line"><span class="string">|    . *  .o.* + +|</span></span><br><span class="line"><span class="string">|       .S .o o o.|</span></span><br><span class="line"><span class="string">|         .  .. ..|</span></span><br><span class="line"><span class="string">|              E  |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[root@dev1 ~]# cat .ssh/id_rsa.pub </span></span><br><span class="line"><span class="string">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDzzBDqVPZ9H0nVKucS3B3QNx318tAan06c17dZ0npQpsoAZaMUFxneMH+zoEjd+cG5Ee7f2D2n+iqV0wLGYDs9CY/8RqsSZ9SSx9K2aM9I1XFP6AUpuM5ddI/b3nhBVcbFjzpEckXPMz3O4C0twO1/aRD4byFtyivfdrry/KDNrYEMGojzv7PuktIvC/Qp0vKpvNG7msD6ePg4eHKCunHNGIboojL/vckpJZkvDt0MuDbeHdIE8Gj1XNkoudyWrCVwNTj8TEUkZE6pE7fYfBOzC1gOWv/+evROmwYLioprRJx+ZklRe4YmJzHw7Qiia4CluidQyUquMT5geGIme/3 root@dev1</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfcylltj30pm07lq32.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfiqzmdj315r0k5gnm.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfqpmopj30ri08laa8.jpg"></p><h4 id="以ssh协议推送代码至远程仓库"><a href="#以ssh协议推送代码至远程仓库" class="headerlink" title="以ssh协议推送代码至远程仓库"></a>以ssh协议推送代码至远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># git config --global user.name &quot;dev1&quot;</span></span><br><span class="line">[root@dev1 ~]<span class="comment"># git config --global user.email &quot;dev1@163.com&quot;</span></span><br><span class="line"></span><br><span class="line">[root@dev1 ~]<span class="comment"># git clone git@gitlab.lemon.com:java/app1.git</span></span><br><span class="line">正克隆到 <span class="string">&#x27;app1&#x27;</span>...</span><br><span class="line">warning: 您似乎克隆了一个空版本库。</span><br><span class="line"></span><br><span class="line">[root@dev1 ~]<span class="comment"># cd app1</span></span><br><span class="line">[root@dev1 app1]<span class="comment"># echo &#x27;# 第一次提交 测试&#x27; &gt;&gt; README.md</span></span><br><span class="line">[root@dev1 app1]<span class="comment"># git add .</span></span><br><span class="line">[root@dev1 app1]<span class="comment"># git commit -m &quot;NOW 1 add README.md&quot;</span></span><br><span class="line">[master（根提交） e4c5af0] NOW 1 add README.md</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"></span><br><span class="line">[root@dev1 app1]<span class="comment"># git tag -a &#x27;v1.0&#x27; -m &#x27;版本 1&#x27;</span></span><br><span class="line">[root@dev1 app1]<span class="comment"># git show --oneline v1.0</span></span><br><span class="line">tag v1.0</span><br><span class="line"></span><br><span class="line">版本 1</span><br><span class="line">e4c5af0 NOW 1 add README.md</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..e4460ab</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+<span class="comment"># 第一次提交 测试</span></span><br><span class="line"></span><br><span class="line">[root@dev1 app1]<span class="comment"># git push -u origin master</span></span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 241 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@gitlab.lemon.com:java/app1.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 master 设置为跟踪来自 origin 的远程分支 master。</span><br><span class="line"></span><br><span class="line">[root@dev1 app1]<span class="comment"># git push -u origin v1.0</span></span><br><span class="line">Counting objects: 1, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (1/1), 157 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@gitlab.lemon.com:java/app1.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wfxlu80j30rf0htmy5.jpg"></p><h4 id="下面以PM用户进行创建开发计划分配给dev2"><a href="#下面以PM用户进行创建开发计划分配给dev2" class="headerlink" title="下面以PM用户进行创建开发计划分配给dev2"></a>下面以PM用户进行创建开发计划分配给dev2</h4><ul><li><strong>开启一台虚拟机，192.168.2.7</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件</span></span><br><span class="line">[root@dev2 ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/hosts</span></span><br><span class="line">192.168.2.1 gitlab.lemon.com</span><br><span class="line">192.168.2.2 jenkins.lemon.com</span><br><span class="line">192.168.2.3 lb.lemon.com</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="开发一个-官网-V1-0-版本，包含首页和新闻"><a href="#开发一个-官网-V1-0-版本，包含首页和新闻" class="headerlink" title="开发一个 官网 V1.0 版本，包含首页和新闻"></a>开发一个 <code>官网 V1.0 版本</code>，包含首页和新闻</h5><p> <strong>（1）创建里程碑（Milestone）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wg3d0u8j315r0kb40m.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wg66lj4j315r0kb40m.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgcmda7j30z30940sv.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgjq5psj30yb0dlgm0.jpg"></p><p><strong>（2）依次把任务首页，新闻添加到里程碑，并进行任务分配给dev2开发者</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgpt30pj315r0jtdi9.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wgva9g6j30po05qgly.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wh0ikuij30z30ob3ze.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7whbzlt1j30qb0l4q44.jpg"></p><h5 id="使用dev2用户登录查看，会有任务提示"><a href="#使用dev2用户登录查看，会有任务提示" class="headerlink" title="使用dev2用户登录查看，会有任务提示"></a>使用dev2用户登录查看，会有任务提示</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7whnmsbvj314t08xdgk.jpg"></p><h5 id="dev2-开发者收到任务，进行开发"><a href="#dev2-开发者收到任务，进行开发" class="headerlink" title="dev2 开发者收到任务，进行开发"></a>dev2 开发者收到任务，进行开发</h5><ul><li><strong>将 dev2 持有人的公钥放到 dev2 账号下</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@dev2 ~]<span class="comment"># ssh-keygen </span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:WC/AYWsXe0QwQDQtL7wlTJUzjGvAtyqAWd17tNwYZvk root@dev2</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|   o +B*==o      |</span></span><br><span class="line"><span class="string">|  . +o*+%=       |</span></span><br><span class="line"><span class="string">|.o   *=@+O.      |</span></span><br><span class="line"><span class="string">|+    .X=BoE      |</span></span><br><span class="line"><span class="string">| .   o.*S .      |</span></span><br><span class="line"><span class="string">|  . . .  .       |</span></span><br><span class="line"><span class="string">|   .             |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[root@dev2 ~]# cat .ssh/id_rsa.pub </span></span><br><span class="line"><span class="string">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDE1Wu54a56ryKqGRf5ctaJ71ZcApTV2KNxuG03ykSzZkcp7JSwUNxNRxrWu+XtbjKyCjkJnnBJ+Op18ixN17r69WY5edRxz3c50trNma2PDGm62fdzC0cdZLHnIKCRyizen5UrPxiPMkeJ6Gi2Z6ZmEZhxWhv6ePn3XE53lJg5PMyeSctMTZcikJ9qV0v3l3cZ8XD/fNaJnVQnYUswCxxg+JDEah5G8+sR5sKTJntTKxEjdJOd5/rsZFDGWzlMgieVzYYhPUWejLc2Fw+xQJRmGSQ5+TaKcNNwND/UYlJvzce+AkstgMiocXLN1pW9AFdX4dNo1+LjnjIHfbHobZlP root@dev2</span></span><br></pre></td></tr></table></figure><h5 id="将客户端公钥（id-rsa-pub）放进-dev2-账户中"><a href="#将客户端公钥（id-rsa-pub）放进-dev2-账户中" class="headerlink" title="将客户端公钥（id_rsa.pub）放进 dev2 账户中"></a>将客户端公钥（id_rsa.pub）放进 dev2 账户中</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7whxy735j30rj090q37.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wi40347j314t0nw777.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wiad184j30x009xaae.jpg"></p><h5 id="进行开发"><a href="#进行开发" class="headerlink" title="进行开发"></a>进行开发</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@dev2 ~]<span class="comment"># git config --global user.name &quot;dev2&quot;</span></span><br><span class="line">[root@dev2 ~]<span class="comment"># git config --global user.email &quot;dev2@163.com&quot;</span></span><br><span class="line">[root@dev2 ~]<span class="comment"># git clone git@192.168.2.1:java/app1.git</span></span><br><span class="line">正克隆到 <span class="string">&#x27;app1&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 4, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">接收对象中: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">[root@dev2 ~]<span class="comment"># cd app1/ &amp;&amp; ls</span></span><br><span class="line">README.md</span><br><span class="line">[root@dev2 app1]<span class="comment"># git checkout -b shouye</span></span><br><span class="line">切换到一个新分支 <span class="string">&#x27;shouye&#x27;</span></span><br><span class="line">[root@dev2 app1]<span class="comment"># echo &quot;&lt;h1&gt; www.lemon.com&quot; &gt; index.html</span></span><br><span class="line">[root@dev2 app1]<span class="comment"># git add .</span></span><br><span class="line">[root@dev2 app1]<span class="comment"># git commit -m &quot;shouye&quot;    #创建并切换首页分支</span></span><br><span class="line">[shouye aa7b19c] shouye</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line">[root@dev2 app1]<span class="comment"># git push origin shouye</span></span><br><span class="line">Counting objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 282 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: </span><br><span class="line">remote: To create a merge request <span class="keyword">for</span> shouye, visit:</span><br><span class="line">remote:   http://gitlab.lemon.com/java/app1/merge_requests/new?merge_request%5Bsource_branch%5D=shouye</span><br><span class="line">remote: </span><br><span class="line">To git@192.168.2.1:java/app1.git</span><br><span class="line"> * [new branch]      shouye -&gt; shouye</span><br></pre></td></tr></table></figure><h5 id="回到-gitlab-上可以看到有刚才创建的分支，点击”Merge-request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。"><a href="#回到-gitlab-上可以看到有刚才创建的分支，点击”Merge-request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。" class="headerlink" title="回到 gitlab 上可以看到有刚才创建的分支，点击”Merge request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。"></a>回到 gitlab 上可以看到有刚才创建的分支，点击”Merge request”合并分支请求，之后PM用户登录处理合并请求。此时，一个功能的开发流程就完成。</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wifozu1j314t0b90to.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wik8trhj30y50h00tf.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wiq00akj30x70ej74t.jpg"></p><h5 id="登陆PM用户合并请求"><a href="#登陆PM用户合并请求" class="headerlink" title="登陆PM用户合并请求"></a>登陆PM用户合并请求</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wivgf3bj30q309vjs3.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wj5gf13j314t08o750.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjajvzkj30pd0ju0tz.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjiczujj30oe04daa4.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjowd86j30oe03xmx6.jpg"></p><h5 id="验证分支是否合并"><a href="#验证分支是否合并" class="headerlink" title="验证分支是否合并"></a>验证分支是否合并</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wjw2d2pj30qm07caac.jpg"></p><h3 id="10-Gitlab-的备份和恢复"><a href="#10-Gitlab-的备份和恢复" class="headerlink" title="10. Gitlab 的备份和恢复"></a>10. Gitlab 的备份和恢复</h3><h5 id="创建备份目录，并授权"><a href="#创建备份目录，并授权" class="headerlink" title="创建备份目录，并授权"></a>创建备份目录，并授权</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># mkdir /data/backups/gitlab -p</span></span><br><span class="line">[root@gitlab ~]<span class="comment"># chown -R git.git /data/</span></span><br></pre></td></tr></table></figure><h5 id="修改-gitlab-配置"><a href="#修改-gitlab-配置" class="headerlink" title="修改 gitlab 配置"></a>修改 gitlab 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line">299 gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/data/backups/gitlab&quot;</span>  <span class="comment">#备份路径</span></span><br><span class="line">307 gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 604800             <span class="comment">#备份7天</span></span><br><span class="line"></span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure><h5 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># gitlab-rake gitlab:backup:create</span></span><br></pre></td></tr></table></figure><h3 id="11-整体总结"><a href="#11-整体总结" class="headerlink" title="11. 整体总结"></a>11. 整体总结</h3><ul><li><p><em>PM在 <code>gitlab</code> 创建任务，分配给开发人员</em></p></li><li><p><em>开发人员领取任务后，在本地使用git clone拉取代码库</em></p></li><li><p><em>开发人员创建开发分支（git checkout -b dev），并进行开发</em></p></li><li><p><em>开发人员完成之后，提交到本地仓库（git commit ）</em></p></li><li><p><em>开发人员在gitlab界面上申请分支合并请求（Merge request）</em></p></li><li><p><em>PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</em></p></li><li><p><em>开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue。</em></p></li></ul><h2 id="四、部署-jenkins"><a href="#四、部署-jenkins" class="headerlink" title="四、部署 jenkins"></a>四、部署 jenkins</h2><ul><li><strong>开启一台虚拟机，192.168.2.2</strong></li></ul><h4 id="1-安装-JDK-和-Maven"><a href="#1-安装-JDK-和-Maven" class="headerlink" title="1. 安装 JDK 和 Maven"></a>1. 安装 <code>JDK</code> 和 <code>Maven</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/hosts</span></span><br><span class="line">192.168.2.1 gitlab.lemon.com</span><br><span class="line">192.168.2.2 jenkins.lemon.com</span><br><span class="line">192.168.2.3 lb.lemon.com</span><br><span class="line">END</span><br><span class="line">[root@jenkins ~]<span class="comment"># tar xf jdk-8u181-linux-x64.tar.gz </span></span><br><span class="line">[root@jenkins ~]<span class="comment"># tar xf apache-maven-3.5.4-bin.tar.gz</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># mv jdk1.8.0_181 /usr/local/java</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># mv apache-maven-3.5.4 /usr/local/maven</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># vi /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/<span class="built_in">local</span>/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line">[root@jenkins ~]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_181&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode) </span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># mvn -v</span></span><br><span class="line">Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)</span><br><span class="line">Maven home: /usr/<span class="built_in">local</span>/maven</span><br><span class="line">Java version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/<span class="built_in">local</span>/java/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;3.10.0-693.el7.x86_64&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将maven的下载源换成国内的</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># vim /usr/local/maven/conf/settings.xml +159</span></span><br><span class="line"><span class="comment">#在159行的上面添加以下内容</span></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;https://maven.aliyun.com/repository/public &lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">:wq!</span><br></pre></td></tr></table></figure><h4 id="2-下载-jenkins-rpm-包并安装"><a href="#2-下载-jenkins-rpm-包并安装" class="headerlink" title="2. 下载 jenkins-rpm 包并安装"></a>2. 下载 jenkins-rpm 包并安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//安装jenkins</span><br><span class="line">[root@jenkins ~]<span class="comment"># yum -y install jenkins-2.233-1.1.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">//修改jenkins配置文件</span><br><span class="line">[root@jenkins ~]<span class="comment"># vim /etc/sysconfig/jenkins</span></span><br><span class="line">19 JENKINS_JAVA_CMD=<span class="string">&quot;/usr/local/java/bin/java&quot;</span></span><br><span class="line">29 JENKINS_USER=<span class="string">&quot;root&quot;</span>                          <span class="comment">#这里为了方便，使用root用户运行jenkins</span></span><br><span class="line">65 JENKINS_LISTEN_ADDRESS=<span class="string">&quot;192.168.2.2&quot;</span></span><br><span class="line"></span><br><span class="line">//启动jenkins</span><br><span class="line">[root@jenkins ~]<span class="comment"># systemctl start jenkins</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># netstat -anptu|grep &quot;8080&quot;</span></span><br><span class="line">tcp6   0   0   192.168.2.2:8080   :::*   LISTEN   67706/java</span><br></pre></td></tr></table></figure><h4 id="3-jenkins-的目录介绍"><a href="#3-jenkins-的目录介绍" class="headerlink" title="3. jenkins 的目录介绍"></a>3. jenkins 的目录介绍</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># rpm -ql jenkins</span></span><br><span class="line">/etc/init.d/jenkins             <span class="comment">#jenkins的启动文件</span></span><br><span class="line">/etc/logrotate.d/jenkins        <span class="comment">#记载Jenkins日至位置的文件</span></span><br><span class="line">/etc/sysconfig/jenkins          <span class="comment">#jenkins的配置文件</span></span><br><span class="line">/usr/lib/jenkins                <span class="comment">#jenkins的war包，升级就是在这做的 </span></span><br><span class="line">/usr/lib/jenkins/jenkins.war    <span class="comment">#jenkins的程序war包</span></span><br><span class="line">/usr/sbin/rcjenkins             <span class="comment">#jenkins的为二进制文件</span></span><br><span class="line">/var/cache/jenkins              <span class="comment">#jenkins的程序文件，运行程序解压出来的</span></span><br><span class="line">/var/lib/jenkins                <span class="comment">#jenkins的主目录</span></span><br><span class="line">/var/<span class="built_in">log</span>/jenkins                <span class="comment">#jenkins的日志文件</span></span><br><span class="line">/var/lib/jenkins/workspace      <span class="comment">#拉取代码的存放路径</span></span><br><span class="line">/var/lib/jenkins/plugins/       <span class="comment">#这个目录下是我们安装所有的插件</span></span><br><span class="line">/var/lib/jenkins/secrets/initialAdminPassword       <span class="comment">#管理员密码文件</span></span><br></pre></td></tr></table></figure><h4 id="4-跳过-jenkins-插件安装"><a href="#4-跳过-jenkins-插件安装" class="headerlink" title="4. 跳过 jenkins 插件安装"></a>4. 跳过 jenkins 插件安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># cat /var/lib/jenkins/secrets/initialAdminPassword</span></span><br><span class="line">3b99cdf79df747e494484426efb8bd1c         <span class="comment">#管理员密码</span></span><br></pre></td></tr></table></figure><ul><li>访问：<a href="http://jenkins.lemon.com:8080/">http://jenkins.lemon.com:8080/</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wk8dfj0j30ri0npgmm.jpg" alt="image-20200505192734398"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wkfp027j30ri0odmz6.jpg" alt="image-20200520231715521"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wko5yn1j30ri0ob74q.jpg" alt="image-20200520231751361"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wkwzcf7j30ri0oct9g.jpg" alt="image-20200520231819993"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wl6eaocj30ri09wgm0.jpg" alt="image-20200520231859006"></p><ul><li><strong>修改admin用户密码</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wlbzuvjj60vp06idgl02.jpg" alt="image-20200520212137256"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wlmvxgvj30um0na3z2.jpg" alt="image-20200520212217903"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wlvpc4mj30po0e4mxj.jpg" alt="image-20200520231957176"></p><h4 id="5-更换jenkins插件下载源"><a href="#5-更换jenkins插件下载源" class="headerlink" title="5. 更换jenkins插件下载源"></a>5. 更换jenkins插件下载源</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wm3okwvj30v80ds0uf.jpg" alt="image-20200520212258589"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wm7acnzj30vp0aamxp.jpg" alt="image-20200520212328361"></p><ul><li><strong>清华源：</strong><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wmddkzzj30ny063dfu.jpg" alt="image-20200520212447372"></p><ul><li><p><strong>完事之后将网页关掉并down掉 <code>jenkins</code>，替换完官方的 <code>json</code> 文件之后在启动。</strong></p></li><li><p><strong>注：系统重启后，<code>default.json</code> 文件会还原，所以只要系统重启就执行下面这个命令</strong>。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># systemctl stop jenkins</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># cd /var/lib/jenkins/updates/</span></span><br><span class="line">[root@jenkins updates]<span class="comment"># sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json</span></span><br><span class="line">[root@jenkins updates]<span class="comment"># systemctl start jenkins</span></span><br><span class="line">[root@jenkins updates]<span class="comment"># netstat -anptu|grep &quot;java&quot;</span></span><br><span class="line">tcp6       0      0 192.168.2.2:8080      :::*       LISTEN      11591/java</span><br></pre></td></tr></table></figure><h4 id="6-离线安装-jenkins-插件"><a href="#6-离线安装-jenkins-插件" class="headerlink" title="6.离线安装 jenkins 插件"></a>6.离线安装 jenkins 插件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># systemctl stop jenkins</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># rm -rf /var/lib/jenkins/plugins/</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># tar xf jenkins-2.233_plugins.tar.gz -C /var/lib/jenkins/</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># chown -R jenkins:jenkins /var/lib/jenkins/plugins/</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># systemctl start jenkins</span></span><br></pre></td></tr></table></figure><ul><li><strong>jenkins 插件安装完成</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wmmz3ckj30u90egq3d.jpg" alt="image-20200520213421856"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wmrlwv7j31160gn0u2.jpg" alt="image-20200520213450701"></p><h2 id="五、Jenkins-集成-Gitlab（持续集成）"><a href="#五、Jenkins-集成-Gitlab（持续集成）" class="headerlink" title="五、Jenkins 集成 Gitlab（持续集成）"></a>五、Jenkins 集成 Gitlab（持续集成）</h2><p><strong>整体思路：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wn5rpgzj31d00oenh3.jpg" alt="image-20210402172434327"></p><h4 id="1-在-gitlab-上创建项目并将代码推送上去"><a href="#1-在-gitlab-上创建项目并将代码推送上去" class="headerlink" title="1. 在 gitlab 上创建项目并将代码推送上去"></a>1. 在 gitlab 上创建项目并将代码推送上去</h4><ul><li><strong>使用pm用户基于 <code>java</code> 组创建 <code>monitor</code>项目</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wngfg65j30u80m3tbx.jpg" alt="image-20200520235036801"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wnmejhwj30tz04rdfv.jpg" alt="image-20200520235313198"></p><ul><li><strong>使用 <code>dev1</code> 或者 <code>dev2</code> 开发用户将monitor代码推送至此项目中</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># unzip monitor_html.zip                #解压我本地的项目代码</span></span><br><span class="line">[root@dev1 ~]<span class="comment"># ll</span></span><br><span class="line">总用量 13688</span><br><span class="line">drwxr-xr-x 9 root root     4096 5月  20 08:57 monitor</span><br><span class="line">-rw-r--r-- 1 root root 14008331 5月  20 08:59 monitor_html.zip</span><br><span class="line">[root@dev1 ~]<span class="comment"># cd monitor                            #进入解压后的代码目录中</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git init                        #初始化monitor目录</span></span><br><span class="line">重新初始化现存的 Git 版本库于 /root/monitor/.git/</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git add .                       #加入到暂存区</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git status                      #查看暂存区状态</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git commit -m &quot;NOW 1&quot;           #提交至本地仓库</span></span><br><span class="line">[master 9c1c324] NOW 1</span><br><span class="line"> 110 files changed, 65709 insertions(+), 65709 deletions(-)</span><br><span class="line"> </span><br><span class="line">[root@dev1 monitor]<span class="comment"># git remote add origin git@gitlab.lemon.com:java/monitor.git   #添加远程仓库</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git remote -v                      #查看远程仓库（ssh协议的）</span></span><br><span class="line">origingit@gitlab.lemon.com:java/monitor.git (fetch)</span><br><span class="line">origingit@gitlab.lemon.com:java/monitor.git (push)</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push -u origin master          #推送代码至远程仓库</span></span><br><span class="line">Counting objects: 564, <span class="keyword">done</span>.</span><br><span class="line">Compressing objects: 100% (497/497), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (564/564), 9.03 MiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 564 (delta 159), reused 363 (delta 54)</span><br><span class="line">remote: Resolving deltas: 100% (159/159), <span class="keyword">done</span>.</span><br><span class="line">To git@gitlab.lemon.com:java/monitor.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 master 设置为跟踪来自 origin 的远程分支 master。</span><br></pre></td></tr></table></figure><ul><li><strong>查看是否推送至monitor项目中</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wns3q76j30z50nqdhc.jpg" alt="image-20200521002049018"></p><h4 id="2-下载集成-gitlab-的插件"><a href="#2-下载集成-gitlab-的插件" class="headerlink" title="2. 下载集成 gitlab 的插件"></a>2. 下载集成 <code>gitlab</code> 的插件</h4><ul><li>这些插件我都已经在上面安装好了，所以这一步可以跳过</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wnwrj0sj30y40e9gsq.jpg" alt="image-20200521002447884"></p><h4 id="3-在-jenkins-里配置实现持续集成"><a href="#3-在-jenkins-里配置实现持续集成" class="headerlink" title="3. 在 jenkins 里配置实现持续集成"></a>3. 在 jenkins 里配置实现持续集成</h4><blockquote><p><strong>进入主页–创建一个新任务</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wnzklkbj30vy0i40u3.jpg" alt="image-20200521003043921"></p><blockquote><p><strong>输入项目名称 freestyle-monitor—构建一个自由风格的软件项目—确认</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wo6z7ubj30sm0m5mzn.jpg" alt="image-20200521002958391"></p><blockquote><p><strong>General–填写项目描述–Discard old builds</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7woct8rnj60sl0gfgm902.jpg" alt="image-20200521003526153"></p><blockquote><p><strong>源码管理–Git–添加 <code>gitlab</code> 项目的URL–授权认证</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wogdbu1j30te0783yz.jpg" alt="image-20200521003803292"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7woj4c18j30sn0mp0u6.jpg" alt="image-20200521004019949"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//在jenkins服务器上生成私钥，马上就用</span><br><span class="line">[root@jenkins ~]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:cYOfmb21FU4/mqzakUqAqwFPW1G7Mz2hmLti6eDfia8 root@jenkins</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|       .         |</span></span><br><span class="line"><span class="string">|      . ..       |</span></span><br><span class="line"><span class="string">|     . .o.o    o |</span></span><br><span class="line"><span class="string">|      = ++.*  o o|</span></span><br><span class="line"><span class="string">| . . = *So= . .oo|</span></span><br><span class="line"><span class="string">|  + o o + . oooo.|</span></span><br><span class="line"><span class="string">| . +.o   . o.+.  |</span></span><br><span class="line"><span class="string">|. .+= o . o o    |</span></span><br><span class="line"><span class="string">| .+E+=   o.o     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@jenkins ~]# cat .ssh/id_rsa.pub      #公钥</span></span><br><span class="line"><span class="string">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDj13aUUWlOxpLv/tGDHF7v1dBUrs0wVirnxKXbFwetXUECnqGyd9UOHSrkkEiKW512ommbXDziX+TEa6S5QULZCrS0dM3tN4WCLyouhPbPzjiOA+HHJj0XpgXxnSz6MobeAVPByS0l9LhJkISIxl+gmz+e/VvMcSOmwOXHm70kIngA59X6xy5t2xeb0vwkQXGmoA5bQdQx32mugDT4HA1IBpoRRV3h6cfjhSW85wjdgWRGWFIRFLfLKCyBPBaGxGY7XJB9Fpu3SaMfBb85EYBk///L1Ha8dEKLkmiECrDo6SgQHWoF7GVcyzATku80NHR6boZFC4belELS2rPmTfe9 root@jenkins</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@jenkins ~]# cat .ssh/id_rsa          #私钥</span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIEowIBAAKCAQEA49d2lFFpTsaS7/7Rgxxe79XQVK7NMFYq58Sl2xcHrV1BAp6h</span></span><br><span class="line"><span class="string">snfVDh0q5JBIiluddqJpm1w84l/kxGukuUFC2Qq0tHTN7TeFgi8qLoT2z844jgPh</span></span><br><span class="line"><span class="string">xyY9F6YF8Z0s+jKG3gFTwcktJfS4SZCEiMZfoJs/nv1bzHEjpsDlx5u9JCJ4AOfV</span></span><br><span class="line"><span class="string">+scubdsXm9L8JEFxpqAOW0HUMd9proA0+BwNSAaaEUVd4enH44UlvOcI3YFkRlhS</span></span><br><span class="line"><span class="string">ERS3yygsgTwWhsRmO1yQfRabt0mjHwW/ORGAZP//y9R2vHRCi5JohAqw6OkoEB1q</span></span><br><span class="line"><span class="string">BexlXMswE5LvNDR0em6GRQuG3pRC0tqz5k33vQIDAQABAoIBAQDcu22CG60uSGsq</span></span><br><span class="line"><span class="string">X3CS2PWQ3VBL+l2HqrM+fuE/9HvXlTTaWNzGjhm25sMbVD0y7bcLrCUsApxppAV5</span></span><br><span class="line"><span class="string">1d9sKrGcnCadfVvTqaqKiS8QiniismNQEqq1yXH+azXu8hsU+cZ3ZknCwCghUYkI</span></span><br><span class="line"><span class="string">nB4KdEVIz58/ZK1+z01+y/rQ+yyux3GQQq7ZM+gQDhAmrgma+r/lov0itCM86Eo5</span></span><br><span class="line"><span class="string">PN9ZQ5I7m23ACQsZNjZOQ9yxIqjsYYAo+iJuT96ZUlOkPnzTwQ2mtI1SaMgPUZJb</span></span><br><span class="line"><span class="string">gjb4A3FaU0rVru+bsQX93mZEEWAQqBzr1JkE8gd4P5VCMmjxlNxQwzThKMaGsvU9</span></span><br><span class="line"><span class="string">ijqXDZaBAoGBAPzZ7y/UDLd5cMgljPtGG3buk9vWKmL32DTRShj2OdrXJO49QGy3</span></span><br><span class="line"><span class="string">uMUi9qQ3j8ShmvclKdQ3LXofEFruwBmkP0F/oEYJ5/MEXkgi1+dE8RgjIg6v7+Ww</span></span><br><span class="line"><span class="string">sAhFJrhnK+rGbVSABJ5O9bb9qmEKgZq+2W1/4Y6RF/+DSSN/jxXllP3JAoGBAOat</span></span><br><span class="line"><span class="string">zO34RMHemgQoRQCW6NOTHnWOpn1ubhMR21rNHfgwmsyaPMv/LDkBQObyKMLb4VgC</span></span><br><span class="line"><span class="string">D7jD2NW9DlTcKiZjqmjgDALxR1tt3mXZ2znTWEDI774Tc2QebJCpRIdQqKG1nm5H</span></span><br><span class="line"><span class="string">d131E5CS72cNCVmacVc9xi7kO107e6bc+34g8hRVAoGAe8/PcpEYBQN/OVJB3Yyv</span></span><br><span class="line"><span class="string">yCX82unc6YdJJFvTN7PiEonE+K+fi1zPKiD7ut/GE1e6xQg6mkLGjwUFAjHkeOnX</span></span><br><span class="line"><span class="string">W6A9/+272WCrNhFxvToiAFq7w4tdIhDJsdMCqctDUvwE7xqcqFQrt4Yw1sHJQtfv</span></span><br><span class="line"><span class="string">KdIzxZbAtIo51xsQGn3H3hkCgYAZhpnqq1JQcaVxWFNqYUiaQOlZ8NMThijAC3XO</span></span><br><span class="line"><span class="string">cmwijp5Sja60lCP8mtrns1w3U8V3y6KZu3I/FJCFa2duoBC3UjOCD9jpkRrPAnBz</span></span><br><span class="line"><span class="string">0aMuaA2/Zr+aEJPK3jArGQ3P9xz07wuSZhAoK1o6eQLT23c3RCqt/atkAbUJHeLm</span></span><br><span class="line"><span class="string">bhbbkQKBgFytaJklEVRibl0iiDYZfkzIhD/v1I43JyUmuv+VuTwGDYFx4b0jBOAm</span></span><br><span class="line"><span class="string">EeKnpRzyvmSbG52XHcJeaGt0iLaZVnpby/y04aowJC+2sQ7fGKE61PYy9WDasHBr</span></span><br><span class="line"><span class="string">uRuMiY5YzMC9LsGeSs4gF/oVt6d80M2itaqf+MSRZpT3VVpqGXw9</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br></pre></td></tr></table></figure><ul><li><strong>把 <code>jenkins</code> 服务器上的公钥放到 <code>gitlab</code> 的  pm 账户上用来拉取代码</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7worz5akj313c0lu0v5.jpg" alt="image-20200521004915704"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wovrd6kj30tj09674j.jpg" alt="image-20200521004934281"></p><ul><li><strong>验证 <code>jenkins</code> 服务器能否克隆这个项目</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># git clone git@gitlab.lemon.com:java/monitor.git</span></span><br><span class="line">正克隆到 <span class="string">&#x27;monitor&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 564, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (564/564), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (392/392), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 564 (delta 159), reused 564 (delta 159)</span><br><span class="line">接收对象中: 100% (564/564), 9.03 MiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">处理 delta 中: 100% (159/159), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># rm -rf monitor/</span></span><br><span class="line"></span><br><span class="line">//很明显，jenkins服务器已经能够克隆gitlab上的项目了</span><br></pre></td></tr></table></figure><ul><li><strong>再回到 jenkins 的web页面上将他自己的私钥放到 jenkins 凭据上</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wp2wr9kj313n0k5gnb.jpg" alt="image-20200521010030412"></p><blockquote><p>Credentials—选择 root</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wp74zkbj30sm0i6myb.jpg" alt="image-20200521010337874"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wpbaje8j60s002djre02.jpg" alt="image-20200521010815380"></p><h4 id="4-点击立即构建"><a href="#4-点击立即构建" class="headerlink" title="4. 点击立即构建"></a>4. 点击立即构建</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wphbqm9j313t0howg9.jpg" alt="image-20200521011053244"></p><h4 id="5-构建成功后点击-控制台输出-和-工作区"><a href="#5-构建成功后点击-控制台输出-和-工作区" class="headerlink" title="5. 构建成功后点击 控制台输出 和 工作区"></a>5. 构建成功后点击 控制台输出 和 工作区</h4><ul><li><strong>点击控制台输出</strong></li></ul><blockquote><p><strong>控制台输出，SUCCESS则构建成功</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wpoehy1j30tz0g3wfw.jpg" alt="image-20200521011929942"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wq1mqruj60qu0ijgn302.jpg" alt="image-20200521012036181"></p><ul><li><strong>点击工作去</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wq91qa6j313t0ir40s.jpg" alt="image-20200521011356399"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqe1wgjj30sf0mltbl.jpg" alt="image-20200521011658186"></p><ul><li><strong>查看 <code>jenkins</code> 服务器上的 <code>/var/lib/jenkins/workspace/</code> 目录是否下载了代码</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqiuz6dj30y80d6t9w.jpg" alt="image-20200521011751571"></p><blockquote><p><strong>可以看到，在工作目录下边有部署的代码；上面只是完成了第一步，也就是持续集成，下面我们先开始搭建集群，在修改此任务的配置（持续集成 + 持续部署）。</strong></p></blockquote><h2 id="六、搭建web集群"><a href="#六、搭建web集群" class="headerlink" title="六、搭建web集群"></a>六、搭建web集群</h2><blockquote><p><strong>打开三台虚拟机</strong></p></blockquote><table><thead><tr><th>IP</th><th>host_name</th><th>role</th></tr></thead><tbody><tr><td>192.168.2.3</td><td>LB</td><td>nginx充当负载均衡</td></tr><tr><td>192.168.2.4</td><td>web01</td><td>nginx充当web服务</td></tr><tr><td>192.168.2.5</td><td>Web02</td><td>nginx充当web服务</td></tr></tbody></table><h4 id="1-在这三台节点上都安装nginx（操作相同）"><a href="#1-在这三台节点上都安装nginx（操作相同）" class="headerlink" title="1. 在这三台节点上都安装nginx（操作相同）"></a>1. 在这三台节点上都安装nginx（操作相同）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加hosts解析文件</span></span><br><span class="line">cat &lt;&lt;<span class="string">END&gt;&gt; /etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.1 gitlab.lemon.com</span></span><br><span class="line"><span class="string">192.168.2.2 jenkins.lemon.com</span></span><br><span class="line"><span class="string">192.168.2.3 lb.lemon.com</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo </span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum -y install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改这三台的主配置文件（配置相同）</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile      on;</span><br><span class="line">    keepalive_timeout  0;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置-lb-主机"><a href="#2-配置-lb-主机" class="headerlink" title="2. 配置 lb 主机"></a>2. 配置 lb 主机</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@lb ~]<span class="comment"># cd /etc/nginx/conf.d/</span></span><br><span class="line">[root@lb conf.d]<span class="comment"># gzip default.conf              #将默认的虚拟主机文件注释掉</span></span><br><span class="line"></span><br><span class="line">[root@lb conf.d]<span class="comment"># vim proxy_lb.lemon.com.conf</span></span><br><span class="line">upstream lb &#123;</span><br><span class="line">        server 192.168.2.4:80;</span><br><span class="line">        server 192.168.2.5:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name lb.lemon.com;</span><br><span class="line">        root /code;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://lb;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                proxy_set_header X-Forward-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line">[root@lb conf.d]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line">[root@lb conf.d]<span class="comment"># systemctl start nginx;systemctl enable nginx</span></span><br><span class="line">[root@lb conf.d]<span class="comment"># netstat -anptu|grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80     0.0.0.0:*     LISTEN      16216/nginx: master</span><br></pre></td></tr></table></figure><h4 id="3-配置-web01-主机"><a href="#3-配置-web01-主机" class="headerlink" title="3. 配置 web01 主机"></a>3. 配置 web01 主机</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cd /etc/nginx/conf.d/</span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># gzip default.conf</span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># vim nginx_01.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        root /code/web;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># mkdir -p /code/web</span></span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># systemctl start nginx;systemctl enable nginx</span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># netstat -anptu|grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80        0.0.0.0:*     LISTEN      16171/nginx: master</span><br></pre></td></tr></table></figure><h4 id="4-配置-web02-主机"><a href="#4-配置-web02-主机" class="headerlink" title="4. 配置 web02 主机"></a>4. 配置 web02 主机</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@web02 ~]<span class="comment"># cd /etc/nginx/conf.d/</span></span><br><span class="line">[root@web02 conf.d]<span class="comment"># gzip default.conf</span></span><br><span class="line">[root@web02 conf.d]<span class="comment"># vim nginx_02.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        root /code/web;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line">[root@web02 conf.d]<span class="comment"># mkdir -p /code/web</span></span><br><span class="line"></span><br><span class="line">[root@web02 conf.d]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line">[root@web02 conf.d]<span class="comment"># systemctl start nginx;systemctl enable nginx</span></span><br><span class="line">[root@web02 conf.d]<span class="comment"># netstat -anptu|grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80        0.0.0.0:*     LISTEN      16171/nginx: master</span><br></pre></td></tr></table></figure><h4 id="5-将-jenkins-服务器上的代码拷贝到两台web节点上"><a href="#5-将-jenkins-服务器上的代码拷贝到两台web节点上" class="headerlink" title="5. 将 jenkins 服务器上的代码拷贝到两台web节点上"></a>5. 将 jenkins 服务器上的代码拷贝到两台web节点上</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># cd /var/lib/jenkins/workspace/freestyle-monitor</span></span><br><span class="line">[root@jenkins freestyle-monitor]<span class="comment"># scp -r ./* root@192.168.2.4:/code/web</span></span><br><span class="line">[root@jenkins freestyle-monitor]<span class="comment"># scp -r ./* root@192.168.2.5:/code/web</span></span><br></pre></td></tr></table></figure><h4 id="6-查看并访问-http-lb-lemon-com"><a href="#6-查看并访问-http-lb-lemon-com" class="headerlink" title="6. 查看并访问 http://lb.lemon.com/"></a>6. 查看并访问 <a href="http://lb.lemon.com/">http://lb.lemon.com/</a></h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqrqpqxj30z20ao3zf.jpg" alt="image-20200521024919442"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqv308bj30zp0akt9m.jpg" alt="image-20200521024935986"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wqydqqgj313s0q91kx.jpg" alt="image-20200521025224964"></p><ul><li><strong>思考一个问题：</strong><ul><li>如果我更新了一次代码，是不是还得要再来一次上面的操作步骤？</li><li>是的，所以就要用到下面  <code>jenkins</code> 的持续集成 + 持续部署 功能了。</li></ul></li></ul><h2 id="七、配置freestyle-monitor任务-持续集成-持续部署"><a href="#七、配置freestyle-monitor任务-持续集成-持续部署" class="headerlink" title="七、配置freestyle-monitor任务 持续集成 + 持续部署"></a>七、配置freestyle-monitor任务 持续集成 + 持续部署</h2><h4 id="1-将手动部署代码的操作编写成shell脚本，在由-jenkins-调度将其代码推送至web集群"><a href="#1-将手动部署代码的操作编写成shell脚本，在由-jenkins-调度将其代码推送至web集群" class="headerlink" title="1. 将手动部署代码的操作编写成shell脚本，在由 jenkins 调度将其代码推送至web集群"></a>1. 将手动部署代码的操作编写成shell脚本，在由 jenkins 调度将其代码推送至web集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># mkdir /jekins_scripts                   #创建jenkins脚本存放目录</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># mkdir /jekins_code_tar                  #创建jenkins代码打包存放目录</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># vim /jekins_scripts/monitor_html.sh  #创建jenkins任务的相关脚本存放目录</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳</span></span><br><span class="line">DATE=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class="line"></span><br><span class="line"><span class="comment">#jenkins的项目目录,这里也可以直接用jenkins自身的 WORKSPACE 变量</span></span><br><span class="line">JENKINS_DIR=<span class="string">&quot;/var/lib/jenkins/workspace/freestyle-monitor&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#web集群的站点存放目录</span></span><br><span class="line">WEB_DIR=<span class="string">&quot;/code&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#web集群IP地址</span></span><br><span class="line">WEB_IP=<span class="string">&quot;192.168.2.4 192.168.2.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到jenkins项目目录，并进行代码打包至/jekins_code_tar目录下，在将内容通过scp至web集群 并 进行新的代码上线</span></span><br><span class="line"><span class="function"><span class="title">env_build</span></span>() &#123;</span><br><span class="line">       <span class="built_in">cd</span> <span class="variable">$&#123;JENKINS_DIR&#125;</span> &amp;&amp; tar zcf /jekins_code_tar/web-<span class="variable">$&#123;DATE&#125;</span>.tar.gz ./*</span><br><span class="line">       <span class="keyword">for</span> hosts <span class="keyword">in</span> <span class="variable">$WEB_IP</span>;<span class="keyword">do</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;if [ ! -d /web_backup ]; then mkdir /web_backup ; fi&quot;</span></span><br><span class="line">            scp /jekins_code_tar/web-<span class="variable">$&#123;DATE&#125;</span>.tar.gz root@<span class="variable">$&#123;hosts&#125;</span>:/web_backup</span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;rm -rf <span class="variable">$&#123;WEB_DIR&#125;</span>/* &amp;&amp; mkdir -p <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;tar xf /web_backup/web-<span class="variable">$&#123;DATE&#125;</span>.tar.gz -C <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;ln  -s <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE&#125;</span> <span class="variable">$&#123;WEB_DIR&#125;</span>/web&quot;</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用env_build函数</span></span><br><span class="line">env_build</span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># chmod -R +x /jekins_scripts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置web节点免登</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># ssh-copy-id root@192.168.2.4</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># ssh-copy-id root@192.168.2.5</span></span><br></pre></td></tr></table></figure><h4 id="2-配置-freestyle-monitor-项目"><a href="#2-配置-freestyle-monitor-项目" class="headerlink" title="2. 配置 freestyle-monitor 项目"></a>2. 配置 freestyle-monitor 项目</h4><ul><li><strong>构建 – Execute shell</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wr4spf9j30ux0ik0un.jpg" alt="image-20200521114008140"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wradm4yj30rz0i73yy.jpg" alt="image-20200521114243497"></p><h4 id="3-构建此项目"><a href="#3-构建此项目" class="headerlink" title="3. 构建此项目"></a>3. 构建此项目</h4><ul><li>在构建之前先将web集群的页面和 <code>jenkins</code> 之前拉取下的代码全都删除，以便验证</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jenkins服务器上</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># ll /var/lib/jenkins/workspace/</span></span><br><span class="line">总用量 0</span><br><span class="line">[root@jenkins ~]<span class="comment"># ll /jekins_code_tar/</span></span><br><span class="line">总用量 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#web01服务器上</span></span><br><span class="line">[root@web01 ~]<span class="comment"># ll /code/</span></span><br><span class="line">总用量 0</span><br><span class="line">[root@web01 ~]<span class="comment"># ll /web_backup</span></span><br><span class="line">ls: 无法访问/web_backup: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#web02服务器上</span></span><br><span class="line">[root@web02 ~]<span class="comment"># ll /code/</span></span><br><span class="line">总用量 0</span><br><span class="line">[root@web01 ~]<span class="comment"># ll /web_backup</span></span><br><span class="line">ls: 无法访问/web_backup: 没有那个文件或目录</span><br></pre></td></tr></table></figure><ul><li>现在访问lb.lemon.com就会报错</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wrktsraj313t04bglo.jpg" alt="image-20200521114546597"></p><h4 id="4-模拟开发更新代码推送至远程仓库"><a href="#4-模拟开发更新代码推送至远程仓库" class="headerlink" title="4. 模拟开发更新代码推送至远程仓库"></a>4. 模拟开发更新代码推送至远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># cd monitor</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># vim index.html +43</span></span><br><span class="line">&lt;a class=<span class="string">&quot;logo pull-left&quot;</span> href=<span class="string">&quot;index.html&quot;</span> style=<span class="string">&quot;width: 233px&quot;</span>&gt;lemon管理平台&lt;/a&gt;</span><br><span class="line">:wq!</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git add .</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git commit -m &quot;test&quot;</span></span><br><span class="line">[master 6cc63b2] <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin master</span></span><br><span class="line">Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 282 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 2), reused 0 (delta 0)</span><br><span class="line">To git@gitlab.lemon.com:java/monitor.git</span><br><span class="line">   481be52..6cc63b2  master -&gt; master</span><br></pre></td></tr></table></figure><h4 id="5-jenkins构建项目"><a href="#5-jenkins构建项目" class="headerlink" title="5. jenkins构建项目"></a>5. jenkins构建项目</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wrpf7g3j30ss0hdtah.jpg" alt="image-20200521114623360"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wrw3c3fj30pd0b10tf.jpg" alt="image-20200521114714801"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ws6hj45j30sf0bvq43.jpg" alt="image-20200522005243240"></p><h4 id="6-然后在访问一下lb-lemon-com"><a href="#6-然后在访问一下lb-lemon-com" class="headerlink" title="6. 然后在访问一下lb.lemon.com"></a>6. 然后在访问一下lb.lemon.com</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wsalqr0j313t0pfnpb.jpg" alt="image-20200522011420421"></p><h4 id="7-查看对应的目录"><a href="#7-查看对应的目录" class="headerlink" title="7. 查看对应的目录"></a>7. 查看对应的目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jenkins服务器上</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># ll  /var/lib/jenkins/workspace/</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x 9 root root 4096 5月  22 00:50 freestyle-monitor</span><br><span class="line">drwxr-xr-x 2 root root    6 5月  22 00:50 freestyle-monitor@tmp</span><br><span class="line">[root@jenkins ~]<span class="comment"># ll /jekins_code_tar/</span></span><br><span class="line">总用量 4552</span><br><span class="line">-rw-r--r-- 1 root root 4659825 5月  22 00:50 web-2020-05-22-00-50-30.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#web01服务器上</span></span><br><span class="line">[root@web01 ~]<span class="comment"># ll /code/</span></span><br><span class="line">总用量 4</span><br><span class="line">lrwxrwxrwx 1 root root   29 5月  22 00:50 web -&gt; /code/web-2020-05-22-00-50-30</span><br><span class="line">drwxr-xr-x 8 root root 4096 5月  22 00:50 web-2020-05-22-00-50-30</span><br><span class="line">[root@web01 ~]<span class="comment"># ll /web_backup</span></span><br><span class="line">总用量 4552</span><br><span class="line">-rw-r--r-- 1 root root 4659825 5月  22 00:50 web-2020-05-22-00-50-30.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#web02服务器上</span></span><br><span class="line">[root@web02 ~]<span class="comment"># ll /code/</span></span><br><span class="line">总用量 4</span><br><span class="line">lrwxrwxrwx 1 root root   29 5月  22 00:50 web -&gt; /code/web-2020-05-22-00-50-30</span><br><span class="line">drwxr-xr-x 8 root root 4096 5月  22 00:50 web-2020-05-22-00-50-30</span><br><span class="line">[root@web02 ~]<span class="comment"># ll /web_backup</span></span><br><span class="line">总用量 4552</span><br><span class="line">-rw-r--r-- 1 root root 4659825 5月  22 00:50 web-2020-05-22-00-50-30.tar.gz</span><br></pre></td></tr></table></figure><h4 id="8-注意事项："><a href="#8-注意事项：" class="headerlink" title="8. 注意事项："></a>8. 注意事项：</h4><p><strong>1. Jenkins的启动用户得是root，不然会报错！因为ssh免登用的是root用户做的</strong></p><p><strong>2. 如果做了上面的步骤后还是报错，就执行命令删除rm -rf known_hosts。</strong></p><p><strong>3. 以上就是一个简单的不能再简单的静态页面 持续集成 + 持续部署项目</strong></p><h4 id="9-现在这个项目的配置还存在一些问题"><a href="#9-现在这个项目的配置还存在一些问题" class="headerlink" title="9. 现在这个项目的配置还存在一些问题"></a>9. 现在这个项目的配置还存在一些问题</h4><ul><li><p>怎么指定要构建的版本？</p><ul><li>答：需要定义 参数化构建过程的（Choice Parameter 和 Git Parameter）</li></ul></li><li><p>怎么不让已经构建成功后项目 构建？</p><ul><li>答：使用 <code>jenkins</code> 自带的两个变量进行判断</li></ul></li></ul><h4 id="10-解决上面两个存在的问题"><a href="#10-解决上面两个存在的问题" class="headerlink" title="10. 解决上面两个存在的问题"></a>10. 解决上面两个存在的问题</h4><ul><li><strong>由于之前的上线方式是直接获取最新代码，它会对后期版本回退的困难。</strong></li><li><strong>如果采用tag方式，比如第一次上线 v1.1 、第二次上线 v1.2 ，如果上线 v1.2 出现问题后，我们还可以使用tag快速回退至上一个版本的 v1.1 。</strong></li></ul><h4 id="12-实现tag版本上线的思路"><a href="#12-实现tag版本上线的思路" class="headerlink" title="12. 实现tag版本上线的思路"></a>12. 实现tag版本上线的思路</h4><ol><li><strong>开发如果需要发布新版本上线，必须将当前的版本打上一个标签。</strong></li><li><strong>配置jenkins任务的参数化构建过程；Choice Parameter 和 Git Parameter</strong></li><li><strong>jenkins需要让其脚本支持传参，比如：用户传递 v1.1 则拉取项目的 v1.1 标签</strong></li></ol><h4 id="13-jenkins配置tag版本的部署"><a href="#13-jenkins配置tag版本的部署" class="headerlink" title="13. jenkins配置tag版本的部署"></a>13. jenkins配置tag版本的部署</h4><ul><li>首先安装 Git Parameter插件，然后配置jenkins参数化构建，再让用户构建时选择对应的tag版本。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wshh486j30we0gtmz0.jpg" alt="image-20200521213401721"></p><ul><li>添加 参数化构建过程（This project is parameterized）—&gt; Choice Parameter —&gt; Git Parameter</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wslshm1j30sd0obabo.jpg" alt="image-20200521215729330"></p><ul><li>配置 Choice Parameter 选项参数</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wst8oioj30ma0bvdge.jpg" alt="image-20200522021453925"></p><ul><li>配置 Git Parameter 并  修改源码管理的 Git分支参数</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wt0qol4j30ma0blmxt.jpg" alt="image-20200522013349907"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wt5zaatj30sm0o9t9y.jpg" alt="image-20200522013610814"></p><ul><li>修改jenkins上的 monitor_html.sh 脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># vim /jekins_scripts/monitor_html.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳</span></span><br><span class="line">DATE=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class="line">DATE_TAG=<span class="variable">$&#123;DATE&#125;</span>-<span class="variable">$&#123;GIT_VERSION&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#jenkins的项目目录,这里也可以直接用jenkins自身的 WORKSPACE 变量</span></span><br><span class="line">JENKINS_DIR=<span class="string">&quot;/var/lib/jenkins/workspace/freestyle-monitor&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#web集群的站点存放目录</span></span><br><span class="line">WEB_DIR=<span class="string">&quot;/code&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#web集群IP地址</span></span><br><span class="line">WEB_IP=<span class="string">&quot;192.168.2.4 192.168.2.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到jenkins项目目录，并进行代码打包至/jekins_code_tar目录下，在将内容通过scp至web集群 并 进行新的代码上线</span></span><br><span class="line"><span class="function"><span class="title">env_build</span></span>() &#123;</span><br><span class="line">       <span class="built_in">cd</span> <span class="variable">$&#123;JENKINS_DIR&#125;</span> &amp;&amp; tar zcf /jekins_code_tar/web-<span class="variable">$&#123;DATE_TAG&#125;</span>.tar.gz ./*</span><br><span class="line">       <span class="keyword">for</span> hosts <span class="keyword">in</span> <span class="variable">$WEB_IP</span>;<span class="keyword">do</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;if [ ! -d /web_backup ]; then mkdir /web_backup ; fi&quot;</span></span><br><span class="line">            scp /jekins_code_tar/web-<span class="variable">$&#123;DATE_TAG&#125;</span>.tar.gz root@<span class="variable">$&#123;hosts&#125;</span>:/web_backup</span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;rm -rf <span class="variable">$&#123;WEB_DIR&#125;</span>/* &amp;&amp; mkdir -p <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;tar xf /web_backup/web-<span class="variable">$&#123;DATE_TAG&#125;</span>.tar.gz -C <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;ln  -s <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span> <span class="variable">$&#123;WEB_DIR&#125;</span>/web&quot;</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#jenkins这边保留最近提交的五个代码tar包，其余的全部删掉，web那里只保留三个tar包</span></span><br><span class="line"><span class="function"><span class="title">env_clear</span></span>() &#123;</span><br><span class="line">       <span class="comment">#-----------清除web节点的tar包(只保留三个)------</span></span><br><span class="line">       <span class="keyword">for</span> hosts <span class="keyword">in</span> <span class="variable">$WEB_IP</span>;<span class="keyword">do</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;bash -x /opt/clear_latest.sh&quot;</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">       <span class="comment">#-----------清除jenkins节点的tar包(只保留五个)--</span></span><br><span class="line">       ReservedNum=5</span><br><span class="line">       FileDir=/jekins_code_tar</span><br><span class="line">       FileNum=$(ls -l <span class="variable">$FileDir</span>|grep ^- |wc -l)</span><br><span class="line">       <span class="keyword">while</span>(( <span class="variable">$FileNum</span> &gt; <span class="variable">$ReservedNum</span>));<span class="keyword">do</span></span><br><span class="line">       OldFile=$(ls -rt <span class="variable">$FileDir</span>| head -1)</span><br><span class="line">            rm -rf <span class="variable">$FileDir</span>/<span class="variable">$OldFile</span></span><br><span class="line">            <span class="built_in">let</span> <span class="string">&quot;FileNum--&quot;</span></span><br><span class="line">       <span class="keyword">done</span>       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断到底是调用env_build函数 还是调用evn_clear函数；其实这里的值就是根据上面的 Choice Parameter 选项而定的</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$BUILD_CLEAR</span> == <span class="string">&quot;build&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">       env_build</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$BUILD_CLEAR</span> == <span class="string">&quot;clear&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">       env_clear</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>在web节点上的opt目录下编写 clear_latest.sh 脚本（在此只实例web01，一样的内容）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># vim /opt/clear_latest.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#保留文件数，这里只保留最新的前三个版本</span></span><br><span class="line">ReservedNum=3</span><br><span class="line">FileDir=/web_backup</span><br><span class="line">date=$(date <span class="string">&quot;+%Y%m%d-%H%M%S&quot;</span>)</span><br><span class="line"></span><br><span class="line">FileNum=$(ls -l <span class="variable">$FileDir</span>|grep ^- |wc -l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$FileNum</span> &gt; <span class="variable">$ReservedNum</span>));<span class="keyword">do</span></span><br><span class="line">    OldFile=$(ls -rt <span class="variable">$FileDir</span>| head -1)</span><br><span class="line">    <span class="built_in">echo</span>  <span class="variable">$date</span> <span class="string">&quot;Delete File:&quot;</span><span class="variable">$OldFile</span></span><br><span class="line">    rm -rf <span class="variable">$FileDir</span>/<span class="variable">$OldFile</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;FileNum--&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@web01 ~]<span class="comment"># chmod a+x /opt/clear_latest.sh</span></span><br></pre></td></tr></table></figure><ul><li>开发更新代码，推送至远程仓库并打上标签（这里我实际上推送了三个tag标签）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># cd monitor</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># vim index.html +43</span></span><br><span class="line">&lt;a class=<span class="string">&quot;logo pull-left&quot;</span> href=<span class="string">&quot;index.html&quot;</span> style=<span class="string">&quot;width: 233px&quot;</span>&gt;lemon管理平台 v1.1&lt;/a&gt;</span><br><span class="line">:wq!</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git add .</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git commit -m &quot;v1.1&quot;</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin master</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git tag -a &quot;v1.1&quot; -m &quot;v1.1&quot;</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin v1.1</span></span><br></pre></td></tr></table></figure><ul><li>查看一下效果 并 进行构建 并查看 控制台信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtecmnyj30sf0dtwfn.jpg" alt="image-20200522030745369"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wthhnflj60sf0b1wfi02.jpg" alt="image-20200522032613859"></p><ul><li>访问web服务查看是否更新到我想要的版本中</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtkvveyj313t0kde2o.jpg" alt="image-20200522032725481"></p><ul><li>查看我构建的tar包有多少了，然后使用clear清除（注意：此功能在工作环境上要慎重使用！！！！）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtpwwoqj30uh09yq4d.jpg" alt="image-20200522033011358"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtsu67ij30th088t9t.jpg" alt="image-20200522033030405"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtw47k3j30vj088ab6.jpg" alt="image-20200522033044114"></p><ul><li>调用clear构建 –&gt; 就是在运行脚本中的env_clear函数 —&gt;  查看 控制台信息</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wtzqubmj30sf0dymy5.jpg" alt="image-20200522033129964"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuadd2vj30q00auglx.jpg" alt="image-20200522034347752"></p><ul><li>与上面对比一下可以看到，这个功能也实现了</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuh8f1sj30w506jmya.jpg" alt="image-20200522040612025"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wukgpytj30tk04yq3e.jpg" alt="image-20200522033703796"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuo6tr8j30u904wwey.jpg" alt="image-20200522033717301"></p><h4 id="14-解决项目重复构建-和-无法精确回滚-的问题-可在生产环境使用"><a href="#14-解决项目重复构建-和-无法精确回滚-的问题-可在生产环境使用" class="headerlink" title="14. 解决项目重复构建 和 无法精确回滚 的问题 (可在生产环境使用)"></a>14. 解决项目重复构建 和 无法精确回滚 的问题 (可在生产环境使用)</h4><ul><li>在jenkins任务中的参数化构建中的选项构建那里 在添加一个rollback的选项参数</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wusus6nj30s60o4myk.jpg" alt="image-20200522094542164"></p><ul><li>修改脚本<ul><li>在脚本中添加一个 <code>env_rollabck</code> 的函数，并在脚本中使用 Jenkins自带的 <code>GIT_COMMIT</code> 和 <code>GIT_PREVIOUS_SUCCESSFUL_COMMIT</code>  进行判断</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># vim /jekins_scripts/monitor_html.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳</span></span><br><span class="line">DATE=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class="line">DATE_TAG=<span class="variable">$&#123;DATE&#125;</span>-<span class="variable">$&#123;GIT_VERSION&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#jenkins的项目目录,这里也可以直接用jenkins自身的 WORKSPACE 变量</span></span><br><span class="line">JENKINS_DIR=<span class="string">&quot;/var/lib/jenkins/workspace/freestyle-monitor&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#web集群的站点存放目录</span></span><br><span class="line">WEB_DIR=<span class="string">&quot;/code&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#web集群IP地址</span></span><br><span class="line">WEB_IP=<span class="string">&quot;192.168.2.4 192.168.2.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到jenkins项目目录，并进行代码打包至/jekins_code_tar目录下，在将内容通过scp至web集群 并 进行新的代码上线</span></span><br><span class="line"><span class="function"><span class="title">env_build</span></span>() &#123;</span><br><span class="line">       <span class="built_in">cd</span> <span class="variable">$&#123;JENKINS_DIR&#125;</span> &amp;&amp; tar zcf /jekins_code_tar/web-<span class="variable">$&#123;DATE_TAG&#125;</span>.tar.gz ./*</span><br><span class="line">       <span class="keyword">for</span> hosts <span class="keyword">in</span> <span class="variable">$WEB_IP</span>;<span class="keyword">do</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;if [ ! -d /web_backup ]; then mkdir /web_backup ; fi&quot;</span></span><br><span class="line">            scp /jekins_code_tar/web-<span class="variable">$&#123;DATE_TAG&#125;</span>.tar.gz root@<span class="variable">$&#123;hosts&#125;</span>:/web_backup</span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;rm -rf <span class="variable">$&#123;WEB_DIR&#125;</span>/* &amp;&amp; mkdir -p <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;tar xf /web_backup/web-<span class="variable">$&#123;DATE_TAG&#125;</span>.tar.gz -C <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;ln  -s <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span> <span class="variable">$&#123;WEB_DIR&#125;</span>/web&quot;</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#回滚函数</span></span><br><span class="line"><span class="function"><span class="title">env_rollback</span></span>() &#123;</span><br><span class="line">       ROLL_BACKUP=`ssh root@192.168.2.4 <span class="string">&quot;find /web_backup -maxdepth 1 -type f -name &quot;</span>*<span class="variable">$&#123;GIT_VERSION&#125;</span>*<span class="string">&quot; &quot;</span>`</span><br><span class="line">       <span class="keyword">for</span> hosts <span class="keyword">in</span> <span class="variable">$WEB_IP</span>;<span class="keyword">do</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;rm -rf <span class="variable">$&#123;WEB_DIR&#125;</span>/* &amp;&amp; mkdir -p <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;tar xf <span class="variable">$&#123;ROLL_BACKUP&#125;</span> -C <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span>&quot;</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;ln  -s <span class="variable">$&#123;WEB_DIR&#125;</span>/web-<span class="variable">$&#123;DATE_TAG&#125;</span> <span class="variable">$&#123;WEB_DIR&#125;</span>/web&quot;</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#jenkins这边保留最近提交的五个代码tar包，其余的全部删掉，web那里只保留三个tar包</span></span><br><span class="line"><span class="function"><span class="title">env_clear</span></span>() &#123;</span><br><span class="line">       <span class="comment">#-----------清除web节点的tar包(只保留三个)------</span></span><br><span class="line">       <span class="keyword">for</span> hosts <span class="keyword">in</span> <span class="variable">$WEB_IP</span>;<span class="keyword">do</span></span><br><span class="line">            ssh root@<span class="variable">$&#123;hosts&#125;</span> <span class="string">&quot;bash -x /opt/clear_latest.sh&quot;</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">       <span class="comment">#-----------清除jenkins节点的tar包(只保留五个)--</span></span><br><span class="line">       ReservedNum=5</span><br><span class="line">       FileDir=/jekins_code_tar</span><br><span class="line">       FileNum=$(ls -l <span class="variable">$FileDir</span>|grep ^- |wc -l)</span><br><span class="line">       <span class="keyword">while</span>(( <span class="variable">$FileNum</span> &gt; <span class="variable">$ReservedNum</span>));<span class="keyword">do</span></span><br><span class="line">       OldFile=$(ls -rt <span class="variable">$FileDir</span>| head -1)</span><br><span class="line">            rm -rf <span class="variable">$FileDir</span>/<span class="variable">$OldFile</span></span><br><span class="line">            <span class="built_in">let</span> <span class="string">&quot;FileNum--&quot;</span></span><br><span class="line">       <span class="keyword">done</span>       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断到底是调用env_build函数 还是调用evn_clear函数，并且在构建的时候会先判断一下此</span></span><br><span class="line"><span class="comment">#次构建的版本之前有没有构建够，如果构建过，那么将不再构建，如果没有，就构建此项目</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$BUILD_CLEAR</span> == <span class="string">&quot;build&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="keyword">if</span> [ <span class="variable">$&#123;GIT_COMMIT&#125;</span> == <span class="variable">$&#123;GIT_PREVIOUS_SUCCESSFUL_COMMIT&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;你已经成功构建过web-<span class="variable">$&#123;DATE_TAG&#125;</span>项目了&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;你可以直接使用rollback的方式进行回滚web-<span class="variable">$&#123;DATE_TAG&#125;</span>项目版本&quot;</span></span><br><span class="line">                <span class="built_in">exit</span> 1</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">                env_build</span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$BUILD_CLEAR</span> == <span class="string">&quot;rollback&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">       env_rollback</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$BUILD_CLEAR</span> == <span class="string">&quot;clear&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">       env_clear</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>开发在重新推送两个新的分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># cd monitor</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># vim index.html +43</span></span><br><span class="line">&lt;a class=<span class="string">&quot;logo pull-left&quot;</span> href=<span class="string">&quot;index.html&quot;</span> style=<span class="string">&quot;width: 233px&quot;</span>&gt;lemon管理平台 v1.4 &lt;/a&gt;</span><br><span class="line">:wq!</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git add .</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git commit -m &quot;v1.4&quot;</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin master</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git tag -a &quot;v1.4&quot; -m &quot;v1.4&quot;</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin v1.4</span></span><br><span class="line"></span><br><span class="line">[root@dev1 monitor]<span class="comment"># vim index.html +43</span></span><br><span class="line">&lt;a class=<span class="string">&quot;logo pull-left&quot;</span> href=<span class="string">&quot;index.html&quot;</span> style=<span class="string">&quot;width: 233px&quot;</span>&gt;lemon管理平台 v1.5 &lt;/a&gt;</span><br><span class="line">:wq!</span><br><span class="line">[root@dev1 monitor]<span class="comment"># git add .</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git commit -m &quot;v1.5&quot;</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin master</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git tag -a &quot;v1.5&quot; -m &quot;v1.5&quot;</span></span><br><span class="line">[root@dev1 monitor]<span class="comment"># git push origin v1.5</span></span><br></pre></td></tr></table></figure><ul><li>重复构建一下v1.5的版本</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wuzh3euj30x10hxjtt.jpg" alt="image-20200522101126718"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wv443abj30sf0m2tas.jpg" alt="image-20200522103032311"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wv7w5nvj30sf0e53zf.jpg" alt="image-20200522103116779"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wveu3huj30sf0luq4r.jpg" alt="image-20200522102810984"></p><ul><li>那比如我想在使用构建回到了v1.4的版本中，怎么才可以重新再回到v1.5版本的？<ul><li>答：使用我上面定义好的rollback函数会退就行了</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wvs4yqtj30sf0f00tu.jpg" alt="image-20200522103401222"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wvvpqhaj30sf0f6t9v.jpg" alt="image-20200522103858070"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wvyxmsbj30sf0ftq46.jpg" alt="image-20200522110221733"></p><ul><li>再来测试清空tar包的功能还能否使用（注意：此功能在工作环境上要慎重使用！！！！）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ww38fy0j60u306kjs602.jpg" alt="image-20200522110429290"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ww6x7b6j30th06mmxy.jpg" alt="image-20200522110438627"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwb57d6j60sf0flwfi02.jpg" alt="image-20200522110453895"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwed4lhj60sf0a0gly02.jpg" alt="image-20200522110520679"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwi67i9j30tn04ywex.jpg" alt="image-20200522110533954"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwlzzikj30tn04z3yy.jpg" alt="image-20200522110545403"></p><p><strong>注意：如果此时在想回退到v1.1 和v1.3 版本的时候会失败的，因为web节点上的这两个版本包已经被被我清空了，所以 clear这个函数在公司的时候要慎重使用！！！！【最好就别写这个函数方法最好】</strong></p><p><strong>至此，jenkins的使用就算是基本完成了，只要上面的内容会了，那么至于java项目那块基本上和上面的操作没有太大的区别</strong></p><h2 id="八、GitLab-Jenkins-Sonar-Qube-持续集成"><a href="#八、GitLab-Jenkins-Sonar-Qube-持续集成" class="headerlink" title="八、GitLab + Jenkins + Sonar Qube 持续集成"></a>八、GitLab + Jenkins + Sonar Qube 持续集成</h2><h3 id="1-java项目部署的基本概述"><a href="#1-java项目部署的基本概述" class="headerlink" title="1. java项目部署的基本概述"></a>1. java项目部署的基本概述</h3><h4 id="1-什么是-java-项目？"><a href="#1-什么是-java-项目？" class="headerlink" title="1. 什么是 java 项目？"></a>1. 什么是 java 项目？</h4><ul><li>简单来说就是用 java 编写的代码，我将其称为 java 项目</li></ul><h4 id="2-为什么java项目需要Maven编译？"><a href="#2-为什么java项目需要Maven编译？" class="headerlink" title="2. 为什么java项目需要Maven编译？"></a>2. 为什么java项目需要Maven编译？</h4><ul><li>由于 java 编写的代码是无法直接在服务器上运行的，需要使用Maven工具进行构建打成war包后才能在服务器上运行</li><li>简单理解：java 源代码就是你在菜市场的买回家的菜，你买了之后并不是直接放嘴里就吃的，而是先回到家里进行一次加工后（Maven）才吃的。</li></ul><h3 id="2-jenkins手动部署java项目至web集群"><a href="#2-jenkins手动部署java项目至web集群" class="headerlink" title="2. jenkins手动部署java项目至web集群"></a>2. jenkins手动部署java项目至web集群</h3><h4 id="1-搭建Nginx-Tomcat-MySQL-Sonar-Qube-集群"><a href="#1-搭建Nginx-Tomcat-MySQL-Sonar-Qube-集群" class="headerlink" title="1. 搭建Nginx + Tomcat + MySQL + Sonar Qube 集群"></a>1. 搭建Nginx + Tomcat + MySQL + Sonar Qube 集群</h4><ul><li>这里前 nginx 和 tomcat 这两部分的机器我们就不用考虑了，因为我们在上面就已经准备好了，我们只需要重新配置一下 nginx 负载均衡并在另外两台机器上安装一下Tomcat就行了。至于 MySQL 和 Sonar Qube 的话，我这里因机器不够用了，所以就直接把 MySQL 部署到 dev1 主机上 Sonar Qube 部署到 dev2 上就行了，不会有什么影响。</li></ul><ol><li>修改lb的 nginx 配置文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@lb ~]<span class="comment"># vim /etc/nginx/conf.d/proxy_lb.lemon.com.conf</span></span><br><span class="line">upstream lb &#123;</span><br><span class="line">        server 192.168.2.4:8080;</span><br><span class="line">        server 192.168.2.5:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name lb.lemon.com;</span><br><span class="line">        root /code;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://lb;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                proxy_set_header X-Forward-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@lb ~]<span class="comment"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><ul><li>现在访问负载均衡的话会报502错误，这很正常，因为我们还没有部署tomcat</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwsxypdj313t052jri.jpg" alt="image-20200523092927454"></p><ol start="2"><li>在另外两台web节点上关闭 nginx 服务 并安装启动 Tomcat</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx</span><br><span class="line">tar xf jdk-8u181-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_181 /usr/<span class="built_in">local</span>/java</span><br><span class="line">cat &lt;&lt;<span class="string">END&gt;&gt; /etc/profile</span></span><br><span class="line"><span class="string">export JAVA_HOME=/usr/local/java</span></span><br><span class="line"><span class="string">export PATH=$JAVA_HOME/bin:$PATH</span></span><br><span class="line"><span class="string">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">tar xf apache-tomcat-8.5.32.tar.gz</span><br><span class="line">mv apache-tomcat-8.5.32 /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">/usr/<span class="built_in">local</span>/tomcat/bin/startup.sh </span><br><span class="line">netstat -anptu|grep <span class="string">&quot;8080&quot;</span></span><br><span class="line">tcp6       0      0 :::8080      :::*            LISTEN      1353/java</span><br></pre></td></tr></table></figure><ul><li>在访问一下负载均衡</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wwwr0i4j313t0hy40s.jpg" alt="image-20200523093055372"></p><ul><li>但是看不出来是否已经负载均衡了，我们去修改两个tomcat的页面就行了</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># vim /usr/local/tomcat/webapps/ROOT/index.jsp +52</span></span><br><span class="line">&lt;h2&gt;Tomcat web01-192.168.2.4&lt;/h2&gt;</span><br><span class="line"><span class="comment">#最好重启一下tomcat</span></span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># vim /usr/local/tomcat/webapps/ROOT/index.jsp +52</span></span><br><span class="line">&lt;h2&gt;Tomcat web02-192.168.2.5&lt;/h2&gt;</span><br><span class="line"><span class="comment">#最好重启一下tomcat</span></span><br></pre></td></tr></table></figure><ul><li>再来访问</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wx4ormhj313c0c10u1.jpg" alt="image-20200523093517896"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wx46jl9j313t0c4ac7.jpg" alt="image-20200523093549527"></p><ol start="3"><li>提前先在 dev1 节点上部署好 MySQL ，一会用的 Sonar Qube 的时候会使用，现在还用不上</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 ~]<span class="comment"># yum -y install mariadb-server</span></span><br><span class="line">[root@dev1 ~]<span class="comment"># systemctl start mariadb;systemctl enable mariadb</span></span><br><span class="line">[root@dev1 ~]<span class="comment"># mysqladmin -u root password &#x27;123123&#x27;</span></span><br><span class="line">[root@dev1 ~]<span class="comment"># mysql -uroot -p123123</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 8</span><br><span class="line">Server version: 5.5.65-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="2-新建一个gitlab的-hello-world-项目仓库"><a href="#2-新建一个gitlab的-hello-world-项目仓库" class="headerlink" title="2. 新建一个gitlab的 hello world 项目仓库"></a>2. 新建一个gitlab的 hello world 项目仓库</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wx9v2i6j313c0no40s.jpg" alt="image-20200523095831415"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxevzwrj60or01fdfm02.jpg" alt="image-20200523095953535"></p><h4 id="3-使用git将其java代码上传到hello-world仓库"><a href="#3-使用git将其java代码上传到hello-world仓库" class="headerlink" title="3. 使用git将其java代码上传到hello-world仓库"></a>3. 使用git将其java代码上传到hello-world仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@dev1 hello-world]<span class="comment"># pwd</span></span><br><span class="line">/root/hello-world</span><br><span class="line"></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># ll -a</span></span><br><span class="line">总用量 16</span><br><span class="line">-rw-r--r--  1 root root  700 12月 23 2018 .classpath</span><br><span class="line">-rw-r--r--  1 root root 1113 12月 23 2018 pom.xml</span><br><span class="line">-rw-r--r--  1 root root 1081 12月 23 2018 .project</span><br><span class="line">drwxr-xr-x  2 root root  322 6月  11 16:31 .settings</span><br><span class="line">drwxr-xr-x  3 root root   18 6月  11 16:31 src</span><br><span class="line">drwxr-xr-x  5 root root   56 6月  11 16:31 target</span><br><span class="line">-rw-r--r--  1 root root  491 12月 20 2018 time.java</span><br><span class="line"></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git init</span></span><br><span class="line">初始化空的 Git 版本库于 /root/hello-world/.git/</span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git add .</span></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git commit -m &quot;Initial commit&quot;</span></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git remote add origin git@gitlab.lemon.com:java/hello-world.git</span></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git push origin master</span></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git tag -a &quot;v1.1&quot; -m &quot;v1.1&quot;</span></span><br><span class="line">[root@dev1 hello-world]<span class="comment"># git push origin v1.1</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxlgnnsj61050nkq4x02.jpg" alt="image-20200611163415669"></p><h4 id="4-在jenkins上拉取gitlab代码后手动编译成war包"><a href="#4-在jenkins上拉取gitlab代码后手动编译成war包" class="headerlink" title="4. 在jenkins上拉取gitlab代码后手动编译成war包"></a>4. 在jenkins上拉取gitlab代码后手动编译成war包</h4><ul><li><p>安装maven，由于我之前就安装过了 <code>JDK</code>  和  <code>maven</code>，所以这里就不用安装了，直接跳过</p></li><li><p>克隆刚才上传的 java 项目 并 手动编译成war包</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># git clone git@gitlab.lemon.com:java/hello-world.git</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># cd hello-world/</span></span><br><span class="line"></span><br><span class="line">[root@jenkins hello-world]<span class="comment"># mvn package -D maven.test.skip=true      #-D 跳过测试用例</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxpspj5j314b0b875d.jpg" alt="image-20200523103930568"></p><ul><li>将其编译好的 <code>war包</code>  <code>scp</code> 到web节点的对应位置下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止两台tomcat服务</span></span><br><span class="line">[root@web01 ~]<span class="comment"># /usr/local/tomcat/bin/shutdown.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除tomcat默认页面</span></span><br><span class="line">[root@jenkins hello-world]<span class="comment"># for i in 192.168.2.&#123;4..5&#125;;do ssh root@$i &quot;rm -rf /usr/local/tomcat/webapps/ROOT&quot;; done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将编译好的test1.war包scp至web节点上</span></span><br><span class="line">[root@jenkins hello-world]<span class="comment"># for i in 192.168.2.&#123;4..5&#125;;do scp target/test1.war root@$i:/usr/local/tomcat/webapps/ROOT.war; done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看war包是否拷贝过去</span></span><br><span class="line">[root@jenkins hello-world]<span class="comment"># for i in 192.168.2.&#123;4..5&#125;;do ssh root@$i &quot;ls -h /usr/local/tomcat/webapps/ROOT*&quot;; done</span></span><br><span class="line">/usr/<span class="built_in">local</span>/tomcat/webapps/ROOT.war</span><br><span class="line">/usr/<span class="built_in">local</span>/tomcat/webapps/ROOT.war</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动两台tomcat服务；会自动生成一个ROOT网站目录</span></span><br><span class="line">[root@web01 ~]<span class="comment"># /usr/local/tomcat/bin/startup.sh</span></span><br><span class="line">[root@web01 ~]<span class="comment"># ll /usr/local/tomcat/webapps/</span></span><br><span class="line">总用量 32</span><br><span class="line">drwxr-x--- 14 root root  4096 6月  11 16:20 docs</span><br><span class="line">drwxr-x---  6 root root    83 6月  11 16:20 examples</span><br><span class="line">drwxr-x---  5 root root    87 6月  11 16:20 host-manager</span><br><span class="line">drwxr-x---  5 root root   103 6月  11 16:20 manager</span><br><span class="line">drwxr-x---  4 root root    54 6月  11 17:00 ROOT</span><br><span class="line">-rw-r--r--  1 root root 24711 6月  11 16:59 ROOT.war</span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7wxve23zj30qu04rq2x.jpg" alt="image-20200523105432256"></p><p>以上就是手动部署 java 代码的流程</p><h3 id="3-jenkins-自动化部署-java-项目至web集群"><a href="#3-jenkins-自动化部署-java-项目至web集群" class="headerlink" title="3. jenkins 自动化部署 java 项目至web集群"></a>3. jenkins 自动化部署 java 项目至web集群</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2021/06/06/MySQL/"/>
      <url>/2021/06/06/MySQL/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、MySQL数据库概念"><a href="#一、MySQL数据库概念" class="headerlink" title="一、MySQL数据库概念"></a>一、MySQL数据库概念</h1><blockquote><p>数据库（Database）</p></blockquote><p>数据库, 简而言之可视为电子化的文件柜—存储电子文件的处所, 用户可以对文件中的数据运行新增、截取、更新、删除等操作。</p><p>所谓 “数据库” 系以一定方式储存在一起、能予多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。</p><blockquote><p>数据库架构</p></blockquote><p>数据库的架构可以大致区分为三个概括层次：内层、概念层和外层。</p><ul><li><p>概念层：介于两者之间的间接层</p></li><li><p>外层：最接近用户，即有关个别用户观看数据的方式。</p></li><li><p>内层：最接近实际存储体，亦即有关数据的实际存储方式。</p></li></ul><h2 id="1-数据库管理系统（DBMS）"><a href="#1-数据库管理系统（DBMS）" class="headerlink" title="1. 数据库管理系统（DBMS）"></a>1. 数据库管理系统（DBMS）</h2><blockquote><p>数据库管理系统（Database Management System，简称DBMS）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能</p><p>数据库管理系统主要分为以下两类：</p></blockquote><h3 id="关系型数据库-RDB"><a href="#关系型数据库-RDB" class="headerlink" title="关系型数据库 RDB"></a>关系型数据库 RDB</h3><blockquote><p>关系数据库是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</p></blockquote><p>典型代表有：MySQL、Oracle、Microsoft SQL Server、Access及PostgreSQL等</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vgqbdn5j30q30fagoi.jpg" alt="image-20200822140302863"></p><p><strong>优点：</strong></p><p>1、易于维护：都是使用表结构，格式一致；</p><p>2、使用方便：SQL语言通用，可用于复杂查询；</p><p>3、复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</p><p><strong>缺点：</strong></p><p>1、因为事务所以读写性能比较差，尤其是海量数据的高效率读写；</p><p>2、固定的表结构，灵活度稍欠；</p><p>3、高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</p><h3 id="非关系型数据库-NoSQL"><a href="#非关系型数据库-NoSQL" class="headerlink" title="非关系型数据库 NoSQL"></a>非关系型数据库 NoSQL</h3><blockquote><p>非关系型数据库是对不同于传统的关系数据库的数据库管理系统的统称,与关系数据库最大的不同点是不使用SQL作为查询语言</p></blockquote><p>典型代表有：BigTable（Google）、Cassandra、MongoDB、CouchDB；</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vh20j3zj30t00fljwk.jpg" alt="image-20200822141054526"></p><p><strong>优点：</strong></p><p>1、存储数据的格式可以是key,value形式  文档形式  图片形式等等, 使用灵活, 应用场景广泛, 而关系型数据库则只支持基础类型。</p><p>2、速度快：nosql可以使用硬盘或者内存作为载体，而关系型数据库只能使用硬盘。</p><p>3、成本低：nosql数据库部署简单，基本都是开源软件。</p><p><strong>缺点：</strong></p><p>1、没有标准化</p><p>2、不提供sql支持，学习和使用成本较高。</p><p>3、数据结构相对复杂，复杂查询方面稍欠。</p><h3 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h3><blockquote><p>关系型数据库管理系统的具体应用场景和应用领域</p></blockquote><ul><li><p>sql server是微软公司的产品，主要应用于大中型企业；如联想、方正等</p></li><li><p>oracle主要用于银行、铁路、飞机场等。该数据库功能强大，软件费用高。也是甲骨文公司的产品。</p></li><li><p>mysql主要用于大型门户，例如搜狗、新浪等，它主要的优势就是开放源代码，因为开放源代码这个数据库是免费的，他现在是甲骨文公司的产品。</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vhdtyfwj30nn0ko7e8.jpg" alt="image-20200822142349042"></p><h2 id="2-关系型数据库遵循ACID规则"><a href="#2-关系型数据库遵循ACID规则" class="headerlink" title="2. 关系型数据库遵循ACID规则"></a>2. 关系型数据库遵循ACID规则</h2><blockquote><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：</p></blockquote><h3 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h3><p>事务可以是n条sql语句；n &gt;= 0 。</p><p>不是所有数据库引擎支持事务，InnoDB引擎支持事务处理。</p><p>事务就是由一组SQL语句组成的，保证一组SQL语句要么全部执行成功，要么全部执行失败，以此维护数据的完整性。也就是要么都成功要么都失败。</p><h3 id="事务的四大特性-transaction"><a href="#事务的四大特性-transaction" class="headerlink" title="事务的四大特性(transaction)"></a>事务的四大特性(transaction)</h3><p><strong>关系型数据库遵循 ACID 规则，和现实世界中的交易很类似，它有如下四个特性：</strong></p><ol><li>A (Atomicity) 原子性</li></ol><p>一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间的某个环节上。事务在执行过程中如果发生错误，就会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有被执行过一样。<br>比如银行转账：从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么都完成，要么都不完成；如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><ol start="2"><li>C (Consistency) 一致性</li></ol><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br>例如：现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，总和不会变；否则事务失败。</p><ol start="3"><li>I (Isolation) 独立性；也叫隔离性</li></ol><p>所谓的独立性是指并发多个事务之间保持数据的隔离，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。<br>比如：现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p><ol start="4"><li>D (Durability) 持久性</li></ol><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h3 id="没有事务隔离会怎样？"><a href="#没有事务隔离会怎样？" class="headerlink" title="没有事务隔离会怎样？"></a>没有事务隔离会怎样？</h3><p>脏读：比如事务A读到未提交事务B修改的数据，如果此时事务B中途执行失败回滚，那么此时事务A读取到的就是脏数据。再比如事务A对money进行修改，此时事务B读取到事务A的更新结果，但是如果后面事务A回滚，那么事务B读取到的就是脏数据了。</p><p>不可重复读：同一个事务中，对同一份数据读取的结果不一致。事务A在事务B对数据更新前进行读取，然后事务B更新提交，事务A再次读取，这时候两次读取的数据不同。</p><p>幻读：同一个事务中，同一个查询多次返回的结果不一样。事务B查询表的记录数，然后事务A对表插入一条记录，接着事务B再次查询发现记录数不同。</p><h3 id="他们之间的区别"><a href="#他们之间的区别" class="headerlink" title="他们之间的区别"></a>他们之间的区别</h3><p>脏读和不可重复读：脏读是zz事务读取了还未提交事务的更新数据。不可重复读是同一个事务中，几次读取的数据不同。</p><p>不可重复读和幻读的区别：都是在同一个事务中，前者是几次读取数据不同，后者是几次读取数据整体不同；大致的区别在于不可重复读是由于另一个事务对数据的更改所造成的，而幻读是由于另一个事务插入或删除引起的。</p><h3 id="隔离级别-重点"><a href="#隔离级别-重点" class="headerlink" title="隔离级别(重点)"></a>隔离级别(重点)</h3><table><thead><tr><th>隔离级别</th><th>作用</th></tr></thead><tbody><tr><td>Serializable(串行化)</td><td>避免脏读、不可重复读、幻读</td></tr><tr><td>Repeatable(可重复读)</td><td>避免脏读、不可重复读（默认）</td></tr><tr><td>Read committed(读已提交）</td><td>避免脏读</td></tr><tr><td>Read uncommitted(读未提交)</td><td>none</td></tr></tbody></table><h2 id="3-MySQL三大范式"><a href="#3-MySQL三大范式" class="headerlink" title="3. MySQL三大范式"></a>3. MySQL三大范式</h2><blockquote><p>分别是：原子性，唯一性，冗余性</p></blockquote><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>1NF是对属性的 <strong>原子性</strong>，要求属性具有原子性，不可再分解；</p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>2NF是对记录的 <strong>惟一性</strong>，要求记录有惟一标识，即实体的惟一性，即不存在部分依赖；</p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>3NF是对字段的 <strong>冗余性</strong>，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</p><h2 id="4-Mysql整体架构（重点）"><a href="#4-Mysql整体架构（重点）" class="headerlink" title="4. Mysql整体架构（重点）"></a>4. Mysql整体架构（重点）</h2><h3 id="MySQL架构图"><a href="#MySQL架构图" class="headerlink" title="MySQL架构图"></a>MySQL架构图</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vhjwgttj31110mde0w.jpg" alt="image-20200822144639498"></p><h3 id="MySQL组件作用"><a href="#MySQL组件作用" class="headerlink" title="MySQL组件作用"></a>MySQL组件作用</h3><p><strong>1、连接池（connectors）：</strong>最上层负责和客户端进行连接，比如jdbc，odbj这样的数据库连接的API，在这一层有连接池的概念，类似于线程池，连接池可以同时处理很多个数据库请求。同时这一层有SSL的安全概念，可以确保连接是安全的。</p><p>一句话，可以对这个产品进行二次开发及通过这个api接口去操作这个数据。</p><p><strong>2、SQL接口（SQL Interface）：</strong>当SQL语句进入MySQL后, 会先到SQL接口中，这一层是封装层，将传过来的SQL语句拆散，将底层的结果封装成SQL的数据格式。</p><p>一句话，就是对SQL语句进行封装，如果不封装，底层就不知道这条SQL语句是什么意思。</p><p><strong>3、解析器（parser）：</strong>这一层负责将SQL语句进行拆分，验证，如果语句有问题那么就返回错误，如果没问题就继续向下执行。</p><p>一句话，检查客户端敲的SQL语句是否正确。</p><p><strong>4、优化器（Optimizer）：</strong>对SQL查询的结果优化处理,产生多种执行计划,最终数据库会选择最优化的方案去执行,尽快返会结果</p><p>比如select a,b from c where d, 在这里会先查询c表中符合d的数据并将他们的ab项进行投影, 返回结果, 并不会直接把整张表查出</p><p><strong>5、缓存（caches &amp;Buffers）：</strong>对要查询的SQL语句进行hash后缓存，如果下一次是相同的查询语句，则会直接返回结果。</p><p>他的主要作用就是加快查询速度。</p><p><strong>6、存储引擎（pluggable Storage Englnes）：</strong>MySQL有很多种存储引擎，每一种存储引擎有不同的特性，他们负责组织文件的存放形式，位置，访问文件的方法等等。比较常用的有innoDB，MyISAM，MEMORY等；</p><p><strong>7、文件系统（File System）：</strong>真正存放物理文件的单位；</p><h2 id="5-MySQL常见的表引擎"><a href="#5-MySQL常见的表引擎" class="headerlink" title="5. MySQL常见的表引擎"></a>5. MySQL常见的表引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><blockquote><p>事务型速记的首选引擎，支持ACID事务，支持行级锁定，MySQL5.5成为默认数据库引擎</p></blockquote><p>（1）配合一些热备工具可以支持在线热备份；</p><p>（2）可以通过自动增长列，方法是auto_increment。</p><p>（3）使用的锁粒度为行级锁，可以支持更高的并发；</p><p>（4）支持外键约束；外键约束其实降低了表的查询速度，但是增加了表之间的耦合度。</p><p>（5）支持事务。默认的事务隔离级别为可重复度，通过MVCC（并发版本控制）来实现的。</p><p>（6）在InnoDB中存在着缓冲管理，通过缓冲池，将索引和数据全部缓存起来，加快查询的速度；</p><p>（7）对于InnoDB类型的表，所有的数据按照主键来组织。数据和索引放在一块，都位于B+树的叶子节点上；</p><h3 id="Myisam"><a href="#Myisam" class="headerlink" title="Myisam"></a>Myisam</h3><blockquote><p>使用这个存储引擎，每个MyISAM在磁盘上存储成三个文件。</p></blockquote><p>（1）frm文件：存储表的定义数据</p><p>（2）MYD文件：存放表具体记录的数据</p><p>（3）MYI文件：存储索引</p><h3 id="对比-InnoDB-和-Myisam"><a href="#对比-InnoDB-和-Myisam" class="headerlink" title="对比 InnoDB 和 Myisam"></a>对比 InnoDB 和 Myisam</h3><table><thead><tr><th>功能</th><th>MyISAM</th><th>InnoDB</th><th>MEMORY</th></tr></thead><tbody><tr><td>功能限制</td><td>256TB</td><td>64TB</td><td>RAM</td></tr><tr><td>支持事务</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>支持全文索引</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>支持B+树索引</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>支持哈希索引</td><td>NO</td><td>NO</td><td>YES</td></tr><tr><td>支持集群索引</td><td>NO</td><td>YES</td><td>NO</td></tr><tr><td>支持数据索引</td><td>NO</td><td>YES</td><td>YES</td></tr><tr><td>支持数据压缩</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>空间使用率</td><td>低</td><td>N/A</td><td>高</td></tr><tr><td>支持外键</td><td>NO</td><td>YES</td><td>NO</td></tr></tbody></table><h1 id="二、MySQL-安装部署"><a href="#二、MySQL-安装部署" class="headerlink" title="二、MySQL 安装部署"></a>二、MySQL 安装部署</h1><blockquote><p>MySQL官网地址：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p></blockquote><h2 id="1、初始化环境"><a href="#1、初始化环境" class="headerlink" title="1、初始化环境"></a>1、初始化环境</h2><table><thead><tr><th>系统类型</th><th>IP地址</th><th>主机名</th><th>所需软件</th><th>硬件</th></tr></thead><tbody><tr><td>Centos 7.4 1708 64bit</td><td>192.168.1.1</td><td>Mysql</td><td>mysql-5.7.12.tar.gzboost_1_59_0.tar.bz2</td><td>内存：2G     CPU核心：2</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 修改主机名</span><br><span class="line">[root@localhost ~]<span class="comment"># hostnamectl set-hostname mysql &amp;&amp; logout</span></span><br><span class="line"></span><br><span class="line">// 关闭firewald &amp; selinux</span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># setenforce 0</span></span><br><span class="line"></span><br><span class="line">// 添加mysql用户和组</span><br><span class="line">[root@mysql ~]<span class="comment"># groupadd mysql &amp;&amp; useradd -r -g mysql mysql</span></span><br><span class="line"></span><br><span class="line">// 移除系统自带数据库服务（没有请忽略）</span><br><span class="line">[root@mysql ~]<span class="comment"># yum -y remove mysql-* boost-*</span></span><br><span class="line">[root@mysql ~]<span class="comment"># rpm -qa mysql</span></span><br><span class="line">[root@mysql ~]<span class="comment"># rpm -qa boost</span></span><br></pre></td></tr></table></figure><h2 id="2、下载Mysql包"><a href="#2、下载Mysql包" class="headerlink" title="2、下载Mysql包"></a>2、下载Mysql包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 下载</span><br><span class="line">[root@mysql ~]<span class="comment"># cd /usr/local/src</span></span><br><span class="line">[root@mysql src]<span class="comment"># wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26.tar.gz</span></span><br><span class="line">[root@mysql src]<span class="comment"># ll -lrth</span></span><br><span class="line">总用量 52M</span><br><span class="line">-rw-r--r-- 1 root root 52M 4月  13 2019 mysql-5.7.26.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3、安装相关依赖包"><a href="#3、安装相关依赖包" class="headerlink" title="3、安装相关依赖包"></a>3、安装相关依赖包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql src]<span class="comment"># yum -y install cmake gcc gcc-c++ ncurses-devel bison zlib libxml openssl automake autoconf make libtool bison-devel libaio-devel</span></span><br></pre></td></tr></table></figure><h2 id="4、安装Boost"><a href="#4、安装Boost" class="headerlink" title="4、安装Boost"></a>4、安装Boost</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 下载boost包</span><br><span class="line">[root@mysql src]<span class="comment"># wget http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz</span></span><br><span class="line">[root@mysql src]<span class="comment"># ll -lrth</span></span><br><span class="line">总用量 132M</span><br><span class="line">-rw-r--r-- 1 root root 80M 8月  13 2015 boost_1_59_0.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 52M 4月  13 2019 mysql-5.7.26.tar.gz</span><br><span class="line"></span><br><span class="line">// 安装boost</span><br><span class="line">[root@mysql src]<span class="comment"># tar -xf boost_1_59_0.tar.gz &amp;&amp; mv boost_1_59_0 /usr/local/boost-1.59.0</span></span><br><span class="line">[root@mysql src]<span class="comment"># ll -lrth /usr/local/boost-1.59.0/</span></span><br><span class="line">总用量 108K</span><br><span class="line">drwxr-xr-x  10 501 games  190 8月  11 2015 tools</span><br><span class="line">drwxr-xr-x   2 501 games  141 8月  11 2015 status</span><br><span class="line">-rw-r--r--   1 501 games 2.6K 8月  11 2015 rst.css</span><br><span class="line">drwxr-xr-x   4 501 games  159 8月  11 2015 more</span><br><span class="line">-rw-r--r--   1 501 games 1.4K 8月  11 2015 LICENSE_1_0.txt</span><br><span class="line">-rw-r--r--   1 501 games  11K 8月  11 2015 Jamroot</span><br><span class="line">-rw-r--r--   1 501 games  291 8月  11 2015 INSTALL</span><br><span class="line">-rw-r--r--   1 501 games 5.4K 8月  11 2015 index.html</span><br><span class="line">-rw-r--r--   1 501 games  769 8月  11 2015 index.htm</span><br><span class="line">-rwxr-xr-x   1 501 games  11K 8月  11 2015 bootstrap.sh</span><br><span class="line">-rw-r--r--   1 501 games 2.5K 8月  11 2015 bootstrap.bat</span><br><span class="line">-rw-r--r--   1 501 games 6.2K 8月  11 2015 boost.png</span><br><span class="line">-rw-r--r--   1 501 games  989 8月  11 2015 boost.css</span><br><span class="line">-rw-r--r--   1 501 games  22K 8月  11 2015 boostcpp.jam</span><br><span class="line">-rw-r--r--   1 501 games  850 8月  11 2015 boost-build.jam</span><br><span class="line">drwx------   7 501 games   84 8月  12 2015 doc</span><br><span class="line">drwx------ 116 501 games 4.0K 8月  12 2015 libs</span><br><span class="line">drwxr-xr-x 105 501 games 8.0K 8月  12 2015 boost</span><br></pre></td></tr></table></figure><h2 id="5、编译安装MySQL"><a href="#5、编译安装MySQL" class="headerlink" title="5、编译安装MySQL"></a>5、编译安装MySQL</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 解压MySQL</span><br><span class="line">[root@mysql src]<span class="comment"># tar -xf mysql-5.7.26.tar.gz -C ./ &amp;&amp; cd mysql-5.7.26/</span></span><br><span class="line"></span><br><span class="line">// 编译安装MySQL</span><br><span class="line">[root@mysql mysql-5.7.26]<span class="comment"># cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span></span><br><span class="line">-DMYSQL_DATADIR=/usr/<span class="built_in">local</span>/mysql/data -DWITH_BOOST=/usr/<span class="built_in">local</span>/boost-1.59.0 \</span><br><span class="line">-DSYSCONFDIR=/etc -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 -DMYSQL_USER=mysql -DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 -DENABLE_DOWNLOADS=1 -DDOWNLOAD_BOOST=1 \</span><br><span class="line">&amp;&amp; make -j `cat /proc/cpuinfo | grep processor| wc -l` &amp;&amp; make install &amp;&amp; <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">// 参数含义</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql          [MySQL安装的根目录]</span><br><span class="line">-DMYSQL_DATADIR=/mydata/mysql/data               [MySQL数据库文件存放目录]</span><br><span class="line">-DDEFAULT_CHARSET=utf8                           [设置默认字符集为utf8]</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci              [设置默认字符校对]</span><br><span class="line">-DMYSQL_TCP_PORT=3306                            [MySQL的监听端口]</span><br><span class="line">-DMYSQL_USER=mysql                               [MySQL用户名]    </span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1                   [安装MySQL的myisam数据库引擎]</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1                 [安装MySQL的innodb数据库引擎]</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1                  [安装MySQL的archive数据库引擎]</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1      [安装MySQL的blackhole数据库引擎]</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1                   [安装MySQL的memory数据库引擎]</span><br><span class="line">-DENABLE_DOWNLOADS=1                             [编译时允许自主下载相关文件]</span><br><span class="line">-DDOWNLOAD_BOOST=1      [允许下载BOOST]</span><br><span class="line">-DWITH_BOOST=/usr/<span class="built_in">local</span>/boost      [指定系统中存在的BOOST]</span><br><span class="line">-DSYSCONFDIR=/etc                                [MySQL配置文件所在目录]</span><br><span class="line">-DWITH_READLINE=1                                [MySQL的readline library]</span><br><span class="line">-DMYSQL_UNIX_ADDR=/var/run/mysql/mysql.sock      [MySQL的通讯目录]</span><br><span class="line">-DENABLED_LOCAL_INFILE=1                         [启用加载本地数据]</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1           [启动mysql的分区存储结构]</span><br><span class="line">-DEXTRA_CHARSETS=all                             [使MySQL支持所有的扩展字符]</span><br><span class="line">-DWITH_DEBUG=0                                   [禁用调试模式]</span><br><span class="line">-DWITH_SSL:STRING=bundled                        [通讯时支持ssl协议]</span><br><span class="line">-DWITH_ZLIB:STRING=bundled                       [允许使用zlib library]</span><br></pre></td></tr></table></figure><h2 id="6、调整MySQL脚本程序"><a href="#6、调整MySQL脚本程序" class="headerlink" title="6、调整MySQL脚本程序"></a>6、调整MySQL脚本程序</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 拷贝MySQL的启动脚本</span><br><span class="line">[root@mysql ~]<span class="comment"># cp /usr/local/src/mysql-5.7.26/support-files/mysql.server /etc/init.d/</span></span><br><span class="line">[root@mysql ~]<span class="comment"># chmod +x /etc/init.d/mysql.server</span></span><br><span class="line"></span><br><span class="line">// 更改MySQL属主数组</span><br><span class="line">[root@mysql ~]<span class="comment"># chown -R mysql:mysql /usr/local/mysql</span></span><br><span class="line">[root@mysql ~]<span class="comment"># chown -R mysql:mysql /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line">// 编写服务控制脚本</span><br><span class="line">[root@mysql ~]<span class="comment"># cat &lt;&lt;END &gt;&gt;/usr/lib/systemd/system/mysqld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=mysqldapi</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.pid</span><br><span class="line">ExecStart=/etc/init.d/mysql.server start</span><br><span class="line">ExecReload=/etc/init.d/mysql.server restart</span><br><span class="line">ExecStop=/etc/init.d/mysql.server stop</span><br><span class="line">PrivateTmp=Flase</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">END</span><br><span class="line">[root@mysql ~]<span class="comment"># chmod a+x /usr/lib/systemd/system/mysqld.service</span></span><br><span class="line"></span><br><span class="line">// 注解：PrivateTmp=Flase   [此配置必须关闭，不然mysql连接文件mysql.sock文件会默认生成在以下位置/tmp/systemd-private-83bba738e8ff4837b5ae657eff983821-mysqld.service-BPxWpJ/tmp/mysql.sock，导致数据库无法连接，将此配置项关闭后，则文件正常生成在/tmp/mysql.sock。]</span><br><span class="line"></span><br><span class="line">// 添加MySQL环境变脸</span><br><span class="line">[root@mysql ~]<span class="comment"># echo &quot;export PATH=$PATH:/usr/local/mysql/bin/&quot; &gt;&gt; /etc/profile</span></span><br><span class="line">[root@mysql ~]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line">// 编写MySQL配置文件并创建相关目录</span><br><span class="line">[root@mysql ~]<span class="comment"># mkdir /usr/local/mysql/logs</span></span><br><span class="line">[root@mysql ~]<span class="comment"># chown mysql:mysql /usr/local/mysql/logs/</span></span><br><span class="line">[root@mysql ~]<span class="comment"># cat &lt;&lt;END &gt;/etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">log-error=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.log</span><br><span class="line">pid-file=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.pid</span><br><span class="line">skip-name-resolve</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">// 配置含义</span><br><span class="line">[mysqld]                            [声明区域]</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql                    [mysql的安装位置]</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data                    [mysql的数据库存放位置]</span><br><span class="line">port = 3306                        [mysql服务监听的端口]</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[mysql的模式]</span><br><span class="line">character_set_server=utf8                        [默认字符集]</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span>                [默认字符集]</span><br><span class="line">log-error=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.log            [指定日志文件位置]</span><br><span class="line">pid-file=/usr/<span class="built_in">local</span>/mysql/logs/mysqld.pid            [指定运行服务所产生的pid文件位置]</span><br><span class="line">skip-name-resolve                    [跳过mysql的域名反向解析]</span><br></pre></td></tr></table></figure><h2 id="7、初始化MySQL数据库并启动服务"><a href="#7、初始化MySQL数据库并启动服务" class="headerlink" title="7、初始化MySQL数据库并启动服务"></a>7、初始化MySQL数据库并启动服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 初始化</span><br><span class="line">[root@mysql ~]<span class="comment"># mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql \</span></span><br><span class="line">--datadir=/usr/<span class="built_in">local</span>/mysql/data &amp;&amp; <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line">// 参数含义</span><br><span class="line">--initialize-insecure         [禁用mysql的密码策略（密码复杂性等）]</span><br><span class="line">--initialize-aize                   [是开启密码策略，自动生成密码在mysqld.log文件中]</span><br><span class="line">--user=mysql [运行的账户]</span><br><span class="line">--basedir=/usr/<span class="built_in">local</span>/mysql [mysql的安装位置]</span><br><span class="line">--datadir=/usr/<span class="built_in">local</span>/mysql/data[mysql数据库服务数据的物理存放路径]</span><br><span class="line"></span><br><span class="line">// 启动MySQL服务</span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl start mysqld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl enable mysqld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># netstat -utpln |grep mysqld</span></span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      46166/mysqld</span><br></pre></td></tr></table></figure><h2 id="8、修改MySQL密码并连接访问数据库"><a href="#8、修改MySQL密码并连接访问数据库" class="headerlink" title="8、修改MySQL密码并连接访问数据库"></a>8、修改MySQL密码并连接访问数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 设置MySQL密码</span><br><span class="line">[root@mysql ~]<span class="comment"># mysqladmin -uroot -p password &quot;abc123..&quot;</span></span><br><span class="line"></span><br><span class="line">// 连接数据库</span><br><span class="line">[root@mysql ~]<span class="comment"># mysql -uroot -pabc123..</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 9</span><br><span class="line">Server version: 5.7.26 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>至此MySQL安装完毕</p><h1 id="三、MySQL-配置文件详解"><a href="#三、MySQL-配置文件详解" class="headerlink" title="三、MySQL 配置文件详解"></a>三、MySQL 配置文件详解</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#user = mysql</span></span><br><span class="line">mysql以什么用户运行</span><br><span class="line"></span><br><span class="line"><span class="comment">#port = 3306   </span></span><br><span class="line">mysql运行在哪个端口</span><br><span class="line"></span><br><span class="line"><span class="comment">#datadir = /usr/loca/mysql/data/</span></span><br><span class="line">mysql的数据目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#socket=/tmp/mysql.sock</span></span><br><span class="line">mysql以socket方式运行的sock文件位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#symbolic-links=0</span></span><br><span class="line">是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启。</span><br><span class="line"></span><br><span class="line"><span class="comment">########基本配置########</span></span><br><span class="line"><span class="comment">#server-id = 11</span></span><br><span class="line">mysql的服务器分配id，在启用主从和集群的时候必须指定，每个节点必须不同</span><br><span class="line"></span><br><span class="line"><span class="comment">#bind_address = 10.166.224.32</span></span><br><span class="line">mysql监听的ip地址，如果是127.0.0.1，表示仅本机访问</span><br><span class="line"></span><br><span class="line"><span class="comment">#autocommit = 1</span></span><br><span class="line">数据修改是否自动提交，为0不自动提交</span><br><span class="line"></span><br><span class="line"><span class="comment">#character_set_server=utf8mb4</span></span><br><span class="line">服务器使用的字符集</span><br><span class="line"></span><br><span class="line"><span class="comment">#skip_name_resolve = 1</span></span><br><span class="line">禁用DNS主机名查找，启用以后用内网地址向mysqlslap请求响应快了一半</span><br><span class="line"></span><br><span class="line"><span class="comment">#max_connections = 800</span></span><br><span class="line">mysql最大连接数</span><br><span class="line"></span><br><span class="line"><span class="comment">#max_connect_errors = 10</span></span><br><span class="line">某台host连接错误次数等于max_connect_errors（默认10） ，主机<span class="string">&#x27;host_name&#x27;</span>再次尝试时被屏蔽；可有效反的防止dos攻击。</span><br><span class="line"></span><br><span class="line"><span class="comment">#transaction_isolation = READ-COMMITTED</span></span><br><span class="line">数据库事务隔离级别</span><br><span class="line">1.READ-UNCOMMITTED(读取未提交内容)级别</span><br><span class="line">2.READ-COMMITTED（读取提交内容）</span><br><span class="line">3.REPEATABLE-READ(可重读)</span><br><span class="line">4.SERIERLIZED(可串行化)</span><br><span class="line">默认级别REPEATABLE-READ</span><br><span class="line"></span><br><span class="line"><span class="comment">#explicit_defaults_for_timestamp = 1</span></span><br><span class="line">mysql中TIMESTAMP类型和其他的类型有点不一样(在没有设置explicit_defaults_for_timestamp=1的情况下）。</span><br><span class="line"></span><br><span class="line"><span class="comment">#join_buffer_size = 128M</span></span><br><span class="line">当我们的join是ALL,index,rang或者Index_merge的时候使用的buffer。 实际上这种join被称为FULL JOIN。</span><br><span class="line"></span><br><span class="line"><span class="comment">#tmp_table_size = 128M</span></span><br><span class="line">规定了内部内存临时表的最大值，每个线程都要分配。（实际起限制作用的是tmp_table_size和max_heap_table_size的最小值。）如果内存临时表超出了限制，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下。</span><br><span class="line"></span><br><span class="line"><span class="comment">#tmpdir = /dev/shm/mysql-tmp/</span></span><br><span class="line">保存临时文件的目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#max_allowed_packet = 16M</span></span><br><span class="line">mysql最大接受的数据包大小</span><br><span class="line"></span><br><span class="line"><span class="comment">#sql_mode = &quot;STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER&quot;</span></span><br><span class="line">sql_mode 模式，定义了你MySQL应该支持的sql语法，对数据的校验等等，限制一些所谓的‘不合法’的操作。</span><br><span class="line"></span><br><span class="line"><span class="comment">#interactive_timeout = 60</span></span><br><span class="line">服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。</span><br><span class="line"></span><br><span class="line"><span class="comment">#wait_timeout = 60</span></span><br><span class="line">服务器关闭非交互连接之前等待活动的秒数，在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。</span><br><span class="line"></span><br><span class="line"><span class="comment">#read_buffer_size = 16M</span></span><br><span class="line">读入缓冲区的大小，将对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。</span><br><span class="line"></span><br><span class="line"><span class="comment">#read_rnd_buffer_size = 32M</span></span><br><span class="line">随机读缓冲区大小，当按任意顺序读取行时（列如按照排序顺序）将分配一个随机读取缓冲区，进行排序查询时，MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度</span><br><span class="line"></span><br><span class="line"><span class="comment">#sort_buffer_size = 32M</span></span><br><span class="line">是一个connection级参数，在每个connection第一次需要使用这个buffer的时候，一次性分配设置的内存。</span><br><span class="line"></span><br><span class="line"><span class="comment">########日志配置########</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log_error = /data/local/mysql-5.7.19/log/mysql-error.log</span></span><br><span class="line">错误日志位置</span><br><span class="line"></span><br><span class="line">slow_query_log = 1</span><br><span class="line">是否开启慢查询日志收集</span><br><span class="line">slow_query_log_file = /data/<span class="built_in">local</span>/mysql-5.7.19/<span class="built_in">log</span>/mysql-slow.log</span><br><span class="line">慢查询日志位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_queries_not_using_indexes = 1</span></span><br><span class="line">是否记录未使用索引的语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_slow_admin_statements = 1</span></span><br><span class="line">慢查询也记录那些慢的optimize table，analyze table和alter table语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_slow_slave_statements = 1</span></span><br><span class="line">记录由Slave所产生的慢查询</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_throttle_queries_not_using_indexes = 10</span></span><br><span class="line">设定每分钟记录到日志的未使用索引的语句数目，超过这个数目后只记录语句数量和花费的总时间。</span><br><span class="line"></span><br><span class="line"><span class="comment">#expire_logs_days = 90</span></span><br><span class="line">日志自动过期清理天数</span><br><span class="line"></span><br><span class="line"><span class="comment">#long_query_time = 1</span></span><br><span class="line">设置记录慢查询超时时间</span><br><span class="line"></span><br><span class="line"><span class="comment">#min_examined_row_limit = 100</span></span><br><span class="line">查询检查返回少于该参数指定行的SQL不被记录到慢查询日志</span><br><span class="line"></span><br><span class="line"><span class="comment">########复制集配置########</span></span><br><span class="line"><span class="comment">#master_info_repository = TABLE</span></span><br><span class="line">从机保存主节点信息方式，设成file时 会生成master.info 和 relay-log.info2个文件，设成table，信息就会存在mysql.master_slave_info表中。不管是设置的哪种值，都不要移动或者编辑相关的文件和表。</span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log_info_repository = TABLE</span></span><br><span class="line">用于保存slave读取relay <span class="built_in">log</span>的位置信息，可选值为“FILE”、“TABLE”，以便crash重启后继续恢复。</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_bin = /data/local/mysql-5.7.19/log/mysql-bin</span></span><br><span class="line">binlog的保存位置，不能指定确定的文件名如mysql-bin.log，只能指定位置和前缀，会生成以前缀为开头的一系列文件；默认生成在data目录下。</span><br><span class="line"></span><br><span class="line"><span class="comment">#sync_binlog = 4</span></span><br><span class="line">这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。对于“sync_binlog”参数的各种设置的说明如下：</span><br><span class="line">sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘；sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘；在MySQL中系统默认的设置是sync_binlog=0，也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。</span><br><span class="line"></span><br><span class="line"><span class="comment">#gtid_mode = on</span></span><br><span class="line">启用gtid类型，否则就是普通的复制架构</span><br><span class="line"></span><br><span class="line"><span class="comment">#enforce_gtid_consistency = 1</span></span><br><span class="line">强制GTID的一致性</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_slave_updates</span></span><br><span class="line">slave更新是否记入日志，在做双主架构时异常重要，影响到双主架构是否能互相同步</span><br><span class="line">binlog_format = row；binlog日志格式，可选值“MIXED”、“ROW”、“STATEMENT”，在5.6版本之前默认为“STATEMENT”，5.6之后默认为“MIXED”；因为“STATEMENT”方式在处理一些“不确定”性的方法时会造成数据不一致问题，我们建议使用“MIXED”或者“ROW”。</span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log = /data/local/mysql-5.7.19/log/mysql-relay.log</span></span><br><span class="line">从机保存同步中继日志的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log_recovery = 1</span></span><br><span class="line">当slave从库宕机后，假如relay-log损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的relay-log，并且重新从master上获取日志，这样就保证了relay-log的完整性。</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog_gtid_simple_recovery = 1</span></span><br><span class="line">这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快。</span><br><span class="line"></span><br><span class="line"><span class="comment">#slave_skip_errors = ddl_exist_errors</span></span><br><span class="line">跳过指定error no类型的错误，设成all 跳过所有错误</span><br><span class="line"></span><br><span class="line"><span class="comment">########innodb引擎配置########</span></span><br><span class="line"></span><br><span class="line">innodb_page_size = 16K</span><br><span class="line">innodb每个数据页大小，这个参数在一开始初始化时就要加入my.cnf里，如果已经创建了表，再修改，启动MySQL会报错。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_size = 4G</span></span><br><span class="line">缓存innodb表的索引，数据，插入数据时的缓冲，专用mysql服务器设置的大小： 操作系统内存的70%-80%最佳。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_instances = 8</span></span><br><span class="line">可以开启多个内存缓冲池，把需要缓冲的数据<span class="built_in">hash</span>到不同的缓冲池，这样可以并行的内存读写</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_load_at_startup = 1</span></span><br><span class="line">默认为关闭OFF。如果开启该参数，启动MySQL服务时，MySQL将本地热数据加载到InnoDB缓冲池中。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_dump_at_shutdown = 1</span></span><br><span class="line">默认为关闭OFF。如果开启该参数，停止MySQL服务时，InnoDB将InnoDB缓冲池中的热数据保存到本地硬盘。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_lru_scan_depth = 2000</span></span><br><span class="line">根据 官方文档 描述，它会影响page cleaner线程每次刷脏页的数量， 这是一个每1秒 loop一次的线程。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_lock_wait_timeout = 5</span></span><br><span class="line">事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败；参数的时间单位是秒。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_io_capacity = 4000</span></span><br><span class="line"><span class="comment">#innodb_io_capacity_max = 8000</span></span><br><span class="line">这两个设置会影响InnoDB每秒在后台执行多少操作. 大多数写IO(除了写InnoDB日志)是后台操作的. 如果你深度了解硬件性能(如每秒可以执行多少次IO操作),则使用这些功能是很可取的,而不是让它闲着。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_flush_method = O_DIRECT</span></span><br><span class="line">默认值为 fdatasync. 如果使用 硬件RAID磁盘控制器, 可能需要设置为 O_DIRECT. 这在读取InnoDB缓冲池时可防止“双缓冲(double buffering)”效应,否则会在文件系统缓存与InnoDB缓存间形成2个副本(copy). 如果不使用硬件RAID控制器,或者使用SAN存储时, O_DIRECT 可能会导致性能下降。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_log_group_home_dir = /data/local/mysql-5.7.19/log/redolog/</span></span><br><span class="line">innodb重做日志保存目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_directory = /data/local/mysql-5.7.19/log/undolog/</span></span><br><span class="line">innodb回滚日志保存目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_logs = 128</span></span><br><span class="line">undo回滚段的数量， 至少大于等于35，默认128</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_tablespaces = 0</span></span><br><span class="line">用于设定创建的undo表空间的个数，在mysql_install_db时初始化后，就再也不能被改动了；默认值为0，表示不独立设置undo的tablespace，默认记录到ibdata中；否则，则在undo目录下创建这么多个undo文件，例如假定设置该值为4，那么就会创建命名为undo001~undo004的undo tablespace文件，每个文件的默认大小为10M。修改该值会导致Innodb无法完成初始化，数据库无法启动，但是另两个参数可以修改。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_flush_neighbors = 1</span></span><br><span class="line">InnoDB存储引擎在刷新一个脏页时，会检测该页所在区(extent)的所有页，如果是脏页，那么一起刷新。这样做的好处是通过AIO可以将多个IO写操作合并为一个IO操作。对于传统机械硬盘建议使用，而对于固态硬盘可以关闭。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_log_file_size = 4G</span></span><br><span class="line">这个值定义了日志文件的大小，innodb日志文件的作用是用来保存redo日志。一个事务对于数据或索引的修改往往对应到表空间中的随机的位置，因此当刷新这些修改到磁盘中就会引起随机的I/O，而随机的I/O往往比顺序的I/O更加昂贵的开销，因为随机的I/O需要更多的开销来定位到指定的位置。innodb使用日志来将随机的I/O转为顺序的I/O，只要日志文件是安全的，那么事务就是永久的，尽管这些改变还没有写到数据文件中，如果出现了当机或服务器断电的情况，那么innodb也可以通过日志文件来恢复以及提交的事务。但是日志文件是有一定的大小的，所以必须要把日志文件记录的改变写到数据文件中，innodb对于日志文件的操作是循环的，即当日志文件写满后，会将指针重新移动到文件开始的地方重新写，但是它不会覆盖那些还没有写到数据文件中的日志，因为这是唯一记录了事务持久化的记录；如果对 Innodb 数据表有大量的写入操作，那么选择合适的 innodb_log_file_size 值对提升MySQL性能很重要。然而设置太大了，就会增加恢复的时间，因此在MySQL崩溃或者突然断电等情况会令MySQL服务器花很长时间来恢复。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_log_buffer_size = 16M</span></span><br><span class="line">事务在内存中的缓冲。 分配原 则：控制在2-8M.这个值不用太多的。他里面的内存一般一秒钟写到磁盘一次。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_purge_threads = 4</span></span><br><span class="line">控制是否使用，使用几个独立purge线程（清除二进制日志）</span><br><span class="line"></span><br><span class="line">innodb_large_prefix = 1</span><br><span class="line">mysql在5.6之前一直都是单列索引限制767，起因是256×3-1。这个3是字符最大占用空间（utf8）。但是在5.6以后，开始支持4个字节的uutf8。255×4&gt;767, 于是增加了这个参数。这个参数默认值是OFF。当改为ON时，允许列索引最大达到3072；innodb_thread_concurrency = 64；InnoDB kernel并发最大的线程数。 1) 最少设置为(num_disks+num_cpus)*2。 2) 可以通过设置成1000来禁止这个限制。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_print_all_deadlocks = 1</span></span><br><span class="line">是否将死锁相关信息保存到MySQL 错误日志中</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_strict_mode = 1</span></span><br><span class="line">开启InnoDB严格检查模式，尤其采用了页数据压缩功能后，最好是开启该功能。开启此功能后，当创建表（CREATE TABLE）、更改表（ALTER TABLE）和创建索引（CREATE INDEX）语句时，如果写法有错误，不会有警告信息，而是直接抛出错误，这样就可直接将问题扼杀在摇篮里。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_sort_buffer_size = 64M</span></span><br><span class="line">ORDER BY 或者GROUP BY 操作的buffer缓存大小</span><br><span class="line"></span><br><span class="line"><span class="comment">########半同步复制配置########</span></span><br><span class="line"><span class="comment">#plugin_dir=/data/local/mysql-5.7.19/lib/plugin</span></span><br><span class="line">指定mysql的插件目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#plugin_load = &quot;rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so&quot;</span></span><br><span class="line">指定载入哪些插件</span><br><span class="line"></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_master_enabled = 1</span></span><br><span class="line">控制主库上是否开启semisync</span><br><span class="line"></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_slave_enabled = 1</span></span><br><span class="line">控制备库是否开启semisync</span><br><span class="line"></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_master_timeout = 5000</span></span><br><span class="line">单位毫秒，防止半同步复制在没有收到确认的情况下，发送堵塞。master在超时之前没有收到确认，将恢复到异步复制，继续执行半同步没有进行的操作。</span><br><span class="line"></span><br><span class="line"><span class="comment">#[mysqld-5.7]</span></span><br><span class="line">服务端</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_buffer_pool_dump_pct = 40</span></span><br><span class="line">表示转储每个bp instance LRU上最热的page的百分比。通过设置该参数减少转储的page数</span><br><span class="line"></span><br><span class="line">innodb_page_cleaners = 4</span><br><span class="line">为了提升扩展性和刷脏效率，在5.7.4版本里引入了多个page cleaner线程。从而达到并行刷脏的效果；在该版本中，Page cleaner并未和buffer pool绑定，其模型为一个协调线程 + 多个工作线程，协调线程本身也是工作线程。因此如果innodb_page_cleaners设置为8，那么就是一个协调线程，加7个工作线程。</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_undo_log_truncate = 1</span></span><br><span class="line">是否开启在线回收（收缩）undo <span class="built_in">log</span>日志文件，支持动态设置</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_max_undo_log_size = 2G</span></span><br><span class="line">当超过这个阀值（默认是1G），会触发truncate回收（收缩）动作，truncate后空间缩小到10M</span><br><span class="line"></span><br><span class="line"><span class="comment">#innodb_purge_rseg_truncate_frequency = 128</span></span><br><span class="line">控制回收（收缩）undo <span class="built_in">log</span>的频率。undo <span class="built_in">log</span>空间在它的回滚段没有得到释放之前不会收缩， 想要增加释放回滚区间的频率，就得降低设定值。</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog_gtid_simple_recovery=1</span></span><br><span class="line">这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快。该参数为真时，mysql-server只需打开最老的和最新的这2个binlog文件。</span><br><span class="line"></span><br><span class="line">log_timestamps=system</span><br><span class="line">在MySQL 5.7.2 新增了 log_timestamps 这个参数，该参数主要是控制 error <span class="built_in">log</span>、genera <span class="built_in">log</span>，等等记录日志的显示时间参数。 在 5.7.2 之后改参数为默认 UTC 这样会导致日志中记录的时间比中国这边的慢，导致查看日志不方便。修改为 SYSTEM 就能解决问题。</span><br><span class="line"></span><br><span class="line"><span class="comment">#transaction_write_set_extraction=MURMUR32</span></span><br><span class="line">这个神奇的参数5.7.6版本引入，用于定义一个记录事务的算法，这个算法使用<span class="built_in">hash</span>标识来记录事务。如果使用MGR，那么这个<span class="built_in">hash</span>值需要用于分布式冲突检测何处理，在64位的系统，官网建议设置该参数使用 XXHASH64 算法。如果线上并没有使用该功能，应该设为off。</span><br><span class="line"></span><br><span class="line"><span class="comment">#show_compatibility_56=on</span></span><br><span class="line">从mysql5.7.6开始information_schema.global_status已经开始被舍弃，为了兼容性，此时需要打开 show_compatibility_56。</span><br></pre></td></tr></table></figure><h1 id="四、SQL语句"><a href="#四、SQL语句" class="headerlink" title="四、SQL语句"></a>四、SQL语句</h1><blockquote><p>一般来讲SQL 语言主要分为三类:</p></blockquote><p>DML 数据操控 : 用来对数据进行操作，用于（表中的内容），代表指令为：insert（插入）、delete（删除）、update（更新）。</p><p>DCL 数据控制 : 主要是负责（用户）权限管理，代表指令为：grant（授权）、revoke（撤销授权）。</p><p>DDL 数据定义 : 维护储存数据的结构，用于（数据库、数据表），代表指令为：create（创建）、drop（删除）、alter（修改）。</p><h2 id="1、SQL语句规范"><a href="#1、SQL语句规范" class="headerlink" title="1、SQL语句规范"></a>1、SQL语句规范</h2><h3 id="SQL语句规范第一条-建库"><a href="#SQL语句规范第一条-建库" class="headerlink" title="SQL语句规范第一条(建库)"></a>SQL语句规范第一条(建库)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE oldboy CHARSET utf8mb4</span><br></pre></td></tr></table></figure><ol><li>关键字大写(非必须), 字面量小写(必须)</li><li>库名字, 只能是小写, 不能有数字开头, 不能是预留关键字</li><li>库名字必须和业务名有关, 例如his_user</li><li>必须加字符集</li></ol><h3 id="SQL语句规范第二条-建表"><a href="#SQL语句规范第二条-建表" class="headerlink" title="SQL语句规范第二条(建表)"></a>SQL语句规范第二条(建表)</h3><ol><li>关键字大写(非必须), 字面量小写(必须)</li><li>表名必须小写, 不能有数字开头, 不能是预留关键字</li><li>表名字必须和业务名有关</li><li>必须加存储引擎和字符集</li><li>适合的数据类型</li><li>必须要有主键</li><li>尽量非空选项</li><li>字段唯一性</li><li>必须加注释</li><li>避免使用外键</li><li>建立合理的索引</li></ol><h3 id="SQL语句规范第三条-增删改"><a href="#SQL语句规范第三条-增删改" class="headerlink" title="SQL语句规范第三条(增删改)"></a>SQL语句规范第三条(增删改)</h3><ol><li>insert语句按批量插入数据</li><li>update必须加where条件</li><li>delete尽量替换为update</li><li>如果有清空全表需求, 不要用delete, 推荐使用 truncate</li></ol><h3 id="SQL语句规范第四条-查询"><a href="#SQL语句规范第四条-查询" class="headerlink" title="SQL语句规范第四条(查询)"></a>SQL语句规范第四条(查询)</h3><ol><li>select语句避免使用 select *  from  t1; —-&gt;  select id,name from t1</li><li>select语句尽量加等值的where条件.例如 select * from t1 where id=20</li><li>select 语句对于范围查询, 例如 select * from t1 where id&gt;200; 尽量添加limit</li><li>select 的where 条件  不要使用 &lt;&gt;  like ‘%name’  not in  not exist</li><li>不要出现3表以上的表连接,避免子查询</li><li>where条件中不要出现函数操作</li></ol><h3 id="SQL语句规范第五条-数据类型"><a href="#SQL语句规范第五条-数据类型" class="headerlink" title="SQL语句规范第五条(数据类型)"></a>SQL语句规范第五条(数据类型)</h3><ol><li>合适长度</li><li>选择合适的数据类型</li><li>少于10位的数字int , 大于10位数 char, 例如手机号</li><li>在可变长度的存储时, 将来使用不同的数据类型, 对于索引树的高度是有影响的</li><li>char和varchar选择时, 字符长度一定不变的可以使用char, 可变的尽量使用varchar</li></ol><h2 id="2、MySQL数据类型和字段属性"><a href="#2、MySQL数据类型和字段属性" class="headerlink" title="2、MySQL数据类型和字段属性"></a>2、MySQL数据类型和字段属性</h2><blockquote><p>MySQL中的数据类型大的方面来分，可以分为：日期和时间、数值，以及字符串。下面就分开来进行总结。</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h4><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>3字节，日期，格式：2014-09-18</td></tr><tr><td>time</td><td>3字节，时间，格式：08:42:30</td></tr><tr><td>datetime</td><td>8字节，日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td>timestamp</td><td>4字节，自动存储记录修改的时间</td></tr><tr><td>year</td><td>1字节，年份</td></tr></tbody></table><h4 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h4><p><strong>整型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义（有符号）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节，范围（-128~127）</td></tr><tr><td>smallint</td><td>2字节，范围（-32768~32767）</td></tr><tr><td>mediumint</td><td>3字节，范围（-8388608~8388607）</td></tr><tr><td>int</td><td>4字节，范围（-2147483648~2147483647）</td></tr><tr><td>bigint</td><td>8字节，范围（+-9.22*10的18次方）</td></tr></tbody></table><p>上面定义的都是有符号的，当然了，也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了，比如：tinyint unsigned的取值范围为0~255。</p><p><strong>浮点型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m, d)</td><td>4字节，单精度浮点型，m总个数，d小数位</td></tr><tr><td>double(m, d)</td><td>8字节，双精度浮点型，m总个数，d小数位</td></tr><tr><td>decimal(m, d)</td><td>decimal是存储为字符串的浮点数</td></tr></tbody></table><p>我在MySQL中建立了一个表，有一列为float(5, 3)；做了以下试验：</p><p>1.插入123.45678，最后查询得到的结果为99.999；<br> 2.插入123.456，最后查询结果为99.999；<br> 3.插入12.34567，最后查询结果为12.346；</p><p>所以，在使用浮点型的时候，还是要注意陷阱的，要以插入数据库中的实际结果为准。</p><p><strong>字符串数据类型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>可变长度，最多65535个字符</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr></tbody></table><h4 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h4><ul><li><p>经常变化的字段用 varchar</p></li><li><p>知道固定长度的用 char</p></li><li><p>尽量用 varchar</p></li><li><p>超过 255 字符的只能用 varchar 或者 text</p></li><li><p>能用 varchar 的地方不用 text</p></li></ul><h3 id="数据类型属性"><a href="#数据类型属性" class="headerlink" title="数据类型属性"></a>数据类型属性</h3><h4 id="auto-increment"><a href="#auto-increment" class="headerlink" title="auto_increment"></a>auto_increment</h4><blockquote><p>auto_increment能为新插入的行赋一个唯一的整数标识符。为列赋此属性将为每个新插入的行赋值为上一次插入的ID+1。</p><p>MySQL要求将auto_increment属性用于作为主键的列。此外，每个表只允许有一个auto_increment列。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="type">smallint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key</span><br></pre></td></tr></table></figure><h4 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h4><blockquote><p>binary属性只用于char和varchar值。当为列指定了该属性时，将以区分大小写的方式排序。与之相反，忽略binary属性时，将使用不区分大小写的方式排序。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname <span class="type">char</span>(<span class="number">25</span>) <span class="type">binary</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><blockquote><p>default属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为MySQL不允许插入函数或表达式值。此外，此属性无法用于BLOB或TEXT列。如果已经为此列指定了NULL属性，没有指定默认值时默认值将为NULL，否则默认值将依赖于字段的数据类型。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribed enum(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><blockquote><p>如果所有其他因素都相同，要加速数据库查询，使用索引通常是最重要的一个步骤。索引一个列会为该列创建一个有序的键数组，每个键指向其相应的表行。以后针对输入条件可以搜索这个有序的键数组，与搜索整个未索引的表相比，这将在性能方面得到极大的提升。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees</span><br><span class="line">(</span><br><span class="line">id <span class="type">varchar</span>(<span class="number">9</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">firstname <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">lastname <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">email <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">phone <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">index lastname(lastname),</span><br><span class="line"><span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当然也可以利用MySQL的create index命令在创建表之后增加索引:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index lastname <span class="keyword">on</span> employees (lastname(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">这一次只索引了名字的前<span class="number">7</span>个字符，因为可能不需要其它字母来区分不同的名字。因为使用较小的索引时性能更好，所以应当在实践中尽量使用小的索引。</span><br></pre></td></tr></table></figure><h4 id="not-null"><a href="#not-null" class="headerlink" title="not null"></a>not null</h4><blockquote><p>如果将一个列定义为not null，将不允许向该列插入null值。建议在重要情况下始终使用not null属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users (name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h4 id="null（默认就是）"><a href="#null（默认就是）" class="headerlink" title="null（默认就是）"></a>null（默认就是）</h4><blockquote><p>为列指定null属性时, 该列可以保持为空, 而不论行中其它列是否已经被填充。记住, null精确的说法是“无”, 而不是空字符串或0</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users (name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h4><blockquote><p>primary key属性用于确保指定行的唯一性。指定为主键的列中, 值不能重复, 也不能为空。为指定为主键的列赋予auto_increment属性是很常见的，因为此列不必与行数据有任何关系，而只是作为一个唯一标识符。</p></blockquote><p>主键又分为以下两种：</p><p>(1)单字段主键</p><p>如果输入到数据库中的每行都已经有不可修改的唯一标识符，一般会使用单字段主键。注意，此主键一旦设置就不能再修改。</p><p>(2)多字段主键</p><p>如果记录中任何一个字段都不可能保证唯一性，就可以使用多字段主键。这时，多个字段联合起来确保唯一性。如果出现这种情况，指定一个auto_increment整数作为主键是更好的办法。</p><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><blockquote><p>被赋予unique属性的列将确保所有值都有不同的值, 只是null值可以重复。一般会指定一个列为unique, 以确保该列的所有值都不同。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">unique</span></span><br></pre></td></tr></table></figure><h4 id="zerofill"><a href="#zerofill" class="headerlink" title="zerofill"></a>zerofill</h4><blockquote><p>zerofill属性可用于任何数值类型，用0填充所有剩余字段空间。例如，无符号int的默认宽度是10；因此，当“零填充”的int值为4时，将表示它为0000000004。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderid <span class="type">int</span> unsigned zerofill <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="有兴趣可以去了解下"><a href="#有兴趣可以去了解下" class="headerlink" title="有兴趣可以去了解下"></a>有兴趣可以去了解下</h3><h4 id="MySQL日期数据类型、时间类型使用总结"><a href="#MySQL日期数据类型、时间类型使用总结" class="headerlink" title="MySQL日期数据类型、时间类型使用总结"></a><a href="https://www.jb51.net/article/23966.htm">MySQL日期数据类型、时间类型使用总结</a></h4><h4 id="MySQL数据类型varchar详解"><a href="#MySQL数据类型varchar详解" class="headerlink" title="MySQL数据类型varchar详解"></a><a href="https://www.jb51.net/article/48170.htm">MySQL数据类型varchar详解</a></h4><h4 id="MySQL-数据类型-详解"><a href="#MySQL-数据类型-详解" class="headerlink" title="MySQL 数据类型 详解"></a><a href="https://www.jb51.net/article/20555.htm">MySQL 数据类型 详解</a></h4><h4 id="MySQL-数据类型-大全"><a href="#MySQL-数据类型-大全" class="headerlink" title="MySQL 数据类型 大全"></a><a href="https://www.jb51.net/article/17764.htm">MySQL 数据类型 大全</a></h4><h4 id="深入了解mysql的4种常用、重要的数据类型"><a href="#深入了解mysql的4种常用、重要的数据类型" class="headerlink" title="深入了解mysql的4种常用、重要的数据类型"></a><a href="https://www.jb51.net/article/49770.htm">深入了解mysql的4种常用、重要的数据类型</a></h4><h4 id="MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）"><a href="#MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）" class="headerlink" title="MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）"></a><a href="https://www.jb51.net/article/48423.htm">MySQL优化之表结构优化的5大建议（数据类型选择讲的很好）</a></h4><h4 id="Mysql支持的数据类型-列类型总结"><a href="#Mysql支持的数据类型-列类型总结" class="headerlink" title="Mysql支持的数据类型(列类型总结)"></a><a href="https://www.jb51.net/article/99932.htm">Mysql支持的数据类型(列类型总结)</a></h4><h4 id="mysql-数据类型TIMESTAMP"><a href="#mysql-数据类型TIMESTAMP" class="headerlink" title="mysql 数据类型TIMESTAMP"></a><a href="https://www.jb51.net/article/52252.htm">mysql 数据类型TIMESTAMP</a></h4><h4 id="MariaDB-MySQL-创建、删除、选择及数据类型使用详解"><a href="#MariaDB-MySQL-创建、删除、选择及数据类型使用详解" class="headerlink" title="MariaDB(MySQL)创建、删除、选择及数据类型使用详解"></a><a href="https://www.jb51.net/article/92870.htm">MariaDB(MySQL)创建、删除、选择及数据类型使用详解</a></h4><h4 id="mysql数据类型和字段属性原理与用法详解"><a href="#mysql数据类型和字段属性原理与用法详解" class="headerlink" title="mysql数据类型和字段属性原理与用法详解"></a><a href="https://www.jb51.net/article/184751.htm">mysql数据类型和字段属性原理与用法详解</a></h4><h2 id="3、SQL语句基本使用"><a href="#3、SQL语句基本使用" class="headerlink" title="3、SQL语句基本使用"></a>3、SQL语句基本使用</h2><h3 id="基本的增删改查"><a href="#基本的增删改查" class="headerlink" title="基本的增删改查"></a>基本的增删改查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line">1、安装完mysql之后，mysql数据库默认密码为空，因次需要给数据库修改密码</span><br><span class="line">mysqladmin -u  root  -p  password <span class="string">&quot;abc123..&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、连接并登录到mysql操作环境</span><br><span class="line">mysql -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、退出mysql操作环境</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、查看有哪些数据库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、查看数据库详情信息</span><br><span class="line">mysql&gt; show create database mysql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、创建数据库</span><br><span class="line"><span class="comment"># 有两种格式</span></span><br><span class="line">- 指定字符集的创建格式 : create database 库名</span><br><span class="line">- 使用默认的字符集创建格式 : create database 库名 character <span class="built_in">set</span> 字符集;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第一种格式创建数据库</span></span><br><span class="line">mysql&gt; create database lemon;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第二种格式创建数据库</span></span><br><span class="line">mysql&gt; create database db1 character <span class="built_in">set</span> gbk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7、进入指定数据库</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8、删除数据库</span><br><span class="line">mysql&gt; drop database db1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9、查看库下的所有数据表</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10、查看某个表的详细信息</span><br><span class="line">mysql&gt; show create table proc\G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11、查看表结构, 可以缩写成desc</span><br><span class="line">mysql&gt; describe user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12、创建数据表</span><br><span class="line"><span class="comment"># 两种创建格式</span></span><br><span class="line">- 使用默认的字符集|引擎 : create table 表名 (字段名 数据类型 [数据属性], 字段名 数据类型 [数据属性], ......);</span><br><span class="line">- 指定表的字符集|引擎 : create table 表名 (字段名 数据类型 [数据属性], ......) engine=myisam charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第一种格式在lemon库下创建user表</span></span><br><span class="line">mysql&gt; create table user (name char(16) not null, passwd char(48) default <span class="string">&#x27;250&#x27;</span>, primary key (name));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以第二种格式在lemon库下创建person表</span></span><br><span class="line">mysql&gt; create table lemon.person (id int(10), name varchar(10), primary key (id)) engine=myisam charset=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13、向lemon库的user表插入数据，</span><br><span class="line"><span class="comment"># 三种插入方法格式</span></span><br><span class="line">- 全表插入格式 : insert into 表名 values (值1,值2,值3, ....);</span><br><span class="line">- 全表批量插入格式 : insert into 表名 values (值1,值2...),( 值1,值2...),( 值1,值2...);</span><br><span class="line">- 指定字段插入格式 : insert into 表名 (列名1，列名2) values (值1,值2);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先查看下user表的字段结构</span></span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(16) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全表插入格式</span></span><br><span class="line">mysql&gt; insert into user(name,passwd) values (<span class="string">&#x27;laoda&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全表批量插入格式</span></span><br><span class="line">mysql&gt; insert into user values (<span class="string">&quot;laoer&quot;</span>,<span class="string">&quot;123123&quot;</span>),(<span class="string">&#x27;laosan&#x27;</span>,<span class="string">&#x27;456456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字段插入格式, password:密文</span></span><br><span class="line">mysql&gt; insert into user values (<span class="string">&#x27;laosan&#x27;</span>, password(<span class="string">&#x27;678678&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14、查询表中所有数据</span><br><span class="line">查询lemon库中user表的数据</span><br><span class="line">mysql&gt; select * from lemon.user;</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| name   | passwd                                    |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| laoda  | 123456                                    |</span><br><span class="line">| laoer  | 123123                                    |</span><br><span class="line">| laosan  | *2E3A12CC92B01C3795F7ADA23369F77C978BDB27 |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15、使用<span class="built_in">where</span>条件查询表数据</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">mysql&gt; select passwd from user <span class="built_in">where</span> name=<span class="string">&#x27;laosan&#x27;</span>;</span><br><span class="line">+--------+</span><br><span class="line">| passwd |</span><br><span class="line">+--------+</span><br><span class="line">| 456456 |</span><br><span class="line">+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user <span class="built_in">where</span> name=<span class="string">&#x27;laoer&#x27;</span>;</span><br><span class="line">+-------+--------+</span><br><span class="line">| name  | passwd |</span><br><span class="line">+-------+--------+</span><br><span class="line">| laoer | 123123 |</span><br><span class="line">+-------+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select passwd from lemon.user <span class="built_in">where</span> name=<span class="string">&#x27;laoda&#x27;</span>;</span><br><span class="line">+--------+</span><br><span class="line">| passwd |</span><br><span class="line">+--------+</span><br><span class="line">| 123456 |</span><br><span class="line">+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">16、修改数据表内容，并且是以密文形式的。</span><br><span class="line"><span class="comment"># 两种格式</span></span><br><span class="line">- 修改全表格式 : update 表名 <span class="built_in">set</span> 列名=值;</span><br><span class="line">- 添加条件修改格式 : update 表名 <span class="built_in">set</span> 列名=值 <span class="built_in">where</span> 列名=值;</span><br><span class="line">mysql&gt; update lemon.user <span class="built_in">set</span> passwd=password(<span class="string">&#x27;buzhidao&#x27;</span>) <span class="built_in">where</span> name=<span class="string">&#x27;laoer&#x27;</span>;</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| name   | passwd                                    |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| laoda  | 123456                                    |</span><br><span class="line">| laoer  | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">| laosan | *2E3A12CC92B01C3795F7ADA23369F77C978BDB27 |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">17、输出数据表内容</span><br><span class="line"><span class="comment"># 两种格式</span></span><br><span class="line">- 删除全表数据格式 : delete from 表名;</span><br><span class="line">- 删除指定条件的数据格式 : delete from 表名 <span class="built_in">where</span> 列名=值;</span><br><span class="line">mysql&gt; delete from lemon.user <span class="built_in">where</span> name=<span class="string">&#x27;laosan&#x27;</span>;</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | passwd                                    |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18、修改数据表字段类型</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 modify 字段名称 新字段类型 first;       // first可以不加</span></span><br><span class="line">mysql&gt; alter table user modify name char(30);</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">19、增加数据表字段</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 add 列名;</span></span><br><span class="line">mysql&gt; alter table user add age int(30);</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">| age    | int(30)  | YES  |     | NULL    |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">20、删除数据表的字段</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 drop 列名;</span></span><br><span class="line">mysql&gt; alter table user drop age;</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| name   | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| passwd | char(48) | YES  |     | 250     |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21、修改数据表字段名及类型属性</span><br><span class="line"><span class="comment"># 格式 : alter table 表名 change 旧字段名 新字段名;</span></span><br><span class="line">mysql&gt; alter table user change passwd password char(50);</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type     | Null | Key | Default | Extra |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| name     | char(30) | NO   | PRI | NULL    |       |</span><br><span class="line">| password | char(50) | YES  |     | NULL    |       |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">22、查看数据表的前1行【升序】</span><br><span class="line">mysql&gt; select * from user <span class="built_in">limit</span> 1;</span><br><span class="line">+-------+----------+</span><br><span class="line">| name  | password |</span><br><span class="line">+-------+----------+</span><br><span class="line">| laoda | 123456   |</span><br><span class="line">+-------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">23、查看数据表的最后1行【降序】</span><br><span class="line"><span class="comment"># 【desc 是降序】：从大到小；例如：3 2 1   【asc 默认就是升序】：从小到大；例如：1 2 3</span></span><br><span class="line">mysql&gt; select * from user order by name desc;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | password                                  |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：查看lemon库user表的id列里数字最大的2行</span></span><br><span class="line">mysql&gt; select * from users order by id desc <span class="built_in">limit</span> 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">24、复制当前表数据到另外一个表【类似于备份】</span><br><span class="line">mysql&gt; create table hehe as select * from user;</span><br><span class="line">mysql&gt; select * from hehe;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | password                                  |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">25、【内链接】通过hehe表和users表中的name列,将两个表中的所有数据合并，前提是这两个数据表列中的数据必须是一样的！</span><br><span class="line">mysql&gt; select * from hehe inner join user on hehe.name=user.name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">26、【内链接】通过hehe表的name列和users表的password列,只将hehe表的name列和users表的password列数据合并，前提是&#123;和前者一样&#125;！</span><br><span class="line">mysql&gt; select hehe.name,user.password from hehe,user <span class="built_in">where</span> user.name=hehe.name;</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| name  | password                                  |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">| laoda | 123456                                    |</span><br><span class="line">| laoer | *919C8839C55DEA3ED65C7E0972E8446731F3DE3A |</span><br><span class="line">+-------+-------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">27、修改表的名字</span><br><span class="line"><span class="comment"># 格式：rename 原表名 to 新表名;</span></span><br><span class="line">mysql&gt; rename person to beros;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">28、修改字段位置</span><br><span class="line">mysql&gt; alter table user modify name varchar(10) after password;</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| password | char(50)    | YES  |     | NULL    |       |</span><br><span class="line">| name     | varchar(10) | NO   | PRI | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">29、删除数据表</span><br><span class="line">mysql&gt; drop table lemon.hehe;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_lemon |</span><br><span class="line">+-----------------+</span><br><span class="line">| person          |</span><br><span class="line">| user            |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="授权用户、撤销授权用户、及限制"><a href="#授权用户、撤销授权用户、及限制" class="headerlink" title="授权用户、撤销授权用户、及限制"></a>授权用户、撤销授权用户、及限制</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、对lemon数据库授权，以便其他用户对该库进行操作</span><br><span class="line">mysql&gt; grant all on lemon.* to <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">   上边的%是指:         <span class="comment">#任何主机都可以登录mysql；</span></span><br><span class="line">                       <span class="comment">#localhost代表的服务器本身，不包含在上边的网段</span></span><br><span class="line">                           <span class="comment">#还可以是网段或者某个ip</span></span><br><span class="line">     lemon.*:          <span class="comment">#只让admin用户拥有lemon库的所有权限</span></span><br><span class="line">       all:            <span class="comment">#代表的增、删、改、查所有权限</span></span><br><span class="line">    123456:            <span class="comment">#是admin用户的登录密码</span></span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;   <span class="comment">#刷新权限</span></span><br><span class="line"></span><br><span class="line">2、对admin用户取消对lemon库的授权</span><br><span class="line">mysql&gt; revoke all on lemon.* from <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">mysql&gt; delete from mysql.user <span class="built_in">where</span> user=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">3、查看mysql的用户权限</span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line">mysql&gt; select * from mysql.user \G</span><br></pre></td></tr></table></figure><h3 id="破MySQL密码流程"><a href="#破MySQL密码流程" class="headerlink" title="破MySQL密码流程"></a>破MySQL密码流程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、进入/etc/my.cnf配置文件里添加一条配置</span><br><span class="line">vi  /etc/my.cnf</span><br><span class="line">skip-grant-tables       <span class="comment">#跳过所有授权</span></span><br><span class="line">重启MySQL服务</span><br><span class="line"></span><br><span class="line">2、现在直接进入MysQl里</span><br><span class="line">    mysql  -u  root  -p</span><br><span class="line"></span><br><span class="line">3、修改秘密【数据表】，并且刷新权限、退出用666666登陆即可</span><br><span class="line">    mysql&gt; update mysql.user <span class="built_in">set</span> password=password(<span class="string">&#x27;666666&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">4、检查没问题后在进入/etc/my.cnf配置文件里把刚加的skip-grant-tables这条配置删掉，保存退出并重启mysql服务</span><br><span class="line"><span class="comment"># 注：仅限5.7之前的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL-5.7版本的修改方式</span></span><br><span class="line">mysql&gt; update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;666666&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="解决MySQL乱码问题"><a href="#解决MySQL乱码问题" class="headerlink" title="解决MySQL乱码问题"></a>解决MySQL乱码问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 有两种方法</span><br><span class="line"><span class="comment"># 第一种是永久生效的</span></span><br><span class="line">[root@mysql ~]<span class="comment"># vi /etc/my.cnf</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">:wq!</span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种是临时生效的</span></span><br><span class="line">进入数据库</span><br><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;</span><br></pre></td></tr></table></figure><h3 id="查看MySQL连接情况"><a href="#查看MySQL连接情况" class="headerlink" title="查看MySQL连接情况"></a>查看MySQL连接情况</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mysql存储引擎的应用mysql&gt; show status like <span class="string">&#x27;Thread_%&#x27;</span>;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 5     |</span><br><span class="line">| Threads_connected | 3     |</span><br><span class="line">| Threads_created   | 8     |</span><br><span class="line">| Threads_running   | 1     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="Mysql存储引擎的应用"><a href="#Mysql存储引擎的应用" class="headerlink" title="Mysql存储引擎的应用"></a>Mysql存储引擎的应用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.查看数据库可以配置的存储引擎类型</span><br><span class="line">mysql&gt; show engines;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vi1mdi5j31by0c2aaw.jpg" alt="image-20200824194528195"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2、修改Mysql服务的默认存储引擎</span><br><span class="line">[root@mysql ~]<span class="comment"># vi /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=MyISAM</span><br><span class="line">:wq!</span><br><span class="line"></span><br><span class="line">[root@mysql ~]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line">[root@mysql ~]<span class="comment"># mysql -uroot -p123123</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vi5qrbvj30ur0ef0w6.jpg" alt="image-20200824194730663"></p><h2 id="4、SQL语句进阶使用"><a href="#4、SQL语句进阶使用" class="headerlink" title="4、SQL语句进阶使用"></a>4、SQL语句进阶使用</h2><h3 id="主键及自增"><a href="#主键及自增" class="headerlink" title="主键及自增"></a>主键及自增</h3><blockquote><p>每一张表通常会有一个且只有一个主键 来表示每条数据的唯一性；主键其实是对某一个字段的 约束 。</p><ul><li>primary key</li><li>auto_increment</li></ul></blockquote><p>主键特性：</p><ol><li>值不能重复 </li><li>非空（不能赋值为not null）</li></ol><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">非空<span class="operator">-</span> 主键约束写法：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key,age <span class="type">int</span>); </span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 主键约束<span class="operator">+</span>自增的写法：特点  从<span class="number">1</span>开始走；不会自动回收，用过了就是用过了</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,age <span class="type">int</span>); </span><br></pre></td></tr></table></figure><h3 id="非空（not-null）"><a href="#非空（not-null）" class="headerlink" title="非空（not null）"></a>非空（not null）</h3><blockquote><p>非空约束 not null，说白了就是不允许某个字段的值是空的</p><ul><li>not null</li></ul></blockquote><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="表字段的注释"><a href="#表字段的注释" class="headerlink" title="表字段的注释"></a>表字段的注释</h3><blockquote><ul><li>关键字：comment</li></ul></blockquote><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> tom(id <span class="type">int</span> comment <span class="string">&#x27;用户ID&#x27;</span>, age <span class="type">int</span> comment <span class="string">&#x27;用户年龄&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tom;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vixy124j30q60enq5q.jpg" alt="image-20200824200439226"></p><h3 id="Mysql数据库事务管理"><a href="#Mysql数据库事务管理" class="headerlink" title="Mysql数据库事务管理"></a>Mysql数据库事务管理</h3><blockquote><p>管理事务的三个命令：</p><ul><li><p>begin：开始事务，后边有多条数据库操作语句开始执行。</p></li><li><p>commit：开始提交一个事务，对应前边的begin操作，将事务处理的结果保存到数据文件中。</p></li><li><p>rollback：开始回滚一个事务，在begin和commit之间，将事务中的全部语句撤回，</p></li></ul></blockquote><p><code>set autocommit = 0/1;     # 0禁用自动提交   1开启自动提交，自动提交为退出mysql连接程序时，或者执行下一条DML语句。</code></p><p>管理事务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;%autocommit%&#x27;</span>;       <span class="comment"># 查看当前数据库是否自动提交事务</span></span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| autocommit    | ON    |        <span class="comment"># 默认就是开启的</span></span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; create database lemon;</span><br><span class="line">mysql&gt; use lemon;</span><br><span class="line">mysql&gt; create table it(岗位 char(16),姓名 char(16),身份证号 char(48),学历 char(16),工资 int);</span><br><span class="line">mysql&gt; show table status <span class="built_in">where</span> name=<span class="string">&quot;it&quot;</span>;    <span class="comment"># 确保表引擎为InnoDB，如若不是按以下命令修改</span></span><br><span class="line">mysql&gt; alter table it engine=InnoDB;         <span class="comment"># 修改表储存引擎为InnoDB</span></span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;网络工程师&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;150404199201091132&#x27;</span>,<span class="string">&#x27;高中&#x27;</span>,<span class="string">&#x27;5500&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;网络工程师&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;150406187805271432&#x27;</span>,<span class="string">&#x27;专科&#x27;</span>,<span class="string">&#x27;12000&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;java工程师&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;111376199609101456&#x27;</span>,<span class="string">&#x27;初中&#x27;</span>,<span class="string">&#x27;10000&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;网络工程师&#x27;</span>,<span class="string">&#x27;刘备&#x27;</span>,<span class="string">&#x27;345646199209103256&#x27;</span>,<span class="string">&#x27;高中&#x27;</span>,<span class="string">&#x27;15000&#x27;</span>);</span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;ui工程师&#x27;</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="string">&#x27;178645199909101189&#x27;</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;7000&#x27;</span>);</span><br><span class="line">mysql&gt; select * from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vj1zscxj30og09bwf2.jpg" alt="image-20200824203232032"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;    <span class="comment">#手动开始事务</span></span><br><span class="line">mysql&gt; insert into it values (<span class="string">&#x27;php工程师&#x27;</span>,<span class="string">&#x27;曹操&#x27;</span>,<span class="string">&#x27;891878195409081198&#x27;</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;9000&#x27;</span>);</span><br><span class="line">mysql&gt; select * from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vj5ojllj30ol0a0aas.jpg" alt="image-20200824203432011"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">exit</span>                             <span class="comment">#不手动提交事务退出</span></span><br><span class="line">[root@mysql ~]<span class="comment"># mysql -uroot -p123123</span></span><br><span class="line">mysql&gt; select * from lemon.it;          <span class="comment">#查看曹操是否还存在</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjd669cj30on0983z3.jpg" alt="image-20200824203539117"></p><p><strong>如果是手动开始的事务就必须手动提交，因为系统是不会帮手动开始的事务自动提交的!</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;                <span class="comment">#手动开始事务</span></span><br><span class="line">mysql&gt; insert into it values(<span class="string">&#x27;nginx工程师&#x27;</span>,<span class="string">&#x27;诸葛亮&#x27;</span>,<span class="string">&#x27;187967198712081198&#x27;</span>,<span class="string">&#x27;专科&#x27;</span>,<span class="string">&#x27;6700&#x27;</span>);</span><br><span class="line">mysql&gt; commit;               <span class="comment">#手动提交事务</span></span><br><span class="line">mysql&gt; select * from it;     <span class="comment">#查询</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjhdhm1j30pp09w0th.jpg" alt="image-20200824203809292"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p123123</span></span><br><span class="line">mysql&gt; select * from lemon.it;               <span class="comment">#在查询诸葛亮还存不存在</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjnjkp5j30po09ut9f.jpg" alt="image-20200824203914221"></p><p><strong>可以看到，手动执行的事务只有你主动提交后才会永久的修改！</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;                        <span class="comment">#手动开始事务</span></span><br><span class="line">mysql&gt; insert into it values(<span class="string">&#x27;php工程师&#x27;</span>,<span class="string">&#x27;赵云&#x27;</span>,<span class="string">&#x27;987867199012081198&#x27;</span>,<span class="string">&#x27;专科&#x27;</span>,<span class="string">&#x27;9500&#x27;</span>);</span><br><span class="line">mysql&gt; select * from lemon.it;       <span class="comment">#查询</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjsp16nj30ps0aoaax.jpg" alt="image-20200824204151695"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; rollback;                   <span class="comment">#回滚事务</span></span><br><span class="line">mysql&gt; select * from lemon.it;     <span class="comment">#在查询赵云是否还存在</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vjxt349j30po0a00tg.jpg" alt="image-20200824204230161"></p><p><strong>事务是数据库中的执行单元</strong></p><p><strong>事务能够保证事务内部的sql语句要么都成功，要么都失败</strong></p><p><strong>mysql 客户端（终端、命令行）事务是默认提交的</strong></p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><blockquote><p>格式1：select 列名 别名,列名 别名…… from 表名;</p><p>格式2：select 列名 as ‘别名’, 列名 as ‘别名’,…… from 表名</p></blockquote><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from lemon.it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vk2ylnkj30pj0a30tg.jpg" alt="image-20200824204627019"></p><p>别名格式1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位 gangwei,姓名 xingming from lemon.it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vk7pdfnj30kb0a4aae.jpg" alt="image-20200824204710248"></p><p>别名格式2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名 as <span class="string">&#x27;name&#x27;</span>,学历 as <span class="string">&#x27;xueli&#x27;</span> from lemon.it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkcro9sj30lq0a2jrl.jpg" alt="image-20200824204741741"></p><h3 id="去重-distinct"><a href="#去重-distinct" class="headerlink" title="去重(distinct)"></a>去重(distinct)</h3><blockquote><p>格式：select distinct 列名 from 表名;</p></blockquote><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位 from lemon.it;     <span class="comment">#查询it表中所有员工的职位</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkhzo44j30oc0a00sx.jpg" alt="image-20200824205001473"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct 岗位 from lemon.it;      <span class="comment">#去重</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkn4hcyj30sk08qwel.jpg" alt="image-20200824205048276"></p><h3 id="WHERE-条件判断（重点）"><a href="#WHERE-条件判断（重点）" class="headerlink" title="WHERE 条件判断（重点）"></a>WHERE 条件判断（重点）</h3><blockquote><p>有时候操作数据库时，只操作一些有条件限制的数据，这时可以在SQL语句中添加WHERE子句来规定数据操作的条件。</p></blockquote><p><strong>常用的运算符：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">!=</td><td align="left">不等于，某些数据库系统也写作 &lt;&gt;</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td></tr><tr><td align="left">BETWEEN … AND …</td><td align="left">介于某个范围之内，例：WHERE age BETWEEN 20 AND 30</td></tr><tr><td align="left">NOT BETWEEN …AND …</td><td align="left">不在某个范围之内</td></tr><tr><td align="left">IN(项1,项2,…)</td><td align="left">在指定项内，例：WHERE city IN(‘beijing’,’shanghai’)</td></tr><tr><td align="left">NOT IN(项1,项2,…)</td><td align="left">不在指定项内</td></tr><tr><td align="left">LIKE</td><td align="left">搜索匹配，常与模式匹配符配合使用</td></tr><tr><td align="left">NOT LIKE</td><td align="left">LIKE的反义</td></tr><tr><td align="left">IS NULL</td><td align="left">空值判断符</td></tr><tr><td align="left">IS NOT NULL</td><td align="left">非空判断符</td></tr><tr><td align="left">NOT、AND、OR</td><td align="left">逻辑运算符，分别表示否、并且、或，用于多个逻辑连接。 优先级：NOT &gt; AND &gt; OR</td></tr><tr><td align="left">%</td><td align="left">模式匹配符，表示任意字串，例：WHERE username LIKE ‘%user’</td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vks8lydj30uq09lq74.jpg" alt="image-20210108183340345"></p><p>案例1：查询工资高于6700的所有员工的岗位、姓名； &gt;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkvwktuj30ur087tah.jpg" alt="image-20210108183444549"></p><p>案例2：查询工资大于等于12000的所有员工的岗位、姓名； &gt;=</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vkyqbz3j30ul076gn9.jpg" alt="image-20210108183535840"></p><p>案例3：查询工资小于12000的所有员工的岗位、姓名； &lt;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vl384htj30un09dq55.jpg" alt="image-20210108183558977"></p><p>案例4：查询工资小于等于12000的所有员工的岗位、姓名； &lt;=</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vl6op35j30um0a976p.jpg" alt="image-20210108183628099"></p><p>案例5：查询岗位是nginx工程师的员工姓名、工资; =</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlbvz9wj30ua05k3zj.jpg" alt="image-20210108183657630"></p><p>案例6：查询学历不是专科的所有员工的姓名、工资；两种方式：!= &lt;&gt;</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlf8b4hj30un0a3gne.jpg" alt="image-20210108183740957"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vljxswpj30us0agmz2.jpg" alt="image-20210108183803467"></p><h3 id="AND-OR-IN-运算符"><a href="#AND-OR-IN-运算符" class="headerlink" title="AND  OR  IN 运算符"></a>AND  OR  IN 运算符</h3><blockquote><p>And：逻辑与  Or：逻辑或  In：查询某个字段的值为多个的时候 可以使用 <code>in</code>关键字</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlpglz2j30wd0a4dkb.jpg" alt="image-20210126141450403"></p><p>1.案例：查询学历不是专科的并且工资大于12000的所有员工的岗位、姓名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位,姓名 from it where 学历 != &#x27;专科&#x27; and 工资 &gt; 12000;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlu8a73j30wf05gdh2.jpg" alt="image-20210126141533926"></p><p>2.案例：查询学历不是专科的或者工资大于12000的所有员工的岗位、姓名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 岗位,姓名 from it where 学历 != &#x27;专科&#x27; or 工资 &gt; 12000;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vlztq56j30wd08atam.jpg" alt="image-20210126141602602"></p><p>3.案例：查询工资是5500、7000、6700的姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名 from it where 工资 in (5500,7000,6700);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vm42g4cj30w708s75l.jpg" alt="image-20210126141653939"></p><h3 id="Between-and-区间"><a href="#Between-and-区间" class="headerlink" title="Between and 区间"></a>Between and 区间</h3><blockquote><p>在某两个数值之间 包含 <code>and</code>两边的数</p></blockquote><p>案例：查询工资在7000~15000间的员工姓名、学历</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vm7w7jbj30wc0a3aej.jpg" alt="image-20210126142004368"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名,学历 from it where 工资 between 7000 and 15000;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmdfj7yj30wd08oq4a.jpg" alt="image-20210126141918076"></p><h3 id="LIKE-操作符"><a href="#LIKE-操作符" class="headerlink" title="LIKE 操作符"></a>LIKE 操作符</h3><blockquote><p>模糊查询</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_ : 代表单个未知字符  相当于正则表达式的 .</span><br><span class="line">% : 代表多个未知字符  相当于正则表达式的 .*</span><br><span class="line">a% : a开头  </span><br><span class="line">%b : b结尾  </span><br><span class="line">%c% : 包含c  </span><br><span class="line">_d% : 第二个字母是d</span><br><span class="line">%e__ : 倒数第三个字母是e</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.案例：查询标题包含记事本的商品</span><br><span class="line">select title from t_item where title like &#x27;%笔记本%&#x27;;</span><br><span class="line"></span><br><span class="line">2.案例：查询有赠品的DELL产品</span><br><span class="line">select sell from t_item where sell like &#x27;%赠%&#x27; and title like &#x27;%dell%&#x27;;</span><br><span class="line"></span><br><span class="line">3.案例：查询单价低于100的记事本</span><br><span class="line">select title from t_item where price&lt;100 and title like &#x27;%记事本%&#x27;;</span><br><span class="line"></span><br><span class="line">4.案例：查询价格介于50到200之间的得力商品</span><br><span class="line">select title from t_item where price between 50 and 200 and title like &#x27;%得力%&#x27;;</span><br><span class="line"></span><br><span class="line">5.案例：查询有图片的得力商品</span><br><span class="line">select title from t_item where image is not null and title like &#x27;%得力%&#x27;;</span><br><span class="line"></span><br><span class="line">6.案例：查询分类为238,917的产品</span><br><span class="line">select title from t_item where category_id in (238,917);</span><br><span class="line"></span><br><span class="line">7.案例：查询标题中不含得力的商品</span><br><span class="line">select title from t_item where title not like &#x27;%得力%&#x27;;</span><br><span class="line"></span><br><span class="line">8.案例：查询分类不是238,917的商品</span><br><span class="line">select title from t_item where category_id not in (238,917);</span><br><span class="line"></span><br><span class="line">9.案例：查询价格介于50到200之外的商品</span><br><span class="line">select title from t_item where price not between 50 and 200;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h3><blockquote><p>order by 排序  by 后面添加排序规则的字段；默认是升序</p><ul><li><p>asc ：升序；默认就是</p></li><li><p>desc：降序order by 如果有where 要写在 where 后面</p></li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmj20ksj30wd0a5dkc.jpg" alt="image-20210126145208169"></p><p>1、升序 asc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it order by 工资 asc;   #后面的asc可以不跟</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmn5mbmj30wf09zn1w.jpg" alt="image-20210126145244540"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名,工资 from it where 工资 like &#x27;%1%&#x27; order by 工资 asc;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmrhjwgj30we074dh2.jpg" alt="image-20210126145327663"></p><p>2、降序 desc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it order by 工资 desc;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmvo7s7j30wg0a2dkm.jpg" alt="image-20210126145356912"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 姓名,工资 from it where 工资 like &#x27;%1%&#x27; order by 工资 desc;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vmyuztdj30wd06zdh1.jpg" alt="image-20210126145423366"></p><h3 id="LIMIT-子句"><a href="#LIMIT-子句" class="headerlink" title="LIMIT 子句"></a>LIMIT 子句</h3><blockquote><p>limit begin,count 分页语句begin 从0开始</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vn2oblsj30wg0a9434.jpg" alt="image-20210126145531761"></p><p>1、查看表的前两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it limit 2;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vn6bo5mj60wb06qmzh02.jpg" alt="image-20210126145705161"></p><p>2、查看2~5的数据行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from it limit 2,5;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vna6ronj30wf089adh.jpg" alt="image-20210126145600507"></p><h3 id="INNER-JOIN-内连接查询"><a href="#INNER-JOIN-内连接查询" class="headerlink" title="INNER JOIN 内连接查询"></a>INNER JOIN 内连接查询</h3><p>内连接是通过在查询中设置连接条件的方式，来移除查询结果集中某些数据行后的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。</p><p>在MySQL FROM 子句中使用关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。</p><p><strong>语法格式如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;列名1，列名2 …&gt;</span><br><span class="line">FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; [ ON子句]</span><br><span class="line"></span><br><span class="line">语法说明如下:</span><br><span class="line">•&lt;列名1，列名2…&gt;：需要检索的列名。</span><br><span class="line">•&lt;表名1&gt;&lt;表名2&gt;：进行内连接的两张表的表名。</span><br><span class="line">内连接是系统默认的表连接，所以在 FROM 子句后可以省略 INNER 关键字，只用关键字 JOIN。使用内连接后，FROM 子句中的 ON 子句可用来设置连接表的条件。</span><br><span class="line"></span><br><span class="line">在 FROM 子句中可以在多个表之间连续使用 INNER JOIN 或 JOIN，如此可以同时实现多个表的内连接。</span><br></pre></td></tr></table></figure><p>示例：表 student1和表student2都包含相同数据类型的字段id，在两个表之间使用内连接查询。输入的 SQL 语句和执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database lemon;</span><br><span class="line">mysql&gt; use lemon;</span><br><span class="line">mysql&gt; create table student1(id int,name varchar(20));</span><br><span class="line">mysql&gt; create table student2(id int,bingqi varchar(20));</span><br><span class="line">mysql&gt; insert into student1 values(1,&quot;刘备&quot;),(2,&quot;关羽&quot;),(3,&quot;张飞&quot;);</span><br><span class="line">mysql&gt; insert into student2 values(1,&quot;双股剑&quot;),(2,&quot;青龙偃月刀&quot;),(3,&quot;丈八蛇矛&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vnfbpwmj30ra0kxadb.jpg" alt="image-20210126161045247"></p><p><strong>两种内链接方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,bingqi from student1,student2 where student1.id=student2.id;</span><br><span class="line">mysql&gt; select name,bingqi from student1 inner join student2 on student1.id=student2.id;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vnmdz4uj30xr07u0ud.jpg" alt="image-20210126161118607"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vntuzyhj30xt071jsp.jpg" alt="image-20210126161134634"></p><h3 id="LEFT-RIGHT-JOIN-外连接查询"><a href="#LEFT-RIGHT-JOIN-外连接查询" class="headerlink" title="LEFT/RIGHT JOIN 外连接查询"></a>LEFT/RIGHT JOIN 外连接查询</h3><p><a href="http://c.biancheng.net/mysql/">MySQL</a>中<a href="http://c.biancheng.net/view/2563.html">内连接</a>是在交叉连接的结果集上返回满足条件的记录；而外连接先将连接的表分为基表和参考表，再以基表为依据返回满足和不满足条件的记录。</p><p>外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。</p><p>左外连接又称为左连接，在 FROM 子句中使用关键字 LEFT OUTER JOIN 或者 LEFT JOIN，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。</p><p>在左外连接的结果集中，除了匹配的行之外，还包括左表中有但在右表中不匹配的行，对于这样的行，从右表中选择的列的值被设置为 NULL，即左外连接的结果集中的 NULL 值表示右表中没有找到与左表相符的记录。</p><p><strong>实例 1：左外连接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例 1：左外连接</span><br><span class="line">mysql&gt; insert into student1 values (4,&quot;赵云&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vnyjjh4j30t70iqmzr.jpg" alt="image-20210126160240675"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,bingqi from</span><br><span class="line">    -&gt; student1 left outer join student2</span><br><span class="line">    -&gt; on student1.id=student2.id;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vo3pm67j30xw07ewg5.jpg" alt="image-20210126160338335"></p><p><strong>注：如果右表的行数比左表的行数少，以null代替，如果多，直接去掉多出的行数</strong></p><p><strong>实例 2：右外连接</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,bingqi from</span><br><span class="line">    -&gt; student1 right outer join student2</span><br><span class="line">-&gt; on student1.id=student2.id;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vo4zlxuj30xs0cd42m.jpg" alt="image-20210126160441903"></p><h1 id="五、view-视图"><a href="#五、view-视图" class="headerlink" title="五、view 视图"></a>五、view 视图</h1><blockquote><p>视图就是一个虚拟表，其内容由查询定义得到的。同真实的表一样，视图包含一系列带有名称的列和行数据。</p></blockquote><h2 id="1、视图有什么作用"><a href="#1、视图有什么作用" class="headerlink" title="1、视图有什么作用"></a>1、视图有什么作用</h2><p>视图的作用就是缓存数据从而加快数据的查询速度；可以这么理解，我把一条sql的查询结果装在了一个视图里，我下次再查的时候，就不用走sql了，直接去这个视图里就可以了。神奇的是我可以修改这个视图里的数据，就等于修改了原表数据。</p><h2 id="2、视图的特点"><a href="#2、视图的特点" class="headerlink" title="2、视图的特点"></a>2、视图的特点</h2><ol><li>视图的列可以来自不同的表，是表的抽象和逻辑意义上建立的新关系。 </li><li>视图是由基本表（实表）产生的表（虚表）。 </li><li>视图的建立和删除不影响基本表。 </li><li>对视图内容的更新（添加、删除和修改）直接影响基本表。 </li><li>当视图来自多个基本表时，不允许添加和删除数据。 </li></ol><h2 id="3、视图的创建"><a href="#3、视图的创建" class="headerlink" title="3、视图的创建"></a>3、视图的创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名称  as查询语句(select)</span><br></pre></td></tr></table></figure><h2 id="4、视图的使用"><a href="#4、视图的使用" class="headerlink" title="4、视图的使用"></a>4、视图的使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名+条件 from 视图名称;</span><br></pre></td></tr></table></figure><h2 id="5、视图的更新"><a href="#5、视图的更新" class="headerlink" title="5、视图的更新"></a>5、视图的更新</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter view 视图名称 as 查询语句(select)</span><br></pre></td></tr></table></figure><h2 id="6、视图的删除"><a href="#6、视图的删除" class="headerlink" title="6、视图的删除"></a>6、视图的删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名称;</span><br></pre></td></tr></table></figure><h2 id="7、视图模拟练习"><a href="#7、视图模拟练习" class="headerlink" title="7、视图模拟练习"></a>7、视图模拟练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、创建两个表并且插入数据</span><br><span class="line">mysql&gt; create table student1(id int,name varchar(20),money int);</span><br><span class="line">mysql&gt; create table student2(id int,name varchar(20),weapons varchar(20));</span><br><span class="line">mysql&gt; insert into student1 values (1,&quot;刘备&quot;,10000),(2,&quot;关羽&quot;,20000),(3,&quot;张飞&quot;,30000);</span><br><span class="line">mysql&gt; insert into student2 values (1,&quot;刘备&quot;,&quot;雌雄双股剑&quot;),(2,&quot;关羽&quot;,&quot;青龙偃月刀&quot;),(3,&quot;张飞&quot;,&quot;丈八蛇矛&quot;);</span><br><span class="line"></span><br><span class="line">2、创建视图并测试</span><br><span class="line">mysql&gt; create view lemon as select * from student2;   #创建lemon视图</span><br><span class="line">mysql&gt; select * from student2;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vobk6ssj30w509emz9.jpg" alt="image-20210126152055233"></p><p># 查看视图数据是否相同</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vofsndoj30we09xdii.jpg" alt="image-20210126152121734"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update lemon set name=&#x27;赵云&#x27; where id=3; #测试修改视图源表是否会一同修改</span><br><span class="line">mysql&gt; select * from lemon;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7voin8t9j30tg09pgnq.jpg" alt="image-20210126152148887"></p><p># 查询源表是否修改</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vondeb0j30u609omzm.jpg" alt="image-20210126152223640"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter view lemon as select * from student1;    #更新视图</span><br><span class="line">mysql&gt; select * from lemon;      #查询是否更新</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7voq169sj30sz0a20ug.jpg" alt="image-20210126152253513"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop view lemon;    #删除视图</span><br></pre></td></tr></table></figure><h1 id="六、触发器"><a href="#六、触发器" class="headerlink" title="六、触发器"></a>六、触发器</h1><blockquote><p>什么是触发器?</p><p>简单的说，就是一张表发生了某件事（插入、删除、更新操作），然后自动触发了预先编写好的若干条SQL语句的执行。</p></blockquote><h2 id="1、触发器的作用"><a href="#1、触发器的作用" class="headerlink" title="1、触发器的作用"></a>1、触发器的作用</h2><p>监视某种情况，并触发某种操作(保证数据的完整性，起到约束的作用)</p><h2 id="2、触发器创建语法四要素"><a href="#2、触发器创建语法四要素" class="headerlink" title="2、触发器创建语法四要素"></a>2、触发器创建语法四要素</h2><p>1.监视地点(table)                                    #监视哪个数据库的表<br>2.监视事件(insert/update/delete)            #增、删、改<br>3.触发时间(after/before)                         #after：事件之后    before：事件之前<br>4.触发事件(insert/update/delete)            #触发后要执行的事件</p><h2 id="3、创建触发器语法"><a href="#3、创建触发器语法" class="headerlink" title="3、创建触发器语法"></a>3、创建触发器语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create trigger 触发器名 |after|before| |insert|update|delete| on 表名 for each row</span><br><span class="line">begin</span><br><span class="line">     #需要执行的sql语句；这里注意：监控的表和执行SQL语句的表不能是同一个！</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">注1: on 表名 代表你要监控的某个表； for each row 这句话是固定的。</span><br><span class="line">注2: |after|before| 只能选一个；after 表示 事件之后触发, before 表示事件之前触发。</span><br><span class="line">注3: |insert|update|delete| 只能选一个；触动触发器的动作；一旦触动，就会执行下面的SQL语句。</span><br><span class="line">注4: Begin &lt;--&gt; end：代表可以写入多条SQL语句；如果不写，就只能写入一条SQL语句。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、创建触发器"><a href="#4、创建触发器" class="headerlink" title="4、创建触发器"></a>4、创建触发器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create trigger lemon after update on student1 for each row </span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; update lemon.student2 set name=&#x27;张飞&#x27; where id=3;</span><br><span class="line">    -&gt; insert into student2 values (4,&quot;lemon&quot;,&quot;AK-47&quot;);</span><br><span class="line">    -&gt; end//</span><br><span class="line"></span><br><span class="line">mysql&gt; show triggers\G;        # 查看触发器</span><br><span class="line"></span><br><span class="line">mysql&gt; update student1 set money=300000 where id=3; </span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student1;    #修改student1表的数据从而触动触发器执行语句</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vowls0gj30wj0b8gnv.jpg" alt="image-20210126152942051"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student2;       #查看是否执行触发器事件的SQL语句</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vp0go20j30ub0ciq5y.jpg" alt="image-20210126153000614"></p><h1 id="七、存储过程"><a href="#七、存储过程" class="headerlink" title="七、存储过程"></a>七、存储过程</h1><blockquote><p>MySQL数据库在5.0版本后开始支持存储过程</p><p>什么是存储过程？</p><p>类似于函数(方法),将大量的SQL语句封装在一个存储过程里, 什么时候像执行里面的SQL语句, 就什么时候调用这个存储过程。</p></blockquote><h2 id="1、存储过程的优点和缺点"><a href="#1、存储过程的优点和缺点" class="headerlink" title="1、存储过程的优点和缺点"></a>1、存储过程的优点和缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1、存储过程增强了SQL语言灵活性。</p><p>存储过程可以使用控制语句编写，可以完成复杂的判断和较复杂的运算，有很强的灵活性。</p><p>2、减少网络流量，降低了网络负载。</p><p>存储过程在服务器端创建成功后，只需要调用该存储过程即可，而传统的做法是每次都将大量的SQL语句通过网络发送至数据库服务器端然后再执行。</p><p>3、存储过程要比一般的SQL语句执行要快</p><p>只在创造时进行编译，以后每次执行存储过程都不需再重新编译；一般SQL语句每执行一次就编译一次,所以使用存储过程可提高</p><p>数据库执行速度。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1、扩展功能不方便</p><p>2、不便于系统后期维护</p><h2 id="2、查看现有的存储过程"><a href="#2、查看现有的存储过程" class="headerlink" title="2、查看现有的存储过程"></a>2、查看现有的存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show procedure status;</span><br></pre></td></tr></table></figure><h2 id="3、调用存储过程"><a href="#3、调用存储过程" class="headerlink" title="3、调用存储过程"></a>3、调用存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 存储过程名称(参数入/出类型 参数名 数据类型);</span><br></pre></td></tr></table></figure><h2 id="4、删除存储过程"><a href="#4、删除存储过程" class="headerlink" title="4、删除存储过程"></a>4、删除存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure 存储过程名称;</span><br></pre></td></tr></table></figure><h2 id="5、体验存储过程"><a href="#5、体验存储过程" class="headerlink" title="5、体验存储过程"></a>5、体验存储过程</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><code>可以使用 CREATE PROCEDURE 语句创建存储过程。</code></p><p>语法格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create procedure &lt;过程名&gt; ( [过程参数[,…] ] ) &lt;过程体&gt;</span><br><span class="line">[过程参数[,…] ] 格式</span><br><span class="line">[ IN | OUT | INOUT ] &lt;参数名&gt; &lt;类型&gt;</span><br></pre></td></tr></table></figure><h4 id="理解有参和无参"><a href="#理解有参和无参" class="headerlink" title="理解有参和无参"></a>理解有参和无参</h4><p>无参数： 用python函数举例</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vp6k0d7j30tq08wmyf.jpg" alt="image-20210126153820047"></p><p>带参数：用python函数举例</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vp9ccyvj30uf0893zj.jpg" alt="image-20210126153837233"></p><h3 id="创建无参数的存储过程"><a href="#创建无参数的存储过程" class="headerlink" title="创建无参数的存储过程"></a>创建无参数的存储过程</h3><blockquote><p>实例 1：创建名称为func的存储过程，存储过程的作用是从student1、student2表中查询数据信息。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create procedure func()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select * from student1;</span><br><span class="line">    -&gt; select * from student2;</span><br><span class="line">-&gt; end//</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">创建存储过程 func 后，通过 call 语句调用该存储过程的SQL。</span><br><span class="line">mysql&gt; call func();</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpdlfy6j30wl0mr0x2.jpg" alt="image-20210126154004086"></p><h3 id="创建带有参数的存储过程"><a href="#创建带有参数的存储过程" class="headerlink" title="创建带有参数的存储过程"></a>创建带有参数的存储过程</h3><blockquote><p>实例 2：创建名称为good的存储过程，输入参数是。存储过程的作用是通过输入的num从student2表中查询指定的姓名及武器信息。IN固定的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create procedure good(IN num int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select name,weapons from student2 where id=num;</span><br><span class="line">-&gt; end//</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">创建存储过程good后，通过 CALL 语句调用该存储过程的SQL语句。</span><br><span class="line">mysql&gt; call good(4);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpi6wdsj30w40kpn0t.jpg" alt="image-20210126154150157"></p><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop procedure func;</span><br><span class="line">mysql&gt; drop procedure good;</span><br></pre></td></tr></table></figure><h1 id="八、索引原理及查询优化"><a href="#八、索引原理及查询优化" class="headerlink" title="八、索引原理及查询优化"></a>八、索引原理及查询优化</h1><h2 id="1、索引概述"><a href="#1、索引概述" class="headerlink" title="1、索引概述"></a>1、索引概述</h2><blockquote><p>什么是索引？</p></blockquote><p>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。</p><blockquote><p>为什么要有索引？</p></blockquote><p>索引看着挺高大上的一个名字,说白了就是我们书最外面的目录。假如你用新华字典来查找“张”这个汉字，不使用目录的话，你可能要从新华字典的第一页找到最后一页，可能要花二个小时。字典越厚呢，你花的时间就越多。现在你使用目录来查找“张”这个汉字，张的首字母是z，z开头的汉字从900多页开始，有了这条线索，你查找一个汉字可能只要一分钟，由此可见索引的重要性。数据越大，索引的效率就越高！</p><h2 id="2、索引原理"><a href="#2、索引原理" class="headerlink" title="2、索引原理"></a>2、索引原理</h2><p>索引的目的在于提高查询效率。与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等</p><p>数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><h2 id="3、索引的数据结构"><a href="#3、索引的数据结构" class="headerlink" title="3、索引的数据结构"></a>3、索引的数据结构</h2><p>任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，<strong>b+树</strong> 应运而生。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpovqkpj30wb0f2nai.jpg" alt="image-20210126154942629"></p><p>如上图，是一颗b+树，关于b+树的定义可以参见 <a href="http://zh.wikipedia.org/wiki/B+%E6%A0%91">B+树</a>，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><p>###b+树的查找过程<br>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><p>###b+树性质</p><p><strong>1.索引字段要尽量的小</strong>：通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><p><strong>2.索引的最左匹配特性（即从左往右匹配）</strong>：当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h2 id="4、Mysql-索引管理"><a href="#4、Mysql-索引管理" class="headerlink" title="4、Mysql 索引管理"></a>4、Mysql 索引管理</h2><h3 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h3><p>1、普通索引index：加速查找</p><p>2、唯一索引</p><ul><li>主键索引：primary key ：加速查找+约束（不为空且唯一）</li><li>唯一索引：unique：加速查找+约束 （唯一）</li></ul><p>3、联合索引：</p><ul><li>primary key(id,name): 联合主键索引</li><li>unique(id,name): 联合唯一索引</li><li>index(id,name): 联合普通索引</li></ul><p>4、全文索引fulltext：用于搜索很长一篇文章的时候，效果最好。</p><blockquote><p><strong>举个例子来说，比如你在为某商场做一个会员卡的系统。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">这个系统有一个会员表</span><br><span class="line">有下列字段：</span><br><span class="line">会员编号 INT</span><br><span class="line">会员姓名 VARCHAR(10)</span><br><span class="line">会员身份证号码 VARCHAR(18)</span><br><span class="line">会员电话 VARCHAR(10)</span><br><span class="line">会员住址 VARCHAR(50)</span><br><span class="line">会员备注信息 TEXT</span><br><span class="line"></span><br><span class="line">那么这个 会员编号，作为主键，使用 PRIMARY</span><br><span class="line">会员姓名：如果要建索引的话，那么就是普通的 INDEX</span><br><span class="line">会员身份证号码：如果要建索引的话，那么可以选择 UNIQUE （唯一的，不允许重复）</span><br><span class="line">除此之外还有全文索引，即FULLTEXT</span><br><span class="line">会员备注信息：如果需要建索引的话，可以选择全文搜索。</span><br><span class="line">用于搜索很长一篇文章的时候，效果最好。</span><br><span class="line">用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。</span><br><span class="line">但其实对于全文搜索，我们并不会使用MySQL自带的该索引，而是会选择第三方软件如Sphinx，专门来做全文搜索。</span><br><span class="line">各个索引的应用场景</span><br><span class="line"></span><br><span class="line">索引建的太多，会出现以下问题（重点）：</span><br><span class="line">会导致增删改的效率降低；而且对数据库表的维护会变得极其困难，尤其是大型分区表，在整理数据时（比如删除一个分区），非常、非常的耗时；因为查的时候是根据索引查的，所以快；但是在插入更新数据的时候系统会自动修改索引，所以就很慢。</span><br></pre></td></tr></table></figure><h2 id="5、索引的两大类型hash与btree"><a href="#5、索引的两大类型hash与btree" class="headerlink" title="5、索引的两大类型hash与btree"></a>5、索引的两大类型hash与btree</h2><p><strong>可以在创建上述索引的时候，为其指定索引类型，分两类：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br></pre></td></tr></table></figure><p><strong>不同的存储引擎支持的索引类型也不一样：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure><h2 id="6、练习-创建-删除索引语法"><a href="#6、练习-创建-删除索引语法" class="headerlink" title="6、练习 创建/删除索引语法"></a>6、练习 创建/删除索引语法</h2><blockquote><p>语法如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">创建/删除索引的语法</span><br><span class="line">善用帮助文档</span><br><span class="line">help create</span><br><span class="line">help create index</span><br><span class="line"></span><br><span class="line">#方法一：创建表时</span><br><span class="line">    　　CREATE TABLE 表名 (</span><br><span class="line">                字段名1  数据类型 [完整性约束条件…],</span><br><span class="line">                字段名2  数据类型 [完整性约束条件…],</span><br><span class="line">                [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">                [索引名]  (字段名[(长度)]  [ASC |DESC]) </span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">        CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名 </span><br><span class="line">                     ON 表名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">        ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                             索引名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">                           </span><br><span class="line">#查看索引：SHOW INDEX FROM 表名字;</span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br></pre></td></tr></table></figure><p>1.创建普通性索引；格式：create index 索引名称 on 表名(列名);  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create index putong on it(工资);</span><br><span class="line">mysql&gt; show index from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vpvrgp8j60wc0atwgc02.jpg" alt="image-20210126150202815"></p><p>2、创建唯一性索引；格式：create unique index 索引名称 on 表名(列名);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2、创建唯一性索引；格式：create unique index 索引名称 on 表名(列名);</span><br><span class="line">mysql&gt; create unique index weiyi on it(身份证号);</span><br><span class="line">mysql&gt; show index from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vq0xeptj60wc0ctace02.jpg" alt="image-20210126150322356"></p><p>3、创建多列普通索引；格式：create index 索引名称 on 表名(列名1,列名2,……);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create index duolie on it(岗位,姓名);</span><br><span class="line">mysql&gt; show index from it;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vq5pg15j60we0fgwh302.jpg" alt="image-20210126150402564"></p><p>4、删除索引；格式：dorp index 索引名 on 表名字;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop index weiyi on it;      #删除weiyi索引</span><br><span class="line">mysql&gt; drop index putong on it;     #删除putong索引</span><br><span class="line">mysql&gt; drop index duolie on it;     #删除duolie索引</span><br></pre></td></tr></table></figure><p>5、测试索引查询速度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、准备表</span><br><span class="line">create table s1(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">gender char(6),</span><br><span class="line">email varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">2、创建存储过程auto_insert1()函数，实现批量插入记录</span><br><span class="line">mysql&gt; delimiter $$      #声明存储过程的结束符号为$$</span><br><span class="line">create procedure auto_insert1()</span><br><span class="line">BEGIN</span><br><span class="line">    declare i int default 1;</span><br><span class="line">    while(i&lt;3000000)do</span><br><span class="line">        insert into s1 values(i,concat(&#x27;egon&#x27;,i),&#x27;male&#x27;,concat(&#x27;egon&#x27;,i,&#x27;@oldboy&#x27;));</span><br><span class="line">        set i=i+1;</span><br><span class="line">    end while;</span><br><span class="line">END$$          #$$结束</span><br><span class="line">delimiter ;    #重新声明分号为结束符号</span><br><span class="line"></span><br><span class="line">3、查看储存过程</span><br><span class="line">mysql&gt; show create procedure auto_insert1\G</span><br><span class="line"></span><br><span class="line">4、调用存储过程；call  #调用</span><br><span class="line">mysql&gt; call auto_insert1();</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqdp6p4j30wf03mdgu.jpg" alt="image-20210126150546955"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc s1;        #查看s1表的结构</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqgtwbnj60wf0bvad302.jpg" alt="image-20210126150633680"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from s1;    #查看s1表有多少行数据</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqkndnaj30vz0ahmz1.jpg" alt="image-20210126150658915"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5、在没有索引的前提下测试查询速度</span><br><span class="line">mysql&gt; select * from s1 where id=333;    #查询；数据字段越长，查询时间越慢</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqp92mbj30wd09c0vb.jpg" alt="image-20210126150729341"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from s1 where email=&#x27;egon333@oldboy&#x27;;     #查询</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqu0ei4j30w60910v9.jpg" alt="image-20210126150814816"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6、在有索引的情况下测试查询速度</span><br><span class="line">6.1) 一定是为搜索条件的字段创建索引，比如select * from t1 where age &gt; 5;就需要为age加上索引。</span><br><span class="line"></span><br><span class="line">6.2) 在表中已经有大量数据的情况下，建索引会很慢，且占用硬盘空间，插入删除更新都很慢，只有查询快；因为查的时候是根据索引查的，所以快；但是在插入更新数据的时候系统会自动修改索引，所以就很慢。</span><br><span class="line"></span><br><span class="line">6.3) 需要注意的是：innodb表的索引会存放于s1.ibd文件中，而myisam表的索引则会有单独的索引文件table1.MYI</span><br><span class="line"></span><br><span class="line">mysql&gt; create index putong1 on s1(id);      #给id列创建普通索引</span><br><span class="line">mysql&gt; create index putong2 on s1(email);   #给email列创建普通索引</span><br><span class="line">mysql&gt; show index from s1;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vqyrx9oj30w309y0uh.jpg" alt="image-20210126150927026"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from s1 where id=333;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vr2xtq5j30w809qdiu.jpg" alt="image-20210126150946075"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from s1 where email=&#x27;egon333@oldboy&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7vr6lhicj30wb0940vi.jpg" alt="image-20210126151022121"></p><h1 id="九、MySQL-锁"><a href="#九、MySQL-锁" class="headerlink" title="九、MySQL 锁"></a>九、MySQL 锁</h1><blockquote><p>锁概述</p></blockquote><p>MySQL的锁机制，就是数据库为了保证数据的一致性而设计的面对并发场景的一种规则。</p><p>最显著的特点是不同的存储引擎支持不同的锁机制，InnoDB支持行锁和表锁，MyISAM支持表锁。</p><p>表锁就是把整张表锁起来，特点是加锁快，开销小，不会出现死锁，锁粒度大，发生锁冲突的概率高，并发相对较低。</p><p>行锁就是以行为单位把数据锁起来, 特点是加锁慢, 开销大, 会出现死锁, 锁粒度小, 发生锁冲突的概率低，并发度也相对表锁较高。</p><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。</p><p>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁。</p><h2 id="1、MyISAM-锁"><a href="#1、MyISAM-锁" class="headerlink" title="1、MyISAM 锁"></a>1、MyISAM 锁</h2><p><strong>在MyISAM引擎中，读锁和写锁是互斥的，读写操作是串行的，锁设计方案如下：</strong></p><ul><li>对于写操作：如果表上没有锁，则在上面加一把写锁，否则，把请求放到写锁队列中。</li><li>对于读操作：如果表上没有锁，则在上面加一把读锁，否则，把请求方到读锁队列中。</li></ul><p><strong>这是什么意思呢？</strong></p><p>意思就是说MyISAM在执行查询语句前，会自动给涉及的所有表加读锁，在执行更新语句(增删改操作)前，会自动给涉及的表加写锁，这个过程并不需要用户干预。</p><p>当一个锁被释放时，锁定权会先被写锁队列中的线程得到，当写锁队列中的请求都跑完后，才轮到读锁队列中的请求。（即使读请求先到锁等待队列中，写请求后到，写请求也会插入到读请求之前！这就是MySQL认为写请求一般比读请求重要）</p><p>这就意味着, 如果一个表上有很多更新操作, 那么select语句将等待直到别的更新都结束后才能查到东西。这也就是为什么MyISAM表不适合大量更新操作应用的原因，因为大量更新操作可能导致查询操作很难获得读锁，从而长久阻塞，致使程序响应超时。</p><p><strong>表锁语句有如下三条（MyISAM和InnoDB都一样）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock tables 表名 read;     #加读锁，可读，但不能更新。</span><br><span class="line">lock tables 表名 write;    #加写锁，其他会话不可读，不可写。</span><br><span class="line">unlock tables;             #释放锁</span><br></pre></td></tr></table></figure><h2 id="2、InnoDB锁类型"><a href="#2、InnoDB锁类型" class="headerlink" title="2、InnoDB锁类型"></a>2、InnoDB锁类型</h2><p><strong>共享锁（S锁、读锁）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名 LOCK IN SHARE MODE;</span><br></pre></td></tr></table></figure><p>一个事务获取了一个数据行的读锁，允许其他事务也来获取读锁，但是不允许其他事务来获取写锁。也就是说, 我上了读锁之后，其他事务也可以来读，但是不能增删改。</p><p><strong>排他锁（X锁、写锁）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名 FOR UPDATE;</span><br><span class="line">一个事务获取了一个数据行的写锁，其他事务就不能再跑来获取任何锁了，所有请求都会被阻塞，直到当前的写锁被释放。</span><br></pre></td></tr></table></figure><p><strong>意向共享锁（IS）</strong>：事务在给一个数据行加共享锁之前必须先取得该表的IS锁。</p><p><strong>意向排他锁（IX）</strong>：事务在给一个数据行加共享锁之前必须先取得该表的IX锁。</p><p><strong>MDL锁</strong>：在事务中，InnoDB会给涉及的所有表加上一个MDL锁，其他事务就不可以执行任何DDL语句的操作。（亲测只要在事务中，不管是查询语句还是更新语句，涉及到的表都会被加上MDL锁）<strong>这三种锁，是InnoDB内部使用的锁，是自动 。</strong></p><p><strong>几种行锁技术</strong></p><p>1、记录锁（record lock）</p><p>这是一个索引记录锁，它是建立在索引记录上的锁（主键和唯一索引都算），很多时候，锁定一条数据，由于无索引，往往会导致整个表被锁住，建立合适的索引可以防止扫描整个表。</p><p>如：开两个会话，两个事务，并且都不commit，该表有主键，两个会话修改同一条数据，第一个会话update执行后，第二个会话的update是无法执行成功的，会进入等待状态，但是如果update别的数据行就可以成功。</p><p>再例如：开两个会话，两个事务，并且都不commit，并且该表无主键无索引，那么第二个会话不管改什么都会进入等待状态。因为无索引的话，整个表的数据都被第一个会话锁定了。</p><p>2、锁等待和死锁</p><p>锁等待是指一个事务过程中产生的锁，其他事务需要等待上一个事务释放它的锁，才能占用该资源，如果该事务一直不释放，就需要继续等待下去，直到超过了锁等待时间，会报一个超时错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看锁等待允许时间</span><br><span class="line">SHOW VARIABLES LIKE &quot;innodb_lock_wait_timeout&quot;;</span><br></pre></td></tr></table></figure><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，就是所谓的死循环。</p><p>典型的实验过程就是两个事务并发，互相修改自己的一条数据，紧接着又修改对方的锁定的那条数据，都要等待对方的锁，死锁就产生了。</p><p>出现死锁的问题并不可怕，解决死锁通常有如下办法：</p><ul><li><p>不要把无关的操作放到事务里，小事务发生冲突的概率较低。</p></li><li><p>如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表, 这样事务就会形成定义良好的查询并且没有死锁。</p></li><li><p>尽量按照索引去查数据，范围查找增加了锁冲突的可能性。</p></li><li><p>对于非常容易产生死锁的业务部分，可以尝试升级锁粒度，通过表锁定来减少死锁产生的概率。</p></li></ul><p>3、锁监控</p><p>查询哪些表正在被锁定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW OPEN TABLES WHERE In_use &gt; 0;</span><br></pre></td></tr></table></figure><p>这个命令监控的是被表锁锁住的表，亲测如果用行锁，这个命令是没有反应的，真的得自己动手实践才能发现真相。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes</title>
      <link href="/2021/06/06/Kubernetes/"/>
      <url>/2021/06/06/Kubernetes/</url>
      
        <content type="html"><![CDATA[<!--toc--><span id="more"></span><h1 id="一、K8S概念"><a href="#一、K8S概念" class="headerlink" title="一、K8S概念"></a>一、K8S概念</h1><h2 id="1-什么是Kubernetes"><a href="#1-什么是Kubernetes" class="headerlink" title="1. 什么是Kubernetes ?"></a>1. 什么是Kubernetes ?</h2><blockquote><p>k8s是一组服务器集群，K8s所管理的集群节点上的容器。<a href="https://kubernetes.io/">官方网站</a></p></blockquote><p>Kubernetes是一个可移植的，可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。它拥有一个庞大且快速增长的生态系统。Kubernetes的服务，支持和工具广泛可用。</p><p>Kubernetes这个名字起源于希腊语，意思是舵手或飞行员。Google在2014年开源了Kubernetes项目。Kubernetes将超过15年的Google在大规模生产工作负载方面的经验与社区中最好的想法和实践相结合。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uo0jsryj60ys0md76e02.jpg" alt="c"></p><h2 id="2-为什么需要它？他的功能？"><a href="#2-为什么需要它？他的功能？" class="headerlink" title="2. 为什么需要它？他的功能？"></a>2. 为什么需要它？他的功能？</h2><p>容器是捆绑和运行应用程序的好方法。在生产环境中，您需要管理运行应用程序的容器，并确保没有停机时间。例如，如果一个容器发生故障，则需要启动另一个容器。如果由系统处理此行为，会不会更容易？</p><p>这就是Kubernetes的救援方法！Kubernetes为您提供了一个可弹性运行分布式系统的框架。它负责应用程序的扩展和故障转移，提供部署模式等。例如，Kubernetes可以轻松管理系统的Canary部署。</p><h3 id="自我修复"><a href="#自我修复" class="headerlink" title="自我修复"></a>自我修复</h3><blockquote><p>在节点故障时重新启动失败的容器，替换和重新部署容器，保证预期的副本数量；杀死健康检查失败的容器，并且在未准备好之前不会处理客户端请求，确保线上服务不中断。</p></blockquote><h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><blockquote><p>使用命令、UI或者基于CPU使用情况自动快速扩容和缩容应用程序实例，保证应用业务高峰并发时的高可用性；业务低峰时回收资源，以最小成本运行服务。</p></blockquote><h3 id="自动部署和回滚"><a href="#自动部署和回滚" class="headerlink" title="自动部署和回滚"></a>自动部署和回滚</h3><blockquote><p>Kubernetes采用滚动更新策略更新应用，一次更新一个Pod，而不是同时删除所有Pod，如果更新过程中出现问题，Kubernetes将回滚更改，升级保证业务不受影响。</p></blockquote><h3 id="存储编排"><a href="#存储编排" class="headerlink" title="存储编排"></a>存储编排</h3><blockquote><p>挂载外部存储系统，无论是来自本地存储，公有云（如AWS），还是网络存储（如NFS、iSCSI、GlusterFS、Ceph）都作为集群资源的一部分使用，极大提高存储使用灵活性。</p></blockquote><h3 id="服务发现和负载均衡"><a href="#服务发现和负载均衡" class="headerlink" title="服务发现和负载均衡"></a>服务发现和负载均衡</h3><blockquote><p>Kubernetes为多个容器提供一个统一访问入口（内部IP地址和一个DNS名称），并且负载均衡关联的所有容器，使得用户无需考虑容器IP问题。集群内应用可以通过DNS名称访问另一个应用，方便微服务之间通信。</p></blockquote><h3 id="机密和配置管理"><a href="#机密和配置管理" class="headerlink" title="机密和配置管理"></a>机密和配置管理</h3><blockquote><p>管理机密数据和应用程序配置，而不需要把敏感数据暴露在镜像里，提高敏感数据安全性。</p></blockquote><h3 id="资源监控"><a href="#资源监控" class="headerlink" title="资源监控"></a>资源监控</h3><blockquote><p>Node节点组件集成cAdvisor资源收集工具，可通过Heapster汇总整个集群节点资源数据，然后存储到InfluxDB时序数据库，再由Grafana展示，可以快速实现对集群资源监控，满足基本监控需求。</p></blockquote><h3 id="提供认证和授权"><a href="#提供认证和授权" class="headerlink" title="提供认证和授权"></a>提供认证和授权</h3><blockquote><p>支持属性访问控制 (ABAC)、角色访问控制（RBAC）认证授权策略，控制用户是否有权限使用Kubernetes API做某些事情，精细化权限分配。</p></blockquote><h2 id="3-Kubernetes架构"><a href="#3-Kubernetes架构" class="headerlink" title="3. Kubernetes架构"></a>3. Kubernetes架构</h2><blockquote><p>kubernetes分别有两种角色：1、master 管理节点     2、worker 工作节点</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uo5kl1gj31cc0ro466.jpg" alt="b"></p><blockquote><p><strong>生产k8s集群图构</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uo9xan5j31090qztby.jpg" alt="a"></p><h2 id="4-Kubernetes组件"><a href="#4-Kubernetes组件" class="headerlink" title="4. Kubernetes组件"></a>4. Kubernetes组件</h2><blockquote><p>kubernetes分为 Master节点和 Node节点，前者是管理节点，后者是容器运行的节点。其中Master节点主要有3个重要组件，分别是APIServer，sheduler 和 controller manager。</p><p>Node节点 有两个组件 kubelet 和 kubelet （有时候master节点也可以既是管理节点也是工作节点）</p></blockquote><h3 id="4-1-Master-组件"><a href="#4-1-Master-组件" class="headerlink" title="4.1 Master 组件"></a>4.1 Master 组件</h3><h4 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h4><blockquote><p>APIServer组件负责响应用户的管理请求、进行指挥协调工作，所有服务访问统一入口。</p></blockquote><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><blockquote><p>scheduler组件是将待调度的pod按照一定的调度算法绑定到合适的工作节点上，负责介绍任务，选择合适的点进行分配任务。</p></blockquote><h4 id="Controller-manager"><a href="#Controller-manager" class="headerlink" title="Controller manager"></a>Controller manager</h4><blockquote><p>是一组控制器的合集，负责控制控制管理对应的资源，如副本（replication）和工作节点（node）等。维持副本期望数目</p></blockquote><h4 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h4><blockquote><p>etcd 负责以K/V的形式保存 Kubernetes Cluster 的配置信息和各种资源的状态信息。当数据发生变化时，etcd 会快速地通知 Kubernetes 相关组件。键值对数据库储存K8S集群所有重要信息（持久化）</p></blockquote><h3 id="4-2-Node组件"><a href="#4-2-Node组件" class="headerlink" title="4.2 Node组件"></a>4.2 Node组件</h3><blockquote><p>管理维护pod运行的agent，直接跟容器引擎交互实现容器的生命周期管理</p></blockquote><h4 id="Kube-proxy"><a href="#Kube-proxy" class="headerlink" title="Kube-proxy"></a>Kube-proxy</h4><blockquote><p>将service的流量转发到对应endpoint，负责写入规则至 IPTABLES、IPvs实现服务映射访间的</p></blockquote><h4 id="Flannel网络"><a href="#Flannel网络" class="headerlink" title="Flannel网络"></a>Flannel网络</h4><blockquote><p>维持各个节点上pod之间的通信。</p></blockquote><h3 id="4-3-重要组件"><a href="#4-3-重要组件" class="headerlink" title="4.3 重要组件"></a>4.3 重要组件</h3><h4 id="Coredns"><a href="#Coredns" class="headerlink" title="Coredns"></a>Coredns</h4><blockquote><p>可以为集群中的Svc创建一个域名IP的对应关系解析</p></blockquote><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><blockquote><p>给K8S集群提供一个B/S结构访问体系</p></blockquote><h4 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h4><blockquote><p>官方只能实现四层代理， INGRESS可以实现七层代理</p></blockquote><h4 id="Federation"><a href="#Federation" class="headerlink" title="Federation"></a>Federation</h4><blockquote><p>提供一个可以跨集群中心多K8S统一管理功能</p></blockquote><h4 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h4><blockquote><p>提供K8sS集群的监控能力</p></blockquote><h4 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h4><blockquote><p>提供K8s集群旦志统一分析介入平台</p></blockquote><h2 id="5-k8s网络架构概念"><a href="#5-k8s网络架构概念" class="headerlink" title="5. k8s网络架构概念"></a>5. k8s网络架构概念</h2><blockquote><p><strong>CNI（容器网络接口）</strong></p><p>CNI是Container Network Interface的是一个标准的，通用的接口。现在容器平台：docker，kubernetes，mesos，容器网络解决方案：flannel，calico，weave。只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能，而CNI正是这样的一个标准接口协议。</p><p><strong>pod的通信分类</strong></p><p>同一个Pod内的多个容器之间：lo Network</p><p>各Pod之间 或 不同主机各Pod 的通讯：Over lay Network</p><p>Pod 与 Service之间的通讯：各节点的 Iptables规则 或者 IPVS</p></blockquote><p><strong>K8S整体网络模型图</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uohgqrvj30lu0gzgno.jpg"></p><p><strong>K8S中的三种网络</strong></p><blockquote><p>node网络：负责不同主机之间的pod通信的入口和出口（物理网络）</p><p>service网络：负责对外提供服务（暴露网络）</p><p>pod网络：负责pod内部容器之间的通信 和 pod 与 pod之间的通信（内部网络）</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upe69bgj30w30g3gqb.jpg" alt="image-20200920141256555"></p><p><strong>K8S的网络通讯原理</strong></p><blockquote><p><strong>同一个Pod内部通讯：</strong></p><ul><li>同一个Pod共享同一个网络命名空间，共享同一个 Linux协议栈。</li></ul><p><strong>Pod1 至 Pod2：</strong></p><ul><li>Pod1至Pod2不在同一台主机：Pod的地址是与 docker0在同一个网段的，但 docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。将PoIP和所在 Node’MJIP关联起来，通过这个关联让Pod可以互相访问</li><li>Podl与Pod2在同一台机器：由 Docker0网桥直接转发请求至Pod2，不需要经过 Flannel</li></ul><p><strong>Pod 至 Service的网络：</strong></p><ul><li>iptables 或者 IPVS维护和转发</li></ul><p><strong>Pod到外网：</strong></p><ul><li>Pod向外网发送请求，查找路由表，转发数据包到宿主机的网卡，宿主网卡完成路由选择后， iptables执行 Masquerade，把源IP更改为宿主网卡的IP，然后向外网服务器发送请求</li></ul><p><strong>外网访问Pod：</strong></p><ul><li>访问对应的Service即可</li></ul></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upifvlkj319g0kznpg.jpg" alt="ees"></p><h2 id="6-Kubernetes核心概念"><a href="#6-Kubernetes核心概念" class="headerlink" title="6. Kubernetes核心概念"></a>6. Kubernetes核心概念</h2><h3 id="6-1-container"><a href="#6-1-container" class="headerlink" title="6.1 container"></a>6.1 container</h3><blockquote><p>容器可以运行服务和程序，容器是独立运行的一个或一组应用。容器可以进行启动、开始、停止、删除等操作，每个容器都是相互隔离的。可以把容器看作是一个简易版的linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行其中的应用程序。</p></blockquote><h3 id="6-2-namespace"><a href="#6-2-namespace" class="headerlink" title="6.2 namespace"></a>6.2 namespace</h3><blockquote><p>可以将一个物理的cluster逻辑上划分成多个虚拟cluster，每个cluster就是一个namespace。不同的namespace里的资源是完全隔离的。</p></blockquote><h3 id="6-3-labels"><a href="#6-3-labels" class="headerlink" title="6.3 labels"></a>6.3 labels</h3><blockquote><p>标签用于区分对象（比如pod和services）, kubernetes中的任意对象都是通过label进行标识，label的实质是一系列的key/value键值对，其中key与value由用户自己指定。label可以附加到各种资源对象上，如node、pod、service、RC等，一个资源对象可以定义任意数量的label，可以通过label selector（标签选择器）查询和筛选资源对象。label是rc和service运行的基础，两者通过label来进行关联node上运行的pod</p></blockquote><h3 id="6-4-pod"><a href="#6-4-pod" class="headerlink" title="6.4 pod"></a>6.4 pod</h3><blockquote><p>在kubernetes系统中, pod是最小部署单元, 一个pod包含一个或多个容器（一组容器的集合）,<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/"> pod</a> 是一个可以被创建、销毁、调度、管理的最小部署单元。kubernates为每个pod都分配了唯一的ip地址, 称之为PodIP, 一个pod里的多个容器共享podip地址，它负责外部跟容器之间进行通信。</p><p>Pod主要分为两种类型：1、自主式pod，2、控制器管理pod</p><p>pod是kubernetes最重要的基本概念，也是k8s中的最小运行单元，一个pod中可以运行一个或多个的container及一个管理 container——pause</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upmukg7j30wp0hgmyd.jpg" alt="image"></p><h3 id="6-5-Controller-Manager"><a href="#6-5-Controller-Manager" class="headerlink" title="6.5 Controller Manager"></a>6.5 Controller Manager</h3><blockquote><p>Controller Manager 由 kube-controller-manager 和 cloud-controller-manager 组成， 是Kubernetes 的大脑， 它通过 apiserver 监控整个集群的状态， 并确保集群处于预期的工作状态。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7upq32y4j30of0fqn0l.jpg" alt="image-20210226110055294"></p><h3 id="6-6-services"><a href="#6-6-services" class="headerlink" title="6.6 services"></a>6.6 services</h3><blockquote><p><a href="https://www.cnblogs.com/linuxk/p/9605901.html">services</a> 是kubernetes最外围的单元，通过虚拟一个访问ip及服务端口，可以访问我们定义好的pod资源，是通过iptables的nat转发来实现，转发的目标端口为kube_proxy生成的随机端口。services代理pod集合对外表现是一个访问入口，分配一个集群ip地址，来自这个ip的请求将负载均衡转发后端pod中的容器，service通过lable selector选择一组pod提供服务。</p></blockquote><p>deployment可以部署多个副本，每个pod 都有自己的IP，外界如何访问这些副本那？</p><p>答案是：service</p><p>k8s的 service定义了外界访问一组特定pod的方式。service有自己的IP和端口，service为pod提供了负载均衡。</p><p>k8s运行容器pod与访问容器这两项任务分别由controller和service执行。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uptd7wbj30su0jcjya.jpg" alt="image-20200920132730652"></p><blockquote><p><strong>K8S-Service类型：</strong></p></blockquote><p>ClusterIp：默认类型，自动分配一个仅Cluster内部可以访问的虚拟IP</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grndlevtw8j30ey09yaab.jpg"></p><p>NodePort：在ClusterIP基础上为Service在每台机器上绑定一个端口，这样可以通过NodeIP:NodePort来访问服务</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1grndmm5ymqj30fc07swer.jpg"></p><p>LoadBalancer：在NodePort基础上，借助cloud provider创建一个外部负载均衡器，并将请求转发到NodeIP:NodePort</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7ur6odhwj30fg0fzabf.jpg"></p><h1 id="二、部署K8S集群（kubeadm）"><a href="#二、部署K8S集群（kubeadm）" class="headerlink" title="二、部署K8S集群（kubeadm）"></a>二、部署K8S集群（kubeadm）</h1><blockquote><p>准备三台Linux虚拟机（K8S集群三台起步），系统用CentOS7.4，虚拟机配置是2颗CPU和2G内存（K8S最低要求的配置），网络使用桥接网卡方式并使用静态IP</p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th><th>角色描述</th></tr></thead><tbody><tr><td>Master</td><td>ens32:192.168.2.1</td><td>K8S Master节点/ETCD节点</td></tr><tr><td>Node1</td><td>ens32:192.168.2.2</td><td>K8S Node节点</td></tr><tr><td>Node2</td><td>ens32:192.168.2.3</td><td>K8S Node节点</td></tr><tr><td>harbor</td><td>ens32:192.168.2.4</td><td>docker 镜像仓库节点</td></tr></tbody></table><h2 id="1-系统环境初始化"><a href="#1-系统环境初始化" class="headerlink" title="1. 系统环境初始化"></a>1. 系统环境初始化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改主机名</span></span><br><span class="line">hostnamectl set-hostname master1</span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line">hostnamectl set-hostname node2</span><br><span class="line">hostnamectl set-hostname harbor</span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统时区为中国/上海</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前的 UTC 时间写入硬件时钟</span></span><br><span class="line">timedatectl set-local-rtc 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启依赖于系统时间的服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载阿里源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line">yum install -y epel-release conntrack ntpdate ntp ipvsadm ipset iptables-services iptables curl sysstat libseccomp wget unzip net-tools git yum-utils jq  device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步时间</span></span><br><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hosts</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; /etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.1 master1</span></span><br><span class="line"><span class="string">192.168.2.2 node1</span></span><br><span class="line"><span class="string">192.168.2.3 node2</span></span><br><span class="line"><span class="string">192.168.2.4 hub.lemon.com</span></span><br><span class="line"><span class="string">199.232.68.133 raw.githubusercontent.com</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置防火墙为 Iptables 并设置空规则</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl  start iptables</span><br><span class="line">systemctl  <span class="built_in">enable</span> iptables</span><br><span class="line">iptables -F  &amp;&amp;  service iptables save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap、selinux</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统不需要服务</span></span><br><span class="line">systemctl stop postfix &amp;&amp; systemctl <span class="built_in">disable</span> postfix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 rsyslogd 和 systemd journald</span></span><br><span class="line"><span class="comment"># 持久化保存日志的目录</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/journal</span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Journal]</span></span><br><span class="line"><span class="string"># 持久化保存到磁盘</span></span><br><span class="line"><span class="string">Storage=persistent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 压缩历史日志</span></span><br><span class="line"><span class="string">Compress=yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SyncIntervalSec=5m</span></span><br><span class="line"><span class="string">RateLimitInterval=30s</span></span><br><span class="line"><span class="string">RateLimitBurst=1000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 最大占用空间 10G</span></span><br><span class="line"><span class="string">SystemMaxUse=10G</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 单日志文件最大 200</span></span><br><span class="line"><span class="string">MSystemMaxFileSize=200M</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 日志保存时间 2 周</span></span><br><span class="line"><span class="string">MaxRetentionSec=2week</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不将日志转发到 syslog</span></span><br><span class="line"><span class="string">ForwardToSyslog=no</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h2 id="2-升级系统内核并优化"><a href="#2-升级系统内核并优化" class="headerlink" title="2. 升级系统内核并优化"></a>2. 升级系统内核并优化</h2><blockquote><p>CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定，例如：</p><p>高版本的 docker(1.13 以后) 启用了 3.10 kernel 实验支持的 kernel memory account 功能(无法关闭)，当节点压力大如频繁启动和停止容器时会导致 cgroup memory leak；网络设备引用计数泄漏, 会导致类似于报错：”kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”;</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决方案：升级内核到 4.4.X 以上；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载内核源</span></span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本内核</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install -y kernel-lt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用内核</span></span><br><span class="line">cat /boot/grub2/grub.cfg |grep menuentry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核启动项</span></span><br><span class="line">grub2-editenv list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级系统文件</span></span><br><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 设置开机从新内核启动 &amp; 重启系统</span></span><br><span class="line">grub2-set-default <span class="string">&quot;CentOS Linux (4.4.236-1.el7.elrepo.x86_64) 7 (Core)&quot;</span> &amp;&amp; reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># kube-proxy开启ipvs的前置条件</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自加载</span></span><br><span class="line">chmod a+x /etc/rc.d/rc.local</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;bash /etc/sysconfig/modules/ipvs.modules&#x27;</span> &gt;&gt; /etc/rc.local</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化内核参数</span></span><br><span class="line">cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"># 关闭IPV6协议</span></span><br><span class="line"><span class="string">net.ipv6.conf.all.disable_ipv6=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启网桥模式</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启路由转发</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不检查物理内存是否够用</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启 OOM</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=1048576</span></span><br><span class="line"><span class="string">fs.inotify.max_user_instances=8192</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启的文件句柄数目</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 开启对大的文件数目</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ~~~</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string">vm.dirty_bytes=15728640</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自动加载</span></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure><h2 id="3-部署Docker、kubeadm、kubectl"><a href="#3-部署Docker、kubeadm、kubectl" class="headerlink" title="3. 部署Docker、kubeadm、kubectl"></a>3. 部署Docker、kubeadm、kubectl</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载阿里的docker源、Centos7源、kubernetes源</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache &amp;&amp; <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docke，记给docker换镜像源</span></span><br><span class="line">yum -y install docker-ce-18.09.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 /etc/docker 目录</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 daemon配置文件</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [&quot;https://p8hkkij9.mirror.aliyuncs.com&quot;],</span></span><br><span class="line"><span class="string">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Kubeadm （主从配置）</span></span><br><span class="line"><span class="comment"># 这里正常情况下，master上安装kubeadm、kubectl，node只安装kubelet就行，不过都装上也没事。</span></span><br><span class="line">yum -y install kubeadm-1.15.1 kubectl-1.15.1 kubelet-1.15.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动kubelet</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2 id="4-初始化主节点"><a href="#4-初始化主节点" class="headerlink" title="4. 初始化主节点"></a>4. 初始化主节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s节点上提前下载k8s镜像</span></span><br><span class="line">cat image-k8s-v1_15_1.sh </span><br><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">images=(</span><br><span class="line">    kube-apiserver:v1.15.1</span><br><span class="line">    kube-controller-manager:v1.15.1</span><br><span class="line">    kube-scheduler:v1.15.1</span><br><span class="line">    kube-proxy:v1.15.1</span><br><span class="line">    pause:3.1</span><br><span class="line">    etcd:3.3.10</span><br><span class="line">    coredns:1.3.1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line">    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">bash image-k8s-v1_15_1.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查镜像是否完善</span></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">k8s.gcr.io/kube-apiserver            v1.15.1             68c3eb07bfc3        14 months ago       207MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager   v1.15.1             d75082f1d121        14 months ago       159MB</span><br><span class="line">k8s.gcr.io/kube-scheduler            v1.15.1             b0b3c4c404da        14 months ago       81.1MB</span><br><span class="line">k8s.gcr.io/kube-proxy                v1.15.1             89a062da739d        14 months ago       82.4MB</span><br><span class="line">k8s.gcr.io/coredns                   1.3.1               eb516548c180        20 months ago       40.3MB</span><br><span class="line">k8s.gcr.io/etcd                      3.3.10              2c4adeb21b4f        21 months ago       258MB</span><br><span class="line">k8s.gcr.io/pause                     3.1                 da86e6ba6ca1        2 years ago         742kB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改kubeadm默认初始化配置模板</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubeadm config print init-defaults &gt; kubeadm-config.yaml</span></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># cat kubeadm-config.yaml </span></span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  <span class="comment"># 填写好master1的IP地址</span></span><br><span class="line">  advertiseAddress: 192.168.2.1</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: master1</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: k8s.gcr.io</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line"><span class="comment"># 选择初始化的k8s集群版本镜像</span></span><br><span class="line">kubernetesVersion: v1.15.1</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  <span class="comment"># 原因是一会要用的flannel来解决pod的扁平化网络，而flannel默认的网段就是10.244.0.0/16，所以这就将pod的IP段设置为和flannel相同的IP段，免得后期再做修改</span></span><br><span class="line">  podSubnet: <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line"><span class="comment"># 下面这一段的意思是将默认的iptables调度方式改为为IPVS</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">featureGates:</span><br><span class="line">  SupportIPVSProxyMode: <span class="literal">true</span></span><br><span class="line">mode: ipvs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化k8s集群</span></span><br><span class="line"><span class="comment"># 如果</span></span><br><span class="line"><span class="comment"># --experimental-upload-certs：可以让后来加入的主节点自动加入证书；注：v1.15以上版本的参数已改为--upload-certs</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log</span></span><br></pre></td></tr></table></figure><h2 id="5-加入主节点以及其余工作节点"><a href="#5-加入主节点以及其余工作节点" class="headerlink" title="5. 加入主节点以及其余工作节点"></a>5. 加入主节点以及其余工作节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># cat kubeadm-init.log</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.2.1:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:4dc6790b3232bc4fd7f80e614d38e21b15cfd3d318f09b596b68336375b381e4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查kubelet服务是否已经打开</span></span><br><span class="line">systemctl status kubelet | grep running</span><br><span class="line">   Active: active (running) since 日 2020-09-13 01:53:32 CST; 6min ago</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是会发现节点的状态是NotReady</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME      STATUS     ROLES    AGE     VERSION</span><br><span class="line">master1   NotReady   master   11m     v1.15.1</span><br><span class="line">node1     NotReady   &lt;none&gt;   2m13s   v1.15.1</span><br><span class="line">node2     NotReady   &lt;none&gt;   2m10s   v1.15.1</span><br></pre></td></tr></table></figure><p><strong>这就需要下面来部署flannel来解决扁平化网络问题</strong></p><h2 id="6-部署-CNI-flannel网络"><a href="#6-部署-CNI-flannel网络" class="headerlink" title="6. 部署 CNI - flannel网络"></a>6. 部署 CNI - flannel网络</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署flannel全覆盖网络</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再来检查节点状态</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME      STATUS   ROLES    AGE     VERSION</span><br><span class="line">master1   Ready    master   18m     v1.15.1</span><br><span class="line">node1     Ready    &lt;none&gt;   8m38s   v1.15.1</span><br><span class="line">node2     Ready    &lt;none&gt;   8m35s   v1.15.1+</span><br></pre></td></tr></table></figure><h2 id="7-查看集群状态-和相关的容器"><a href="#7-查看集群状态-和相关的容器" class="headerlink" title="7. 查看集群状态 和相关的容器"></a>7. 查看集群状态 和相关的容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># kubectl get nodes -o wide</span></span><br><span class="line">NAME      STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">master1   Ready    master   20m   v1.15.1   192.168.2.1   &lt;none&gt;        CentOS Linux 7 (Core)   4.4.236-1.el7.elrepo.x86_64   docker://18.9.6</span><br><span class="line">node1     Ready    &lt;none&gt;   10m   v1.15.1   192.168.2.2   &lt;none&gt;        CentOS Linux 7 (Core)   4.4.236-1.el7.elrepo.x86_64   docker://18.9.6</span><br><span class="line">node2     Ready    &lt;none&gt;   10m   v1.15.1   192.168.2.3   &lt;none&gt;        CentOS Linux 7 (Core)   4.4.236-1.el7.elrepo.x86_64   docker://18.9.6</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod --all-namespaces -o wide</span></span><br><span class="line">NAMESPACE     NAME                              READY   STATUS    RESTARTS   AGE    IP            NODE      NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-system   coredns-5c98db65d4-57czz          1/1     Running   4          136d   10.244.0.9    master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   coredns-5c98db65d4-s9fsm          1/1     Running   4          136d   10.244.0.8    master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   etcd-master1                      1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-apiserver-master1            1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-controller-manager-master1   1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-6qw52       1/1     Running   20         136d   192.168.2.3   node2     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-hj7wr       1/1     Running   1          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-wc96r       1/1     Running   20         136d   192.168.2.2   node1     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-5xcpl                  1/1     Running   5          136d   192.168.2.3   node2     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-lwjps                  1/1     Running   4          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-r77pb                  1/1     Running   4          136d   192.168.2.2   node1     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-scheduler-master1            1/1     Running   3          136d   192.168.2.1   master1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="8-搭建配置harbor私有仓库"><a href="#8-搭建配置harbor私有仓库" class="headerlink" title="8. 搭建配置harbor私有仓库"></a>8. 搭建配置harbor私有仓库</h2><blockquote><p>安装Harbor需要先安装docker和docker-compose，上面的系统初始化、系统升级和优化、安装Docker的步骤这里不再陈述</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有docker节点的daemon.json文件上添加下面信任配置</span></span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://p8hkkij9.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">    <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">    <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://hub.lemon.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#~~ 这里先不急着重启docker，等一会颁发完证书之后在重启</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Harbor节点上安装docker-compose</span></span><br><span class="line">[root@harbor ~]<span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line">[root@harbor ~]<span class="comment"># chmod a+x docker-compose</span></span><br><span class="line">[root@harbor ~]<span class="comment"># mv docker-compose /usr/local/bin/</span></span><br><span class="line">[root@harbor ~]<span class="comment"># docker-compose --version</span></span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Harbor私有hub，创建CA证书</span></span><br><span class="line">[root@harbor ~]<span class="comment"># which openssl</span></span><br><span class="line">/usr/bin/openssl</span><br><span class="line">[root@harbor ~]<span class="comment"># mkdir -p /data/ssl &amp;&amp; cd /data/ssl/</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7utpkiy4j30of052aax.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7utsp2asj30nc03oglx.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建生成证书签名请求</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout hub.lemon.com.key -out hub.lemon.com.csr</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uw7j1trj30o808kta2.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uwcz6dbj30o808kta2.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成注册表主机证书</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># openssl x509 -req -days 365 -in hub.lemon.com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out hub.lemon.com.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=lemon/OU=hub/CN=hub.lemon.com</span><br><span class="line">Getting CA Private Key</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看生成的证书</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfpxgfacwj30le06kwff.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信任自签发的域名证书</span></span><br><span class="line"><span class="comment"># 由于linux操作系统不信任自签发的CA证书，所以需要把证书加入到系统的信任证书里</span></span><br><span class="line"><span class="comment"># 添加自签证书到系统</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># cp hub.lemon.com.crt /etc/pki/ca-trust/source/anchors/</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># ls -lh /etc/pki/ca-trust/source/anchors/</span></span><br><span class="line">总用量 4.0K</span><br><span class="line">-rw-r--r-- 1 root root 1.9K 9月  13 02:23 hub.lemon.com.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统CA信任立刻生效</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># update-ca-trust enable</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># update-ca-trust extract</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果已经启动Docker了，必须要重启；如果安装过Harbor以后再重启的话，有可能会出现harbor连不上的情况，需要重新把Harbor启动的容器和镜像删除后，重新install一遍</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建harbor的证.目录</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># mkdir -p /usr/local/harbor/ssh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制域名证到harbor要安装的路径</span></span><br><span class="line">[root@harbor ssl]<span class="comment"># cp hub.lemon.com.crt hub.lemon.com.key /usr/local/harbor/ssh/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装测试，上传harbor安装包并解压到相应路径</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfpy9cumlj30qr03rdg2.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor ~]<span class="comment"># tar xf harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line">[root@harbor ~]<span class="comment"># mv harbor/* /usr/local/harbor/</span></span><br><span class="line">[root@harbor ~]<span class="comment"># cd /usr/local/harbor/ &amp;&amp; ls</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsfpyrtm7yj60ns02eglt02.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># harbor配置备份 &amp; 修改配置文件</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># cp harbor.yml harbor.yml.bak</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># vim harbor.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uwy44bgj30vd0l93zq.jpg" alt="gggg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成配置 &amp; 安装（需联网）</span></span><br><span class="line"><span class="comment"># 下载harbor所需镜像</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># ./prepare</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">goharbor/prepare    v1.9.0              aa594772c1e8        12 months ago       147MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Harbor</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># ./install.sh --with-notary --with-clair --with-chartmuseum</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Harbor日志文件存放路径为/var/log/harbor/</span></span><br><span class="line"><span class="comment"># 如果需要修改Harbor的配置文件harbor.yml，因为Harbor是基于docker-compose服务编排的，我们可以使用docker-compose命令重启Harbor。不修改配置文件，重启Harbor命令：docker-compose start | stop | restart</span></span><br><span class="line">1、停止Harbor</span><br><span class="line">[root@harbor ~]<span class="comment"># docker-compose -f /usr/local/harbor/docker-compose.yml down</span></span><br><span class="line"></span><br><span class="line">2、启动Harbor</span><br><span class="line">[root@harbor ~]<span class="comment"># docker-compose -f /usr/local/harbor/docker-compose.yml up -d</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uxxrfp3j30p704ojrx.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自运行</span></span><br><span class="line">[root@harbor ~]<span class="comment"># cat &lt;&lt;END&gt;&gt; /etc/rc.local </span></span><br><span class="line">docker-compose -f /usr/<span class="built_in">local</span>/harbor/docker-compose.yml up -d</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">[root@harbor ~]<span class="comment"># chmod u+x /etc/rc.d/rc.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录Harbor仓库</span></span><br><span class="line">[root@harbor harbor]<span class="comment"># docker login https://hub.lemon.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: Harbor12345</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端测试是否能够访问（须在客户端加入hosts）</span></span><br><span class="line">https://hub.lemon.com/</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uzrb0nrj30zh0mk3z9.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7uzvvy8tj30zg0d1wfg.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随便在一个节点上测试docker是否能使用harbor库</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker login https://hub.lemon.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># docker pull httpd</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker tag httpd:latest hub.lemon.com/library/httpd:v1  #打好标签</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker rmi httpd:latest</span></span><br><span class="line">Untagged: httpd:latest</span><br><span class="line">Untagged: httpd@sha256:0fce91cc167634ede639701b7dd1d8093f4ad2f2d9d0d5a8f4be2eaef8a570fb</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v01ysnzj30yw08otay.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># docker push hub.lemon.com/library/httpd:v1    #推送至harbor仓库</span></span><br><span class="line">The push refers to repository [hub.lemon.com/library/httpd]</span><br><span class="line">f1fee4547086: Pushed </span><br><span class="line">a6a46c0268b1: Pushed </span><br><span class="line">951b1be5cf2d: Pushed </span><br><span class="line">d37da03a9458: Pushed </span><br><span class="line">07cab4339852: Pushed </span><br><span class="line">v1: digest: sha256:8c9bc11ca46ffd0b6b8a00e30aa670abef6c0d5d308e318a5cb8cf9e23931649 size: 1367</span><br><span class="line"><span class="comment"># 回到浏览器查看</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v05lx1ej30zk0ehjsd.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v0cpenuj31020bgmxn.jpg" alt="iiii"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kubernetes拉取harbor库镜像创建pod</span></span><br><span class="line"><span class="comment"># 在此之前先将打标签的镜像删除</span></span><br><span class="line">[root@master1 ~]<span class="comment"># docker rmi hub.lemon.com/library/httpd:v1</span></span><br><span class="line">Untagged: hub.lemon.com/library/httpd:v1</span><br><span class="line">Untagged: hub.lemon.com/library/httpd@sha256:8c9bc11ca46ffd0b6b8a00e30aa670abef6c0d5d308e318a5cb8cf9e23931649</span><br><span class="line">Deleted: sha256:6d82971d37d087be9917ab2015a4dc807569c736d3f2017c0821ddc4ed126617</span><br><span class="line">Deleted: sha256:59a897aaa844713f078ea9234bd61b0f4885598a9ffb1267b4c59983813abb52</span><br><span class="line">Deleted: sha256:6942605f2c5a8ba622491e369f2585daafe749a645835f5abb4fb9d11803664d</span><br><span class="line">Deleted: sha256:0f44970c8ecb7e1107f45ff7d5a7f7f3799a9821dce5cd30c51f2f7641339665</span><br><span class="line">Deleted: sha256:97635989e45ed57deef09cd09be52d008a073f2e1e045a1ba91956fbc2db2961</span><br><span class="line">Deleted: sha256:07cab433985205f29909739f511777a810f4a9aff486355b71308bb654cdc868</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于harbor仓库的镜像启动Pod</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl run httpd-01 --image=hub.lemon.com/library/httpd:v1 --port=80 --replicas=1</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/httpd-01 created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有deployment</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-01   1/1     1            1           21s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有rs（RESTARTS副本）</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get rs</span></span><br><span class="line">NAME                  DESIRED   CURRENT   READY   AGE</span><br><span class="line">httpd-01-6c9fbcfb65   1         1         1       47s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有pod</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-01-6c9fbcfb65-jvmc8   1/1     Running   0          58s</span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-jvmc8   1/1     Running   0          69s   10.244.1.2   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式执行容器命令</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-9hlhv ls</span></span><br><span class="line">bin  build  cgi-bin  conf  error  htdocs  icons  include  logsmodules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问这个pod的IP</span></span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.244.1.2</span></span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有已经退出的容器</span></span><br><span class="line">docker rm -v $(docker ps -qa -f status=exited)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v0od5jbj30zh0cyjs2.jpg" alt="k"></p><h2 id="9-基本的使用下K8S"><a href="#9-基本的使用下K8S" class="headerlink" title="9. 基本的使用下K8S"></a>9. 基本的使用下K8S</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod的详细信息</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl -n default get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-jvmc8   1/1     Running   1          12h   10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试删除这个pod容器后，k8s会不会重新策划这个pod</span></span><br><span class="line">kubectl -n default delete pod httpd-01-6c9fbcfb65-jvmc8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证, 可以看到k8s看到副本的期望值不符合之后，就会马上新起来一个pod来满足这个期望值</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl -n default get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          12h   10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在生产环境下发现一个副本的pod已经不够用了，需要扩容</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl -n default scale --replicas=3  deployment/httpd-01</span></span><br><span class="line">deployment.extensions/httpd-01 scaled</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-01   3/3     3            3           12h</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          12h</span><br><span class="line">httpd-01-6c9fbcfb65-hjhjn   1/1     Running   0          51s</span><br><span class="line">httpd-01-6c9fbcfb65-x52hh   1/1     Running   0          51s</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE    IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          12h    10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-hjhjn   1/1     Running   0          2m8s   10.244.2.3   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-x52hh   1/1     Running   0          2m8s   10.244.2.2   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># 能够看到，已经扩容成功了，没错，就是这么简单~~</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是现在又引来了一个新的问题，我有三个容器，端口一样，但ip确是不一样的，外界该要怎么访问这个pod呢？</span></span><br><span class="line"><span class="comment"># 答：使用SVC来实现</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl expose --help|grep -A 1 &#x27;Create a service for an nginx&#x27;</span></span><br><span class="line">  <span class="comment"># Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000.</span></span><br><span class="line">  kubectl expose deployment nginx --port=80 --target-port=8000</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 查看一下deployment名称</span></span><br><span class="line"> [root@master1 ~]<span class="comment"># kubectl get deployment</span></span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">httpd-01   3/3     3            3           13h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建svc</span></span><br><span class="line"> [root@master1 ~]<span class="comment"># kubectl expose deployment httpd-01 --port=88 --target-port=80</span></span><br><span class="line"> service/httpd-01 exposed</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 查看一下svc地址</span></span><br><span class="line"> [root@master1 ~]<span class="comment"># kubectl get svc -o wide</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class="line">httpd-01     ClusterIP   10.99.191.162   &lt;none&gt;        88/TCP    30s   run=httpd-01</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   13h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里为了好验证负载均衡，在访问之前先修改容器网页</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">httpd-01-6c9fbcfb65-9hlhv   1/1     Running   1          13h   10.244.1.3   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-hjhjn   1/1     Running   0          23m   10.244.2.3   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">httpd-01-6c9fbcfb65-x52hh   1/1     Running   0          23m   10.244.2.2   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-9hlhv bash</span></span><br><span class="line">root@httpd-01-6c9fbcfb65-9hlhv:/usr/<span class="built_in">local</span>/apache2<span class="comment"># echo &#x27;node1-10.244.1.3&#x27; &gt; htdocs/index.html </span></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-hjhjn bash</span></span><br><span class="line">root@httpd-01-6c9fbcfb65-hjhjn:/usr/<span class="built_in">local</span>/apache2<span class="comment"># echo &#x27;node2-10.244.2.3&#x27; &gt; htdocs/index.html</span></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl exec -it httpd-01-6c9fbcfb65-x52hh bash</span></span><br><span class="line">root@httpd-01-6c9fbcfb65-x52hh:/usr/<span class="built_in">local</span>/apache2<span class="comment"># echo &#x27;node2-10.244.2.2&#x27; &gt; htdocs/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问SVC从而以负载均衡的方式访问到pod副本</span></span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node2-10.244.2.3</span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node2-10.244.2.2</span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node1-10.244.1.3</span><br><span class="line">[root@master1 ~]<span class="comment"># curl 10.99.191.162:88</span></span><br><span class="line">node2-10.244.2.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：查看下ipvsadm规则</span></span><br><span class="line">[root@master1 ~]<span class="comment"># ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 192.168.2.1:6443             Masq    1      3          0         </span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.6:53                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.7:53                Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.0.6:9153              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.7:9153              Masq    1      0          0         </span><br><span class="line"><span class="comment"># 这就是刚才创建的SVC，实际上他就是一个转发规则</span></span><br><span class="line">TCP  10.99.191.162:88 rr</span><br><span class="line">  -&gt; 10.244.1.3:80                Masq    1      0          1         </span><br><span class="line">  -&gt; 10.244.2.2:80                Masq    1      0          1         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          2         </span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.6:53                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.7:53                Masq    1      0          0</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面做的其实只能在内部访问，如果像对外开放的话，需将原本svc的type类型改为NodePort类型，因为默认的ClusterIP类型只是针对这个集群，封闭不对外暴露的。</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl edit svc httpd-01</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2020-09-13T07:50:56Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    run: httpd-01</span><br><span class="line">  name: httpd-01</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;21567&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/services/httpd-01</span><br><span class="line">  uid: 624c99c1-b27f-4990-aa5b-d381e0a37755</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.99.191.162</span><br><span class="line">  ports:</span><br><span class="line">  - port: 88</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    run: httpd-01</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再来查看这个svc的类型</span></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl get svc -o wide</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE   SELECTOR</span><br><span class="line">httpd-01     NodePort    10.99.191.162   &lt;none&gt;        88:32552/TCP   28m   run=httpd-01</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        14h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会发现它基于上面的88端口对外打开了一个随机端口32552提供服务，而且是将所有k8s节点都打开了这个端口号对外服务</span></span><br><span class="line">[root@master1 ~]<span class="comment"># netstat -antpu | grep 32552</span></span><br><span class="line">tcp6       0      0 :::32552                :::*                    LISTEN      1945/kube-proxy</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># netstat -antpu | grep 32552</span></span><br><span class="line">tcp6       0      0 :::32552                :::*                    LISTEN      1568/kube-proxy</span><br><span class="line"></span><br><span class="line">[root@node2 ~]<span class="comment"># netstat -antpu | grep 32552</span></span><br><span class="line">tcp6       0      0 :::32552                :::*                    LISTEN      1601/kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外界访问</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v0wtpolj30ut03wmxk.jpg" alt="kk"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v12fx9qj30uq045mxk.jpg" alt="kkk"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v182350j30uv04dwew.jpg" alt="kkkk"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v1bofyrj30uy03owew.jpg" alt="kkkkk"></p><p><em><strong>至此整体kubernetes集群架构搭建完成</strong></em></p><h1 id="三、Kubectl常用命令"><a href="#三、Kubectl常用命令" class="headerlink" title="三、Kubectl常用命令"></a>三、Kubectl常用命令</h1><blockquote><p><strong><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands">kubectl官方详细命令</a></strong></p></blockquote><h2 id="1-查看集群状态"><a href="#1-查看集群状态" class="headerlink" title="1. 查看集群状态"></a>1. 查看集群状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看客户端及服务端程序版本信息</span></span><br><span class="line">kubectl version --short=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">kubectl cluster-info </span><br></pre></td></tr></table></figure><h2 id="2-创建资源对象"><a href="#2-创建资源对象" class="headerlink" title="2. 创建资源对象"></a>2. 创建资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pod资源</span></span><br><span class="line">kubectl run name --image=(镜像名) --replicas=(副本数) --port=(容器要暴露的端口) --labels=(设定自定义标签)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 陈述式对象配置管理方式</span></span><br><span class="line">kubectl create -f **.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明式对象配置管理方式（也适用于更新等）</span></span><br><span class="line">kubectl apply -f **.yaml</span><br></pre></td></tr></table></figure><h2 id="3、查看资源对象"><a href="#3、查看资源对象" class="headerlink" title="3、查看资源对象"></a>3、查看资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看命名空间</span></span><br><span class="line">kubectl get namespace</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o 输出格式, wide表示plain-text</span></span><br><span class="line">kubectl get pods,services -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l 标签选择器(多个的话是与逻辑)，-n 指定命名空间，不指定默认default</span></span><br><span class="line">kubectl get pod -l <span class="string">&quot;key=value,key=value&quot;</span> -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l 基于集合的标签选择器, -L查询结果显示标签</span></span><br><span class="line"><span class="comment"># 注意: 为了避免和shell解释器解析!, 必须要为此类表达式使用单引号</span></span><br><span class="line">kubectl get pod -l <span class="string">&quot;key1 in (val1,val2),!key2&quot;</span> -L key </span><br><span class="line"></span><br><span class="line"><span class="comment"># -w 监视资源变动信息</span></span><br><span class="line">kubectl get pod -w</span><br></pre></td></tr></table></figure><h2 id="4、打印容器中日志信息"><a href="#4、打印容器中日志信息" class="headerlink" title="4、打印容器中日志信息"></a>4、打印容器中日志信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -f 持续监控，-c如果pod中只有一个容器不用加</span></span><br><span class="line">kubectl logs name -f -c container_name -n kube-system</span><br></pre></td></tr></table></figure><h2 id="5、在容器中执行命令"><a href="#5、在容器中执行命令" class="headerlink" title="5、在容器中执行命令"></a>5、在容器中执行命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器外部执行命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> name -c container_name -n kube-system -- 具体命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器内部执行命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it pod_name /bin/sh 进入容器的交互式shell</span><br></pre></td></tr></table></figure><h2 id="6、删除资源对象"><a href="#6、删除资源对象" class="headerlink" title="6、删除资源对象"></a>6、删除资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-system下指定标签的资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] -l key=value -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-system下所有资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] --all -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除Terminating的资源对象</span></span><br><span class="line">kubectl delete [pods/services/deployments/...] source_name --force --grace-period=0 -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般不用这种方式删除</span></span><br><span class="line">kubectl delete -f xx.yaml</span><br><span class="line">kubectl apply -f xx.yaml --prune -l &lt;labels&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认删除控制器会同时删除其管控的所有Pod对象，加上cascade=false就只删除rs</span></span><br><span class="line">kubectl delete rs rs_name --cascade=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="7、更新资源对象"><a href="#7、更新资源对象" class="headerlink" title="7、更新资源对象"></a>7、更新资源对象</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --force 如果需要基于此前的配置文件进行替换，需要加上force</span></span><br><span class="line">kubectl replace -f xx.yaml --force</span><br></pre></td></tr></table></figure><h2 id="8、将服务暴露出去-创建Service"><a href="#8、将服务暴露出去-创建Service" class="headerlink" title="8、将服务暴露出去(创建Service)"></a>8、将服务暴露出去(创建Service)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployments/deployment_name --<span class="built_in">type</span>=<span class="string">&quot;NodePort&quot;</span> --port=(要暴露的容器端口) --name=(Service对象名字)</span><br></pre></td></tr></table></figure><h2 id="9、扩容和缩容"><a href="#9、扩容和缩容" class="headerlink" title="9、扩容和缩容"></a>9、扩容和缩容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment/deployment_name --replicas=N</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当前副本数等于M时才会执行扩容或者缩容</span></span><br><span class="line">kubectl scale deployment/deployment_name --replicas=N --current-replicas=M</span><br></pre></td></tr></table></figure><h2 id="10、查看API版本"><a href="#10、查看API版本" class="headerlink" title="10、查看API版本"></a>10、查看API版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl api-versions</span><br></pre></td></tr></table></figure><h2 id="11、在本地主机上为API-Server启动一个代理网关"><a href="#11、在本地主机上为API-Server启动一个代理网关" class="headerlink" title="11、在本地主机上为API Server启动一个代理网关"></a>11、在本地主机上为API Server启动一个代理网关</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之后就可以通过curl来对此套字节发起访问请求</span></span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># jq可以对json进行过滤)</span></span><br><span class="line">curl localhost:8080/api/v1/namespaces/ | jq .items[].metadata.name</span><br></pre></td></tr></table></figure><h2 id="12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释"><a href="#12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释" class="headerlink" title="12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释"></a>12、当定义资源配置文件时，不知道怎么定义的时候，可以查看某类型资源的配置字段解释</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二级对象可用类似于pods.spec这种方式查看</span></span><br><span class="line">kubectl explain pods/deployments/...</span><br></pre></td></tr></table></figure><h2 id="13、查看某资源对象的配置文件"><a href="#13、查看某资源对象的配置文件" class="headerlink" title="13、查看某资源对象的配置文件"></a>13、查看某资源对象的配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --export表示省略由系统生成的信息, 后面加 &gt; file.yaml就可以快速生成一个配置文件了</span></span><br><span class="line">kubectl get source_type source_name -o yaml --<span class="built_in">export</span></span><br></pre></td></tr></table></figure><h2 id="14、标签管理相关命令"><a href="#14、标签管理相关命令" class="headerlink" title="14、标签管理相关命令"></a>14、标签管理相关命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加标签,如果是修改的话需要后面添加--overwrite</span></span><br><span class="line">kubectl label pods/pod_name key=value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给工作节点添加标签，后续可以使用nodeSelector来指定pod被调度到指定的工作节点上运行</span></span><br><span class="line">kubectl label nodes node_name key=value</span><br></pre></td></tr></table></figure><h2 id="15、注解管理相关命令"><a href="#15、注解管理相关命令" class="headerlink" title="15、注解管理相关命令"></a>15、注解管理相关命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl annotate pods pod_name key=value</span><br></pre></td></tr></table></figure><h2 id="16、patch修改Deployment控制器进行控制器升级"><a href="#16、patch修改Deployment控制器进行控制器升级" class="headerlink" title="16、patch修改Deployment控制器进行控制器升级"></a>16、patch修改Deployment控制器进行控制器升级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -p 以补丁形式更新补丁形式默认是json</span></span><br><span class="line">kubectl patch deployment deployment-demo -p <span class="string">&#x27;&#123;&quot;spec&quot;: &#123;&quot;minReadySeconds&quot;: 5&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改depolyment中的镜像文件</span></span><br><span class="line">kubectl <span class="built_in">set</span> image deployments deployment-demo myapp=ikubernetes/myapp:v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印滚动更新过程中的状态信息</span></span><br><span class="line">kubectl rollout status deployment deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控deployment的更新过程</span></span><br><span class="line">kubectl get deployments deployment-demo --watch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停更新</span></span><br><span class="line">kubectl rollout pause deployments deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续更新</span></span><br><span class="line">kubectl rollout resume deployments deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史版本(能查到具体的历史需要在apply的时候加上--record参数)</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployments deployment-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到指定版本，不加--to-version则回滚到上一个</span></span><br><span class="line">kubectl rollout undo deployments deployment-demo --to-revision=2</span><br></pre></td></tr></table></figure><h1 id="四、k8s的资源清单（重点）"><a href="#四、k8s的资源清单（重点）" class="headerlink" title="四、k8s的资源清单（重点）"></a>四、k8s的资源清单（重点）</h1><h2 id="1-资源类型"><a href="#1-资源类型" class="headerlink" title="1. 资源类型"></a>1. 资源类型</h2><blockquote><p><strong>k8s中所有的资源都会抽象为资源，资源实例化之后，叫做对象。</strong></p></blockquote><p><em><strong>分为以下三种：</strong></em></p><ul><li>名称空间级别</li><li>集群级别</li><li>元数据型级别</li></ul><h3 id="1-1-名称空间级别"><a href="#1-1-名称空间级别" class="headerlink" title="1.1 名称空间级别"></a>1.1 名称空间级别</h3><ul><li><p><strong>服务发现及负载均衡型资源（ ServiceDiscovery LoadBalance）：</strong> Service(SVC)、Ingress、……</p></li><li><p><strong>配置与存储型资源：</strong> Volume（存储卷）、CSI（容器存储接口，可以扩展各种各样的第三方存储卷）</p></li><li><p><strong>特殊类型的存储卷：</strong> ConfigMap（当配置中心来使用的资源类型）、Secret（保存敏感数据）、DownwardAPI（把外部环境中的信息输出给容器）</p></li><li><p><strong>工作负载型资源（workload）：</strong> Pod（pause）、Replicase、 Deployment、StatefulSet、DaemonSet、Job、Cron Job（Replication Controller在v1.11版本被废弃）</p></li></ul><h3 id="1-2-集群级资源级别"><a href="#1-2-集群级资源级别" class="headerlink" title="1.2 集群级资源级别"></a>1.2 集群级资源级别</h3><ul><li>Namespace</li><li>Node</li><li>Role</li><li>Clusterrole</li><li>RoleBinding</li><li>ClusterRoleBinding</li></ul><h3 id="1-3-元数据型资源"><a href="#1-3-元数据型资源" class="headerlink" title="1.3 元数据型资源"></a>1.3 元数据型资源</h3><ul><li><p>HPA</p></li><li><p>PodTemplate</p></li><li><p>Limi tRange</p></li></ul><h2 id="2-资源清单"><a href="#2-资源清单" class="headerlink" title="2. 资源清单"></a>2. 资源清单</h2><blockquote><p><strong>在k8s中，一般使用yaml格式的文件来创建符合我们预期期望的pod，这样的yaml文件我们一般称为资源清单</strong></p></blockquote><h3 id="2-1-yaml语法格式"><a href="#2-1-yaml语法格式" class="headerlink" title="2.1 yaml语法格式"></a>2.1 yaml语法格式</h3><blockquote><p>是一个可读性高，用来表达数据序列的格式。YAML 的意思其实是：仍是一种标记语言，但为了强调这种语言以数据做为中心，而不是以标记语言为重点。</p></blockquote><p><strong>基本语法</strong></p><ul><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li># 标识注释，从这个字符一直到行尾，都会被解释器忽略</li></ul><p><strong>YAML 支持的数据结构</strong></p><ul><li>对象：键值对的集合，又称为映射（mapping）、哈希（hashes）、字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence）、列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><p><strong>对象类型：对象的一组键值对，使用冒号结构表示</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Steve</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hash:</span> &#123; <span class="attr">name:</span> <span class="string">Steve</span>, <span class="attr">age:</span> <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>数组类型：一组连词线开头的行，构成一个数组</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">animal</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Dog</span></span><br></pre></td></tr></table></figure><p>数组也可以采用行内表示法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animal:</span> [<span class="string">Cat</span>, <span class="string">Dog</span>]</span><br></pre></td></tr></table></figure><p><strong>复合结构：对象和数组可以结合使用，形成复合结构</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Python</span></span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line"><span class="attr">YAML:</span> <span class="string">yaml.org</span></span><br><span class="line"><span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span></span><br><span class="line"><span class="attr">Python:</span> <span class="string">python.org</span></span><br><span class="line"><span class="attr">Perl:</span> <span class="string">use.perl.org</span>  </span><br></pre></td></tr></table></figure><p><strong>纯量：纯量是最基本的、不可再分的值。以下数据类型都属于纯量</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="string">字符串布尔值整数浮点数</span> <span class="literal">Null</span></span><br><span class="line"><span class="number">2</span> <span class="string">时间</span> <span class="string">日期</span></span><br><span class="line"></span><br><span class="line"><span class="string">数值直接以字面量的形式表示</span></span><br><span class="line"><span class="attr">number:</span> <span class="number">12.30</span></span><br><span class="line"></span><br><span class="line"><span class="string">布尔值用true和false表示</span></span><br><span class="line"><span class="attr">isSet:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span><span class="string">用</span> <span class="string">~</span> <span class="string">表示</span></span><br><span class="line"><span class="attr">parent:</span> <span class="string">~</span></span><br><span class="line"></span><br><span class="line"><span class="string">时间采用</span> <span class="string">ISO8601</span> <span class="string">格式</span></span><br><span class="line"><span class="attr">iso8601:</span> <span class="number">2001-12-14t21:59:43.10-05:00</span></span><br><span class="line"></span><br><span class="line"><span class="string">日期采用复合</span> <span class="string">iso8601</span> <span class="string">格式的年、月、日表示</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">1976-07-31</span></span><br><span class="line"></span><br><span class="line"><span class="string">YAML允许使用两个感叹号，强制转换数据类型</span></span><br><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><p>字符串默认不使用引号表示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">这是一行字符串</span></span><br></pre></td></tr></table></figure><p>如果字符串之中包含空格或特殊字符，需要放在引号之中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">&#x27;内容：字符串&#x27;</span></span><br></pre></td></tr></table></figure><p>单引号和双引号都可以使用，双引号不会对特殊字符转义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">&#x27;内容\n字符串&#x27;</span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">&quot;内容\n字符串&quot;</span></span><br></pre></td></tr></table></figure><p>单引号之中如果还有单引号，必须连续使用两个单引号转义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">&#x27;labor&#x27;</span><span class="string">&#x27;s day&#x27;</span></span><br></pre></td></tr></table></figure><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">这是一段</span></span><br><span class="line">   <span class="string">多行</span></span><br><span class="line">   <span class="string">字符串</span></span><br></pre></td></tr></table></figure><p>多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">this:</span> <span class="string">|</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Bar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">that:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">Foo</span></span><br><span class="line"><span class="string">Bar</span></span><br></pre></td></tr></table></figure><p>+ 表示保留文字块末尾的换行，- 表示删除字符串末尾的换行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">s3:</span> <span class="string">|-</span></span><br><span class="line">  <span class="string">Foo</span></span><br></pre></td></tr></table></figure><h3 id="2-2-k8s剧本的常用字段"><a href="#2-2-k8s剧本的常用字段" class="headerlink" title="2.2 k8s剧本的常用字段"></a>2.2 k8s剧本的常用字段</h3><blockquote><p>必须存在的属性</p></blockquote><table><thead><tr><th>参数名</th><th align="center">字段类型</th><th>说明</th></tr></thead><tbody><tr><td>apiVersion</td><td align="center">String</td><td>K8S API 的版本，目前基本是v1，可以用 kubectl api-version 命令查询</td></tr><tr><td>kind</td><td align="center">String</td><td>这里指的是 yaml 文件定义的资源类型和角色, 比如: Pod</td></tr><tr><td>metadata</td><td align="center">Object</td><td>元数据对象，固定值写 metadata</td></tr><tr><td>metadata.name</td><td align="center">String</td><td>元数据对象的名字，这里由我们编写，比如命名Pod的名字</td></tr><tr><td>metadata.namespace</td><td align="center">String</td><td>元数据对象的命名空间，由我们自身定义</td></tr><tr><td>Spec</td><td align="center">Object</td><td>详细定义对象，固定值写Spec</td></tr><tr><td>spec.containers[]</td><td align="center">list</td><td>这里是Spec对象的容器列表定义，是个列表</td></tr><tr><td>spec.containers[].name</td><td align="center">String</td><td>这里定义容器的名字</td></tr><tr><td>spec.containers[].image</td><td align="center">String</td><td>这里定义要用到的镜像名称</td></tr></tbody></table><blockquote><p>主要属性【这些属性比较重要，如果不指定的话系统会自动补充默认值】</p></blockquote><table><thead><tr><th>参数名称</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>spec.containers[].name</td><td>String</td><td>这里定义容器的名字</td></tr><tr><td>spec.containers[].image</td><td>String</td><td>这里定义要用到的镜像名称</td></tr><tr><td>spec.containers[].imagePullPolicy</td><td>String</td><td>定义镜像拉取策略，有Always、Never、IfNotPresent三个值可选（1）Always:意思是每次都尝试重新拉取镜像（2）Never:表示仅使用本地镜像（3）lfNotPresent:如果本地有镜像就使用本地镜像，没有就拉取在线镜像。上面三个值都没设置的话，默认是Always。</td></tr><tr><td>spec.containers[].command[]</td><td>List</td><td>指定容器启动命令，因为是数组可以指定多个，不指定则使用镜像打包时使用的启动命令。</td></tr><tr><td>spec.containers[].args[]</td><td>List</td><td>指定容器启动命令参数，因为是数组可以指定多个。</td></tr><tr><td>spec.containers[].workingDir</td><td>String</td><td>指定容器的工作目录，进入容器时默认所在的目录</td></tr><tr><td>spec.containers[].volumeMounts[]</td><td>List</td><td>指定容器内部的存储卷配置</td></tr><tr><td>spec.containers[].volumeMounts[].name</td><td>String</td><td>指定可以被容器挂载的存储卷的名称</td></tr><tr><td>spec.containers[].volumeMounts[].mountPath</td><td>String</td><td>指定可以被容器挂载的存储卷的路径</td></tr><tr><td>spec.containers[].volumeMounts[].readOnly</td><td>String</td><td>设置存储卷路经的读写模式，true或者false，默认为读写模式</td></tr><tr><td>spec.containers[].ports[]</td><td>List</td><td>指定容器需要用到的端口列表</td></tr><tr><td>spec.containers[].ports[].name</td><td>String</td><td>指定端口名称</td></tr><tr><td>spec.containers[].ports[].containerPort</td><td>String</td><td>指定容器需要监听的端口号</td></tr><tr><td>spec.containers[].ports[].hostPort</td><td>String</td><td>指定容器所在主机需要监听的端口号，默认跟上面containerPort相同，注意设置了hostPort同一台主机无法启动该容器的相同副本（因为主机的端口号不能相同，这样会冲突)</td></tr><tr><td>spec.containers[].ports[].protocol</td><td>String</td><td>指定端口协议，支持TCP和UDP，默认值为 TCP</td></tr><tr><td>spec.containers[].env[]</td><td>List</td><td>指定容器运行前需设置的环境变量列表</td></tr><tr><td>spec.containers[].env[].name</td><td>String</td><td>指定环境变量名称</td></tr><tr><td>spec.containers[].env[].value</td><td>String</td><td>指定环境变量值</td></tr><tr><td>spec.containers[].resources</td><td>Object</td><td>指定资源限制和资源请求的值（这里开始就是设置容器的资源上限）</td></tr><tr><td>spec.containers[].resources.limits</td><td>Object</td><td>指定设置容器运行时资源的运行上限</td></tr><tr><td>spec.containers[].resources.limits.cpu</td><td>String</td><td>指定CPU的限制，单位为core数，将用于docker run –cpu-shares参数这里前面文章 Pod资源限制有讲过）</td></tr><tr><td>spec.containers[].resources.limits.memory</td><td>String</td><td>指定MEM内存的限制，单位为MlB、GiB</td></tr><tr><td>spec.containers[].resources.requests</td><td>Object</td><td>指定容器启动和调度时的限制设置</td></tr><tr><td>spec.containers[].resources.requests.cpu</td><td>String</td><td>CPU请求，单位为core数，容器启动时初始化可用数量</td></tr><tr><td>spec.containers[].resources.requests.memory</td><td>String</td><td>内存请求，单位为MIB、GiB，容器启动的初始化可用数量</td></tr></tbody></table><blockquote><p>额外的参数项</p></blockquote><table><thead><tr><th>参数名称</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>spec.restartPolicy</td><td>String</td><td>定义Pod的重启策略，可选值为Always、OnFailure，默认值为Always。1.Always:Pod一旦终止运行，则无论容器是如何终止的，kubelet服务都将重启它。2.OnFailure:只有Pod以非零退出码终止时，kubelet才会重启该容器。如果容器正常结束（退出码为0），则kubelet将不会重启它。3.Never:Pod终止后，kubelet将退出码报告给Master，不会重启该Pod。</td></tr><tr><td>spec.nodeSelector</td><td>Object</td><td>定义Node的Label过滤标签，以key:value格式指定，选择node节点去运行</td></tr><tr><td>spec.imagePullSecrets</td><td>Object</td><td>定义pull镜像时使用secret名称，以name:secretkey格式指定</td></tr><tr><td>spec.hostNetwork</td><td>Boolean</td><td>定义是否使用主机网络模式，默认值为false。设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本。</td></tr></tbody></table><blockquote><p>查看资源有那些资源清单属性，使用以下命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod</span><br></pre></td></tr></table></figure><blockquote><p>查看属性说明，使用以下命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod.apiVersion</span><br></pre></td></tr></table></figure><blockquote><p>资源清单格式</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">group/apiversion</span>     <span class="comment"># 如果没有给定group名称，那么默认为core，可以使用kubectlapi-versions命令获取当前k8s版本上所有的apiversion版本信息（每个版本可能不同）</span></span><br><span class="line"><span class="attr">kind:</span>          <span class="comment"># 资源类别</span></span><br><span class="line"><span class="attr">metadata:</span>      <span class="comment"># 资源元数据</span></span><br><span class="line"> <span class="attr">name:</span> </span><br><span class="line"> <span class="attr">namespace:</span> </span><br><span class="line"> <span class="attr">lables:</span> </span><br><span class="line"> <span class="attr">annotations:</span>  <span class="comment"># 主要目的是方便用户阅读查找</span></span><br><span class="line"><span class="attr">spec:</span>          <span class="comment"># 期望的状态（disired state)</span></span><br><span class="line"><span class="attr">status:</span>        <span class="comment"># 当前状态，本字段由Kubernetes自身维护，用户不能去定义</span></span><br></pre></td></tr></table></figure><blockquote><p>资源清单的常用命令</p></blockquote><p>1.获取apiVersion版本信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl api-versions</span><br></pre></td></tr></table></figure><p>2.获取资源的apiVersion的版本信息(以pod为例)，该命令同时输出属性设置帮助文档</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod</span><br></pre></td></tr></table></figure><blockquote><p>字段配置格式</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">apiVersion</span> <span class="string">&lt;string&gt;</span>            <span class="comment"># 表示字符串类型 </span></span><br><span class="line"><span class="string">metadata</span> <span class="string">&lt;Object&gt;</span>              <span class="comment"># 表示需要嵌套多层字段 </span></span><br><span class="line"><span class="string">labels</span> <span class="string">&lt;map[string]string&gt;</span>     <span class="comment"># 表示由k：v组成的映射 </span></span><br><span class="line"><span class="string">finalizers</span> <span class="string">&lt;[]string&gt;</span>          <span class="comment"># 表示字串列表 </span></span><br><span class="line"><span class="string">ownerReferences</span> <span class="string">&lt;[]Object&gt;</span>     <span class="comment"># 表示对象列表 </span></span><br><span class="line"><span class="string">hostPID</span> <span class="string">&lt;boolean&gt;</span>              <span class="comment"># 布尔类型 </span></span><br><span class="line"><span class="string">priority</span> <span class="string">&lt;integer&gt;</span>             <span class="comment"># 整型 </span></span><br><span class="line"><span class="string">name</span> <span class="string">&lt;string&gt;</span> <span class="string">-required-</span>       <span class="comment"># 如果类型后面接-required-，表示为必填字段</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：通过定义清单文件创建Pod</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前K8S API 的版本</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="comment"># 元数据</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># pod名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-apache-pod</span></span><br><span class="line">  <span class="comment"># pod的名称空间</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="comment"># pod的标签</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">httpd</span></span><br><span class="line"><span class="comment"># 对象的详细信息</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 容器信息</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web01</span></span><br><span class="line">      <span class="comment"># 这个容器使用的镜像</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">hub.lemon.com/library/httpd:v1</span></span><br></pre></td></tr></table></figure><blockquote><p>通过yaml文件创建pod</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f xxx.yaml</span><br></pre></td></tr></table></figure><blockquote><p>获取资源的资源配置文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -o 参数 加 yaml，可以将资源的配置以yaml的格式输出出来，也可以使用json，输出为json格式</span></span><br><span class="line">kubectl get pod &#123;podName&#125; -o yaml</span><br></pre></td></tr></table></figure><h2 id="3、pod的生命周期"><a href="#3、pod的生命周期" class="headerlink" title="3、pod的生命周期"></a>3、pod的生命周期</h2><blockquote><p>pod对象自从创建开始至终止退出的时间范围称为生命周期，在这段时间中，pod会处于多种不同的状态，并执行一些操作；其中，创建主容器为必须的操作，其他可选的操作还包括运行初始化容器（init container）、容器启动后钩子（start hook）、容器的存活性探测（liveness probe）、就绪性探测（readiness probe）以及容器终止前狗子（pre stop hook）等，这些操作是否执行则取决于pod的定义</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v1p27o3j30xd0g70u2.jpg" alt="image-20200919181303358"></p><p><strong>init C &amp; start-stop &amp; readiness &amp; liveness 整体流程：</strong></p><p>1、kubectl 调用 apiserver –&gt; etcd –&gt; kubelet –&gt; CRI 进行容器初始化</p><p>2、首先会先启动一个pause容器（任何pod启动时都会先pause容器）</p><p>3、init C 容器不会伴随整个pod的生命周期；如果是正常退出（0），进入main C，否则（非0），一直重启 失败。</p><p>4、进入main C后有两个参数，start：在刚启动时可以允许他执行一个命令，stop：退出时也可以允许他执行一个命令。</p><p>5、readiness模板：可以在main C运行的多少秒之后进行就绪检测；检测通过后，pod状态就为running，否则为failed。</p><p>6、liveness模板：伴随着整个main C的生命周期，当main C里面的进程 与 liveness检测结果不一致时，就可以执行对应的命令。</p><h3 id="3-1-Init-C"><a href="#3-1-Init-C" class="headerlink" title="3.1 Init C"></a>3.1 Init C</h3><blockquote><p>Pod能够具有多个容器，应用运行在容器里面，但是它也可能有一个或多个先于应用容器启动的Init容器</p></blockquote><p>Init容器与普通的容器非常像，除了如下两点：</p><ul><li>Init容器总是运行到成功完成为止</li><li>每个Init容器都必须在下一个Init容器启动之前成功完成</li></ul><p>如果Pod的Init容器失败，Kubernetes会不断地重启该Pod，直到Init容器成功为止。然而，如果Pod对应的restartPolicy为Never，它不会重新启动, 因为Init容器具有与应用程序容器分离的单独镜像，所以它们的启动相关代码具有如下优势：</p><ul><li>它们可以包含并运行实用工具，但是出于安全考虑，是不建议在应用程序容器镜像中包含这些实用工具的。</li><li>它们可以包含使用工具和定制化代码来安装，但是不能出现在应用程序镜像中。例如，创建镜像没必要FROM另一个镜像，只需要在安装过程中使用类似sed、awk、python或dig这样的工具。</li><li>应用程序镜像可以分离出创建和部署的角色，而没有必要联合它们构建一个单独的镜像。</li><li>Init容器使用LinuxNamespace，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问Secret的权限，而应用程序容器则不能。</li><li>它们必须在应用程序容器启动之前运行完成，而应用程序容器是并行运行的，所以Init容器能够提供了一种简单的阻塞或延迟应用容器的启动的方法，直到满足了一组先决条件。</li></ul><p>Init C 特殊说明：</p><ul><li>在Pod启动过程中，Init容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。</li><li>如果由于运行时或失败退出，将导致容器启动失败，它会根据Pod的restartPolicy指定的策略进行重试。然而，如果Pod的restartPolicy设置为Always，Init容器失败时会使用RestartPolicy策略。</li><li>在所有的Init容器没有成功之前，Pod将不会变成Ready状态。Init容器的端口将不会在Service中进行聚集。正在初始化中的Pod处于Pending状态，但应该会将Initializing状态设置为true。</li><li>如果Pod重启，所有Init容器必须重新执行。</li><li>对Init容器spec的修改被限制在容器image字段，修改其他字段都不会生效。更改Init容器的image字段，等价于重启该Pod。</li><li>Init容器具有应用容器的所有字段。除了readinessProbe，因为Init容器无法定义不同于完成（completion）的就绪（readiness）之外的其他状态。这会在验证过程中强制执行。</li><li>在Pod中的每个app和Init容器的名称必须唯一；与任何其它容器共享同一个名称，会在验证时抛出错误</li></ul><blockquote><p>Init 容器示例</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lemon-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># main容器字段</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="comment"># 容器启动后执行的命令</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo The main-container is running! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">  <span class="comment"># init容器字段</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="comment"># 第一个init容器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container01</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live01; do echo waiting for live01; sleep 10; done;&#x27;</span>]</span><br><span class="line">  <span class="comment"># 第二个init容器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container02</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live02; do echo waiting for live02; sleep 10; done;&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod -c init-container01 -- touch /live01</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod -c init-container02 -- touch /live02</span><br></pre></td></tr></table></figure><h3 id="3-2-容器探针"><a href="#3-2-容器探针" class="headerlink" title="3.2 容器探针"></a>3.2 容器探针</h3><blockquote><p>探针是由kubelet对容器执行的定期诊断。要执行诊断，kubelet调用由容器实现的Handler。</p></blockquote><p>探测方式：</p><ul><li>readinessProbe：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与Pod匹配的所有Service的端点中删除该Pod的IP地址。初始延迟之前的就绪状态默认为Failure。如果容器不提供就绪探针，则默认状态为Success。</li><li>livenessProbe：指示容器是否正在运行。如果存活探测失败，则kubelet会杀死容器，并且容器将受到其重启策略的影响。如果容器不提供存活探针，则默认状态为Success。</li></ul><p>有三种类型的处理程序：</p><ul><li>ExecAction：在容器内执行指定命令。如果命令退出时返回码为0则认为诊断成功。</li><li>TCPSocketAction：对指定端口上的容器的IP地址进行TCP检查。如果端口打开，则诊断被认为是成功的。</li><li>HTTPGetAction：对指定的端口和路径上的容器的IP地址执行HTTPGet请求。如果响应的状态码大于等于200且小于400，则诊断被认为是成功的。</li></ul><p>每次探测都将获得以下三种结果之一：</p><ul><li>成功：容器通过了诊断。</li><li>失败：容器未通过诊断。</li><li>未知：诊断失败，因此不会采取任何行动</li></ul><blockquote><p>Init 容器init 模板检测探针 - 就绪检测</p></blockquote><p><strong>readinessProbe-httpget</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">readiness-httpget-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-httpget-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">httpd:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index01.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">readiness-httpget-pod   0/1     Running   0          11m</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">log</span> -f readiness-httpget-pod</span><br><span class="line">10.244.1.1 - - [25/Feb/2021:08:19:11 +0000] <span class="string">&quot;GET /index01.html HTTP/1.1&quot;</span> 404 196</span><br><span class="line">10.244.1.1 - - [25/Feb/2021:08:19:14 +0000] <span class="string">&quot;GET /index01.html HTTP/1.1&quot;</span> 404 196</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it readiness-httpget-pod -- /bin/sh</span><br><span class="line"><span class="comment"># echo &#x27;lemon&#x27; &gt; /usr/local/apache2/htdocs/index01.html</span></span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">log</span> -f readiness-httpget-pod</span><br><span class="line">10.244.1.1 - - [25/Feb/2021:08:28:53 +0000] <span class="string">&quot;GET /index01.html HTTP/1.1&quot;</span> 200 6</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">readiness-httpget-pod   1/1     Running   0          22m</span><br></pre></td></tr></table></figure><blockquote><p>liveness 检测探针 - 存活检测</p></blockquote><p><strong>livenessProbe-exec</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon03</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-exec-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;touch /tmp/live ; sleep 60; rm -rf /tmp/live; sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;test&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/tmp/live&quot;</span>]</span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -w</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec-pod       1/1     Running   0          9s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec-pod       1/1     Running   1          100s</span><br></pre></td></tr></table></figure><p><strong>livenessProbe-httpget</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-httpget-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-httpget-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">httpd:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-httpget-pod   1/1     Running   0          102s</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it liveness-httpget-pod -- rm /usr/<span class="built_in">local</span>/apache2/htdocs/index.html</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-httpget-pod   1/1     Running   1          2m53s</span><br></pre></td></tr></table></figure><p><strong>livenessProbe-tcp</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">probe-tcp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一段时间时候就会自动重启pod，原因nginx容器没开8080端口，tomcat就不会重启</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Pod-hook"><a href="#3-3-Pod-hook" class="headerlink" title="3.3 Pod hook"></a>3.3 Pod hook</h3><blockquote><p>Podhook（钩子）是由Kubernetes管理的kubelet发起的，当容器中的进程启动前或者容器中的进程终止之前运行，这是包含在容器的生命周期之中。可以同时为Pod中的所有容器都配置hook。</p></blockquote><p>Hook的类型包括两种：</p><ul><li>exec：执行一段命令</li><li>HTTP：发送HTTP请求</li></ul><blockquote><p>start、stop 动作</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lifecycle-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lifecycle-demo-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the postStart handler &gt; /var/message&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the poststop handler &gt; /var/message&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="3-4-Init-C-amp-探针-整合使用"><a href="#3-4-Init-C-amp-探针-整合使用" class="headerlink" title="3.4 Init C &amp; 探针 整合使用"></a>3.4 Init C &amp; 探针 整合使用</h3><blockquote><p>init-readiness-liveness-hook.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lemon-pod-irlp</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container01</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live01; do echo waiting for live01; sleep 10; done;&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container02</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until test -e /live02; do echo waiting for live02; sleep 10; done;&#x27;</span>]</span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo The main-container is running! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index01.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;test&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/tmp&quot;</span>]</span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the postStart handler &gt; /var/message&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the poststop handler &gt; /var/message&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init_c</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c init-container01 -- touch /live01</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c init-container02 -- touch /live02</span><br><span class="line">$ kubectl get pod </span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">lemon-pod-irlp   0/1     Running   0          51m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Readiness</span></span><br><span class="line">$ kubectl describe pod lemon-pod-irlp</span><br><span class="line">Readiness probe failed: Get http://10.244.2.12:80/index01.html</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c main-container -- /bin/sh</span><br><span class="line">/ <span class="comment"># echo &#x27;lemon&#x27; &gt; /var/www/index01.html &amp;&amp; httpd -p 80 -h /var/www/ &amp;&amp; netstat -anptu | grep httpd</span></span><br><span class="line">tcp        0      0 :::80                   :::*                    LISTEN      287/httpd</span><br><span class="line">$ kubectl get pod </span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">lemon-pod-irlp   1/1     Running   0          4m42s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Liveness</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -c main-container -- rm -rf /tmp/</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">lemon-pod-irlp   1/1     Running   0          5m35s</span><br><span class="line">lemon-pod-irlp   0/1     Running   1          6m1s</span><br><span class="line">$ kubectl describe pod lemon-pod-irlp</span><br><span class="line">Liveness probe failed:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pod hook</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it lemon-pod-irlp -- cat /var/message</span><br><span class="line">Hello from the postStart handler</span><br></pre></td></tr></table></figure><h3 id="3-5-Pod的相位"><a href="#3-5-Pod的相位" class="headerlink" title="3.5 Pod的相位"></a>3.5 Pod的相位</h3><blockquote><p>Pod的status字段是一个PodStatus对象，PodStatus中有一个phase字段。</p><p>无论是手动创建还是通过控制器创建pod，pod对象总是应该处于其生命进程中以下几个相位之一：</p></blockquote><p>挂起（Pending）：Pod已被Kubernetes系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度Pod的时间和通过网络下载镜像的时间，这可能需要花点时间。</p><p>运行中（Running）：该Pod已经绑定到了一个节点上，Pod中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。</p><p>成功（Succeeded）：Pod中的所有容器都被成功终止，并且不会再重启。</p><p>失败（Failed）：Pod中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。</p><p>未知（Unknown）：因为某些原因无法取得Pod的状态，通常是因为与Pod所在主机通信失败。</p><h2 id="4、controllers-控制器"><a href="#4、controllers-控制器" class="headerlink" title="4、controllers 控制器 "></a>4、controllers <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/">控制器 </a></h2><blockquote><p>kubernetes不会直接创建pod，而是通过controller来管理pod的，所以controller负责维护集群的状态，比如故障检测、自动扩展、滚动更新。</p><p>Kubernetes中会有很多的controller（控制器），这些就相当于一个状态机（快照），用来控制Pod的具体状态和行为。</p></blockquote><h3 id="1-ReplicationController"><a href="#1-ReplicationController" class="headerlink" title="1. ReplicationController"></a>1. ReplicationController</h3><p>ReplicationController（RC）用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的 Pod 来替代；而如果异常多出来的容器也会自动回收；</p><h3 id="2-ReplicaSet"><a href="#2-ReplicaSet" class="headerlink" title="2. ReplicaSet"></a>2. ReplicaSet</h3><p>在新版本的 Kubernetes 中建议使用 ReplicaSet来取代 ReplicationController 。ReplicaSet 跟ReplicationController 没有本质的不同，只是名字不一样，并且 ReplicaSet 支持集合式的 selector；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GET_HOSTS_FROM</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">dns</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">frontend-d8rs5   1/1     Running   0          29s   tier=web</span><br><span class="line">frontend-gczvb   1/1     Running   0          29s   tier=web</span><br><span class="line">frontend-twj7z   1/1     Running   0          29s   tier=web</span><br><span class="line"></span><br><span class="line">$ kubectl label pod frontend-d8rs5 tier=lemon --overwrite=<span class="literal">true</span></span><br><span class="line">pod/frontend-d8rs5 labeled</span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE    LABELS</span><br><span class="line">frontend-d8rs5   1/1     Running   0          3m3s   tier=lemon</span><br><span class="line">frontend-gczvb   1/1     Running   0          3m3s   tier=web</span><br><span class="line">frontend-mrm8n   1/1     Running   0          10s    tier=web</span><br><span class="line">frontend-twj7z   1/1     Running   0          3m3s   tier=web</span><br><span class="line"></span><br><span class="line">$ kubectl delete pod --all</span><br><span class="line">pod <span class="string">&quot;frontend-d8rs5&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;frontend-gczvb&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;frontend-mrm8n&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;frontend-twj7z&quot;</span> deleted</span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">frontend-26xlj   1/1     Running   0          11s   tier=web</span><br><span class="line">frontend-m4vhl   1/1     Running   0          11s   tier=web</span><br><span class="line">frontend-zs9tk   1/1     Running   0          11s   tier=web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 RS</span></span><br><span class="line">$ kubectl delete rs frontend -n default</span><br></pre></td></tr></table></figure><h3 id="3-Deployment"><a href="#3-Deployment" class="headerlink" title="3. Deployment"></a>3. Deployment</h3><p>Deployments（无状态，守护进程类，只关注群体不关注个体）</p><ul><li>一个 <em>Deployment</em> 控制器为 Pods和 ReplicaSets 提供声明式的更新能力。</li><li>虽然 ReplicaSet可以独立使用，但一般还是建议使用 Deployment来自动管理ReplicaSe，这样就无需担心跟其他机制的不兼容问题（比如 ReplicaSe不支持rolling-update 但 Deployment支持）。</li></ul><p>Deployment 为 Pod 和 ReplicaSet 提供了一个声明式定义 (declarative) 方法，用来替代以前的ReplicationController 来方便的管理应用。典型的应用场景包括；</p><ul><li>定义 Deployment 来创建 Pod 和 ReplicaSet</li><li>应用扩容和缩容</li><li>滚动升级和回滚</li><li>暂停和继续 Deployment</li></ul><h4 id="3-1-创建一个-deployment-对象"><a href="#3-1-创建一个-deployment-对象" class="headerlink" title="3.1 创建一个 deployment 对象"></a>3.1 创建一个 deployment 对象</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deploy</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3     3            3           62s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-687dc75df7   3         3         3       65s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-687dc75df7-88tkk   1/1     Running   0          68s</span><br><span class="line">nginx-deployment-687dc75df7-b6whp   1/1     Running   0          68s</span><br><span class="line">nginx-deployment-687dc75df7-ljh46   1/1     Running   0          68s</span><br></pre></td></tr></table></figure><h4 id="3-2-Deployment-扩容缩"><a href="#3-2-Deployment-扩容缩" class="headerlink" title="3.2 Deployment 扩容缩"></a>3.2 Deployment 扩容缩</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale deployment nginx-deployment --replicas=5</span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-687dc75df7-88tkk   1/1     Running   0          7m22s</span><br><span class="line">nginx-deployment-687dc75df7-b6whp   1/1     Running   0          7m22s</span><br><span class="line">nginx-deployment-687dc75df7-ljh46   1/1     Running   0          7m22s</span><br><span class="line">nginx-deployment-687dc75df7-rnjzt   1/1     Running   0          8s</span><br><span class="line">nginx-deployment-687dc75df7-wfx74   1/1     Running   0          8s</span><br><span class="line"></span><br><span class="line">$ kubectl scale deployment nginx-deployment --replicas=2</span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-687dc75df7-88tkk   1/1     Running   0          8m18s</span><br><span class="line">nginx-deployment-687dc75df7-ljh46   1/1     Running   0          8m18s</span><br></pre></td></tr></table></figure><p>如果集群支持 horizontal pod autoscaling 的话，还可以为Deployment设置自动扩展</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl autoscale deployment nginx-deployment --min=10--max=15--cpu-percent=80</span><br></pre></td></tr></table></figure><h4 id="3-3-滚动升级和回滚"><a href="#3-3-滚动升级和回滚" class="headerlink" title="3.3 滚动升级和回滚"></a>3.3 滚动升级和回滚</h4><blockquote><p>Deployment 更新策略</p></blockquote><p>Deployment 可以保证在升级时只有一定数量的 Pod 是 down 的。默认的，它会确保至少有比期望的Pod数量少一个是up状态（最多一个不可用）。</p><p>Deployment 同时也可以确保只创建出超过期望数量的一定数量的 Pod。默认的，它会确保最多比期望的Pod数量多一个的 Pod 是 up 的（最多1个 surge ）。</p><p>未来的 Kuberentes 版本中，将从1-1变成25%-25% 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 滚动升级</span></span><br><span class="line">$ kubectl <span class="built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:1.9.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">$ kubectl rollout undo deployment/nginx-deployment</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:1.7.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用edit命令来编辑 Deployment</span></span><br><span class="line">$ kubectl edit deployment nginx-deployment</span><br><span class="line">     40       - image: nginx:latest</span><br><span class="line">deployment.extensions/nginx-deployment edited</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新镜像实际上就是重新创建了一个rs</span></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-5458686b99   2         2         2       23s</span><br><span class="line">nginx-deployment-687dc75df7   0         0         0       18m</span><br><span class="line">nginx-deployment-6df444bb79   0         0         0       5m55s</span><br></pre></td></tr></table></figure><blockquote><p>Rollover（多个rollout并行）</p></blockquote><p>假如您创建了一个有5个niginx:1.7.9 replica的 Deployment，但是当还只有3个nginx:1.7.9的 replica 创建出来的时候您就开始更新含有5个nginx:1.9.1 replica 的 Deployment。在这种情况下，Deployment 会立即杀掉已创建的3个nginx:1.7.9的 Pod，并开始创建nginx:1.9.1的 Pod。它不会等到所有的5个nginx:1.7.9的Pod 都创建完成后才开始改变航道。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line">4         &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 --revision参数指定某个历史版本</span></span><br><span class="line">$ kubectl rollout undo deployment nginx-deployment --to-revision=2</span><br><span class="line">deployment.extensions/nginx-deployment rolled back</span><br><span class="line">$ kubectl describe deploy nginx-deployment | grep -i <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    Image:        nginx:1.9.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ps: kubectl rollout pause deployment nginx-deployment    <span class="comment">## 暂停 deployment 的更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除DeployMent</span></span><br><span class="line">$ kubectl delete deployment nginx-deployment -n default</span><br></pre></td></tr></table></figure><blockquote><p>清理 Policy</p></blockquote><p>可以通过设置.spec.revisonHistoryLimit项来指定 deployment 最多保留多少 revision 历史记录。默认的会保留所有的 revision；如果将该项设置为0，Deployment 就不允许回退了</p><h3 id="4-DaemonSet"><a href="#4-DaemonSet" class="headerlink" title="4. DaemonSet"></a>4. DaemonSet</h3><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod</p><p>使用 DaemonSet 的一些典型用法：</p><ul><li>运行集群存储 daemon，例如在每个 Node 上运行glusterd、ceph</li><li>在每个 Node 上运行日志收集 daemon，例如fluentd、logstash</li><li>在每个 Node 上运行监控 daemon，例如Prometheus Node Exporter、collectd、Datadog 代理、New Relic 代理，或 Ganglia gmond</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deamonset-example</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">daemonset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">deamonset-example</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">deamonset-example</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">deamonset-example-tqmfx   1/1     Running   0          94s</span><br><span class="line">deamonset-example-wqvsm   1/1     Running   0          94s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 DaemonSet</span></span><br><span class="line">$ kubectl delete daemonset deamonset-example -n default</span><br></pre></td></tr></table></figure><h3 id="5-Jobs-：一次性任务"><a href="#5-Jobs-：一次性任务" class="headerlink" title="5. Jobs ：一次性任务"></a>5. Jobs ：一次性任务</h3><p>一次性任务，运行完成后pod销毁，不再重新启动新容器。还可以任务定时运行。</p><p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束</p><p>特殊说明:</p><ul><li><p>spec.template 格式同 Pod</p></li><li><p>RestartPolicy 仅支持 Never 或 OnFailure</p></li><li><p>单个Pod时，默认 Pod 成功运行后 Job 即结束</p></li><li><p>spec.completions 标志 Job 结束需要成功运行的 Pod 个数，默认为1</p></li><li><p>spec.parallelism 标志并行运行的 Pod 的个数，默认为1</p></li><li><p>spec.activeDeadlineSeconds 标志失败Pod的重试最大时间，超过这个时间不会继续重试</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;perl&quot;</span>,<span class="string">&quot;-Mbignum=bpi&quot;</span>,<span class="string">&quot;-wle&quot;</span>,<span class="string">&quot;print bpi(2000)&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get job</span><br><span class="line">NAME   COMPLETIONS   DURATION   AGE</span><br><span class="line">pi     1/1           3m26s      8m54s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">pi-bfmq8                  0/1     Completed   0          9m1s</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">log</span> -f pi-bfmq8</span><br><span class="line"><span class="built_in">log</span> is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use logs instead.</span><br><span class="line">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275905</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Job</span></span><br><span class="line">$ kubectl delete job pi -n default</span><br></pre></td></tr></table></figure><h3 id="6-CronJob-：定时任务"><a href="#6-CronJob-：定时任务" class="headerlink" title="6. CronJob ：定时任务"></a>6. CronJob ：定时任务</h3><p>cronjob 其实就是在job的基础上加上了时间调度，可以：在给定的时间点运行一个任务，也可以周期性的在给定时间点运行。（与linux中的crontab类似）</p><p>Cron Job管理基于时间的 Job，即：</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul><p>使用前提条件：当前使用的Kubernetes集群，版本 &gt;= 1.8(对 CronJob)。对于先前版本的集群，版本 &lt;1.8，启动 API Server时，通过传递选项–runtime-config=batch/v2alpha1=true可以开启 batch/v2alpha1API。</p><p>典型的用法如下所示：</p><ul><li>在给定的时间点调度 Job 运行</li><li>创建周期性运行的 Job，例如：数据库备份、发送邮件</li></ul><p>特殊说明：</p><ul><li><p>spec.template 格式同 Pod</p></li><li><p>RestartPolicy 仅支持 Never 或 OnFailure</p></li><li><p>单个 Pod 时，默认 Pod 成功运行后 Job 即结束</p></li><li><p>spec.completions 标志 Job 结束需要成功运行的 Pod 个数，默认为1</p></li><li><p>spec.parallelism 标志并行运行的 Pod 的个数，默认为1</p></li><li><p>spec.activeDeadlineSeconds 标志失败 Pod 的重试最大时间，超过这个时间不会继续重试</p></li><li><p>spec.schedule：调度，必需字段，指定任务运行周期，格式同 Cron</p></li><li><p>spec.jobTemplate：Job 模板，必需字段，指定需要运行的任务，格式同 Job</p></li><li><p>spec.startingDeadlineSeconds：启动 Job 的期限（秒级别），该字段是可选的。如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限</p></li><li><p>spec.concurrencyPolicy：并发策略，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。只允许指定下面策略中的一种：</p><ul><li><p>Allow（默认）：允许并发运行 Job</p></li><li><p>Forbid：禁止并发运行，如果前一个还没有完成，则直接跳过下一个</p></li><li><p>Replace：取消当前正在运行的 Job，用一个新的来替换</p><p>注意, 当前策略只能应用于同一个Cron Job创建的Job。如果存在多个Cron Job, 它们创建的 Job 之间总是允许并发运行。</p></li></ul></li><li><p>spec.suspend：挂起，该字段也是可选的。如果设置为true，后续所有执行都会被挂起。它对已经开始执行的 Job 不起作用。默认值为false。</p></li><li><p>spec.successfulJobsHistoryLimit和.spec.failedJobsHistoryLimit：历史限制，是可选的字段。它们指定了可以保留多少完成和失败的 Job。默认情况下，它们分别设置为3和1。设置限制的值为0，相关类型的 Job 完成后将不会被保留。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get cronjob</span><br><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   */1 * * * *   False     1        10s             22s</span><br><span class="line"></span><br><span class="line">$ kubectl get job</span><br><span class="line">NAME               COMPLETIONS   DURATION   AGE</span><br><span class="line">hello-1614322500   1/1           3s         62s</span><br><span class="line">hello-1614322560   0/1           2s         2s</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                     READY   STATUS      RESTARTS   AGE</span><br><span class="line">hello-1614322500-p7wmh   0/1     Completed   0          6s</span><br><span class="line">hello-1614322560-vsz58   0/1     Completed   0          27s</span><br><span class="line"></span><br><span class="line">$ kubectl logs -f hello-1614322500-p7wmh</span><br><span class="line">Sat Mar 20 13:03:17 UTC 2021</span><br><span class="line">Hello from the Kubernetes cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 cronjob</span></span><br><span class="line">$ kubectl delete cronjob hello -n default</span><br></pre></td></tr></table></figure><h3 id="7-StateFulSet"><a href="#7-StateFulSet" class="headerlink" title="7. StateFulSet"></a>7. StateFulSet</h3><p>StatefulSets（管理有状态应用） 作为 Controller 为 Pod 提供唯一的标识。它可以保证部署和 scale 的顺序StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括：</p><ul><li>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现。</li><li>稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现。</li><li>有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现。</li><li>有序收缩，有序删除（即从N-1到0）。</li></ul><h3 id="8-Horizontal-Pod-Autoscaler"><a href="#8-Horizontal-Pod-Autoscaler" class="headerlink" title="8. Horizontal Pod Autoscaler"></a>8. Horizontal Pod Autoscaler</h3><p>Horizontal Pod Autoscaler 应用的资源使用率通常都有高峰和低谷的时候，如何削峰填谷，提高集群的整体资源利用率，让service中的Pod个数自动调整呢？这就有赖于Horizontal Pod Autoscaler了，顾名思义，使Pod水平自动缩放。</p><h2 id="5、Service"><a href="#5、Service" class="headerlink" title="5、Service"></a>5、Service</h2><blockquote><p>Kubernetes Service定义了这样一种抽象：一个Pod的逻辑分组，一种可以访问它们的策略 —— 通常称为微服务。这一组Pod能够被Service访问到，通常是通过Label Selector 。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v20t5rzj30v50gwtc0.jpg" alt="image-20210301102544478"></p><p>Service能够提供负载均衡的能力，但是在使用上有个限制：Service 只提供 4 层负载均衡能力，而没有 7 层功能, 但有时可能需要更多的匹配规则来转发请求，这点上 4 层负载均衡是不支持的。</p><h3 id="5-1-Service-的类型"><a href="#5-1-Service-的类型" class="headerlink" title="5.1 Service 的类型"></a>5.1 Service 的类型</h3><p>Service 在 K8s 中有以下四种类型：</p><ul><li>ClusterIp：默认类型，自动分配一个仅 Cluster 内部可以访问的虚拟 IP</li><li>NodePort：在 ClusterIP 基础上为 Service 在每台机器上绑定一个端口，这样就可以通过: NodePort 来访问该服务</li><li>LoadBalancer：在 NodePort 的基础上，借助 cloud provider 创建一个外部负载均衡器，并将请求转发到: NodePort</li><li>ExternalName：把集群外部的服务引入到集群内部来，在集群内部直接使用。没有任何类型代理被创建，这只有 kubernetes 1.7 或更高版本的 kube-dns 才支持</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v25ddjsj30s50lnafb.jpg" alt="image-20210301102927561"></p><h3 id="5-2-VIP-和-Service-代理"><a href="#5-2-VIP-和-Service-代理" class="headerlink" title="5.2 VIP 和 Service 代理"></a>5.2 VIP 和 Service 代理</h3><p>在 Kubernetes 集群中，每个 Node 运行一个kube-proxy进程。kube-proxy负责为Service实现了一种VIP（虚拟 IP）的形式，而不是ExternalName的形式。在 Kubernetes v1.0 版本，代理完全在 userspace。在Kubernetes v1.1 版本，新增了 iptables 代理，但并不是默认的运行模式。从 Kubernetes v1.2 起，默认就是iptables 代理。在 Kubernetes v1.8.0-beta.0 中，添加了 ipvs 代理。</p><p>在 Kubernetes 1.14 版本开始默认使用ipvs 代理。</p><p>在 Kubernetes v1.0 版本，Service是 “4层”（TCP/UDP over IP）概念。在 Kubernetes v1.1 版本，新增了Ingress API（beta 版），用来表示 “7层”（HTTP）服务。</p><p>代理模式的分类如下：</p><p>1、userspace 代理模式</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2ayww4j30sx0jd11p.jpg" alt="image-20210301103543203"></p><p>2、iptables 代理模式</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2gjt4wj30sw0it471.jpg" alt="image-20210301103602493"></p><p>3、ipvs 代理模式</p><p>这种模式，kube-proxy 会监视 Kubernetes Service对象和Endpoints，调用netlink接口以相应地创建ipvs 规则并定期与 Kubernetes Service对象和Endpoints对象同步 ipvs 规则，以确保 ipvs 状态与期望一致。访问服务时，流量将被重定向到其中一个后端 Pod。</p><p>与 iptables 类似，ipvs 于 netfilter 的 hook 功能，但使用哈希表作为底层数据结构并在内核空间中工作。这意味着 ipvs 可以更快地重定向流量，并且在同步代理规则时具有更好的性能。此外，ipvs 为负载均衡算法提供了更多选项，例如：</p><ul><li>rr：轮询调度</li><li>lc：最小连接数</li><li>dh：目标哈希</li><li>sh：源哈希</li><li>sed：最短期望延迟</li><li>nq：不排队调度</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2lb7tmj30sv0irgwj.jpg" alt="image-20210301103456348"></p><h3 id="5-3-ClusterIP"><a href="#5-3-ClusterIP" class="headerlink" title="5.3 ClusterIP"></a>5.3 ClusterIP</h3><p>clusterIP 主要在每个 node 节点使用 IPVS，将发向 clusterIP 对应端口的数据，转发到 kube-proxy 中。然后 kube-proxy 自己内部实现有负载均衡的方法，并可以查询到这个 service 下对应 pod 的地址和端口，进而把数据转发给对应的 pod 的地址和端口。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2owu0xj60s60fcacs02.jpg" alt="image-20210301111213452"></p><p>为了实现图上的功能，主要需要以下几个组件的协同工作：</p><ul><li>apiserver 用户通过kubectl命令向apiserver发送创建service的命令，apiserver接收到请求后将数据存储到etcd中</li><li>kube-proxy kubernetes的每个节点中都有一个叫做kube-porxy的进程，这个进程负责感知service，pod的变化，并将变化的信息写入本地的 IPVS 规则中</li><li>IPVS 使用NAT等技术将virtualIP的流量转至endpoint中</li></ul><p><strong>创建 myapp-deploy-svc.yaml 文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-deploy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>查看 IPVSADM</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE     SELECTOR</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   172d    &lt;none&gt;</span><br><span class="line">myapp        ClusterIP   10.104.132.57   &lt;none&gt;        80/TCP    3m10s   app=myapp,release=stabel</span><br><span class="line"></span><br><span class="line">$ ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 192.168.2.1:6443             Masq    1      3          0         </span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.14:53               Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.15:53               Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.0.14:9153             Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.15:9153             Masq    1      0          0         </span><br><span class="line">TCP  10.104.132.57:80 rr</span><br><span class="line">  -&gt; 10.244.1.40:80               Masq    1      0          3         </span><br><span class="line">  -&gt; 10.244.1.41:80               Masq    1      0          3         </span><br><span class="line">  -&gt; 10.244.2.40:80               Masq    1      0          3         </span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.14:53               Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.15:53               Masq    1      0          0</span><br></pre></td></tr></table></figure><h3 id="5-4-Headless-Service"><a href="#5-4-Headless-Service" class="headerlink" title="5.4 Headless Service"></a>5.4 Headless Service</h3><p>有时不需要或不想要负载均衡，以及单独的 Service IP 。遇到这种情况，可以通过指定 ClusterIP(spec.clusterIP) 的值为 “None” 来创建 Headless Service 。这类 Service 并不会分配 Cluster IP， kube-proxy 不会处理它们，而且平台也不会为它们进行负载均衡和路由。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-headless</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span>  </span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">&quot;None&quot;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE     SELECTOR</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   172d    &lt;none&gt;</span><br><span class="line">myapp            ClusterIP   10.104.132.57   &lt;none&gt;        80/TCP    5m30s   app=myapp,release=stabel</span><br><span class="line">myapp-headless   ClusterIP   None            &lt;none&gt;        80/TCP    19s     app=myapp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ dig -t A myapp-headless.default.svc.cluster.local. @10.96.0.10</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-16.P2.el7_8.6 &lt;&lt;&gt;&gt; -t A myapp-headless.default.svc.cluster.local. @10.96.0.10</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; WARNING: .<span class="built_in">local</span> is reserved <span class="keyword">for</span> Multicast DNS</span><br><span class="line">;; You are currently testing what happens when an mDNS query is leaked to DNS</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 5421</span></span><br><span class="line"><span class="string">;; flags: qr aa rd; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string">;; WARNING: recursion requested but not available</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;myapp-headless.default.svc.cluster.local. IN A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">myapp-headless.default.svc.cluster.local. 30 INA 10.244.1.41</span></span><br><span class="line"><span class="string">myapp-headless.default.svc.cluster.local. 30 INA 10.244.1.40</span></span><br><span class="line"><span class="string">myapp-headless.default.svc.cluster.local. 30 INA 10.244.2.40</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 0 msec</span></span><br><span class="line"><span class="string">;; SERVER: 10.96.0.10#53(10.96.0.10)</span></span><br><span class="line"><span class="string">;; WHEN: 四 3月 04 10:36:53 CST 2021</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 237</span></span><br></pre></td></tr></table></figure><h3 id="5-5-NodePort"><a href="#5-5-NodePort" class="headerlink" title="5.5 NodePort"></a>5.5 NodePort</h3><p>nodePort 的原理在于在 node 上开了一个端口，将向该端口的流量导入到 kube-proxy，然后由 kube-proxy 进一步到给对应的 pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapps</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">ports:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE     SELECTOR</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        172d    &lt;none&gt;</span><br><span class="line">myapp            ClusterIP   10.104.132.57   &lt;none&gt;        80/TCP         11m     app=myapp,release=stabel</span><br><span class="line">myapp-headless   ClusterIP   None            &lt;none&gt;        80/TCP         6m42s   app=myapp</span><br><span class="line">myapps           NodePort    10.100.41.94    &lt;none&gt;        80:32195/TCP   42s     app=web,release=stabel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询流程,并且在每台节点上都会打开一个32195端口</span></span><br><span class="line">ipvsadm -Ln</span><br></pre></td></tr></table></figure><h3 id="5-6-LoadBalancer"><a href="#5-6-LoadBalancer" class="headerlink" title="5.6 LoadBalancer"></a>5.6 LoadBalancer</h3><p>loadBalancer 和 nodePort 其实是同一种方式。区别在于 loadBalancer 比 nodePort 多了一步，就是可以调用cloud provider 去创建 LB 来向节点导流。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2ulrlwj30sa0ln76f.jpg" alt="image-20210301113038598"></p><h3 id="5-7-ExternalName"><a href="#5-7-ExternalName" class="headerlink" title="5.7 ExternalName"></a>5.7 ExternalName</h3><p>这种类型的 Service 通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容( 例如：hub.atguigu.com )。</p><p>ExternalName Service 是 Service 的特例，它没有 selector，也没有定义任何的端口和Endpoint。相反的，对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service-1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ExternalName</span></span><br><span class="line">  <span class="attr">externalName:</span> <span class="string">hub.armin.com</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -owide</span><br><span class="line">NAME             TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE     SELECTOR</span><br><span class="line">kubernetes       ClusterIP      10.96.0.1       &lt;none&gt;          443/TCP        172d    &lt;none&gt;</span><br><span class="line">my-service-1     ExternalName   &lt;none&gt;          hub.armin.com   &lt;none&gt;         29s     &lt;none&gt;</span><br><span class="line">myapp            ClusterIP      10.104.132.57   &lt;none&gt;          80/TCP         21m     app=myapp,release=stabel</span><br><span class="line">myapp-headless   ClusterIP      None            &lt;none&gt;          80/TCP         15m     app=myapp</span><br><span class="line">myapps           NodePort       10.100.41.94    &lt;none&gt;          80:32195/TCP   9m51s   app=web,release=stabel</span><br><span class="line"></span><br><span class="line">$ dig -t A hub.armin.com.svc.cluster.local. @10.96.0.10</span><br></pre></td></tr></table></figure><p>当查询主机 my-service.defalut.svc.cluster.local ( SVC_NAME.NAMESPACE.svc.cluster.local )时，集群的DNS 服务将返回一个值 my.database.example.com 的 CNAME 记录。访问这个服务的工作方式和其他的相同，唯一不同的是重定向发生在 DNS 层，而且不会进行代理或转发。</p><h2 id="6、Ingress"><a href="#6、Ingress" class="headerlink" title="6、Ingress"></a>6、Ingress</h2><blockquote><p>实际上Ingress也是Kubernetes API的标准资源类型之一，它其实就是一组基于DNS名称（host）或URL路径把请求转发到指定的Service资源的规则。用于将集群外部的请求流量转发到集群内部完成的服务发布。我们需要明白的是，Ingress资源自身不能进行“流量穿透”，仅仅是一组规则的集合，这些集合规则还需要其他功能的辅助，比如监听某套接字，然后根据这些规则的匹配进行路由转发，这些能够为Ingress资源监听套接字并将流量转发的组件就是Ingress Controller。</p><p>Ingress 控制器不同于Deployment 控制器的是，Ingress控制器不直接运行为kube-controller-manager的一部分，它仅仅是Kubernetes集群的一个附件，类似于CoreDNS，需要在集群上单独部署。</p></blockquote><p>Ingress-Nginx github 地址：<a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></p><p>Ingress-Nginx 官方网站：<a href="https://kubernetes.github.io/ingress-nginx/">https://kubernetes.github.io/ingress-nginx/</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v2zr3qej314c0ijah5.jpg" alt="image-20210305163255636"></p><h3 id="6-1-部署-Ingress-Nginx"><a href="#6-1-部署-Ingress-Nginx" class="headerlink" title="6.1 部署 Ingress-Nginx"></a>6.1 部署 Ingress-Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># mkdir -p /etc/kubernetes/ingress-nginx &amp;&amp; cd /etc/kubernetes/ingress-nginx</span></span><br></pre></td></tr></table></figure><h2 id="7、K8S-存储"><a href="#7、K8S-存储" class="headerlink" title="7、K8S - 存储"></a>7、K8S - 存储</h2><ul><li>ConfigMap</li><li>Secret</li><li>volume</li><li>Persistent Volume（PV）</li></ul><h3 id="7-1-ConfigMap"><a href="#7-1-ConfigMap" class="headerlink" title="7.1 ConfigMap"></a>7.1 ConfigMap</h3><blockquote><p>ConfigMap 功能在 Kubernetes1.2 版本中引入，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。ConfigMap API 给我们提供了向容器中注入配置信息的机制，ConfigMap 可以被用来保存单个属性，也可以用来保存整个配置文件或者 JSON 二进制大对象。</p></blockquote><h4 id="7-1-1-ConfigMap-的创建"><a href="#7-1-1-ConfigMap-的创建" class="headerlink" title="7.1.1 ConfigMap 的创建"></a>7.1.1 ConfigMap 的创建</h4><ul><li>目录创建</li><li>文件创建</li><li>字面值创建</li></ul><p><strong>使用目录创建</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">$ ll /etc/kubernetes/configmap-dir/</span><br><span class="line">game.properties</span><br><span class="line">ui.properties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /etc/kubernetes/configmap-dir/game.properties</span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=<span class="literal">true</span></span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=<span class="literal">true</span></span><br><span class="line">secret.code.lives=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /etc/kubernetes/configmap-dir/ui.properties</span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br><span class="line">how.nice.to.look=fairlyNice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --from-file 指定在目录下的所有文件都会被用在 ConfigMap 里面创建一个键值对，键的名字就是文件名，值就是文件的内容。</span></span><br><span class="line">$ kubectl create configmap game-config-1 --from-file=/etc/kubernetes/configmap-dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get configmap -n default -owide</span><br><span class="line">NAME            DATA   AGE</span><br><span class="line">game-config-1   2      &lt;invalid&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get configmap -n default -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">items:</span><br><span class="line">- apiVersion: v1</span><br><span class="line">  data:</span><br><span class="line">    game.properties: |</span><br><span class="line">      enemies=aliens</span><br><span class="line">      lives=3</span><br><span class="line">      enemies.cheat=<span class="literal">true</span></span><br><span class="line">      enemies.cheat.level=noGoodRotten</span><br><span class="line">      secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">      secret.code.allowed=<span class="literal">true</span></span><br><span class="line">      secret.code.lives=30</span><br><span class="line">    ui.properties: |</span><br><span class="line">      color.good=purple</span><br><span class="line">      color.bad=yellow</span><br><span class="line">      allow.textmode=<span class="literal">true</span></span><br><span class="line">      how.nice.to.look=fairlyNice</span><br><span class="line">  kind: ConfigMap</span><br><span class="line">  metadata:</span><br><span class="line">    creationTimestamp: <span class="string">&quot;2021-03-08T11:54:57Z&quot;</span></span><br><span class="line">    name: game-config-1</span><br><span class="line">    namespace: default</span><br><span class="line">    resourceVersion: <span class="string">&quot;15839&quot;</span></span><br><span class="line">    selfLink: /api/v1/namespaces/default/configmaps/game-config-1</span><br><span class="line">    uid: cb84c4f5-e509-4ecb-8513-68184b8b57af</span><br><span class="line">kind: List</span><br><span class="line">metadata:</span><br><span class="line">  resourceVersion: <span class="string">&quot;&quot;</span></span><br><span class="line">  selfLink: <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl describe configmap game-config-1 -n default</span><br><span class="line">Name:         game-config-1</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ui.properties:</span><br><span class="line">----</span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br><span class="line">how.nice.to.look=fairlyNice</span><br><span class="line"></span><br><span class="line">game.properties:</span><br><span class="line">----</span><br><span class="line">enemies=aliens</span><br><span class="line">lives=3</span><br><span class="line">enemies.cheat=<span class="literal">true</span></span><br><span class="line">enemies.cheat.level=noGoodRotten</span><br><span class="line">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="line">secret.code.allowed=<span class="literal">true</span></span><br><span class="line">secret.code.lives=30</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>使用文件创建</strong></p><p>只要指定为一个文件就可以从单个文件中创建 ConfigMap</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create configmap game-config-2 --from-file=/etc/kubernetes/configmap-dir/game.properties</span><br><span class="line">$ kubectl get configmaps game-config-2 -o yaml</span><br><span class="line"><span class="comment"># --from-file这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的。</span></span><br></pre></td></tr></table></figure><p><strong>使用字面值创建</strong></p><p>使用文字值创建，利用–from-literal参数传递配置信息，该参数可以使用多次</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create configmap game-config-3 --from-literal=k1.how=v1 --from-literal=k2.how=v2</span><br><span class="line">$ kubectl get configmaps game-config-3 -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  k1.how: v1</span><br><span class="line">  k2.how: v2</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-03-08T12:01:19Z&quot;</span></span><br><span class="line">  name: game-config-3</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;16388&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/game-config-3</span><br><span class="line">  uid: b9e048f3-a17d-4517-bfe5-311c51377aaa</span><br></pre></td></tr></table></figure><h4 id="7-1-2-Pod-中使用-ConfigMap"><a href="#7-1-2-Pod-中使用-ConfigMap" class="headerlink" title="7.1.2 Pod 中使用 ConfigMap"></a>7.1.2 Pod 中使用 ConfigMap</h4><p><strong>使用 ConfigMap 来替代环境变量</strong></p><ul><li>env: 指定导入k/v</li><li>envFrom: 全部导入</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat cm-test-01.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">special.how:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">special.sam:</span> <span class="string">charm</span></span><br><span class="line">  <span class="attr">special.lep:</span> <span class="string">value</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-test-pod-01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_HOW_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.how</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_SAM_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.sam</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f cm-test-01.yaml</span><br><span class="line">$ kubectl logs cm-test-pod-01 | grep SPECIAL</span><br><span class="line">SPECIAL_HOW_KEY=very</span><br><span class="line">SPECIAL_SAM_KEY=charm</span><br></pre></td></tr></table></figure><p><strong>用 ConfigMap 设置命令行参数</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat cm-test-02.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">config-01</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">a:</span> <span class="string">b</span></span><br><span class="line">  <span class="attr">c:</span> <span class="string">d</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-test-pod-02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo $(KEY-01) $(KEY-02)&quot;</span>]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KEY-01</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">config-01</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">a</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KEY-02</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">config-01</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">c</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs cm-test-pod-02</span><br><span class="line">b d</span><br></pre></td></tr></table></figure><p><strong>通过数据卷插件使用ConfigMap</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat cm-test-03.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">config-02</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">how:</span> <span class="string">HOW</span></span><br><span class="line">  <span class="attr">sam:</span> <span class="string">SAM</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 在数据卷里面使用这个 ConfigMap,有不同的选项。最基本的就是将文件填入数据卷,在这个文件中,键就是文件名,键值就是文件内容。</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod-02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 36000&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">config-02</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pod-02 -- ls -lh /etc/config</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root          10 Mar  9 08:44 how -&gt; ..data/how</span><br><span class="line">lrwxrwxrwx    1 root     root          10 Mar  9 08:44 sam -&gt; ..data/sam</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pod-02 -- cat /etc/config/how</span><br><span class="line">HOW</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pod-02 -- cat /etc/config/sam</span><br><span class="line">SAM</span><br></pre></td></tr></table></figure><h4 id="7-1-3-ConfigMap-的热更新"><a href="#7-1-3-ConfigMap-的热更新" class="headerlink" title="7.1.3 ConfigMap 的热更新"></a>7.1.3 ConfigMap 的热更新</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">log-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">log-config</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it my-nginx-7b6584d96d-hpbml -- cat /etc/config/log_level</span><br><span class="line">INFO</span><br></pre></td></tr></table></figure><p>修改 ConfigMap，将其INFO改为DEBUG</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl edit configmap log-config</span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  log_level: DEBUG</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubectl.kubernetes.io/last-applied-configuration: |</span><br><span class="line">      &#123;<span class="string">&quot;apiVersion&quot;</span>:<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;log_level&quot;</span>:<span class="string">&quot;DEBUG&quot;</span>&#125;,<span class="string">&quot;kind&quot;</span>:<span class="string">&quot;ConfigMap&quot;</span>,<span class="string">&quot;metadata&quot;</span>:&#123;<span class="string">&quot;annotations&quot;</span>:&#123;&#125;,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;log-config&quot;</span>,<span class="string">&quot;namespace&quot;</span>:<span class="string">&quot;default&quot;</span>&#125;&#125;</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-03-09T09:04:08Z&quot;</span></span><br><span class="line">  name: log-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;36210&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/log-config</span><br><span class="line">  uid: 8e2f15fc-cc05-414b-ad2f-9597cacf7c9a</span><br></pre></td></tr></table></figure><p>修改log_level的值为DEBUG等待大概 10 秒钟时间，再次查看环境变量的值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it my-nginx-7b6584d96d-hpbml -- cat /etc/config/log_level</span><br><span class="line">DEBUG</span><br></pre></td></tr></table></figure><h3 id="7-2-Secret"><a href="#7-2-Secret" class="headerlink" title="7.2 Secret"></a>7.2 Secret</h3><blockquote><p>Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec中。</p><p>并且，Secret 可以以 Volume 或者 环境变量的方式使用。</p></blockquote><p>Secret 有三种类型</p><ul><li>Service Account</li><li>Opaque</li><li>kubernetes.io/dockerconfigjson</li></ul><h4 id="7-2-1-Service-Account"><a href="#7-2-1-Service-Account" class="headerlink" title="7.2.1 Service Account"></a>7.2.1 Service Account</h4><blockquote><p>大致了解一下即可，Service Account 用来访问 Kubernetes API，由 Kubernetes 自动创建，并且会自动挂载到 Pod的/run/secrets/kubernetes.io/serviceaccount目录中。</p><p>PS : 只有与 apiserver 组件进行交互的 pod 才会有如下的 证书、命名空间、tekon密钥。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it kube-proxy-2x7r8 -n kube-system -- ls -lh /run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 13 Mar 10 02:50 ca.crt -&gt; ..data/ca.crt</span><br><span class="line">lrwxrwxrwx 1 root root 16 Mar 10 02:50 namespace -&gt; ..data/namespace</span><br><span class="line">lrwxrwxrwx 1 root root 12 Mar 10 02:50 token -&gt; ..data/token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这几个文件是 default-token 提供的，而 default-token 是 k8s 默认为每一个namespace 创建的，用于Service Account</span></span><br><span class="line">$ kubectl get secret</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-c6vqw   kubernetes.io/service-account-token   3      46d</span><br><span class="line"></span><br><span class="line">$ kubectl describe secret default-token-c6vqw</span><br><span class="line">…………………………………………………………………………</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tYzZ2cXciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjJjNjlmMjkzLTcwNTQtNDY4My05ODNmLTljYmQyNTBlZTQ1ZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.WdQ32P2ndcKUNbyrsKouTgBEVQf8Smq1mSd9zRpBou1KN2DUJ6UPWHvMdDlqwvN2CACOWZcri0eN8NABvNEW6cQMv7O7-GoVsuv5HLDxmO1IC1tTVUr8d-uBxULiSiQZ_Mj2LK1QKYNAHzVYRlEozzI3wZAOWBDqA7ZFVpXRQMES0lzlRc9ETZqQmxIHgF_hyTzpsRaLkR480vppOTORejZGrm_wiSvYVKKvNe3H35TRtHARCZDlGv7DAickld2rnYuKSyLdZz29CmDiE6L0ZyzTCMgPalNkmjcuij28XG19I4GLio7IiS5ZMDrQsmr_4t3G449PPSiH_0C78LICuA</span><br></pre></td></tr></table></figure><h4 id="7-2-2-Opaque-Secret"><a href="#7-2-2-Opaque-Secret" class="headerlink" title="7.2.2 Opaque Secret"></a>7.2.2 Opaque Secret</h4><blockquote><p>base64编码格式的Secret，用来存储密码、密钥等。</p><p>Opaque 类型的数据是一个 map 类型，要求 value 是 base64 编码格式。</p></blockquote><p>1、创建 Opaque-Secret</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64 -d 选项为解密</span></span><br><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;admin&quot;</span> | base64</span><br><span class="line">YWRtaW4=</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;1f2d1e2e67df&quot;</span> | base64</span><br><span class="line">MWYyZDFlMmU2N2Rm</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat opaque-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">op-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get secret</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-c6vqw   kubernetes.io/service-account-token   3      46d</span><br><span class="line">op-secret             Opaque                                2      11s</span><br><span class="line"></span><br><span class="line">$ kubectl describe secret op-secret</span><br><span class="line">…………………………………………………………………………</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:  12 bytes</span><br><span class="line">username:  5 bytes</span><br></pre></td></tr></table></figure><p>2、使用方式</p><ul><li>将 Secret 挂载到 Volume 中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat volume-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seret-test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">seret-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">op-secret</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secrets</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&#x27;/etc/secrets&#x27;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it seret-test -- ls -l /etc/secrets</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root            15 Mar 10 03:25 password -&gt; ..data/password</span><br><span class="line">lrwxrwxrwx    1 root     root            15 Mar 10 03:25 username -&gt; ..data/username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且 secret 是会自己进行解密的</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it seret-test -- cat /etc/secrets/password</span><br><span class="line">1f2d1e2e67df</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it seret-test -- cat /etc/secrets/username</span><br><span class="line">admin</span><br></pre></td></tr></table></figure><ul><li>将 Secret 导出到环境变量中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat env-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pod-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-1</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_USER</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">op-secret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">op-secret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it pod-deployment-7cfd69dcf7-222q2 -- /bin/sh</span><br><span class="line">/ <span class="comment"># echo $TEST_USER</span></span><br><span class="line">admin</span><br><span class="line">/ <span class="comment"># echo $TEST_PASSWORD</span></span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure><h4 id="7-2-3-dockerconfigjson"><a href="#7-2-3-dockerconfigjson" class="headerlink" title="7.2.3 dockerconfigjson"></a>7.2.3 dockerconfigjson</h4><blockquote><p>用来存储私有 docker registry 的认证信息。</p></blockquote><p>1、使用 Kuberctl 创建 docker registry 认证的 secret（注：针对私有仓库）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># --docker-server      仓库地址</span></span><br><span class="line"><span class="comment"># --docker-username    仓库用户</span></span><br><span class="line"><span class="comment"># --docker-password    仓库密码</span></span><br></pre></td></tr></table></figure><p>2、在创建 Pod 的时候，通过 imagePullSecrets 来引用刚创建的 myregistrykey</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat key-secret.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">hub.lemon.com/library/my_nginx:v1</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myregistrykey</span></span><br></pre></td></tr></table></figure><h3 id="7-3-Volume"><a href="#7-3-Volume" class="headerlink" title="7.3 Volume"></a>7.3 Volume</h3><blockquote><p>容器磁盘上的文件的生命周期是短暂的，这就使得在容器中运行重要应用时会出现一些问题。首先，当容器崩溃时，kubelet 会重启它，但是容器中的文件将丢失——容器以干净的状态（镜像最初的状态）重新启动。其次，在Pod中同时运行多个容器时，这些容器之间通常需要共享文件。Kubernetes 中的Volume抽象就很好的解决了这些问题。</p><p>Kubernetes 中的卷有明确的寿命 —— 与封装它的 Pod 相同。所f以，卷的生命比 Pod 中的所有容器都长，当这个容器重启时数据仍然得以保存。当然，当 Pod 不再存在时，卷也将不复存在。也许更重要的是，Kubernetes支持多种类型的卷，Pod 可以同时使用任意数量的卷。</p></blockquote><p><strong>Kubernetes 支持以下类型的卷：</strong></p><ul><li>awsElasticBlockStore、azureDisk、azureFile、cephfs、csi、downwardAPI、emptyDir</li><li>fc、flocker、gcePersistentDisk、gitRepo、glusterfs、hostPath、iscsi、local、nfs</li><li>persistentVolumeClaim、projected、portworxVolume、quobyte、rbd、scaleIO、secret</li><li>storageos、vsphereVolume</li></ul><p><strong>比较常用的两类 emptyDir、hostPath</strong></p><h4 id="7-3-1-emptyDir"><a href="#7-3-1-emptyDir" class="headerlink" title="7.3.1 emptyDir"></a>7.3.1 emptyDir</h4><blockquote><p>当 Pod 被分配给节点时，首先创建emptyDir卷，并且只要该 Pod 在该节点上运行，该卷就会存在。正如卷的名字所述，它最初是空的。Pod 中的容器可以读取和写入emptyDir卷中的相同文件，尽管该卷可以挂载到每个容器中的相同或不同路径上。当出于任何原因从节点中删除 Pod 时，emptyDir中的数据将被永久删除。</p></blockquote><p><strong>emptyDir的用法有：</strong></p><ul><li>暂存空间，例如用于基于磁盘的合并排序</li><li>用作长时间计算崩溃恢复时的检查点</li><li>Web服务器容器提供数据时，保存内容管理器容器提取的文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat emptyDir.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container01</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache01</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container02</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:latest</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache02</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pd -c test-container01 -- /bin/sh</span><br><span class="line">/ <span class="comment"># cd /cache01</span></span><br><span class="line">/cache01 <span class="comment"># hostname &gt;&gt; test.log</span></span><br><span class="line">/cache01 <span class="comment"># cat test.log </span></span><br><span class="line">test-pd</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it test-pd -c test-container02 -- /bin/sh</span><br><span class="line"><span class="comment"># cd /cache02</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">test.log</span><br><span class="line"><span class="comment"># cat test.log</span></span><br><span class="line">test-pd</span><br></pre></td></tr></table></figure><h4 id="7-3-2-hostPath"><a href="#7-3-2-hostPath" class="headerlink" title="7.3.2 hostPath"></a>7.3.2 hostPath</h4><blockquote><p>hostPath卷将主机节点的文件系统中的文件或目录挂载到集群中。</p></blockquote><p><strong>hostPath 的用途如下：</strong></p><ul><li>运行需要访问 Docker 内部的容器；使用 /var/lib/docker 的 hostPath</li><li>在容器中运行 cAdvisor；使用 /dev/cgroups 的 hostPath</li><li>允许 pod 指定给定的 hostPath 是否应该在 pod 运行之前存在，是否应该创建，以及它应该以什么形式存在</li></ul><p><strong>除了所需的path属性之外，用户还可以为hostPath卷指定type</strong></p><table><thead><tr><th>值</th><th>行为</th></tr></thead><tbody><tr><td></td><td>空字符串（默认）用于向后兼容，这意味着在挂载 hostPath 卷之前不会执行任何检查。</td></tr><tr><td>DirectoryOrCreate</td><td>如果在给定的路径上没有任何东西存在，那么将根据需要在那里创建一个空目录，权限设置为 0755，与 Kubelet 具有相同的组和所有权。</td></tr><tr><td>Directory</td><td>给定的路径下必须存在目录。</td></tr><tr><td>FileOrCreate</td><td>如果在给定的路径上没有任何东西存在，那么会根据需要创建一个空文件，权限设置为 0644，与 Kubelet 具有相同的组和所有权。</td></tr><tr><td>File</td><td>给定的路径下必须存在文件。</td></tr><tr><td>Socket</td><td>给定的路径下必须存在 UNIX 套接字。</td></tr><tr><td>CharDevice</td><td>给定的路径下必须存在字符设备。</td></tr><tr><td>BlockDevice</td><td>给定的路径下必须存在块设备。</td></tr></tbody></table><p><strong>使用这种卷类型是请注意，因为：</strong></p><ul><li>由于每个节点上的文件都不同，具有相同配置（例如从 podTemplate 创建的）的 pod 在不同节点上的行为可能会有所不同。</li><li>当 Kubernetes 按照计划添加资源感知调度时，将无法考虑hostPath使用的资源。</li><li>在底层主机上创建的文件或目录只能由 root 写入。您需要在特权容器中以 root 身份运行进程，或修改主机上的文件权限以便写入hostPath卷。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat hostpath.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">h-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/hv</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># directory location on host</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line">      <span class="comment"># this field is optional</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide</span><br><span class="line">NAME    READY   STATUS              RESTARTS   AGE   IP       NODE                 </span><br><span class="line">h-pod   0/1     ContainerCreating   0          7s    &lt;none&gt;   k8s-node-192.168.2.22</span><br><span class="line"></span><br><span class="line">$ hostname</span><br><span class="line">k8s-node-192.168.2.22</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hv test&#x27;</span> &gt; /data/h-test.log</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it h-pod -- cat /hv/h-test.log</span><br><span class="line">hv <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="7-4-Persistent-Volume（PV）"><a href="#7-4-Persistent-Volume（PV）" class="headerlink" title="7.4 Persistent Volume（PV）"></a>7.4 Persistent Volume（PV）</h3><blockquote><p>PersistentVolume（简称PV） 是 Volume 之类的卷插件，也是集群中的资源，但独立于Pod的生命周期（即不会因Pod删除而被删除），不归属于某个Namespace。</p><p>PersistentVolumeClaim（简称PVC）是用户存储的请求，PVC消耗PV的资源，可以请求特定的大小和访问模式，需要指定归属于某个Namespace，在同一个Namespace 的 Pod才可以指定对应的PVC。</p></blockquote><p>PV (持久化卷)，是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置, 它和具体的底层的共享存储技术的实现方式有关，比如Ceph、GlusterFS、NFS等，都是通过插件机制完成与共享存储的对接。</p><p>PVC (持久化卷声明)，PVC 是用户存储的一种声明，PVC 和 Pod 比较类型，Pod 是消耗节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 的内存，而 PVC 可以请求特定的存储空间和访问模式。对于真正存储的用户不需要关心底层的存储实现细节，只需要直接使用PVC即可。</p><p>但是通过PVC请求一定的存储空间也很有可能不足以满足对于存储设备的各种需求，而且不同的应用程序对于存储性能的要求也能也不尽相同，比如读写速度、并发性能等，为了解决这一问题，Kubernetes又为我们引入了一个新的资源对象: StorageClass,通过StorageClass的定义，管理员可以将存储资源定义为某种类型的资源，比如快速存储、慢速存储等，用户根据StorageClass的描述就可以非常直观的知道各种存储资源特性了，这样就可以根据应用的特性去申请合适的存储资源了。</p><h4 id="7-4-1-PV-和-PVC的生命周期"><a href="#7-4-1-PV-和-PVC的生命周期" class="headerlink" title="7.4.1 PV 和 PVC的生命周期"></a>7.4.1 PV 和 PVC的生命周期</h4><blockquote><p>PV 可以看作可用的存储资源，PVC则是对存储资源的需求，PV 和 PVC的互相关系遵循如下图</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3b92l4j31720loh4b.jpg" alt="image-20210311104829767"></p><h4 id="7-4-2-资源供应-Provisioning"><a href="#7-4-2-资源供应-Provisioning" class="headerlink" title="7.4.2 资源供应 (Provisioning)"></a>7.4.2 资源供应 (Provisioning)</h4><blockquote><p>Kubernetes支持两种资源的供应模式：静态模式(Staic)和动态模式(Dynamic)。资源供应的结果就是创建好的PV。</p></blockquote><ul><li>静态模式：集群管理员手工创建许多 PV，在定义 PV 时需要将后端存储的特性进行设置。</li><li>动态模式：集群管理员无须手工创建 PV，而是通过 StorageClass 的设置对后端存储进行描述，标记为某种 “类型(Class)”。此时要求 PVC 对存储的类型进行声明，系统将自动完成 PV 的创建及 PVC 的绑定。<ul><li>PVC 可以声明 Class 为””，说明该 PVC 禁止使用动态模式。</li></ul></li></ul><p>1、静态资源下，通过PV和PVC完成绑定，并供Pod使用的存储管理机制</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3j0i4cj31on0u0e81.jpg" alt="image-20210311105424072"></p><p>2.动态资源下，通过StorageClass和PVC完成资源动态绑定 (系统自动生成PV，并供Pod使用的存储管理机制)</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3mu4rwj31ny0u0e81.jpg" alt="image-20210311105449805"></p><h4 id="7-4-3-资源绑定-Binding"><a href="#7-4-3-资源绑定-Binding" class="headerlink" title="7.4.3 资源绑定 (Binding)"></a>7.4.3 资源绑定 (Binding)</h4><p>在用户定义好PVC后，系统将根据PVC对存储资源的请求 (存储空间和访问模式)在已存在的PV中选择一个满足PVC要求的PV，一旦找到，就将该PV与用户定义的PVC进行绑定，然后用户的应用就可以使用这个PVC了。如果系统中没有满足PVC要求的PV，PVC则会无限期处于Pending状态，直到等到系统管理员创建了一个符合要求的PV。PV一旦绑定在某个PVC上，就被这个PVC独占，不能再与其他PVC进行绑定了。在这种情况下，当PVC申请的存储空间比PV的少时，整个PV的空间都能够为PVC所用，可能会造成资源的浪费。如果资源供应使用的是动态模式，则系统在PVC找到合适的StorageClass后，将会自动创建PV并完成PVC的绑定。</p><h4 id="7-4-4-资源使用-Using"><a href="#7-4-4-资源使用-Using" class="headerlink" title="7.4.4 资源使用 (Using)"></a>7.4.4 资源使用 (Using)</h4><p>Pod 使用volume的定义, 将 PVC 挂载到容器内的某个路径进行使用。volume 的类型为 persistentVoulumeClaim , 在容器应用挂载了一个 PVC 后, 就能被持续独占使用。</p><p>不过, 多个Pod可以挂载同一个PVC, 应用程序需要考虑多个实例共同访问一块存储空间的问题。</p><h4 id="7-4-5-资源释放-Releasing"><a href="#7-4-5-资源释放-Releasing" class="headerlink" title="7.4.5 资源释放 (Releasing)"></a>7.4.5 资源释放 (Releasing)</h4><p>当用户对存储资源使用哪个完毕后，用户可以删除PVC，与该PVC绑定的PV将会被标记为已释放，但还不能立刻与其他PVC进行绑定。通过之前PVC写入的数据可能还留在存储设备上，只有在清除之后该PV才能继续使用。</p><h4 id="7-4-6-资源回收-Reclaiming"><a href="#7-4-6-资源回收-Reclaiming" class="headerlink" title="7.4.6 资源回收 (Reclaiming)"></a>7.4.6 资源回收 (Reclaiming)</h4><p>对于PV，管理员可以设定回收策略(Reclaim Policy)用于设置与之绑定的PVC释放资源之后，对于遗留数据如何处理。只有PV的存储空间完成回收，才能供新的PVC绑定和使用。</p><h4 id="7-4-7-持久化卷声明的保护"><a href="#7-4-7-持久化卷声明的保护" class="headerlink" title="7.4.7 持久化卷声明的保护"></a>7.4.7 持久化卷声明的保护</h4><p>PVC 保护的目的是确保由 pod 正在使用的 PVC 不会从系统中移除，因为如果被移除的话可能会导致数据丢失，当启用 PVC 保护 alpha 功能时，如果用户删除了一个 pod 正在使用的 PVC，则该 PVC 不会被立即删除。PVC 的删除将被推迟，直到 PVC 不再被任何 pod 使用。</p><h4 id="7-4-8-PV-的类型-及-访问模式"><a href="#7-4-8-PV-的类型-及-访问模式" class="headerlink" title="7.4.8 PV 的类型 及 访问模式"></a>7.4.8 PV 的类型 及 访问模式</h4><blockquote><p>PersistentVolume 类型以插件形式实现。以下仅列部分常用类型：</p></blockquote><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li>NFS</li><li>RBD (Ceph Block Device)</li><li>CephFS、Glusterfs</li></ul><blockquote><p>PV 的访问模式 有三种 ReadWriteOnce 、 ReadOnlyMany 、 ReadWriteMany</p></blockquote><p>PersistentVolume 可以以资源提供者支持的任何方式挂载到主机上。如下表所示，供应商具有不同的功能，每个PV 的访问模式都将被设置为该卷支持的特定模式。例如，NFS 可以支持多个读/写客户端，但特定的 NFS PV 可能以只读方式导出到服务器上。每个 PV 都有一套自己的用来描述特定功能的访问模式。</p><ul><li>ReadWriteOnce——该卷可以被单个节点以读/写模式挂载（命令行缩写：RWO）</li><li>ReadOnlyMany——该卷可以被多个节点以只读模式挂载（命令行缩写：ROX）</li><li>ReadWriteMany——该卷可以被多个节点以读/写模式挂载（命令行缩写：RWX）</li></ul><p>一个卷一次只能使用一种访问模式挂载，即使它支持很多访问模式。以下只列举部分常用插件</p><table><thead><tr><th align="left">Volume 插件</th><th align="left">ReadWriteOnce</th><th align="left">ReadOnlyMany</th><th align="left">ReadWriteMany</th></tr></thead><tbody><tr><td align="left">AWSElasticBlockStore</td><td align="left">✓</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">CephFS</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td></tr><tr><td align="left">GCEPersistentDisk</td><td align="left">✓</td><td align="left">✓</td><td align="left">-</td></tr><tr><td align="left">Glusterfs</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td></tr><tr><td align="left">HostPath</td><td align="left">✓</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">NFS</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td></tr><tr><td align="left">RBD</td><td align="left">✓</td><td align="left">✓</td><td align="left">-</td></tr></tbody></table><h4 id="7-4-9-PV-的回收策略-及-阶段状态"><a href="#7-4-9-PV-的回收策略-及-阶段状态" class="headerlink" title="7.4.9 PV 的回收策略 及 阶段状态"></a>7.4.9 PV 的回收策略 及 阶段状态</h4><blockquote><p>回收策略包括</p></blockquote><ul><li>Retain（保留）——手动回收</li><li>Recycle（回收）——基本擦除（ rm -rf /thevolume/* ）【ps 在新版本中该策略已被弃用】</li><li>Delete（删除）——关联的存储资产（例如 AWS EBS、GCE PD、Azure Disk 和 OpenStack Cinder 卷）将被删除。</li></ul><p>当前，只有 NFS 和 HostPath 支持回收策略。AWS EBS、GCE PD、Azure Disk 和 Cinder 卷支持删除策略。</p><blockquote><p>PV 可以处于以下的某种状态</p></blockquote><ul><li>Available（可用）——一块空闲资源还没有被任何声明绑定</li><li>Bound（已绑定）——卷已经被声明绑定</li><li>Released（已释放）——声明被删除，但是资源还未被集群重新声明</li><li>Failed（失败）——该卷的自动回收失败</li></ul><p>命令行会显示绑定到 PV 的 PVC 的名称。</p><h4 id="7-4-10-PV-的实验演练-NFS"><a href="#7-4-10-PV-的实验演练-NFS" class="headerlink" title="7.4.10 PV 的实验演练 - NFS"></a>7.4.10 PV 的实验演练 - NFS</h4><p>1、安装 NFS 服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有的节点都需要安装 nfs-utils 和 rpcbind</span></span><br><span class="line">$ yum install -y nfs-common nfs-utils  rpcbind</span><br><span class="line">$ mkdir -p /nfs01 /nfs02 /nfs03 /nfs04</span><br><span class="line">$ chmod 777 /nfs01 /nfs02 /nfs03 /nfs04</span><br><span class="line">$ chown nfsnobody /nfs01 /nfs02 /nfs03 /nfs04</span><br><span class="line">$ cat /etc/exports</span><br><span class="line">/nfs01 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">/nfs02 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">/nfs03 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">/nfs04 *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">$ systemctl start rpcbind nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆k8s任意一台节点上测试下nfs</span></span><br><span class="line">$ showmount -e 192.168.245.44</span><br><span class="line">Export list <span class="keyword">for</span> 192.168.245.44:</span><br><span class="line">/nfs01 *</span><br><span class="line">/nfs02 *</span><br><span class="line">/nfs03 *</span><br><span class="line">/nfs04 *</span><br><span class="line">$ mkdir /<span class="built_in">test</span></span><br><span class="line">$ mount -t nfs 192.168.245.44:/nfs01 /<span class="built_in">test</span>/</span><br><span class="line">$ <span class="built_in">cd</span> /<span class="built_in">test</span>/</span><br><span class="line">$ touch tset.txt</span><br><span class="line">$ <span class="built_in">echo</span> lemon &gt; test.txt</span><br><span class="line">$ cat test.txt </span><br><span class="line">lemon</span><br><span class="line">$ umount /<span class="built_in">test</span></span><br><span class="line">$ rm -rf /<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>2、部署 PV</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat pv.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs01</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs02</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs03</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfspv4</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">30Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">static</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs04</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.245</span><span class="number">.44</span></span><br></pre></td></tr></table></figure><p>3、创建服务并使用 PVC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat pvc.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;nfs&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v3vm0fdj31cu0p2n3w.jpg" alt="image-20210311162007092"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;web-0&#x27;</span> &gt; /nfs01/index.html</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;web-1&#x27;</span> &gt; /nfs02/index.html</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;web-2&#x27;</span> &gt; /nfs03/index.html</span><br><span class="line"></span><br><span class="line">$ curl 10.244.2.24</span><br><span class="line">web-0</span><br><span class="line">$ curl 10.244.1.26</span><br><span class="line">web-1</span><br><span class="line">$ curl 10.244.1.27</span><br><span class="line">web-2</span><br></pre></td></tr></table></figure><h4 id="7-4-11-关于-StatefulSet-的说明"><a href="#7-4-11-关于-StatefulSet-的说明" class="headerlink" title="7.4.11 关于 StatefulSet 的说明"></a>7.4.11 关于 StatefulSet 的说明</h4><ul><li>匹配 Pod name ( 网络标识 ) 的模式为：$(statefulset名称)-$(序号)，比如上面的示例：web-0，web-1，web-2 。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod </span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">h-pod   1/1     Running   0          23h</span><br><span class="line">web-0   1/1     Running   0          48m</span><br><span class="line">web-1   1/1     Running   0          48m</span><br><span class="line">web-2   1/1     Running   0          48m</span><br></pre></td></tr></table></figure><ul><li>StatefulSet 为每个 Pod 副本创建了一个 DNS 域名，这个域名的格式为： $(podname).(headless servername)，也就意味着服务间是通过Pod域名来通信而非 Pod IP，因为当Pod所在Node发生故障时， Pod 会被飘移到其它 Node 上，Pod IP 会发生变化，但是 Pod 域名不会有变化。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it h-pod -- /bin/sh</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ping -c 3 web-0.nginx</span></span><br><span class="line">PING web-0.nginx (10.244.2.24): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.24: seq=0 ttl=64 time=0.137 ms</span><br><span class="line">64 bytes from 10.244.2.24: seq=1 ttl=64 time=0.056 ms</span><br><span class="line">64 bytes from 10.244.2.24: seq=2 ttl=64 time=0.076 ms</span><br></pre></td></tr></table></figure><ul><li>StatefulSet 使用 Headless 服务来控制 Pod 的域名，这个域名的 FQDN 为：$(servicename).$(namespace).svc.cluster.local，其中，“cluster.local” 指的是集群的域名。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide -n kube-system | grep coredns</span><br><span class="line">coredns-5c98db65d4-4v4kd                            1/1     Running   13         47d   10.244.1.17</span><br><span class="line">coredns-5c98db65d4-9k5xw                            1/1     Running   7          47d   10.244.0.9</span><br><span class="line"></span><br><span class="line">$ dig -t A nginx.default.svc.cluster.local. @10.244.0.9</span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">nginx.default.svc.cluster.local. 11 IN  A       10.244.2.24</span><br><span class="line">nginx.default.svc.cluster.local. 11 IN  A       10.244.1.26</span><br><span class="line">nginx.default.svc.cluster.local. 11 IN  A       10.244.1.27</span><br></pre></td></tr></table></figure><ul><li>根据 volumeClaimTemplates，为每个 Pod 创建一个 pvc，pvc 的命名规则匹配模式：(volumeClaimTemplates.name)-(pod_name)，比如上面的 volumeMounts.name=www， Podname=web-[0-2]，因此创建出来的 PVC 是 www-web-0、www-web-1、www-web-2 。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pvc</span><br><span class="line">NAME        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">www-web-0   Bound    nfspv1   1Gi        RWO            nfs            173m</span><br><span class="line">www-web-1   Bound    nfspv2   10Gi       RWO            nfs            172m</span><br><span class="line">www-web-2   Bound    nfspv3   20Gi       RWO            nfs            172m</span><br></pre></td></tr></table></figure><ul><li>删除 Pod 不会删除其 pvc，手动删除 pvc 将自动释放 pv</li></ul><p><strong>Statefulset的启停顺序</strong></p><ul><li>有序部署：部署StatefulSet时，如果有多个Pod副本，它们会被顺序地创建（从0到N-1）并且，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pv </span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS</span><br><span class="line">nfspv1   1Gi        RWO            Retain           Available           nfs         </span><br><span class="line">nfspv2   10Gi       RWO            Retain           Available           static      </span><br><span class="line">nfspv3   20Gi       RWO            Retain           Available           slow</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pvc.yaml</span><br><span class="line">service/nginx created</span><br><span class="line">statefulset.apps/web created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里可以看到第二个 pod 一直处于 pending 状态，导致第三个 pod 都没有创建出来</span></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">web-0   1/1     Running   0          19s</span><br><span class="line">web-1   0/1     Pending   0          16s</span><br></pre></td></tr></table></figure><ul><li>有序删除：当Pod被删除时，它们被终止的顺序是从N-1到0。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide -n default -w</span><br><span class="line">$ kubectl delete statefulset web -n default</span><br></pre></td></tr></table></figure><ul><li>有序扩展：当对 Pod 执行扩展操作时，与部署一样，它前面的Pod必须都处于Running和Ready状态。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale statefulset/web --replicas=4</span><br></pre></td></tr></table></figure><p><strong>StatefulSet使用场景</strong></p><ul><li>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现。</li><li>稳定的网络标识符，即 Pod 重新调度后其 PodName 和 HostName 不变。</li><li>有序部署，有序扩展，基于 init containers 来实现。</li><li>有序收缩。</li></ul><h4 id="7-4-12-PV卷-的资源释放流程"><a href="#7-4-12-PV卷-的资源释放流程" class="headerlink" title="7.4.12 PV卷 的资源释放流程"></a>7.4.12 PV卷 的资源释放流程</h4><blockquote><p>生产环境下要再三确认后才可以进行如下操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># statefulset &gt; svc &gt; pvc &gt; 使用 edit 删除 pv 卷上的 pvc 记录</span></span><br><span class="line">$ kubectl delete -f pvc.yaml</span><br><span class="line">$ kubectl delete pvc www-web-0 www-web-1 www-web-2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然已经删除了 pvc，但实际上还并没有释放 pv，因为在pv的记录信息里面还是有使用者信息的，需要手工删除后才会释放</span></span><br><span class="line">$ kubectl get pv</span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS</span><br><span class="line">nfspv1   1Gi        RWO            Retain           Released    default/www-web-0   nfs</span><br><span class="line">nfspv2   10Gi       RWO            Retain           Released    default/www-web-1   nfs</span><br><span class="line">nfspv3   20Gi       RWO            Retain           Released    default/www-web-2   nfs</span><br><span class="line">nfspv4   30Gi       RWX            Retain           Available                       static</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动删除这一段，pv 就会释放资源了, 其他的 pod 也就可以继续使用这些 pv 卷了</span></span><br><span class="line">$ kubectl get pv nfspv1 -o yaml</span><br><span class="line">  claimRef:</span><br><span class="line">    apiVersion: v1</span><br><span class="line">    kind: PersistentVolumeClaim</span><br><span class="line">    name: www-web-0</span><br><span class="line">    namespace: default</span><br><span class="line">    resourceVersion: <span class="string">&quot;69260&quot;</span></span><br><span class="line">    uid: e175a86b-aa2c-4900-a7c4-faa1865315ab</span><br><span class="line"></span><br><span class="line">$ kubectl get pv</span><br><span class="line">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS</span><br><span class="line">nfspv1   1Gi        RWO            Retain           Available           nfs         </span><br><span class="line">nfspv2   10Gi       RWO            Retain           Available           nfs         </span><br><span class="line">nfspv3   20Gi       RWO            Retain           Available           nfs         </span><br><span class="line">nfspv4   30Gi       RWX            Retain           Available           static     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果这些卷及数据都不想要了的话，直接在对应的nfs机器上删除挂在点上的数据，并在master上删除pv卷 kubectl delete pv xx</span></span><br></pre></td></tr></table></figure><h1 id="五、K8S集群调度"><a href="#五、K8S集群调度" class="headerlink" title="五、K8S集群调度"></a>五、K8S集群调度</h1><blockquote><p>Scheduler 是 kubernetes 的调度器，主要任务是把定义的 pod 分配到集群的节点上。有四点需要考虑：</p></blockquote><ul><li>公平：如何保证每个节点都能被分配资源</li><li>资源高效利用：集群所有资源最大化被使用</li><li>灵活：允许用户根据自己的需求控制调度的逻辑</li><li>效率：调度的性能要好，能够尽快地对大批量的 pod 完成调度工作</li></ul><p>Sheduler 是作为单独的程序运行的，启动之后会一直监听 API Server，获取PodSpec.NodeName为空的 pod，对每个 pod 都会创建一个 binding，表明该 pod 应该放到哪个节点上。</p><h2 id="1、调度说明"><a href="#1、调度说明" class="headerlink" title="1、调度说明"></a>1、调度说明</h2><h3 id="调度过程"><a href="#调度过程" class="headerlink" title="调度过程"></a>调度过程</h3><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为<code>predicate</code>；然后对通过的节点按照优先级排序，这个是<code>priority</code>；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。</p><p><strong>Predicate 有一系列的算法可以使用：</strong></p><ul><li>PodFitsResources：节点上剩余的资源是否大于 pod 请求的资源</li><li>PodFitsHost：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</li><li>PodFitsHostPorts：节点上已经使用的 port 是否和 pod 申请的 port 冲突</li><li>PodSelectorMatches：过滤掉和 pod 指定的 label 不匹配的节点</li><li>NoDiskConflict：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读</li></ul><p>如果在 predicate 过程中没有合适的节点，pod 会一直在pending状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：按照优先级大小对节点排序。</p><p>优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：</p><ul><li>LeastRequestedPriority：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点</li><li>BalancedResourceAllocation：节点上 CPU 和 Memory 使用率越接近, 权重越高。这个要和上面的一起使用, 不应该单独使用</li><li>ImageLocalityPriority：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高</li></ul><p><strong>通过算法对所有的优先级项目和权重进行计算，得出最终的结果。</strong></p><h3 id="自定义调度器"><a href="#自定义调度器" class="headerlink" title="自定义调度器"></a>自定义调度器</h3><p>除了 kubernetes 自带的调度器，你也可以编写自己的调度器。通过spec:schedulername参数指定调度器的名字，可以为 pod 选择某个调度器进行调度。比如下面的 pod 选择my-scheduler进行调度，而不是默认的default-scheduler：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">annotation-second-scheduler</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">multischeduler-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulername:</span> <span class="string">my-scheduler</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-with-second-annotation-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br></pre></td></tr></table></figure><h2 id="2、调度亲和性"><a href="#2、调度亲和性" class="headerlink" title="2、调度亲和性"></a>2、调度亲和性</h2><blockquote><p>一般情况下 POD 是通过集群自动调度选择某个节点的，默认情况下调度器考虑的是资源足够，并且负载尽量平均，但是有的时候需要能够更加细粒度的去控制 POD 的调度，比如内部的一些服务 gitlab 之类的也是跑在<code>Kubernetes</code>集群上的，就不希望对外的一些服务和内部的服务跑在同一个节点上了，害怕内部服务对外部的服务产生影响；有的时候两个服务直接交流比较频繁，又希望能够将这两个服务的 POD 调度到同样的节点上。</p><p>这就需要用到 Kubernetes 里面的一个概念：亲和性，亲和性主要分为两类：<code>nodeAffinity</code>和<code>podAffinity</code>。</p></blockquote><h3 id="节点亲和性（nodeAffinity）"><a href="#节点亲和性（nodeAffinity）" class="headerlink" title="节点亲和性（nodeAffinity）"></a>节点亲和性（nodeAffinity）</h3><p><strong>键值运算关系</strong></p><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在</li><li>DoesNotExist：某个 label 不存在</li></ul><p><code>pod.spec.nodeAffinity</code></p><ul><li>requiredDuringSchedulingIgnoredDuringExecution：硬策略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeaffinity01</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">k8s-node-192.168.2.55</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes --show-labels   <span class="comment"># 查看节点的LABELS</span></span><br><span class="line"></span><br><span class="line">$ kubectl get pod -owide   <span class="comment"># 由于没有k8s-node-192.168.2.55值的key，而且还是硬策略，所以pod会一直pending中。</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">nodeaffinity01   0/1     Pending   0          5s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li>preferredDuringSchedulingIgnoredDuringExecution：软策略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeaffinity02</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-affinity-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">with-node-affinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">k8s-node-192.168.2.55</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide     <span class="comment"># 软策略</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE     IP           NODE</span><br><span class="line">nodeaffinity01   0/1     Pending   0          3m46s   &lt;none&gt;       &lt;none&gt;</span><br><span class="line">nodeaffinity02   1/1     Running   0          5s      10.244.4.8   k8s-node-192.168.2.33</span><br></pre></td></tr></table></figure><p>Tips：硬策略和软策略是可以合并一起使用的，但是必须要先满足硬策略，才能在满足软策略。</p><h3 id="Pod-亲和性（podAffinity）"><a href="#Pod-亲和性（podAffinity）" class="headerlink" title="Pod 亲和性（podAffinity）"></a>Pod 亲和性（podAffinity）</h3><p><code>pod.spec.affinity.podAffinity/podAntiAffinity</code></p><ul><li>preferredDuringSchedulingIgnoredDuringExecution：软策略</li><li>requiredDuringSchedulingIgnoredDuringExecution：硬策</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lemon</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">k8s-node-192.168.2.33</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lemon</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">lemon</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lemon</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">lemon</span></span><br><span class="line">        <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">    <span class="attr">podAntiAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">podAffinityTerm:</span></span><br><span class="line">          <span class="attr">labelSelector:</span></span><br><span class="line">            <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">tools</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">armin</span></span><br><span class="line">          <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -owide</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE   IP            NODE</span><br><span class="line">lemon   1/1     Running   0          4s    10.244.4.12   k8s-node-192.168.2.33</span><br><span class="line"><span class="built_in">test</span>    1/1     Running   0          4s    10.244.4.11   k8s-node-192.168.2.33</span><br></pre></td></tr></table></figure><p><strong>亲和性/反亲和性调度策略比较如下：</strong></p><table><thead><tr><th>调度策略</th><th>匹配标签</th><th>操作符</th><th>拓扑域支持</th><th>调度目标</th></tr></thead><tbody><tr><td>nodeAffinity</td><td>主机</td><td>In, NotIn, Exists,DoesNotExist, Gt, Lt</td><td>否</td><td>指定主机</td></tr><tr><td>podAffinity</td><td>POD</td><td>In, NotIn, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD同一拓扑域</td></tr><tr><td>podAnitAffinity</td><td>POD</td><td>In, NotIn, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD不在同一拓扑域</td></tr></tbody></table><p>Tips：拓扑域 就是节点的意思</p><h2 id="3、调度污点"><a href="#3、调度污点" class="headerlink" title="3、调度污点"></a>3、调度污点</h2><blockquote><p>节点亲和性，是pod的一种属性（偏好或硬性要求），它使pod被吸引到一类特定的节点。Taint 则相反，它使节点能够排斥一类特定的 pod。</p><p><strong>Taint 和 Toleration</strong></p><p>Taint 和 toleration 相互配合，可以用来避免 pod 被分配到不合适的节点上。每个节点上都可以应用一个或多个taint ，这表示对于那些不能容忍这些 taint 的 pod，是不会被该节点接受的。如果将 toleration 应用于 pod上，则表示这些 pod 可以（但不要求）被调度到具有匹配 taint 的节点上</p></blockquote><h3 id="污点-Taint"><a href="#污点-Taint" class="headerlink" title="污点(Taint)"></a>污点(Taint)</h3><p><strong>1、污点 ( Taint ) 的组成</strong></p><p>使用<code>kubectl taint</code>命令可以给某个 Node 节点设置污点，Node 被设置上污点之后就和 Pod 之间存在了一种相斥的关系，可以让 Node 拒绝 Pod 的调度执行，甚至将 Node 已经存在的 Pod 驱逐出去。</p><p>每个污点的组成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">key=value:effect</span></span><br></pre></td></tr></table></figure><p>每个污点有一个 key 和 value 作为污点的标签, 其中 value 可以为空, effect 描述污点的作用。当前 tainteffect 支持如下三个选项：</p><ul><li><code>NoSchedule</code>：表示 k8s 将不会将 Pod 调度到具有该污点的 Node 上</li><li><code>PreferNoSchedule</code>：表示 k8s 将尽量避免将 Pod 调度到具有该污点的 Node 上</li><li><code>NoExecute</code>：表示 k8s 将不会将 Pod 调度到具有该污点的 Node 上，同时会将 Node 上已经存在的 Pod 驱逐出去</li></ul><p><strong>2、污点的设置、查看和去除</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置污点</span></span><br><span class="line">$ kubectl taint nodes node1 key1=value1:NoExecute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点说明中，查找 Taints 字段</span></span><br><span class="line">$ kubectl describe node node-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除污点</span></span><br><span class="line">$ kubectl taint nodes node1 key1:NoExecute-</span><br></pre></td></tr></table></figure><h3 id="容忍-Tolerations"><a href="#容忍-Tolerations" class="headerlink" title="容忍(Tolerations)"></a>容忍(Tolerations)</h3><p>设置了污点的 Node 将根据 taint 的 effect：NoSchedule、PreferNoSchedule、NoExecute 和 Pod 之间产生互斥的关系，Pod 将在一定程度上不会被调度到 Node 上。但我们可以在 Pod 上设置容忍 ( Toleration ) ，意思是设置了容忍的 Pod 将可以容忍污点的存在，可以被调度到存在污点的 Node 上。</p><p><strong>pod.spec.tolerations</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key1&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;value1&quot;</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">&quot;NoExecute&quot;</span></span><br><span class="line">  <span class="attr">tolerationSeconds:</span> <span class="number">3600</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key1&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;value1&quot;</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key2&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">&quot;PreferNoSchedule&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>其中 key, vaule, effect 要与 Node 上设置的 taint 保持一致</p></li><li><p>operator 的值为 Exists 将会忽略 value 值</p></li><li><p>tolerationSeconds 用于描述当 Pod 需要被驱逐时可以在 Node 上继续保留运行的时间，会一直循环</p></li></ul><p><strong>1、不指定 key 值时，表示容忍所有的污点 key</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2、当不指定 effect 值时，表示容忍所有的污点作用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key&quot;</span></span><br><span class="line">  <span class="attr">operator:</span> <span class="string">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3、有多个 Master 存在时，防止资源浪费，可以如下设置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes Node-Name node-role.kubernetes.io/master=:PreferNoSchedule</span><br></pre></td></tr></table></figure><h2 id="4、固定节点"><a href="#4、固定节点" class="headerlink" title="4、固定节点"></a>4、固定节点</h2><h3 id="指定调度节点"><a href="#指定调度节点" class="headerlink" title="指定调度节点"></a>指定调度节点</h3><p><strong>1、Pod.spec.nodeName 将 Pod 直接调度到指定的 Node 节点上，会跳过 Scheduler 的调度策略，该匹配规则是强制匹配。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web01</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">k8s-node-192.168.2.22</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web01</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>2、Pod.spec.nodeSelector：通过 kubernetes 的 label-selector 机制选择节点，由调度器调度策略匹配 label，而后调度 Pod 到目标节点，该匹配规则属于强制约束。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web02</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web02</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web02</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">arminto/my_nginx:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label node k8s-node-192.168.2.33 k1=v1</span><br></pre></td></tr></table></figure><h1 id="六、K8S-集群安全"><a href="#六、K8S-集群安全" class="headerlink" title="六、K8S 集群安全"></a>六、K8S 集群安全</h1><blockquote><p>机制说明：Kubernetes 作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。API Server 是集群内部各个组件通信的中介，也是外部控制的入口。所以 Kubernetes 的安全机制基本就是围绕保护 API Server 来设计的。Kubernetes 使用了认证（Authentication）、鉴权（Authorization）、准入控制（AdmissionControl）三步来保证API Server的安全。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v47gg29j31mc0qeqhz.jpg" alt="image-20210406174845095"></p><h2 id="1、集群认证"><a href="#1、集群认证" class="headerlink" title="1、集群认证"></a>1、集群认证</h2><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><ul><li>HTTP Token 认证：通过一个 Token 来识别合法用户<ul><li>HTTP Token 的认证是用一个很长的特殊编码方式的并且难以被模仿的字符串 - Token 来表达客户的一种方式。Token 是一个很长的很复杂的字符串，每一个 Token 对应一个用户名存储在 API Server 能访问的文件中。当客户端发起 API 调用请求时，需要在 HTTP Header 里放入 Token。</li></ul></li><li>HTTP Base 认证：通过用户名+密码的方式认证<ul><li>用户名+：+密码用 BASE64 算法进行编码后的字符串放在 HTTP Request 中的 HeatherAuthorization 域里发送给服务端，服务端收到后进行编码，获取用户名及密码</li></ul></li><li>最严格的 HTTPS 证书认证：基于 CA 根证书签名的客户端身份认证方式</li></ul><h3 id="HTTPS-证书认证"><a href="#HTTPS-证书认证" class="headerlink" title="HTTPS 证书认证"></a>HTTPS 证书认证</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v4bw64tj31720s0jw1.jpg" alt="image-20210406175149666"></p><h3 id="需要认证的节点"><a href="#需要认证的节点" class="headerlink" title="需要认证的节点"></a>需要认证的节点</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v4fnrinj311o0okn8s.jpg" alt="image-20210406175424225"></p><p><strong>两种类型</strong></p><ul><li>两种类型Kubenetes 组件对 API Server 的访问：kubectl、Controller Manager、Scheduler、kubelet、kube-proxy</li><li>Kubernetes 管理的 Pod 对容器的访问：Pod（dashborad 也是以 Pod 形式运行）</li></ul><p><strong>安全性说明</strong></p><ul><li>Controller Manager、Scheduler 与 API Server 在同一台机器，所以直接使用 API Server 的非安全端口访问，<code>--insecure-bind-address=127.0.0.1</code></li><li>kubectl、kubelet、kube-proxy 访问 API Server 就都需要证书进行 HTTPS 双向认证</li></ul><p><strong>证书颁发</strong></p><ul><li>手动签发：通过 k8s 集群的跟 ca 进行签发 HTTPS 证书</li><li>自动签发：kubelet 首次访问 API Server 时，使用 token 做认证，通过后，Controller Manager 会为kubelet 生成一个证书，以后的访问都是用证书做认证了</li></ul><h3 id="kubeconfig"><a href="#kubeconfig" class="headerlink" title="kubeconfig"></a>kubeconfig</h3><p>kubeconfig 文件包含集群参数（CA证书、API Server地址），客户端参数（上面生成的证书和私钥），集群context 信息（集群名称、用户名）。Kubenetes 组件通过启动时指定不同的 kubeconfig 文件可以切换到不同的集群。</p><h3 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h3><p>Pod中的容器访问API Server。因为Pod的创建、销毁是动态的，所以要为它手动生成证书就不可行了。Kubenetes使用了Service Account解决Pod 访问API Server的认证问题。</p><h3 id="Secret-与-SA-的关系"><a href="#Secret-与-SA-的关系" class="headerlink" title="Secret 与 SA 的关系"></a>Secret 与 SA 的关系</h3><p>Kubernetes 设计了一种资源对象叫做 Secret，分为两类，一种是用于 ServiceAccount 的 service-account-token，另一种是用于保存用户自定义保密信息的 Opaque。ServiceAccount 中用到包含三个部分：Token、ca.crt、namespace。</p><ul><li>oken是使用 API Server 私钥签名的 JWT。用于访问API Server时，Server端认证</li><li>ca.crt，根证书。用于Client端验证API Server发送的证书</li><li>namespace, 标识这个service-account-token的作用域名空间</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --all-namespaces</span><br><span class="line">kubectl describe secret default-token-5gm9r --namespace=kube-system</span><br></pre></td></tr></table></figure><p>默认情况下，每个 namespace 都会有一个 ServiceAccount，如果 Pod 在创建时没有指定 ServiceAccount，就会使用 Pod 所属的 namespace 的 ServiceAccount。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gr7v4kfopij31jw0cgq6z.jpg" alt="image-20210406175833477"></p><h2 id="2、集群鉴权"><a href="#2、集群鉴权" class="headerlink" title="2、集群鉴权"></a>2、集群鉴权</h2><h2 id="3、准入控制"><a href="#3、准入控制" class="headerlink" title="3、准入控制"></a>3、准入控制</h2><p>准入控制是API Server的插件集合，通过添加不同的插件，实现额外的准入控制规则。甚至于API Server的一些主要的功能都需要通过 Admission Controllers 实现，比如 ServiceAccount。</p><p>官方文档上有一份针对不同版本的准入控制器推荐列表，其中最新的 1.14 的推荐列表是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota</span><br></pre></td></tr></table></figure><p>列举几个插件的功能：</p><ul><li>NamespaceLifecycle：防止在不存在的 namespace 上创建对象，防止删除系统预置 namespace，删除namespace 时，连带删除它的所有资源对象。</li><li>LimitRanger：确保请求的资源不会超过资源所在 Namespace 的 LimitRange 的限制。</li><li>ServiceAccount：实现了自动化添加 ServiceAccount。</li><li>ResourceQuota：确保请求的资源不会超过资源的 ResourceQuota 限制。</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
